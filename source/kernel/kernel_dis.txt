
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001c5c memsz 0x000059e0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018db  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000037c  000118dc  000118dc  000028dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011c58  00011c58  00002c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d80  00011c60  00011c60  00002c5c  2**5
                  ALLOC
  4 .debug_line   00000c94  00000000  00000000  00002c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 000005d5  00000000  00000000  000038f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000020eb  00000000  00000000  00003ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000c3b  00000000  00000000  00005fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000120  00000000  00000000  00006bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000b7f  00000000  00000000  00006d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  0000788f  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000af4  00000000  00000000  000078a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102bd l     F .text	0000001b list_node_init
000102d8 l     F .text	00000017 write_tr
00011c60 l     O .bss	000000bc task_manager
000102ef l     F .text	00000101 tss_init
0001195c l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 cpu.c
0001057a l     F .text	00000028 lgdt
000105a2 l     F .text	0000001a far_jump
00011d20 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010756 l     F .text	0000001d inb
00010773 l     F .text	0000001f outb
00010792 l     F .text	00000007 cli
00010799 l     F .text	00000007 sti
000107a0 l     F .text	00000028 lidt
000107c8 l     F .text	00000007 hlt
00012520 l     O .bss	00000400 idt_table
000107cf l     F .text	000000d9 dump_core_regs
000108a8 l     F .text	0000003e do_default_handler
00010b16 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010edf l     F .text	0000001f outb
00012920 l     O .bss	00000004 sys_tick
00010f21 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012940 l     O .bss	00001000 init_task_stack
00013940 l     O .bss	000000a0 init_task
00000000 l    df *ABS*	00000000 klib.c
00011099 l     F .text	00000007 hlt
00011c58 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 list.c
00011577 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0001176f l     F .text	0000001d inb
0001178c l     F .text	0000001f outb
00011212 g     F .text	0000004f kernel_memcpy
00010ea9 g     F .text	0000000b irq_enable_global
0001160e g     F .text	00000064 list_insert_last
00010a1a g     F .text	0000001c do_handler_segment_not_present
00010531 g     F .text	00000029 task_set_ready
00011261 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
0001074b g     F .text	0000000b cpu_init
00010ffa g     F .text	0000009f init_main
0001020f g       .text	00000000 exception_handler_alignment_check
000110a0 g     F .text	00000047 kernel_strcpy
00010d8c g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
00010972 g     F .text	0000001c do_handler_overflow
00010aa6 g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010a52 g     F .text	0000001c do_handler_general_protection
00010902 g     F .text	0000001c do_handler_divider
000109e2 g     F .text	0000001c do_handler_double_fault
00010fbb g     F .text	0000003f init_task_entry
00010a6e g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010eb4 g     F .text	0000002b pic_send_eoi
00010527 g     F .text	0000000a task_first_task
000117ab g     F .text	00000072 init_log
000108e6 g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00010afa g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
000139e0 g     O .bss	00002000 stack
000100e5 g       .text	00000000 exception_handler_bound_range
000109aa g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010a8a g     F .text	0000001c do_handler_fpu_error
000104ea g     F .text	0000003d task_first_init
00010ac2 g     F .text	0000001c do_handler_machine_check
0001091e g     F .text	0000001c do_handler_Debug
000115af g     F .text	0000005f list_insert_first
0001093a g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
000110e7 g     F .text	00000070 kernel_strncpy
00010e9e g     F .text	0000000b irq_disable_global
00010f99 g     F .text	00000022 kernel_init
00010000 g       .text	00000000 _start
000113fb g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
000109fe g     F .text	0000001c do_handler_invalid_tss
00010d57 g     F .text	00000035 irq_install
0001181d g     F .text	000000be log_prinf
0001063f g     F .text	0000006d init_gdt
00010e17 g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
000109c6 g     F .text	0000001c do_handler_device_unavailable
00010738 g     F .text	00000013 switch_to_tss
000112a2 g     F .text	0000005e kernel_memcmp
0001158a g     F .text	00000025 list_init
0001002b g       .text	00000000 exception_handler_unknow
00010ade g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
0001055a g     F .text	00000020 task_set_block
000101f0 g       .text	00000000 exception_handler_fpu_error
00010499 g     F .text	0000001e task_switch_from_to
000106f3 g     F .text	00000045 gdt_alloc_des
00010ba9 g     F .text	000001ae irq_init
000111d7 g     F .text	0000003b kernel_strlen
000105bc g     F .text	00000083 segment_desc_set
0001098e g     F .text	0000001c do_handler_bound_range
00011672 g     F .text	00000078 list_remove_first
00011157 g     F .text	00000080 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
00010f81 g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
000104b7 g     F .text	00000033 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
00011541 g     F .text	00000036 pannic
00010a36 g     F .text	0000001c do_handler_stack_segment_fault
00010956 g     F .text	0000001c do_handler_breakpoint
000103f0 g     F .text	000000a9 task_init
00011300 g     F .text	00000024 kernel_sprintf
00011324 g     F .text	000000d7 kernel_itoa
000116ea g     F .text	00000085 list_remove
000106ac g     F .text	00000047 gate_desc_set
00010efe g     F .text	00000023 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 8d 0f 00 00       	call   10f99 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc e0 59 01 00       	mov    $0x159e0,%esp
    jmp init_main
   10026:	e9 cf 0f 00 00       	jmp    10ffa <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 aa 08 00 00       	call   108e6 <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 a7 08 00 00       	call   10902 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 a4 08 00 00       	call   1091e <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 a1 08 00 00       	call   1093a <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 9e 08 00 00       	call   10956 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 9b 08 00 00       	call   10972 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 98 08 00 00       	call   1098e <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 95 08 00 00       	call   109aa <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 92 08 00 00       	call   109c6 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 91 08 00 00       	call   109e2 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 90 08 00 00       	call   109fe <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 8f 08 00 00       	call   10a1a <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 8e 08 00 00       	call   10a36 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 8d 08 00 00       	call   10a52 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 8c 08 00 00       	call   10a6e <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 89 08 00 00       	call   10a8a <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 88 08 00 00       	call   10aa6 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 85 08 00 00       	call   10ac2 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 82 08 00 00       	call   10ade <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 7f 08 00 00       	call   10afa <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 64 0c 00 00       	call   10efe <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <simple_switch>:
    //simple_switch(&from,&to)
     .text
     .global simple_switch
simple_switch:
    //取出from
    mov 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    //取出to
    mov 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp

    ret
   102bc:	c3                   	ret

000102bd <list_node_init>:
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
                     SEG_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t));
   102bd:	55                   	push   %ebp
   102be:	89 e5                	mov    %esp,%ebp

   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102ca:	8b 45 08             	mov    0x8(%ebp),%eax
   102cd:	8b 50 04             	mov    0x4(%eax),%edx
   102d0:	8b 45 08             	mov    0x8(%ebp),%eax
   102d3:	89 10                	mov    %edx,(%eax)
    task->tss.eip = entry;
   102d5:	90                   	nop
   102d6:	5d                   	pop    %ebp
   102d7:	c3                   	ret

000102d8 <write_tr>:
{
    __asm__ __volatile__("hlt");
}

static inline void write_tr(uint16_t tss_sel)
{
   102d8:	55                   	push   %ebp
   102d9:	89 e5                	mov    %esp,%ebp
   102db:	83 ec 04             	sub    $0x4,%esp
   102de:	8b 45 08             	mov    0x8(%ebp),%eax
   102e1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_sel));
   102e5:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102e9:	0f 00 d8             	ltr    %ax
}
   102ec:	90                   	nop
   102ed:	c9                   	leave
   102ee:	c3                   	ret

000102ef <tss_init>:
{
   102ef:	55                   	push   %ebp
   102f0:	89 e5                	mov    %esp,%ebp
   102f2:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_des();
   102f5:	e8 f9 03 00 00       	call   106f3 <gdt_alloc_des>
   102fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   102fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10301:	79 1a                	jns    1031d <tss_init+0x2e>
        log_prinf("alloc tss failed");
   10303:	83 ec 0c             	sub    $0xc,%esp
   10306:	68 dc 18 01 00       	push   $0x118dc
   1030b:	e8 0d 15 00 00       	call   1181d <log_prinf>
   10310:	83 c4 10             	add    $0x10,%esp
        return -1;
   10313:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10318:	e9 d1 00 00 00       	jmp    103ee <tss_init+0xff>
    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   1031d:	8b 45 08             	mov    0x8(%ebp),%eax
   10320:	83 c0 34             	add    $0x34,%eax
   10323:	68 89 00 00 00       	push   $0x89
   10328:	68 a0 00 00 00       	push   $0xa0
   1032d:	50                   	push   %eax
   1032e:	ff 75 f4             	push   -0xc(%ebp)
   10331:	e8 86 02 00 00       	call   105bc <segment_desc_set>
   10336:	83 c4 10             	add    $0x10,%esp
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10339:	8b 45 08             	mov    0x8(%ebp),%eax
   1033c:	83 c0 34             	add    $0x34,%eax
   1033f:	83 ec 04             	sub    $0x4,%esp
   10342:	6a 68                	push   $0x68
   10344:	6a 00                	push   $0x0
   10346:	50                   	push   %eax
   10347:	e8 15 0f 00 00       	call   11261 <kernel_memset>
   1034c:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   1034f:	8b 45 08             	mov    0x8(%ebp),%eax
   10352:	8b 55 0c             	mov    0xc(%ebp),%edx
   10355:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10358:	8b 45 08             	mov    0x8(%ebp),%eax
   1035b:	8b 55 10             	mov    0x10(%ebp),%edx
   1035e:	89 50 38             	mov    %edx,0x38(%eax)
   10361:	8b 45 08             	mov    0x8(%ebp),%eax
   10364:	8b 50 38             	mov    0x38(%eax),%edx
   10367:	8b 45 08             	mov    0x8(%ebp),%eax
   1036a:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1036d:	8b 45 08             	mov    0x8(%ebp),%eax
   10370:	c7 40 3c 10 00 00 00 	movl   $0x10,0x3c(%eax)
   10377:	8b 45 08             	mov    0x8(%ebp),%eax
   1037a:	8b 50 3c             	mov    0x3c(%eax),%edx
   1037d:	8b 45 08             	mov    0x8(%ebp),%eax
   10380:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	c7 80 90 00 00 00 10 	movl   $0x10,0x90(%eax)
   10390:	00 00 00 
   10393:	8b 45 08             	mov    0x8(%ebp),%eax
   10396:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   1039c:	8b 45 08             	mov    0x8(%ebp),%eax
   1039f:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
   103a5:	8b 45 08             	mov    0x8(%ebp),%eax
   103a8:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
   103ae:	8b 45 08             	mov    0x8(%ebp),%eax
   103b1:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
   103b7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ba:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
   103c0:	8b 45 08             	mov    0x8(%ebp),%eax
   103c3:	89 50 7c             	mov    %edx,0x7c(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   103c6:	8b 45 08             	mov    0x8(%ebp),%eax
   103c9:	c7 80 80 00 00 00 08 	movl   $0x8,0x80(%eax)
   103d0:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFALUT;
   103d3:	8b 45 08             	mov    0x8(%ebp),%eax
   103d6:	c7 40 58 02 02 00 00 	movl   $0x202,0x58(%eax)
    task->tss_sel = tss_sel; // 将tss选择子保存到tss_sel中
   103dd:	8b 45 08             	mov    0x8(%ebp),%eax
   103e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103e3:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    return 0;
   103e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103ee:	c9                   	leave
   103ef:	c3                   	ret

000103f0 <task_init>:

int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp)
{
   103f0:	55                   	push   %ebp
   103f1:	89 e5                	mov    %esp,%ebp
   103f3:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t *)0);
   103f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103fa:	75 19                	jne    10415 <task_init+0x25>
   103fc:	68 ed 18 01 00       	push   $0x118ed
   10401:	68 5c 19 01 00       	push   $0x1195c
   10406:	6a 26                	push   $0x26
   10408:	68 04 19 01 00       	push   $0x11904
   1040d:	e8 2f 11 00 00       	call   11541 <pannic>
   10412:	83 c4 10             	add    $0x10,%esp
    // 复制进程名到task.name中
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10415:	8b 45 08             	mov    0x8(%ebp),%eax
   10418:	83 c0 04             	add    $0x4,%eax
   1041b:	83 ec 04             	sub    $0x4,%esp
   1041e:	6a 20                	push   $0x20
   10420:	ff 75 0c             	push   0xc(%ebp)
   10423:	50                   	push   %eax
   10424:	e8 be 0c 00 00       	call   110e7 <kernel_strncpy>
   10429:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED; // 将开始创建的进程状态设置成task_created
   1042c:	8b 45 08             	mov    0x8(%ebp),%eax
   1042f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tss_init(task, entry, esp);
   10435:	83 ec 04             	sub    $0x4,%esp
   10438:	ff 75 14             	push   0x14(%ebp)
   1043b:	ff 75 10             	push   0x10(%ebp)
   1043e:	ff 75 08             	push   0x8(%ebp)
   10441:	e8 a9 fe ff ff       	call   102ef <tss_init>
   10446:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   10449:	8b 45 08             	mov    0x8(%ebp),%eax
   1044c:	83 c0 2c             	add    $0x2c,%eax
   1044f:	83 ec 0c             	sub    $0xc,%esp
   10452:	50                   	push   %eax
   10453:	e8 65 fe ff ff       	call   102bd <list_node_init>
   10458:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   1045b:	8b 45 08             	mov    0x8(%ebp),%eax
   1045e:	83 c0 24             	add    $0x24,%eax
   10461:	83 ec 0c             	sub    $0xc,%esp
   10464:	50                   	push   %eax
   10465:	e8 53 fe ff ff       	call   102bd <list_node_init>
   1046a:	83 c4 10             	add    $0x10,%esp

    // 将进程插入到就绪队列中
    task_set_ready(task);
   1046d:	83 ec 0c             	sub    $0xc,%esp
   10470:	ff 75 08             	push   0x8(%ebp)
   10473:	e8 b9 00 00 00       	call   10531 <task_set_ready>
   10478:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node);
   1047b:	8b 45 08             	mov    0x8(%ebp),%eax
   1047e:	83 c0 2c             	add    $0x2c,%eax
   10481:	83 ec 08             	sub    $0x8,%esp
   10484:	50                   	push   %eax
   10485:	68 70 1c 01 00       	push   $0x11c70
   1048a:	e8 7f 11 00 00       	call   1160e <list_insert_last>
   1048f:	83 c4 10             	add    $0x10,%esp
    return 0;
   10492:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10497:	c9                   	leave
   10498:	c3                   	ret

00010499 <task_switch_from_to>:

void simple_switch(uint32_t **from, uint32_t *to);

void task_switch_from_to(task_t *from, task_t *to)
{
   10499:	55                   	push   %ebp
   1049a:	89 e5                	mov    %esp,%ebp
   1049c:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   1049f:	8b 45 0c             	mov    0xc(%ebp),%eax
   104a2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
   104a8:	83 ec 0c             	sub    $0xc,%esp
   104ab:	50                   	push   %eax
   104ac:	e8 87 02 00 00       	call   10738 <switch_to_tss>
   104b1:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   104b4:	90                   	nop
   104b5:	c9                   	leave
   104b6:	c3                   	ret

000104b7 <task_manager_init>:

void task_manager_init(void)
{
   104b7:	55                   	push   %ebp
   104b8:	89 e5                	mov    %esp,%ebp
   104ba:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   104bd:	83 ec 0c             	sub    $0xc,%esp
   104c0:	68 64 1c 01 00       	push   $0x11c64
   104c5:	e8 c0 10 00 00       	call   1158a <list_init>
   104ca:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   104cd:	83 ec 0c             	sub    $0xc,%esp
   104d0:	68 70 1c 01 00       	push   $0x11c70
   104d5:	e8 b0 10 00 00       	call   1158a <list_init>
   104da:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = (task_t *)0;
   104dd:	c7 05 60 1c 01 00 00 	movl   $0x0,0x11c60
   104e4:	00 00 00 
}
   104e7:	90                   	nop
   104e8:	c9                   	leave
   104e9:	c3                   	ret

000104ea <task_first_init>:

void task_first_init(void)
{
   104ea:	55                   	push   %ebp
   104eb:	89 e5                	mov    %esp,%ebp
   104ed:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 0, 0); //??为什么入口设置为0，堆栈也设置为0
   104f0:	6a 00                	push   $0x0
   104f2:	6a 00                	push   $0x0
   104f4:	68 51 19 01 00       	push   $0x11951
   104f9:	68 7c 1c 01 00       	push   $0x11c7c
   104fe:	e8 ed fe ff ff       	call   103f0 <task_init>
   10503:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10506:	a1 18 1d 01 00       	mov    0x11d18,%eax
   1050b:	0f b7 c0             	movzwl %ax,%eax
   1050e:	83 ec 0c             	sub    $0xc,%esp
   10511:	50                   	push   %eax
   10512:	e8 c1 fd ff ff       	call   102d8 <write_tr>
   10517:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = &task_manager.first_task;
   1051a:	c7 05 60 1c 01 00 7c 	movl   $0x11c7c,0x11c60
   10521:	1c 01 00 
}
   10524:	90                   	nop
   10525:	c9                   	leave
   10526:	c3                   	ret

00010527 <task_first_task>:

task_t *task_first_task(void)
{
   10527:	55                   	push   %ebp
   10528:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   1052a:	b8 7c 1c 01 00       	mov    $0x11c7c,%eax
}
   1052f:	5d                   	pop    %ebp
   10530:	c3                   	ret

00010531 <task_set_ready>:

void task_set_ready(task_t *task)
{
   10531:	55                   	push   %ebp
   10532:	89 e5                	mov    %esp,%ebp
   10534:	83 ec 08             	sub    $0x8,%esp
    list_insert_last(&task_manager.ready_list, &task->run_node);
   10537:	8b 45 08             	mov    0x8(%ebp),%eax
   1053a:	83 c0 24             	add    $0x24,%eax
   1053d:	83 ec 08             	sub    $0x8,%esp
   10540:	50                   	push   %eax
   10541:	68 64 1c 01 00       	push   $0x11c64
   10546:	e8 c3 10 00 00       	call   1160e <list_insert_last>
   1054b:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1054e:	8b 45 08             	mov    0x8(%ebp),%eax
   10551:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10557:	90                   	nop
   10558:	c9                   	leave
   10559:	c3                   	ret

0001055a <task_set_block>:
// 将任务从就绪队列中移除 此时任务的状态不确定 有可能是等待 有可能是睡眠因此不设置状态置
void task_set_block(task_t *task)
{
   1055a:	55                   	push   %ebp
   1055b:	89 e5                	mov    %esp,%ebp
   1055d:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list, &task->run_node);
   10560:	8b 45 08             	mov    0x8(%ebp),%eax
   10563:	83 c0 24             	add    $0x24,%eax
   10566:	83 ec 08             	sub    $0x8,%esp
   10569:	50                   	push   %eax
   1056a:	68 64 1c 01 00       	push   $0x11c64
   1056f:	e8 76 11 00 00       	call   116ea <list_remove>
   10574:	83 c4 10             	add    $0x10,%esp
   10577:	90                   	nop
   10578:	c9                   	leave
   10579:	c3                   	ret

0001057a <lgdt>:
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}

// 从gdt表中找到一个空闲的项设置给tss
int gdt_alloc_des(void)
{
   1057a:	55                   	push   %ebp
   1057b:	89 e5                	mov    %esp,%ebp
   1057d:	83 ec 10             	sub    $0x10,%esp
    {
        segment_desc_t *desc = gdt_table + i;
        if (desc->attr == 0)
        {
            return i * sizeof(segment_desc_t);
        }
   10580:	8b 45 08             	mov    0x8(%ebp),%eax
   10583:	c1 e8 10             	shr    $0x10,%eax
   10586:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    }
   1058a:	8b 45 08             	mov    0x8(%ebp),%eax
   1058d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return -1;
   10591:	8b 45 0c             	mov    0xc(%ebp),%eax
   10594:	83 e8 01             	sub    $0x1,%eax
   10597:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   1059b:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

   1059f:	90                   	nop
   105a0:	c9                   	leave
   105a1:	c3                   	ret

000105a2 <far_jump>:
   105a2:	55                   	push   %ebp
   105a3:	89 e5                	mov    %esp,%ebp
   105a5:	83 ec 10             	sub    $0x10,%esp
   105a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   105ab:	89 45 f8             	mov    %eax,-0x8(%ebp)
   105ae:	8b 45 08             	mov    0x8(%ebp),%eax
   105b1:	89 45 fc             	mov    %eax,-0x4(%ebp)
   105b4:	8d 45 f8             	lea    -0x8(%ebp),%eax
   105b7:	ff 28                	ljmp   *(%eax)
   105b9:	90                   	nop
   105ba:	c9                   	leave
   105bb:	c3                   	ret

000105bc <segment_desc_set>:
{
   105bc:	55                   	push   %ebp
   105bd:	89 e5                	mov    %esp,%ebp
   105bf:	83 ec 14             	sub    $0x14,%esp
   105c2:	8b 45 14             	mov    0x14(%ebp),%eax
   105c5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   105c9:	8b 45 08             	mov    0x8(%ebp),%eax
   105cc:	83 e0 f8             	and    $0xfffffff8,%eax
   105cf:	05 20 1d 01 00       	add    $0x11d20,%eax
   105d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   105d7:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   105de:	76 0f                	jbe    105ef <segment_desc_set+0x33>
        attr |= SEG_G;
   105e0:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   105e6:	8b 45 10             	mov    0x10(%ebp),%eax
   105e9:	c1 e8 0c             	shr    $0xc,%eax
   105ec:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   105ef:	8b 45 10             	mov    0x10(%ebp),%eax
   105f2:	89 c2                	mov    %eax,%edx
   105f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105f7:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   105fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   105fd:	89 c2                	mov    %eax,%edx
   105ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10602:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10606:	8b 45 0c             	mov    0xc(%ebp),%eax
   10609:	c1 e8 10             	shr    $0x10,%eax
   1060c:	89 c2                	mov    %eax,%edx
   1060e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10611:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   10614:	8b 45 10             	mov    0x10(%ebp),%eax
   10617:	c1 e8 10             	shr    $0x10,%eax
   1061a:	c1 e0 08             	shl    $0x8,%eax
   1061d:	66 25 00 0f          	and    $0xf00,%ax
   10621:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10625:	89 c2                	mov    %eax,%edx
   10627:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1062a:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   1062e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10631:	c1 e8 18             	shr    $0x18,%eax
   10634:	89 c2                	mov    %eax,%edx
   10636:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10639:	88 50 07             	mov    %dl,0x7(%eax)
}
   1063c:	90                   	nop
   1063d:	c9                   	leave
   1063e:	c3                   	ret

0001063f <init_gdt>:
{
   1063f:	55                   	push   %ebp
   10640:	89 e5                	mov    %esp,%ebp
   10642:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10645:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1064c:	eb 19                	jmp    10667 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   1064e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10651:	c1 e0 03             	shl    $0x3,%eax
   10654:	6a 00                	push   $0x0
   10656:	6a 00                	push   $0x0
   10658:	6a 00                	push   $0x0
   1065a:	50                   	push   %eax
   1065b:	e8 5c ff ff ff       	call   105bc <segment_desc_set>
   10660:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10663:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10667:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1066e:	7e de                	jle    1064e <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   10670:	68 92 40 00 00       	push   $0x4092
   10675:	6a ff                	push   $0xffffffff
   10677:	6a 00                	push   $0x0
   10679:	6a 10                	push   $0x10
   1067b:	e8 3c ff ff ff       	call   105bc <segment_desc_set>
   10680:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   10683:	68 9a 40 00 00       	push   $0x409a
   10688:	6a ff                	push   $0xffffffff
   1068a:	6a 00                	push   $0x0
   1068c:	6a 08                	push   $0x8
   1068e:	e8 29 ff ff ff       	call   105bc <segment_desc_set>
   10693:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10696:	b8 20 1d 01 00       	mov    $0x11d20,%eax
   1069b:	68 00 08 00 00       	push   $0x800
   106a0:	50                   	push   %eax
   106a1:	e8 d4 fe ff ff       	call   1057a <lgdt>
   106a6:	83 c4 08             	add    $0x8,%esp
}
   106a9:	90                   	nop
   106aa:	c9                   	leave
   106ab:	c3                   	ret

000106ac <gate_desc_set>:
{
   106ac:	55                   	push   %ebp
   106ad:	89 e5                	mov    %esp,%ebp
   106af:	83 ec 08             	sub    $0x8,%esp
   106b2:	8b 55 0c             	mov    0xc(%ebp),%edx
   106b5:	8b 45 14             	mov    0x14(%ebp),%eax
   106b8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   106bc:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   106c0:	8b 45 10             	mov    0x10(%ebp),%eax
   106c3:	89 c2                	mov    %eax,%edx
   106c5:	8b 45 08             	mov    0x8(%ebp),%eax
   106c8:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   106cb:	8b 45 08             	mov    0x8(%ebp),%eax
   106ce:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   106d2:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   106d6:	8b 45 08             	mov    0x8(%ebp),%eax
   106d9:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   106dd:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   106e1:	8b 45 10             	mov    0x10(%ebp),%eax
   106e4:	c1 e8 10             	shr    $0x10,%eax
   106e7:	89 c2                	mov    %eax,%edx
   106e9:	8b 45 08             	mov    0x8(%ebp),%eax
   106ec:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   106f0:	90                   	nop
   106f1:	c9                   	leave
   106f2:	c3                   	ret

000106f3 <gdt_alloc_des>:
{
   106f3:	55                   	push   %ebp
   106f4:	89 e5                	mov    %esp,%ebp
   106f6:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   106f9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10700:	eb 26                	jmp    10728 <gdt_alloc_des+0x35>
        segment_desc_t *desc = gdt_table + i;
   10702:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10705:	c1 e0 03             	shl    $0x3,%eax
   10708:	05 20 1d 01 00       	add    $0x11d20,%eax
   1070d:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->attr == 0)
   10710:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10713:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10717:	66 85 c0             	test   %ax,%ax
   1071a:	75 08                	jne    10724 <gdt_alloc_des+0x31>
            return i * sizeof(segment_desc_t);
   1071c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1071f:	c1 e0 03             	shl    $0x3,%eax
   10722:	eb 12                	jmp    10736 <gdt_alloc_des+0x43>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10724:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10728:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1072f:	7e d1                	jle    10702 <gdt_alloc_des+0xf>
    return -1;
   10731:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10736:	c9                   	leave
   10737:	c3                   	ret

00010738 <switch_to_tss>:
{
   10738:	55                   	push   %ebp
   10739:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   1073b:	6a 00                	push   $0x0
   1073d:	ff 75 08             	push   0x8(%ebp)
   10740:	e8 5d fe ff ff       	call   105a2 <far_jump>
   10745:	83 c4 08             	add    $0x8,%esp
}
   10748:	90                   	nop
   10749:	c9                   	leave
   1074a:	c3                   	ret

0001074b <cpu_init>:
{
   1074b:	55                   	push   %ebp
   1074c:	89 e5                	mov    %esp,%ebp
    init_gdt();
   1074e:	e8 ec fe ff ff       	call   1063f <init_gdt>
   10753:	90                   	nop
   10754:	5d                   	pop    %ebp
   10755:	c3                   	ret

00010756 <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   10756:	55                   	push   %ebp
   10757:	89 e5                	mov    %esp,%ebp
   10759:	83 ec 14             	sub    $0x14,%esp
   1075c:	8b 45 08             	mov    0x8(%ebp),%eax
   1075f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   10763:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10767:	89 c2                	mov    %eax,%edx
   10769:	ec                   	in     (%dx),%al
   1076a:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   1076d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   10771:	c9                   	leave
   10772:	c3                   	ret

00010773 <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   10773:	55                   	push   %ebp
   10774:	89 e5                	mov    %esp,%ebp
   10776:	83 ec 08             	sub    $0x8,%esp
   10779:	8b 55 08             	mov    0x8(%ebp),%edx
   1077c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1077f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10783:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   10786:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1078a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1078e:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   1078f:	90                   	nop
   10790:	c9                   	leave
   10791:	c3                   	ret

00010792 <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   10792:	55                   	push   %ebp
   10793:	89 e5                	mov    %esp,%ebp
        hlt();
   10795:	fa                   	cli
    }
   10796:	90                   	nop
   10797:	5d                   	pop    %ebp
   10798:	c3                   	ret

00010799 <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   10799:	55                   	push   %ebp
   1079a:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   1079c:	fb                   	sti
}
   1079d:	90                   	nop
   1079e:	5d                   	pop    %ebp
   1079f:	c3                   	ret

000107a0 <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   107a0:	55                   	push   %ebp
   107a1:	89 e5                	mov    %esp,%ebp
   107a3:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   107a6:	8b 45 08             	mov    0x8(%ebp),%eax
   107a9:	c1 e8 10             	shr    $0x10,%eax
   107ac:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   107b0:	8b 45 08             	mov    0x8(%ebp),%eax
   107b3:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   107b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   107ba:	83 e8 01             	sub    $0x1,%eax
   107bd:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   107c1:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   107c5:	90                   	nop
   107c6:	c9                   	leave
   107c7:	c3                   	ret

000107c8 <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   107c8:	55                   	push   %ebp
   107c9:	89 e5                	mov    %esp,%ebp
}
   107cb:	f4                   	hlt

   107cc:	90                   	nop
   107cd:	5d                   	pop    %ebp
   107ce:	c3                   	ret

000107cf <dump_core_regs>:
{
   107cf:	55                   	push   %ebp
   107d0:	89 e5                	mov    %esp,%ebp
   107d2:	57                   	push   %edi
   107d3:	56                   	push   %esi
   107d4:	53                   	push   %ebx
   107d5:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   107d8:	8b 45 08             	mov    0x8(%ebp),%eax
   107db:	8b 50 34             	mov    0x34(%eax),%edx
   107de:	8b 45 08             	mov    0x8(%ebp),%eax
   107e1:	8b 40 30             	mov    0x30(%eax),%eax
   107e4:	83 ec 04             	sub    $0x4,%esp
   107e7:	52                   	push   %edx
   107e8:	50                   	push   %eax
   107e9:	68 68 19 01 00       	push   $0x11968
   107ee:	e8 2a 10 00 00       	call   1181d <log_prinf>
   107f3:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   107f6:	8b 45 08             	mov    0x8(%ebp),%eax
   107f9:	8b 38                	mov    (%eax),%edi
   107fb:	8b 45 08             	mov    0x8(%ebp),%eax
   107fe:	8b 70 04             	mov    0x4(%eax),%esi
   10801:	8b 45 08             	mov    0x8(%ebp),%eax
   10804:	8b 58 0c             	mov    0xc(%eax),%ebx
   10807:	8b 45 08             	mov    0x8(%ebp),%eax
   1080a:	8b 48 08             	mov    0x8(%eax),%ecx
   1080d:	8b 45 08             	mov    0x8(%ebp),%eax
   10810:	8b 50 0c             	mov    0xc(%eax),%edx
   10813:	8b 45 08             	mov    0x8(%ebp),%eax
   10816:	8b 40 3c             	mov    0x3c(%eax),%eax
   10819:	83 ec 04             	sub    $0x4,%esp
   1081c:	57                   	push   %edi
   1081d:	56                   	push   %esi
   1081e:	53                   	push   %ebx
   1081f:	51                   	push   %ecx
   10820:	52                   	push   %edx
   10821:	50                   	push   %eax
   10822:	68 80 19 01 00       	push   $0x11980
   10827:	e8 f1 0f 00 00       	call   1181d <log_prinf>
   1082c:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   1082f:	8b 45 08             	mov    0x8(%ebp),%eax
   10832:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10835:	8b 45 08             	mov    0x8(%ebp),%eax
   10838:	8b 40 18             	mov    0x18(%eax),%eax
   1083b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1083e:	8b 45 08             	mov    0x8(%ebp),%eax
   10841:	8b 58 14             	mov    0x14(%eax),%ebx
   10844:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10847:	8b 45 08             	mov    0x8(%ebp),%eax
   1084a:	8b 78 10             	mov    0x10(%eax),%edi
   1084d:	8b 45 08             	mov    0x8(%ebp),%eax
   10850:	8b 70 24             	mov    0x24(%eax),%esi
   10853:	8b 45 08             	mov    0x8(%ebp),%eax
   10856:	8b 58 28             	mov    0x28(%eax),%ebx
   10859:	8b 45 08             	mov    0x8(%ebp),%eax
   1085c:	8b 50 20             	mov    0x20(%eax),%edx
   1085f:	8b 45 08             	mov    0x8(%ebp),%eax
   10862:	8b 40 2c             	mov    0x2c(%eax),%eax
   10865:	83 ec 0c             	sub    $0xc,%esp
   10868:	51                   	push   %ecx
   10869:	ff 75 e4             	push   -0x1c(%ebp)
   1086c:	ff 75 e0             	push   -0x20(%ebp)
   1086f:	57                   	push   %edi
   10870:	56                   	push   %esi
   10871:	53                   	push   %ebx
   10872:	52                   	push   %edx
   10873:	50                   	push   %eax
   10874:	68 a8 19 01 00       	push   $0x119a8
   10879:	e8 9f 0f 00 00       	call   1181d <log_prinf>
   1087e:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   10881:	8b 45 08             	mov    0x8(%ebp),%eax
   10884:	8b 50 40             	mov    0x40(%eax),%edx
   10887:	8b 45 08             	mov    0x8(%ebp),%eax
   1088a:	8b 40 38             	mov    0x38(%eax),%eax
   1088d:	83 ec 04             	sub    $0x4,%esp
   10890:	52                   	push   %edx
   10891:	50                   	push   %eax
   10892:	68 f9 19 01 00       	push   $0x119f9
   10897:	e8 81 0f 00 00       	call   1181d <log_prinf>
   1089c:	83 c4 10             	add    $0x10,%esp
}
   1089f:	90                   	nop
   108a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
   108a3:	5b                   	pop    %ebx
   108a4:	5e                   	pop    %esi
   108a5:	5f                   	pop    %edi
   108a6:	5d                   	pop    %ebp
   108a7:	c3                   	ret

000108a8 <do_default_handler>:
{
   108a8:	55                   	push   %ebp
   108a9:	89 e5                	mov    %esp,%ebp
   108ab:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   108ae:	83 ec 0c             	sub    $0xc,%esp
   108b1:	68 12 1a 01 00       	push   $0x11a12
   108b6:	e8 62 0f 00 00       	call   1181d <log_prinf>
   108bb:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   108be:	83 ec 08             	sub    $0x8,%esp
   108c1:	ff 75 0c             	push   0xc(%ebp)
   108c4:	68 2f 1a 01 00       	push   $0x11a2f
   108c9:	e8 4f 0f 00 00       	call   1181d <log_prinf>
   108ce:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   108d1:	83 ec 0c             	sub    $0xc,%esp
   108d4:	ff 75 08             	push   0x8(%ebp)
   108d7:	e8 f3 fe ff ff       	call   107cf <dump_core_regs>
   108dc:	83 c4 10             	add    $0x10,%esp
        hlt();
   108df:	e8 e4 fe ff ff       	call   107c8 <hlt>
   108e4:	eb f9                	jmp    108df <do_default_handler+0x37>

000108e6 <do_handler_unknow>:
{
   108e6:	55                   	push   %ebp
   108e7:	89 e5                	mov    %esp,%ebp
   108e9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   108ec:	83 ec 08             	sub    $0x8,%esp
   108ef:	68 40 1a 01 00       	push   $0x11a40
   108f4:	ff 75 08             	push   0x8(%ebp)
   108f7:	e8 ac ff ff ff       	call   108a8 <do_default_handler>
   108fc:	83 c4 10             	add    $0x10,%esp
}
   108ff:	90                   	nop
   10900:	c9                   	leave
   10901:	c3                   	ret

00010902 <do_handler_divider>:
{
   10902:	55                   	push   %ebp
   10903:	89 e5                	mov    %esp,%ebp
   10905:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   10908:	83 ec 08             	sub    $0x8,%esp
   1090b:	68 54 1a 01 00       	push   $0x11a54
   10910:	ff 75 08             	push   0x8(%ebp)
   10913:	e8 90 ff ff ff       	call   108a8 <do_default_handler>
   10918:	83 c4 10             	add    $0x10,%esp
}
   1091b:	90                   	nop
   1091c:	c9                   	leave
   1091d:	c3                   	ret

0001091e <do_handler_Debug>:
{
   1091e:	55                   	push   %ebp
   1091f:	89 e5                	mov    %esp,%ebp
   10921:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   10924:	83 ec 08             	sub    $0x8,%esp
   10927:	68 69 1a 01 00       	push   $0x11a69
   1092c:	ff 75 08             	push   0x8(%ebp)
   1092f:	e8 74 ff ff ff       	call   108a8 <do_default_handler>
   10934:	83 c4 10             	add    $0x10,%esp
}
   10937:	90                   	nop
   10938:	c9                   	leave
   10939:	c3                   	ret

0001093a <do_handler_NMI>:
{
   1093a:	55                   	push   %ebp
   1093b:	89 e5                	mov    %esp,%ebp
   1093d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10940:	83 ec 08             	sub    $0x8,%esp
   10943:	68 79 1a 01 00       	push   $0x11a79
   10948:	ff 75 08             	push   0x8(%ebp)
   1094b:	e8 58 ff ff ff       	call   108a8 <do_default_handler>
   10950:	83 c4 10             	add    $0x10,%esp
}
   10953:	90                   	nop
   10954:	c9                   	leave
   10955:	c3                   	ret

00010956 <do_handler_breakpoint>:
{
   10956:	55                   	push   %ebp
   10957:	89 e5                	mov    %esp,%ebp
   10959:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   1095c:	83 ec 08             	sub    $0x8,%esp
   1095f:	68 88 1a 01 00       	push   $0x11a88
   10964:	ff 75 08             	push   0x8(%ebp)
   10967:	e8 3c ff ff ff       	call   108a8 <do_default_handler>
   1096c:	83 c4 10             	add    $0x10,%esp
}
   1096f:	90                   	nop
   10970:	c9                   	leave
   10971:	c3                   	ret

00010972 <do_handler_overflow>:
{
   10972:	55                   	push   %ebp
   10973:	89 e5                	mov    %esp,%ebp
   10975:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10978:	83 ec 08             	sub    $0x8,%esp
   1097b:	68 94 1a 01 00       	push   $0x11a94
   10980:	ff 75 08             	push   0x8(%ebp)
   10983:	e8 20 ff ff ff       	call   108a8 <do_default_handler>
   10988:	83 c4 10             	add    $0x10,%esp
}
   1098b:	90                   	nop
   1098c:	c9                   	leave
   1098d:	c3                   	ret

0001098e <do_handler_bound_range>:
{
   1098e:	55                   	push   %ebp
   1098f:	89 e5                	mov    %esp,%ebp
   10991:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10994:	83 ec 08             	sub    $0x8,%esp
   10997:	68 9e 1a 01 00       	push   $0x11a9e
   1099c:	ff 75 08             	push   0x8(%ebp)
   1099f:	e8 04 ff ff ff       	call   108a8 <do_default_handler>
   109a4:	83 c4 10             	add    $0x10,%esp
}
   109a7:	90                   	nop
   109a8:	c9                   	leave
   109a9:	c3                   	ret

000109aa <do_handler_invalid_opcode>:
{
   109aa:	55                   	push   %ebp
   109ab:	89 e5                	mov    %esp,%ebp
   109ad:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   109b0:	83 ec 08             	sub    $0x8,%esp
   109b3:	68 b4 1a 01 00       	push   $0x11ab4
   109b8:	ff 75 08             	push   0x8(%ebp)
   109bb:	e8 e8 fe ff ff       	call   108a8 <do_default_handler>
   109c0:	83 c4 10             	add    $0x10,%esp
}
   109c3:	90                   	nop
   109c4:	c9                   	leave
   109c5:	c3                   	ret

000109c6 <do_handler_device_unavailable>:
{
   109c6:	55                   	push   %ebp
   109c7:	89 e5                	mov    %esp,%ebp
   109c9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   109cc:	83 ec 08             	sub    $0x8,%esp
   109cf:	68 c4 1a 01 00       	push   $0x11ac4
   109d4:	ff 75 08             	push   0x8(%ebp)
   109d7:	e8 cc fe ff ff       	call   108a8 <do_default_handler>
   109dc:	83 c4 10             	add    $0x10,%esp
}
   109df:	90                   	nop
   109e0:	c9                   	leave
   109e1:	c3                   	ret

000109e2 <do_handler_double_fault>:
{
   109e2:	55                   	push   %ebp
   109e3:	89 e5                	mov    %esp,%ebp
   109e5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   109e8:	83 ec 08             	sub    $0x8,%esp
   109eb:	68 da 1a 01 00       	push   $0x11ada
   109f0:	ff 75 08             	push   0x8(%ebp)
   109f3:	e8 b0 fe ff ff       	call   108a8 <do_default_handler>
   109f8:	83 c4 10             	add    $0x10,%esp
}
   109fb:	90                   	nop
   109fc:	c9                   	leave
   109fd:	c3                   	ret

000109fe <do_handler_invalid_tss>:
{
   109fe:	55                   	push   %ebp
   109ff:	89 e5                	mov    %esp,%ebp
   10a01:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   10a04:	83 ec 08             	sub    $0x8,%esp
   10a07:	68 e8 1a 01 00       	push   $0x11ae8
   10a0c:	ff 75 08             	push   0x8(%ebp)
   10a0f:	e8 94 fe ff ff       	call   108a8 <do_default_handler>
   10a14:	83 c4 10             	add    $0x10,%esp
}
   10a17:	90                   	nop
   10a18:	c9                   	leave
   10a19:	c3                   	ret

00010a1a <do_handler_segment_not_present>:
{
   10a1a:	55                   	push   %ebp
   10a1b:	89 e5                	mov    %esp,%ebp
   10a1d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10a20:	83 ec 08             	sub    $0x8,%esp
   10a23:	68 f4 1a 01 00       	push   $0x11af4
   10a28:	ff 75 08             	push   0x8(%ebp)
   10a2b:	e8 78 fe ff ff       	call   108a8 <do_default_handler>
   10a30:	83 c4 10             	add    $0x10,%esp
}
   10a33:	90                   	nop
   10a34:	c9                   	leave
   10a35:	c3                   	ret

00010a36 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   10a36:	55                   	push   %ebp
   10a37:	89 e5                	mov    %esp,%ebp
   10a39:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10a3c:	83 ec 08             	sub    $0x8,%esp
   10a3f:	68 09 1b 01 00       	push   $0x11b09
   10a44:	ff 75 08             	push   0x8(%ebp)
   10a47:	e8 5c fe ff ff       	call   108a8 <do_default_handler>
   10a4c:	83 c4 10             	add    $0x10,%esp
}
   10a4f:	90                   	nop
   10a50:	c9                   	leave
   10a51:	c3                   	ret

00010a52 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   10a52:	55                   	push   %ebp
   10a53:	89 e5                	mov    %esp,%ebp
   10a55:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   10a58:	83 ec 08             	sub    $0x8,%esp
   10a5b:	68 1e 1b 01 00       	push   $0x11b1e
   10a60:	ff 75 08             	push   0x8(%ebp)
   10a63:	e8 40 fe ff ff       	call   108a8 <do_default_handler>
   10a68:	83 c4 10             	add    $0x10,%esp
}
   10a6b:	90                   	nop
   10a6c:	c9                   	leave
   10a6d:	c3                   	ret

00010a6e <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t *frame)
{
   10a6e:	55                   	push   %ebp
   10a6f:	89 e5                	mov    %esp,%ebp
   10a71:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10a74:	83 ec 08             	sub    $0x8,%esp
   10a77:	68 32 1b 01 00       	push   $0x11b32
   10a7c:	ff 75 08             	push   0x8(%ebp)
   10a7f:	e8 24 fe ff ff       	call   108a8 <do_default_handler>
   10a84:	83 c4 10             	add    $0x10,%esp
}
   10a87:	90                   	nop
   10a88:	c9                   	leave
   10a89:	c3                   	ret

00010a8a <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   10a8a:	55                   	push   %ebp
   10a8b:	89 e5                	mov    %esp,%ebp
   10a8d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10a90:	83 ec 08             	sub    $0x8,%esp
   10a93:	68 3e 1b 01 00       	push   $0x11b3e
   10a98:	ff 75 08             	push   0x8(%ebp)
   10a9b:	e8 08 fe ff ff       	call   108a8 <do_default_handler>
   10aa0:	83 c4 10             	add    $0x10,%esp
}
   10aa3:	90                   	nop
   10aa4:	c9                   	leave
   10aa5:	c3                   	ret

00010aa6 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   10aa6:	55                   	push   %ebp
   10aa7:	89 e5                	mov    %esp,%ebp
   10aa9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10aac:	83 ec 08             	sub    $0x8,%esp
   10aaf:	68 5c 1b 01 00       	push   $0x11b5c
   10ab4:	ff 75 08             	push   0x8(%ebp)
   10ab7:	e8 ec fd ff ff       	call   108a8 <do_default_handler>
   10abc:	83 c4 10             	add    $0x10,%esp
}
   10abf:	90                   	nop
   10ac0:	c9                   	leave
   10ac1:	c3                   	ret

00010ac2 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   10ac2:	55                   	push   %ebp
   10ac3:	89 e5                	mov    %esp,%ebp
   10ac5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   10ac8:	83 ec 08             	sub    $0x8,%esp
   10acb:	68 6d 1b 01 00       	push   $0x11b6d
   10ad0:	ff 75 08             	push   0x8(%ebp)
   10ad3:	e8 d0 fd ff ff       	call   108a8 <do_default_handler>
   10ad8:	83 c4 10             	add    $0x10,%esp
}
   10adb:	90                   	nop
   10adc:	c9                   	leave
   10add:	c3                   	ret

00010ade <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   10ade:	55                   	push   %ebp
   10adf:	89 e5                	mov    %esp,%ebp
   10ae1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   10ae4:	83 ec 08             	sub    $0x8,%esp
   10ae7:	68 7c 1b 01 00       	push   $0x11b7c
   10aec:	ff 75 08             	push   0x8(%ebp)
   10aef:	e8 b4 fd ff ff       	call   108a8 <do_default_handler>
   10af4:	83 c4 10             	add    $0x10,%esp
}
   10af7:	90                   	nop
   10af8:	c9                   	leave
   10af9:	c3                   	ret

00010afa <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   10afa:	55                   	push   %ebp
   10afb:	89 e5                	mov    %esp,%ebp
   10afd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   10b00:	83 ec 08             	sub    $0x8,%esp
   10b03:	68 9b 1b 01 00       	push   $0x11b9b
   10b08:	ff 75 08             	push   0x8(%ebp)
   10b0b:	e8 98 fd ff ff       	call   108a8 <do_default_handler>
   10b10:	83 c4 10             	add    $0x10,%esp
}
   10b13:	90                   	nop
   10b14:	c9                   	leave
   10b15:	c3                   	ret

00010b16 <init_pic>:

static void init_pic(void)
{
   10b16:	55                   	push   %ebp
   10b17:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10b19:	6a 11                	push   $0x11
   10b1b:	6a 20                	push   $0x20
   10b1d:	e8 51 fc ff ff       	call   10773 <outb>
   10b22:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10b25:	6a 20                	push   $0x20
   10b27:	6a 21                	push   $0x21
   10b29:	e8 45 fc ff ff       	call   10773 <outb>
   10b2e:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10b31:	6a 04                	push   $0x4
   10b33:	6a 21                	push   $0x21
   10b35:	e8 39 fc ff ff       	call   10773 <outb>
   10b3a:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10b3d:	6a 01                	push   $0x1
   10b3f:	6a 21                	push   $0x21
   10b41:	e8 2d fc ff ff       	call   10773 <outb>
   10b46:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10b49:	6a 11                	push   $0x11
   10b4b:	68 a0 00 00 00       	push   $0xa0
   10b50:	e8 1e fc ff ff       	call   10773 <outb>
   10b55:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10b58:	6a 28                	push   $0x28
   10b5a:	68 a1 00 00 00       	push   $0xa1
   10b5f:	e8 0f fc ff ff       	call   10773 <outb>
   10b64:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10b67:	6a 02                	push   $0x2
   10b69:	68 a1 00 00 00       	push   $0xa1
   10b6e:	e8 00 fc ff ff       	call   10773 <outb>
   10b73:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10b76:	6a 01                	push   $0x1
   10b78:	68 a1 00 00 00       	push   $0xa1
   10b7d:	e8 f1 fb ff ff       	call   10773 <outb>
   10b82:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10b85:	68 fb 00 00 00       	push   $0xfb
   10b8a:	6a 21                	push   $0x21
   10b8c:	e8 e2 fb ff ff       	call   10773 <outb>
   10b91:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   10b94:	68 ff 00 00 00       	push   $0xff
   10b99:	68 a1 00 00 00       	push   $0xa1
   10b9e:	e8 d0 fb ff ff       	call   10773 <outb>
   10ba3:	83 c4 08             	add    $0x8,%esp
}
   10ba6:	90                   	nop
   10ba7:	c9                   	leave
   10ba8:	c3                   	ret

00010ba9 <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   10ba9:	55                   	push   %ebp
   10baa:	89 e5                	mov    %esp,%ebp
   10bac:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10baf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10bb6:	eb 25                	jmp    10bdd <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10bb8:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10bbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bc0:	c1 e0 03             	shl    $0x3,%eax
   10bc3:	05 20 25 01 00       	add    $0x12520,%eax
   10bc8:	68 00 8e 00 00       	push   $0x8e00
   10bcd:	52                   	push   %edx
   10bce:	6a 08                	push   $0x8
   10bd0:	50                   	push   %eax
   10bd1:	e8 d6 fa ff ff       	call   106ac <gate_desc_set>
   10bd6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10bd9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10bdd:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10be1:	7e d5                	jle    10bb8 <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10be3:	83 ec 08             	sub    $0x8,%esp
   10be6:	68 4a 00 01 00       	push   $0x1004a
   10beb:	6a 00                	push   $0x0
   10bed:	e8 65 01 00 00       	call   10d57 <irq_install>
   10bf2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10bf5:	83 ec 08             	sub    $0x8,%esp
   10bf8:	68 69 00 01 00       	push   $0x10069
   10bfd:	6a 01                	push   $0x1
   10bff:	e8 53 01 00 00       	call   10d57 <irq_install>
   10c04:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10c07:	83 ec 08             	sub    $0x8,%esp
   10c0a:	68 88 00 01 00       	push   $0x10088
   10c0f:	6a 02                	push   $0x2
   10c11:	e8 41 01 00 00       	call   10d57 <irq_install>
   10c16:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10c19:	83 ec 08             	sub    $0x8,%esp
   10c1c:	68 a7 00 01 00       	push   $0x100a7
   10c21:	6a 03                	push   $0x3
   10c23:	e8 2f 01 00 00       	call   10d57 <irq_install>
   10c28:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10c2b:	83 ec 08             	sub    $0x8,%esp
   10c2e:	68 c6 00 01 00       	push   $0x100c6
   10c33:	6a 04                	push   $0x4
   10c35:	e8 1d 01 00 00       	call   10d57 <irq_install>
   10c3a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10c3d:	83 ec 08             	sub    $0x8,%esp
   10c40:	68 e5 00 01 00       	push   $0x100e5
   10c45:	6a 05                	push   $0x5
   10c47:	e8 0b 01 00 00       	call   10d57 <irq_install>
   10c4c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10c4f:	83 ec 08             	sub    $0x8,%esp
   10c52:	68 04 01 01 00       	push   $0x10104
   10c57:	6a 06                	push   $0x6
   10c59:	e8 f9 00 00 00       	call   10d57 <irq_install>
   10c5e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10c61:	83 ec 08             	sub    $0x8,%esp
   10c64:	68 23 01 01 00       	push   $0x10123
   10c69:	6a 07                	push   $0x7
   10c6b:	e8 e7 00 00 00       	call   10d57 <irq_install>
   10c70:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10c73:	83 ec 08             	sub    $0x8,%esp
   10c76:	68 42 01 01 00       	push   $0x10142
   10c7b:	6a 08                	push   $0x8
   10c7d:	e8 d5 00 00 00       	call   10d57 <irq_install>
   10c82:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   10c85:	83 ec 08             	sub    $0x8,%esp
   10c88:	68 5f 01 01 00       	push   $0x1015f
   10c8d:	6a 0a                	push   $0xa
   10c8f:	e8 c3 00 00 00       	call   10d57 <irq_install>
   10c94:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   10c97:	83 ec 08             	sub    $0x8,%esp
   10c9a:	68 7c 01 01 00       	push   $0x1017c
   10c9f:	6a 0b                	push   $0xb
   10ca1:	e8 b1 00 00 00       	call   10d57 <irq_install>
   10ca6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   10ca9:	83 ec 08             	sub    $0x8,%esp
   10cac:	68 99 01 01 00       	push   $0x10199
   10cb1:	6a 0c                	push   $0xc
   10cb3:	e8 9f 00 00 00       	call   10d57 <irq_install>
   10cb8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   10cbb:	83 ec 08             	sub    $0x8,%esp
   10cbe:	68 b6 01 01 00       	push   $0x101b6
   10cc3:	6a 0d                	push   $0xd
   10cc5:	e8 8d 00 00 00       	call   10d57 <irq_install>
   10cca:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   10ccd:	83 ec 08             	sub    $0x8,%esp
   10cd0:	68 d3 01 01 00       	push   $0x101d3
   10cd5:	6a 0e                	push   $0xe
   10cd7:	e8 7b 00 00 00       	call   10d57 <irq_install>
   10cdc:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   10cdf:	83 ec 08             	sub    $0x8,%esp
   10ce2:	68 f0 01 01 00       	push   $0x101f0
   10ce7:	6a 10                	push   $0x10
   10ce9:	e8 69 00 00 00       	call   10d57 <irq_install>
   10cee:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   10cf1:	83 ec 08             	sub    $0x8,%esp
   10cf4:	68 0f 02 01 00       	push   $0x1020f
   10cf9:	6a 11                	push   $0x11
   10cfb:	e8 57 00 00 00       	call   10d57 <irq_install>
   10d00:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   10d03:	83 ec 08             	sub    $0x8,%esp
   10d06:	68 2c 02 01 00       	push   $0x1022c
   10d0b:	6a 12                	push   $0x12
   10d0d:	e8 45 00 00 00       	call   10d57 <irq_install>
   10d12:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   10d15:	83 ec 08             	sub    $0x8,%esp
   10d18:	68 4b 02 01 00       	push   $0x1024b
   10d1d:	6a 13                	push   $0x13
   10d1f:	e8 33 00 00 00       	call   10d57 <irq_install>
   10d24:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   10d27:	83 ec 08             	sub    $0x8,%esp
   10d2a:	68 6a 02 01 00       	push   $0x1026a
   10d2f:	6a 14                	push   $0x14
   10d31:	e8 21 00 00 00       	call   10d57 <irq_install>
   10d36:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10d39:	b8 20 25 01 00       	mov    $0x12520,%eax
   10d3e:	83 ec 08             	sub    $0x8,%esp
   10d41:	68 00 04 00 00       	push   $0x400
   10d46:	50                   	push   %eax
   10d47:	e8 54 fa ff ff       	call   107a0 <lidt>
   10d4c:	83 c4 10             	add    $0x10,%esp

    init_pic();
   10d4f:	e8 c2 fd ff ff       	call   10b16 <init_pic>
}
   10d54:	90                   	nop
   10d55:	c9                   	leave
   10d56:	c3                   	ret

00010d57 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   10d57:	55                   	push   %ebp
   10d58:	89 e5                	mov    %esp,%ebp
   10d5a:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   10d5d:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10d61:	7e 07                	jle    10d6a <irq_install+0x13>
    {
        return -1;
   10d63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10d68:	eb 20                	jmp    10d8a <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10d6a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d6d:	8b 55 08             	mov    0x8(%ebp),%edx
   10d70:	c1 e2 03             	shl    $0x3,%edx
   10d73:	81 c2 20 25 01 00    	add    $0x12520,%edx
   10d79:	68 00 8e 00 00       	push   $0x8e00
   10d7e:	50                   	push   %eax
   10d7f:	6a 08                	push   $0x8
   10d81:	52                   	push   %edx
   10d82:	e8 25 f9 ff ff       	call   106ac <gate_desc_set>
   10d87:	83 c4 10             	add    $0x10,%esp
}
   10d8a:	c9                   	leave
   10d8b:	c3                   	ret

00010d8c <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   10d8c:	55                   	push   %ebp
   10d8d:	89 e5                	mov    %esp,%ebp
   10d8f:	53                   	push   %ebx
   10d90:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10d93:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10d97:	7e 78                	jle    10e11 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10d99:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10d9d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10da1:	7f 32                	jg     10dd5 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10da3:	6a 21                	push   $0x21
   10da5:	e8 ac f9 ff ff       	call   10756 <inb>
   10daa:	83 c4 04             	add    $0x4,%esp
   10dad:	89 c3                	mov    %eax,%ebx
   10daf:	8b 45 08             	mov    0x8(%ebp),%eax
   10db2:	ba 01 00 00 00       	mov    $0x1,%edx
   10db7:	89 c1                	mov    %eax,%ecx
   10db9:	d3 e2                	shl    %cl,%edx
   10dbb:	89 d0                	mov    %edx,%eax
   10dbd:	f7 d0                	not    %eax
   10dbf:	21 d8                	and    %ebx,%eax
   10dc1:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10dc4:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10dc8:	50                   	push   %eax
   10dc9:	6a 21                	push   $0x21
   10dcb:	e8 a3 f9 ff ff       	call   10773 <outb>
   10dd0:	83 c4 08             	add    $0x8,%esp
   10dd3:	eb 3d                	jmp    10e12 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   10dd5:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10dd9:	68 a1 00 00 00       	push   $0xa1
   10dde:	e8 73 f9 ff ff       	call   10756 <inb>
   10de3:	83 c4 04             	add    $0x4,%esp
   10de6:	89 c3                	mov    %eax,%ebx
   10de8:	8b 45 08             	mov    0x8(%ebp),%eax
   10deb:	ba 01 00 00 00       	mov    $0x1,%edx
   10df0:	89 c1                	mov    %eax,%ecx
   10df2:	d3 e2                	shl    %cl,%edx
   10df4:	89 d0                	mov    %edx,%eax
   10df6:	f7 d0                	not    %eax
   10df8:	21 d8                	and    %ebx,%eax
   10dfa:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10dfd:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10e01:	50                   	push   %eax
   10e02:	68 a1 00 00 00       	push   $0xa1
   10e07:	e8 67 f9 ff ff       	call   10773 <outb>
   10e0c:	83 c4 08             	add    $0x8,%esp
   10e0f:	eb 01                	jmp    10e12 <irq_enable+0x86>
        return;
   10e11:	90                   	nop
    }
}
   10e12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e15:	c9                   	leave
   10e16:	c3                   	ret

00010e17 <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   10e17:	55                   	push   %ebp
   10e18:	89 e5                	mov    %esp,%ebp
   10e1a:	53                   	push   %ebx
   10e1b:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10e1e:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10e22:	7e 74                	jle    10e98 <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10e24:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10e28:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e2c:	7f 30                	jg     10e5e <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10e2e:	6a 21                	push   $0x21
   10e30:	e8 21 f9 ff ff       	call   10756 <inb>
   10e35:	83 c4 04             	add    $0x4,%esp
   10e38:	89 c3                	mov    %eax,%ebx
   10e3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e3d:	ba 01 00 00 00       	mov    $0x1,%edx
   10e42:	89 c1                	mov    %eax,%ecx
   10e44:	d3 e2                	shl    %cl,%edx
   10e46:	89 d0                	mov    %edx,%eax
   10e48:	09 d8                	or     %ebx,%eax
   10e4a:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10e4d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10e51:	50                   	push   %eax
   10e52:	6a 21                	push   $0x21
   10e54:	e8 1a f9 ff ff       	call   10773 <outb>
   10e59:	83 c4 08             	add    $0x8,%esp
   10e5c:	eb 3b                	jmp    10e99 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   10e5e:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10e62:	68 a1 00 00 00       	push   $0xa1
   10e67:	e8 ea f8 ff ff       	call   10756 <inb>
   10e6c:	83 c4 04             	add    $0x4,%esp
   10e6f:	89 c3                	mov    %eax,%ebx
   10e71:	8b 45 08             	mov    0x8(%ebp),%eax
   10e74:	ba 01 00 00 00       	mov    $0x1,%edx
   10e79:	89 c1                	mov    %eax,%ecx
   10e7b:	d3 e2                	shl    %cl,%edx
   10e7d:	89 d0                	mov    %edx,%eax
   10e7f:	09 d8                	or     %ebx,%eax
   10e81:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10e84:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10e88:	50                   	push   %eax
   10e89:	68 a1 00 00 00       	push   $0xa1
   10e8e:	e8 e0 f8 ff ff       	call   10773 <outb>
   10e93:	83 c4 08             	add    $0x8,%esp
   10e96:	eb 01                	jmp    10e99 <irq_disable+0x82>
        return;
   10e98:	90                   	nop
    }
}
   10e99:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10e9c:	c9                   	leave
   10e9d:	c3                   	ret

00010e9e <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   10e9e:	55                   	push   %ebp
   10e9f:	89 e5                	mov    %esp,%ebp
    cli();
   10ea1:	e8 ec f8 ff ff       	call   10792 <cli>
}
   10ea6:	90                   	nop
   10ea7:	5d                   	pop    %ebp
   10ea8:	c3                   	ret

00010ea9 <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   10ea9:	55                   	push   %ebp
   10eaa:	89 e5                	mov    %esp,%ebp
    sti();
   10eac:	e8 e8 f8 ff ff       	call   10799 <sti>
}
   10eb1:	90                   	nop
   10eb2:	5d                   	pop    %ebp
   10eb3:	c3                   	ret

00010eb4 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   10eb4:	55                   	push   %ebp
   10eb5:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10eb7:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   10ebb:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ebf:	7e 0f                	jle    10ed0 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10ec1:	6a 20                	push   $0x20
   10ec3:	68 a0 00 00 00       	push   $0xa0
   10ec8:	e8 a6 f8 ff ff       	call   10773 <outb>
   10ecd:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10ed0:	6a 20                	push   $0x20
   10ed2:	6a 20                	push   $0x20
   10ed4:	e8 9a f8 ff ff       	call   10773 <outb>
   10ed9:	83 c4 08             	add    $0x8,%esp
   10edc:	90                   	nop
   10edd:	c9                   	leave
   10ede:	c3                   	ret

00010edf <outb>:
{
    sys_tick = 0;
    init_pit();
   10edf:	55                   	push   %ebp
   10ee0:	89 e5                	mov    %esp,%ebp
   10ee2:	83 ec 08             	sub    $0x8,%esp
   10ee5:	8b 55 08             	mov    0x8(%ebp),%edx
   10ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10eeb:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10eef:	88 45 f8             	mov    %al,-0x8(%ebp)
   10ef2:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10ef6:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10efa:	ee                   	out    %al,(%dx)
   10efb:	90                   	nop
   10efc:	c9                   	leave
   10efd:	c3                   	ret

00010efe <do_handler_time>:
{
   10efe:	55                   	push   %ebp
   10eff:	89 e5                	mov    %esp,%ebp
   10f01:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   10f04:	a1 20 29 01 00       	mov    0x12920,%eax
   10f09:	83 c0 01             	add    $0x1,%eax
   10f0c:	a3 20 29 01 00       	mov    %eax,0x12920
    pic_send_eoi(IRQ0_TIMER);
   10f11:	83 ec 0c             	sub    $0xc,%esp
   10f14:	6a 20                	push   $0x20
   10f16:	e8 99 ff ff ff       	call   10eb4 <pic_send_eoi>
   10f1b:	83 c4 10             	add    $0x10,%esp
}
   10f1e:	90                   	nop
   10f1f:	c9                   	leave
   10f20:	c3                   	ret

00010f21 <init_pit>:
{
   10f21:	55                   	push   %ebp
   10f22:	89 e5                	mov    %esp,%ebp
   10f24:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   10f27:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   10f2e:	6a 36                	push   $0x36
   10f30:	6a 43                	push   $0x43
   10f32:	e8 a8 ff ff ff       	call   10edf <outb>
   10f37:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   10f3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f3d:	0f b6 c0             	movzbl %al,%eax
   10f40:	50                   	push   %eax
   10f41:	6a 40                	push   $0x40
   10f43:	e8 97 ff ff ff       	call   10edf <outb>
   10f48:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   10f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f4e:	c1 e8 08             	shr    $0x8,%eax
   10f51:	0f b6 c0             	movzbl %al,%eax
   10f54:	50                   	push   %eax
   10f55:	6a 40                	push   $0x40
   10f57:	e8 83 ff ff ff       	call   10edf <outb>
   10f5c:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   10f5f:	83 ec 08             	sub    $0x8,%esp
   10f62:	68 89 02 01 00       	push   $0x10289
   10f67:	6a 20                	push   $0x20
   10f69:	e8 e9 fd ff ff       	call   10d57 <irq_install>
   10f6e:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   10f71:	83 ec 0c             	sub    $0xc,%esp
   10f74:	6a 20                	push   $0x20
   10f76:	e8 11 fe ff ff       	call   10d8c <irq_enable>
   10f7b:	83 c4 10             	add    $0x10,%esp
}
   10f7e:	90                   	nop
   10f7f:	c9                   	leave
   10f80:	c3                   	ret

00010f81 <init_time>:
{
   10f81:	55                   	push   %ebp
   10f82:	89 e5                	mov    %esp,%ebp
   10f84:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10f87:	c7 05 20 29 01 00 00 	movl   $0x0,0x12920
   10f8e:	00 00 00 
    init_pit();
   10f91:	e8 8b ff ff ff       	call   10f21 <init_pit>
   10f96:	90                   	nop
   10f97:	c9                   	leave
   10f98:	c3                   	ret

00010f99 <kernel_init>:

/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   10f99:	55                   	push   %ebp
   10f9a:	89 e5                	mov    %esp,%ebp
   10f9c:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10f9f:	e8 a7 f7 ff ff       	call   1074b <cpu_init>

    init_log(); // 初始化打印函数
   10fa4:	e8 02 08 00 00       	call   117ab <init_log>
    irq_init();
   10fa9:	e8 fb fb ff ff       	call   10ba9 <irq_init>
    // 初始化定时器
    init_time();
   10fae:	e8 ce ff ff ff       	call   10f81 <init_time>

    // 初始化任务管理
    task_manager_init();
   10fb3:	e8 ff f4 ff ff       	call   104b7 <task_manager_init>
}
   10fb8:	90                   	nop
   10fb9:	c9                   	leave
   10fba:	c3                   	ret

00010fbb <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;
void init_task_entry(void)
{
   10fbb:	55                   	push   %ebp
   10fbc:	89 e5                	mov    %esp,%ebp
   10fbe:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10fc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_task_entry: %d", count++);
   10fc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fcb:	8d 50 01             	lea    0x1(%eax),%edx
   10fce:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10fd1:	83 ec 08             	sub    $0x8,%esp
   10fd4:	50                   	push   %eax
   10fd5:	68 b5 1b 01 00       	push   $0x11bb5
   10fda:	e8 3e 08 00 00       	call   1181d <log_prinf>
   10fdf:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task, task_first_task());
   10fe2:	e8 40 f5 ff ff       	call   10527 <task_first_task>
   10fe7:	83 ec 08             	sub    $0x8,%esp
   10fea:	50                   	push   %eax
   10feb:	68 40 39 01 00       	push   $0x13940
   10ff0:	e8 a4 f4 ff ff       	call   10499 <task_switch_from_to>
   10ff5:	83 c4 10             	add    $0x10,%esp
        log_prinf("init_task_entry: %d", count++);
   10ff8:	eb ce                	jmp    10fc8 <init_task_entry+0xd>

00010ffa <init_main>:
    }
}

void init_main(void)
{
   10ffa:	55                   	push   %ebp
   10ffb:	89 e5                	mov    %esp,%ebp
   10ffd:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   11000:	83 ec 0c             	sub    $0xc,%esp
   11003:	68 c9 1b 01 00       	push   $0x11bc9
   11008:	e8 10 08 00 00       	call   1181d <log_prinf>
   1100d:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   11010:	83 ec 08             	sub    $0x8,%esp
   11013:	68 d7 1b 01 00       	push   $0x11bd7
   11018:	68 dd 1b 01 00       	push   $0x11bdd
   1101d:	e8 fb 07 00 00       	call   1181d <log_prinf>
   11022:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   11025:	83 ec 0c             	sub    $0xc,%esp
   11028:	6a 63                	push   $0x63
   1102a:	6a 30                	push   $0x30
   1102c:	6a 14                	push   $0x14
   1102e:	6a f6                	push   $0xfffffff6
   11030:	68 e8 1b 01 00       	push   $0x11be8
   11035:	e8 e3 07 00 00       	call   1181d <log_prinf>
   1103a:	83 c4 20             	add    $0x20,%esp
    // irq_enable_global();//暂时先关掉定时中断

    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   1103d:	ba 40 39 01 00       	mov    $0x13940,%edx
   11042:	b8 bb 0f 01 00       	mov    $0x10fbb,%eax
   11047:	52                   	push   %edx
   11048:	50                   	push   %eax
   11049:	68 f4 1b 01 00       	push   $0x11bf4
   1104e:	68 40 39 01 00       	push   $0x13940
   11053:	e8 98 f3 ff ff       	call   103f0 <task_init>
   11058:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   1105b:	e8 8a f4 ff ff       	call   104ea <task_first_init>
    int count = 0;
   11060:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_main: %d", count++);
   11067:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1106a:	8d 50 01             	lea    0x1(%eax),%edx
   1106d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11070:	83 ec 08             	sub    $0x8,%esp
   11073:	50                   	push   %eax
   11074:	68 fe 1b 01 00       	push   $0x11bfe
   11079:	e8 9f 07 00 00       	call   1181d <log_prinf>
   1107e:	83 c4 10             	add    $0x10,%esp
        // 手动切换
        task_switch_from_to(task_first_task(), &init_task);
   11081:	e8 a1 f4 ff ff       	call   10527 <task_first_task>
   11086:	83 ec 08             	sub    $0x8,%esp
   11089:	68 40 39 01 00       	push   $0x13940
   1108e:	50                   	push   %eax
   1108f:	e8 05 f4 ff ff       	call   10499 <task_switch_from_to>
   11094:	83 c4 10             	add    $0x10,%esp
        log_prinf("init_main: %d", count++);
   11097:	eb ce                	jmp    11067 <init_main+0x6d>

00011099 <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   11099:	55                   	push   %ebp
   1109a:	89 e5                	mov    %esp,%ebp
}
   1109c:	f4                   	hlt

   1109d:	90                   	nop
   1109e:	5d                   	pop    %ebp
   1109f:	c3                   	ret

000110a0 <kernel_strcpy>:
{
   110a0:	55                   	push   %ebp
   110a1:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   110a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110a7:	74 3b                	je     110e4 <kernel_strcpy+0x44>
   110a9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110ad:	74 35                	je     110e4 <kernel_strcpy+0x44>
    while (*dest && *src)
   110af:	eb 17                	jmp    110c8 <kernel_strcpy+0x28>
        *dest++ = *src++;
   110b1:	8b 55 0c             	mov    0xc(%ebp),%edx
   110b4:	8d 42 01             	lea    0x1(%edx),%eax
   110b7:	89 45 0c             	mov    %eax,0xc(%ebp)
   110ba:	8b 45 08             	mov    0x8(%ebp),%eax
   110bd:	8d 48 01             	lea    0x1(%eax),%ecx
   110c0:	89 4d 08             	mov    %ecx,0x8(%ebp)
   110c3:	0f b6 12             	movzbl (%edx),%edx
   110c6:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   110c8:	8b 45 08             	mov    0x8(%ebp),%eax
   110cb:	0f b6 00             	movzbl (%eax),%eax
   110ce:	84 c0                	test   %al,%al
   110d0:	74 0a                	je     110dc <kernel_strcpy+0x3c>
   110d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   110d5:	0f b6 00             	movzbl (%eax),%eax
   110d8:	84 c0                	test   %al,%al
   110da:	75 d5                	jne    110b1 <kernel_strcpy+0x11>
    *dest = '\0';
   110dc:	8b 45 08             	mov    0x8(%ebp),%eax
   110df:	c6 00 00             	movb   $0x0,(%eax)
   110e2:	eb 01                	jmp    110e5 <kernel_strcpy+0x45>
        return;
   110e4:	90                   	nop
}
   110e5:	5d                   	pop    %ebp
   110e6:	c3                   	ret

000110e7 <kernel_strncpy>:
{
   110e7:	55                   	push   %ebp
   110e8:	89 e5                	mov    %esp,%ebp
   110ea:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   110ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110f1:	74 61                	je     11154 <kernel_strncpy+0x6d>
   110f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110f7:	74 5b                	je     11154 <kernel_strncpy+0x6d>
   110f9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110fd:	74 55                	je     11154 <kernel_strncpy+0x6d>
    char *d = dest;
   110ff:	8b 45 08             	mov    0x8(%ebp),%eax
   11102:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   11105:	8b 45 0c             	mov    0xc(%ebp),%eax
   11108:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   1110b:	eb 17                	jmp    11124 <kernel_strncpy+0x3d>
        *d++ = *s++;
   1110d:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11110:	8d 42 01             	lea    0x1(%edx),%eax
   11113:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11116:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11119:	8d 48 01             	lea    0x1(%eax),%ecx
   1111c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1111f:	0f b6 12             	movzbl (%edx),%edx
   11122:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   11124:	8b 45 10             	mov    0x10(%ebp),%eax
   11127:	8d 50 ff             	lea    -0x1(%eax),%edx
   1112a:	89 55 10             	mov    %edx,0x10(%ebp)
   1112d:	85 c0                	test   %eax,%eax
   1112f:	7e 0a                	jle    1113b <kernel_strncpy+0x54>
   11131:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11134:	0f b6 00             	movzbl (%eax),%eax
   11137:	84 c0                	test   %al,%al
   11139:	75 d2                	jne    1110d <kernel_strncpy+0x26>
    if (size == 0)
   1113b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1113f:	75 0b                	jne    1114c <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11141:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11144:	83 e8 01             	sub    $0x1,%eax
   11147:	c6 00 00             	movb   $0x0,(%eax)
   1114a:	eb 09                	jmp    11155 <kernel_strncpy+0x6e>
        *d = '\0';
   1114c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1114f:	c6 00 00             	movb   $0x0,(%eax)
   11152:	eb 01                	jmp    11155 <kernel_strncpy+0x6e>
        return;
   11154:	90                   	nop
}
   11155:	c9                   	leave
   11156:	c3                   	ret

00011157 <kernel_strncmp>:
{
   11157:	55                   	push   %ebp
   11158:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   1115a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1115e:	74 0c                	je     1116c <kernel_strncmp+0x15>
   11160:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11164:	74 06                	je     1116c <kernel_strncmp+0x15>
   11166:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1116a:	75 0f                	jne    1117b <kernel_strncmp+0x24>
        return -1;
   1116c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11171:	eb 62                	jmp    111d5 <kernel_strncmp+0x7e>
        s1++;
   11173:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11177:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   1117b:	8b 45 08             	mov    0x8(%ebp),%eax
   1117e:	0f b6 00             	movzbl (%eax),%eax
   11181:	84 c0                	test   %al,%al
   11183:	74 20                	je     111a5 <kernel_strncmp+0x4e>
   11185:	8b 45 0c             	mov    0xc(%ebp),%eax
   11188:	0f b6 00             	movzbl (%eax),%eax
   1118b:	84 c0                	test   %al,%al
   1118d:	74 16                	je     111a5 <kernel_strncmp+0x4e>
   1118f:	8b 45 08             	mov    0x8(%ebp),%eax
   11192:	0f b6 10             	movzbl (%eax),%edx
   11195:	8b 45 0c             	mov    0xc(%ebp),%eax
   11198:	0f b6 00             	movzbl (%eax),%eax
   1119b:	38 c2                	cmp    %al,%dl
   1119d:	75 06                	jne    111a5 <kernel_strncmp+0x4e>
   1119f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111a3:	75 ce                	jne    11173 <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   111a5:	8b 45 08             	mov    0x8(%ebp),%eax
   111a8:	0f b6 00             	movzbl (%eax),%eax
   111ab:	84 c0                	test   %al,%al
   111ad:	74 21                	je     111d0 <kernel_strncmp+0x79>
   111af:	8b 45 0c             	mov    0xc(%ebp),%eax
   111b2:	0f b6 00             	movzbl (%eax),%eax
   111b5:	84 c0                	test   %al,%al
   111b7:	74 17                	je     111d0 <kernel_strncmp+0x79>
   111b9:	8b 45 08             	mov    0x8(%ebp),%eax
   111bc:	0f b6 10             	movzbl (%eax),%edx
   111bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   111c2:	0f b6 00             	movzbl (%eax),%eax
   111c5:	38 c2                	cmp    %al,%dl
   111c7:	74 07                	je     111d0 <kernel_strncmp+0x79>
   111c9:	b8 01 00 00 00       	mov    $0x1,%eax
   111ce:	eb 05                	jmp    111d5 <kernel_strncmp+0x7e>
   111d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111d5:	5d                   	pop    %ebp
   111d6:	c3                   	ret

000111d7 <kernel_strlen>:
{
   111d7:	55                   	push   %ebp
   111d8:	89 e5                	mov    %esp,%ebp
   111da:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   111dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111e1:	75 07                	jne    111ea <kernel_strlen+0x13>
        return 0;
   111e3:	b8 00 00 00 00       	mov    $0x0,%eax
   111e8:	eb 26                	jmp    11210 <kernel_strlen+0x39>
    const char *c = str;
   111ea:	8b 45 08             	mov    0x8(%ebp),%eax
   111ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   111f0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   111f7:	eb 04                	jmp    111fd <kernel_strlen+0x26>
        len++;
   111f9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   111fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11200:	8d 50 01             	lea    0x1(%eax),%edx
   11203:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11206:	0f b6 00             	movzbl (%eax),%eax
   11209:	84 c0                	test   %al,%al
   1120b:	75 ec                	jne    111f9 <kernel_strlen+0x22>
    return len;
   1120d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11210:	c9                   	leave
   11211:	c3                   	ret

00011212 <kernel_memcpy>:
{
   11212:	55                   	push   %ebp
   11213:	89 e5                	mov    %esp,%ebp
   11215:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11218:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1121c:	74 40                	je     1125e <kernel_memcpy+0x4c>
   1121e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11222:	74 3a                	je     1125e <kernel_memcpy+0x4c>
   11224:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11228:	74 34                	je     1125e <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   1122a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1122d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   11230:	8b 45 08             	mov    0x8(%ebp),%eax
   11233:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11236:	eb 17                	jmp    1124f <kernel_memcpy+0x3d>
        *d++ = *s++;
   11238:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1123b:	8d 42 01             	lea    0x1(%edx),%eax
   1123e:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11241:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11244:	8d 48 01             	lea    0x1(%eax),%ecx
   11247:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1124a:	0f b6 12             	movzbl (%edx),%edx
   1124d:	88 10                	mov    %dl,(%eax)
    while (size--)
   1124f:	8b 45 10             	mov    0x10(%ebp),%eax
   11252:	8d 50 ff             	lea    -0x1(%eax),%edx
   11255:	89 55 10             	mov    %edx,0x10(%ebp)
   11258:	85 c0                	test   %eax,%eax
   1125a:	75 dc                	jne    11238 <kernel_memcpy+0x26>
   1125c:	eb 01                	jmp    1125f <kernel_memcpy+0x4d>
        return;
   1125e:	90                   	nop
}
   1125f:	c9                   	leave
   11260:	c3                   	ret

00011261 <kernel_memset>:
{
   11261:	55                   	push   %ebp
   11262:	89 e5                	mov    %esp,%ebp
   11264:	83 ec 14             	sub    $0x14,%esp
   11267:	8b 45 0c             	mov    0xc(%ebp),%eax
   1126a:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   1126d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11271:	74 2c                	je     1129f <kernel_memset+0x3e>
   11273:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11277:	74 26                	je     1129f <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   11279:	8b 45 08             	mov    0x8(%ebp),%eax
   1127c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   1127f:	eb 0f                	jmp    11290 <kernel_memset+0x2f>
        *d++ = v;
   11281:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11284:	8d 50 01             	lea    0x1(%eax),%edx
   11287:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1128a:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1128e:	88 10                	mov    %dl,(%eax)
    while (size--)
   11290:	8b 45 10             	mov    0x10(%ebp),%eax
   11293:	8d 50 ff             	lea    -0x1(%eax),%edx
   11296:	89 55 10             	mov    %edx,0x10(%ebp)
   11299:	85 c0                	test   %eax,%eax
   1129b:	75 e4                	jne    11281 <kernel_memset+0x20>
   1129d:	eb 01                	jmp    112a0 <kernel_memset+0x3f>
        return;
   1129f:	90                   	nop
}
   112a0:	c9                   	leave
   112a1:	c3                   	ret

000112a2 <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   112a2:	55                   	push   %ebp
   112a3:	89 e5                	mov    %esp,%ebp
   112a5:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   112a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112ac:	74 06                	je     112b4 <kernel_memcmp+0x12>
   112ae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112b2:	75 07                	jne    112bb <kernel_memcmp+0x19>
    {
        return 1;
   112b4:	b8 01 00 00 00       	mov    $0x1,%eax
   112b9:	eb 43                	jmp    112fe <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   112bb:	8b 45 08             	mov    0x8(%ebp),%eax
   112be:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   112c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   112c7:	eb 23                	jmp    112ec <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   112c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112cc:	8d 50 01             	lea    0x1(%eax),%edx
   112cf:	89 55 fc             	mov    %edx,-0x4(%ebp)
   112d2:	0f b6 08             	movzbl (%eax),%ecx
   112d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112d8:	8d 50 01             	lea    0x1(%eax),%edx
   112db:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112de:	0f b6 00             	movzbl (%eax),%eax
   112e1:	38 c1                	cmp    %al,%cl
   112e3:	74 07                	je     112ec <kernel_memcmp+0x4a>
        {
            return 1;
   112e5:	b8 01 00 00 00       	mov    $0x1,%eax
   112ea:	eb 12                	jmp    112fe <kernel_memcmp+0x5c>
    while (size--)
   112ec:	8b 45 10             	mov    0x10(%ebp),%eax
   112ef:	8d 50 ff             	lea    -0x1(%eax),%edx
   112f2:	89 55 10             	mov    %edx,0x10(%ebp)
   112f5:	85 c0                	test   %eax,%eax
   112f7:	75 d0                	jne    112c9 <kernel_memcmp+0x27>
        }
    }
    return 0;
   112f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   112fe:	c9                   	leave
   112ff:	c3                   	ret

00011300 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   11300:	55                   	push   %ebp
   11301:	89 e5                	mov    %esp,%ebp
   11303:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   11306:	8d 45 10             	lea    0x10(%ebp),%eax
   11309:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   1130c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1130f:	83 ec 04             	sub    $0x4,%esp
   11312:	50                   	push   %eax
   11313:	ff 75 0c             	push   0xc(%ebp)
   11316:	ff 75 08             	push   0x8(%ebp)
   11319:	e8 dd 00 00 00       	call   113fb <kernel_vsprintf>
   1131e:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11321:	90                   	nop
   11322:	c9                   	leave
   11323:	c3                   	ret

00011324 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   11324:	55                   	push   %ebp
   11325:	89 e5                	mov    %esp,%ebp
   11327:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   1132a:	8b 45 08             	mov    0x8(%ebp),%eax
   1132d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   11330:	8b 45 0c             	mov    0xc(%ebp),%eax
   11333:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   11336:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1133a:	74 1d                	je     11359 <kernel_itoa+0x35>
   1133c:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11340:	74 17                	je     11359 <kernel_itoa+0x35>
   11342:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11346:	74 11                	je     11359 <kernel_itoa+0x35>
   11348:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1134c:	74 0b                	je     11359 <kernel_itoa+0x35>
    {
        *p = '\0';
   1134e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11351:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11354:	e9 a0 00 00 00       	jmp    113f9 <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   11359:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1135d:	79 12                	jns    11371 <kernel_itoa+0x4d>
   1135f:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11363:	75 0c                	jne    11371 <kernel_itoa+0x4d>
    {
        *p++ = '-';
   11365:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11368:	8d 50 01             	lea    0x1(%eax),%edx
   1136b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1136e:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   11371:	8b 0d 58 1c 01 00    	mov    0x11c58,%ecx
   11377:	8b 45 0c             	mov    0xc(%ebp),%eax
   1137a:	99                   	cltd
   1137b:	f7 7d 10             	idivl  0x10(%ebp)
   1137e:	89 d0                	mov    %edx,%eax
   11380:	83 c0 0f             	add    $0xf,%eax
   11383:	01 c8                	add    %ecx,%eax
   11385:	0f b6 00             	movzbl (%eax),%eax
   11388:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   1138b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1138e:	8d 50 01             	lea    0x1(%eax),%edx
   11391:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11394:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   11398:	88 10                	mov    %dl,(%eax)
        num /= base;
   1139a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1139d:	99                   	cltd
   1139e:	f7 7d 10             	idivl  0x10(%ebp)
   113a1:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   113a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113a8:	75 c7                	jne    11371 <kernel_itoa+0x4d>
    *p-- = '\0';
   113aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113ad:	8d 50 ff             	lea    -0x1(%eax),%edx
   113b0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   113b3:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   113b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   113ba:	7f 08                	jg     113c4 <kernel_itoa+0xa0>
   113bc:	8b 45 08             	mov    0x8(%ebp),%eax
   113bf:	83 c0 01             	add    $0x1,%eax
   113c2:	eb 03                	jmp    113c7 <kernel_itoa+0xa3>
   113c4:	8b 45 08             	mov    0x8(%ebp),%eax
   113c7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   113ca:	eb 25                	jmp    113f1 <kernel_itoa+0xcd>
    {
        char ch = *start;
   113cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113cf:	0f b6 00             	movzbl (%eax),%eax
   113d2:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   113d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113d8:	0f b6 10             	movzbl (%eax),%edx
   113db:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113de:	88 10                	mov    %dl,(%eax)
        *p = ch;
   113e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113e3:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   113e7:	88 10                	mov    %dl,(%eax)

        p--;
   113e9:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   113ed:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   113f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113f4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   113f7:	72 d3                	jb     113cc <kernel_itoa+0xa8>
    }
}
   113f9:	c9                   	leave
   113fa:	c3                   	ret

000113fb <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   113fb:	55                   	push   %ebp
   113fc:	89 e5                	mov    %esp,%ebp
   113fe:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   11401:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   11408:	8b 45 08             	mov    0x8(%ebp),%eax
   1140b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   1140e:	e9 11 01 00 00       	jmp    11524 <kernel_vsprintf+0x129>
    {
        switch (state)
   11413:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11417:	74 0b                	je     11424 <kernel_vsprintf+0x29>
   11419:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   1141d:	74 2b                	je     1144a <kernel_vsprintf+0x4f>
   1141f:	e9 00 01 00 00       	jmp    11524 <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   11424:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11428:	75 0c                	jne    11436 <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   1142a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11431:	e9 ee 00 00 00       	jmp    11524 <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   11436:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11439:	8d 50 01             	lea    0x1(%eax),%edx
   1143c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1143f:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11443:	88 10                	mov    %dl,(%eax)
            }
            break;
   11445:	e9 da 00 00 00       	jmp    11524 <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   1144a:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1144e:	75 31                	jne    11481 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11450:	8b 45 10             	mov    0x10(%ebp),%eax
   11453:	8d 50 04             	lea    0x4(%eax),%edx
   11456:	89 55 10             	mov    %edx,0x10(%ebp)
   11459:	8b 00                	mov    (%eax),%eax
   1145b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   1145e:	6a 0a                	push   $0xa
   11460:	ff 75 e4             	push   -0x1c(%ebp)
   11463:	ff 75 f8             	push   -0x8(%ebp)
   11466:	e8 b9 fe ff ff       	call   11324 <kernel_itoa>
   1146b:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   1146e:	ff 75 f8             	push   -0x8(%ebp)
   11471:	e8 61 fd ff ff       	call   111d7 <kernel_strlen>
   11476:	83 c4 04             	add    $0x4,%esp
   11479:	01 45 f8             	add    %eax,-0x8(%ebp)
   1147c:	e9 9b 00 00 00       	jmp    1151c <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   11481:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11485:	75 2e                	jne    114b5 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   11487:	8b 45 10             	mov    0x10(%ebp),%eax
   1148a:	8d 50 04             	lea    0x4(%eax),%edx
   1148d:	89 55 10             	mov    %edx,0x10(%ebp)
   11490:	8b 00                	mov    (%eax),%eax
   11492:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   11495:	6a 10                	push   $0x10
   11497:	ff 75 e8             	push   -0x18(%ebp)
   1149a:	ff 75 f8             	push   -0x8(%ebp)
   1149d:	e8 82 fe ff ff       	call   11324 <kernel_itoa>
   114a2:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   114a5:	ff 75 f8             	push   -0x8(%ebp)
   114a8:	e8 2a fd ff ff       	call   111d7 <kernel_strlen>
   114ad:	83 c4 04             	add    $0x4,%esp
   114b0:	01 45 f8             	add    %eax,-0x8(%ebp)
   114b3:	eb 67                	jmp    1151c <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   114b5:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   114b9:	75 19                	jne    114d4 <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   114bb:	8b 45 10             	mov    0x10(%ebp),%eax
   114be:	8d 50 04             	lea    0x4(%eax),%edx
   114c1:	89 55 10             	mov    %edx,0x10(%ebp)
   114c4:	8b 00                	mov    (%eax),%eax
   114c6:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   114c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114cc:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   114d0:	88 10                	mov    %dl,(%eax)
   114d2:	eb 48                	jmp    1151c <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   114d4:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   114d8:	75 42                	jne    1151c <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   114da:	8b 45 10             	mov    0x10(%ebp),%eax
   114dd:	8d 50 04             	lea    0x4(%eax),%edx
   114e0:	89 55 10             	mov    %edx,0x10(%ebp)
   114e3:	8b 00                	mov    (%eax),%eax
   114e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   114e8:	ff 75 f4             	push   -0xc(%ebp)
   114eb:	e8 e7 fc ff ff       	call   111d7 <kernel_strlen>
   114f0:	83 c4 04             	add    $0x4,%esp
   114f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   114f6:	eb 17                	jmp    1150f <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   114f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114fb:	8d 42 01             	lea    0x1(%edx),%eax
   114fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11501:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11504:	8d 48 01             	lea    0x1(%eax),%ecx
   11507:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1150a:	0f b6 12             	movzbl (%edx),%edx
   1150d:	88 10                	mov    %dl,(%eax)
                while (len--)
   1150f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11512:	8d 50 ff             	lea    -0x1(%eax),%edx
   11515:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11518:	85 c0                	test   %eax,%eax
   1151a:	75 dc                	jne    114f8 <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   1151c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11523:	90                   	nop
    while ((ch = *fmt++))
   11524:	8b 45 0c             	mov    0xc(%ebp),%eax
   11527:	8d 50 01             	lea    0x1(%eax),%edx
   1152a:	89 55 0c             	mov    %edx,0xc(%ebp)
   1152d:	0f b6 00             	movzbl (%eax),%eax
   11530:	88 45 ef             	mov    %al,-0x11(%ebp)
   11533:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11537:	0f 85 d6 fe ff ff    	jne    11413 <kernel_vsprintf+0x18>
        }
    }
}
   1153d:	90                   	nop
   1153e:	90                   	nop
   1153f:	c9                   	leave
   11540:	c3                   	ret

00011541 <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   11541:	55                   	push   %ebp
   11542:	89 e5                	mov    %esp,%ebp
   11544:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   11547:	83 ec 08             	sub    $0x8,%esp
   1154a:	ff 75 14             	push   0x14(%ebp)
   1154d:	68 0c 1c 01 00       	push   $0x11c0c
   11552:	e8 c6 02 00 00       	call   1181d <log_prinf>
   11557:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   1155a:	ff 75 10             	push   0x10(%ebp)
   1155d:	ff 75 0c             	push   0xc(%ebp)
   11560:	ff 75 08             	push   0x8(%ebp)
   11563:	68 1e 1c 01 00       	push   $0x11c1e
   11568:	e8 b0 02 00 00       	call   1181d <log_prinf>
   1156d:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   11570:	e8 24 fb ff ff       	call   11099 <hlt>
   11575:	eb f9                	jmp    11570 <pannic+0x2f>

00011577 <list_is_empty>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
    // 表项为空，返回空
   11577:	55                   	push   %ebp
   11578:	89 e5                	mov    %esp,%ebp
    if (list_is_empty(list)) {
   1157a:	8b 45 08             	mov    0x8(%ebp),%eax
   1157d:	8b 40 08             	mov    0x8(%eax),%eax
   11580:	85 c0                	test   %eax,%eax
   11582:	0f 94 c0             	sete   %al
   11585:	0f b6 c0             	movzbl %al,%eax
        return (list_node_t*)0;
   11588:	5d                   	pop    %ebp
   11589:	c3                   	ret

0001158a <list_init>:
void list_init(list_t *list) {
   1158a:	55                   	push   %ebp
   1158b:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   1158d:	8b 45 08             	mov    0x8(%ebp),%eax
   11590:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11597:	8b 45 08             	mov    0x8(%ebp),%eax
   1159a:	8b 50 04             	mov    0x4(%eax),%edx
   1159d:	8b 45 08             	mov    0x8(%ebp),%eax
   115a0:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   115a2:	8b 45 08             	mov    0x8(%ebp),%eax
   115a5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   115ac:	90                   	nop
   115ad:	5d                   	pop    %ebp
   115ae:	c3                   	ret

000115af <list_insert_first>:
void list_insert_first(list_t *list, list_node_t *node) {
   115af:	55                   	push   %ebp
   115b0:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   115b2:	8b 45 08             	mov    0x8(%ebp),%eax
   115b5:	8b 10                	mov    (%eax),%edx
   115b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   115ba:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   115bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   115c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if (list_is_empty(list)) {
   115c6:	ff 75 08             	push   0x8(%ebp)
   115c9:	e8 a9 ff ff ff       	call   11577 <list_is_empty>
   115ce:	83 c4 04             	add    $0x4,%esp
   115d1:	85 c0                	test   %eax,%eax
   115d3:	74 15                	je     115ea <list_insert_first+0x3b>
        list->last = list->first = node;
   115d5:	8b 45 08             	mov    0x8(%ebp),%eax
   115d8:	8b 55 0c             	mov    0xc(%ebp),%edx
   115db:	89 10                	mov    %edx,(%eax)
   115dd:	8b 45 08             	mov    0x8(%ebp),%eax
   115e0:	8b 10                	mov    (%eax),%edx
   115e2:	8b 45 08             	mov    0x8(%ebp),%eax
   115e5:	89 50 04             	mov    %edx,0x4(%eax)
   115e8:	eb 12                	jmp    115fc <list_insert_first+0x4d>
        list->first->pre = node;
   115ea:	8b 45 08             	mov    0x8(%ebp),%eax
   115ed:	8b 00                	mov    (%eax),%eax
   115ef:	8b 55 0c             	mov    0xc(%ebp),%edx
   115f2:	89 10                	mov    %edx,(%eax)
        list->first = node;
   115f4:	8b 45 08             	mov    0x8(%ebp),%eax
   115f7:	8b 55 0c             	mov    0xc(%ebp),%edx
   115fa:	89 10                	mov    %edx,(%eax)
    list->count++;
   115fc:	8b 45 08             	mov    0x8(%ebp),%eax
   115ff:	8b 40 08             	mov    0x8(%eax),%eax
   11602:	8d 50 01             	lea    0x1(%eax),%edx
   11605:	8b 45 08             	mov    0x8(%ebp),%eax
   11608:	89 50 08             	mov    %edx,0x8(%eax)
}
   1160b:	90                   	nop
   1160c:	c9                   	leave
   1160d:	c3                   	ret

0001160e <list_insert_last>:
void list_insert_last(list_t *list, list_node_t *node) {
   1160e:	55                   	push   %ebp
   1160f:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11611:	8b 45 08             	mov    0x8(%ebp),%eax
   11614:	8b 50 04             	mov    0x4(%eax),%edx
   11617:	8b 45 0c             	mov    0xc(%ebp),%eax
   1161a:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   1161c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1161f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if (list_is_empty(list)) {
   11626:	ff 75 08             	push   0x8(%ebp)
   11629:	e8 49 ff ff ff       	call   11577 <list_is_empty>
   1162e:	83 c4 04             	add    $0x4,%esp
   11631:	85 c0                	test   %eax,%eax
   11633:	74 16                	je     1164b <list_insert_last+0x3d>
        list->first = list->last = node;
   11635:	8b 45 08             	mov    0x8(%ebp),%eax
   11638:	8b 55 0c             	mov    0xc(%ebp),%edx
   1163b:	89 50 04             	mov    %edx,0x4(%eax)
   1163e:	8b 45 08             	mov    0x8(%ebp),%eax
   11641:	8b 50 04             	mov    0x4(%eax),%edx
   11644:	8b 45 08             	mov    0x8(%ebp),%eax
   11647:	89 10                	mov    %edx,(%eax)
   11649:	eb 15                	jmp    11660 <list_insert_last+0x52>
        list->last->next = node;
   1164b:	8b 45 08             	mov    0x8(%ebp),%eax
   1164e:	8b 40 04             	mov    0x4(%eax),%eax
   11651:	8b 55 0c             	mov    0xc(%ebp),%edx
   11654:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11657:	8b 45 08             	mov    0x8(%ebp),%eax
   1165a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1165d:	89 50 04             	mov    %edx,0x4(%eax)
    list->count++;
   11660:	8b 45 08             	mov    0x8(%ebp),%eax
   11663:	8b 40 08             	mov    0x8(%eax),%eax
   11666:	8d 50 01             	lea    0x1(%eax),%edx
   11669:	8b 45 08             	mov    0x8(%ebp),%eax
   1166c:	89 50 08             	mov    %edx,0x8(%eax)
}
   1166f:	90                   	nop
   11670:	c9                   	leave
   11671:	c3                   	ret

00011672 <list_remove_first>:
list_node_t* list_remove_first(list_t *list) {
   11672:	55                   	push   %ebp
   11673:	89 e5                	mov    %esp,%ebp
   11675:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   11678:	ff 75 08             	push   0x8(%ebp)
   1167b:	e8 f7 fe ff ff       	call   11577 <list_is_empty>
   11680:	83 c4 04             	add    $0x4,%esp
   11683:	85 c0                	test   %eax,%eax
   11685:	74 07                	je     1168e <list_remove_first+0x1c>
        return (list_node_t*)0;
   11687:	b8 00 00 00 00       	mov    $0x0,%eax
   1168c:	eb 5a                	jmp    116e8 <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   1168e:	8b 45 08             	mov    0x8(%ebp),%eax
   11691:	8b 00                	mov    (%eax),%eax
   11693:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   11696:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11699:	8b 50 04             	mov    0x4(%eax),%edx
   1169c:	8b 45 08             	mov    0x8(%ebp),%eax
   1169f:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   116a1:	8b 45 08             	mov    0x8(%ebp),%eax
   116a4:	8b 00                	mov    (%eax),%eax
   116a6:	85 c0                	test   %eax,%eax
   116a8:	75 0c                	jne    116b6 <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   116aa:	8b 45 08             	mov    0x8(%ebp),%eax
   116ad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116b4:	eb 0c                	jmp    116c2 <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   116b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116b9:	8b 40 04             	mov    0x4(%eax),%eax
   116bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   116c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   116cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116ce:	8b 10                	mov    (%eax),%edx
   116d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116d3:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   116d6:	8b 45 08             	mov    0x8(%ebp),%eax
   116d9:	8b 40 08             	mov    0x8(%eax),%eax
   116dc:	8d 50 ff             	lea    -0x1(%eax),%edx
   116df:	8b 45 08             	mov    0x8(%ebp),%eax
   116e2:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   116e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   116e8:	c9                   	leave
   116e9:	c3                   	ret

000116ea <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   116ea:	55                   	push   %ebp
   116eb:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   116ed:	8b 45 08             	mov    0x8(%ebp),%eax
   116f0:	8b 00                	mov    (%eax),%eax
   116f2:	39 45 0c             	cmp    %eax,0xc(%ebp)
   116f5:	75 0b                	jne    11702 <list_remove+0x18>
        list->first = remove_node->next;
   116f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   116fa:	8b 50 04             	mov    0x4(%eax),%edx
   116fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11700:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   11702:	8b 45 08             	mov    0x8(%ebp),%eax
   11705:	8b 40 04             	mov    0x4(%eax),%eax
   11708:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1170b:	75 0b                	jne    11718 <list_remove+0x2e>
        list->last = remove_node->pre;
   1170d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11710:	8b 10                	mov    (%eax),%edx
   11712:	8b 45 08             	mov    0x8(%ebp),%eax
   11715:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   11718:	8b 45 0c             	mov    0xc(%ebp),%eax
   1171b:	8b 00                	mov    (%eax),%eax
   1171d:	85 c0                	test   %eax,%eax
   1171f:	74 0e                	je     1172f <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   11721:	8b 45 0c             	mov    0xc(%ebp),%eax
   11724:	8b 00                	mov    (%eax),%eax
   11726:	8b 55 0c             	mov    0xc(%ebp),%edx
   11729:	8b 52 04             	mov    0x4(%edx),%edx
   1172c:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   1172f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11732:	8b 40 04             	mov    0x4(%eax),%eax
   11735:	85 c0                	test   %eax,%eax
   11737:	74 0d                	je     11746 <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   11739:	8b 45 0c             	mov    0xc(%ebp),%eax
   1173c:	8b 40 04             	mov    0x4(%eax),%eax
   1173f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11742:	8b 12                	mov    (%edx),%edx
   11744:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   11746:	8b 45 0c             	mov    0xc(%ebp),%eax
   11749:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11750:	8b 45 0c             	mov    0xc(%ebp),%eax
   11753:	8b 50 04             	mov    0x4(%eax),%edx
   11756:	8b 45 0c             	mov    0xc(%ebp),%eax
   11759:	89 10                	mov    %edx,(%eax)
    --list->count;
   1175b:	8b 45 08             	mov    0x8(%ebp),%eax
   1175e:	8b 40 08             	mov    0x8(%eax),%eax
   11761:	8d 50 ff             	lea    -0x1(%eax),%edx
   11764:	8b 45 08             	mov    0x8(%ebp),%eax
   11767:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1176a:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   1176d:	5d                   	pop    %ebp
   1176e:	c3                   	ret

0001176f <inb>:
    outb(COM1_PORT + 3, 0x80);
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
    outb(COM1_PORT + 4, 0x0F);
   1176f:	55                   	push   %ebp
   11770:	89 e5                	mov    %esp,%ebp
   11772:	83 ec 14             	sub    $0x14,%esp
   11775:	8b 45 08             	mov    0x8(%ebp),%eax
   11778:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
}

   1177c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11780:	89 c2                	mov    %eax,%edx
   11782:	ec                   	in     (%dx),%al
   11783:	88 45 ff             	mov    %al,-0x1(%ebp)
void log_prinf(const char *fmt, ...)
{
    char str_buf[128];
   11786:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    va_list args;
   1178a:	c9                   	leave
   1178b:	c3                   	ret

0001178c <outb>:

    const char *p = str_buf;
    while (*p != '\0')
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
            ;
   1178c:	55                   	push   %ebp
   1178d:	89 e5                	mov    %esp,%ebp
   1178f:	83 ec 08             	sub    $0x8,%esp
   11792:	8b 55 08             	mov    0x8(%ebp),%edx
   11795:	8b 45 0c             	mov    0xc(%ebp),%eax
   11798:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1179c:	88 45 f8             	mov    %al,-0x8(%ebp)
        outb(COM1_PORT, *p++);
   1179f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   117a3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   117a7:	ee                   	out    %al,(%dx)
    }
   117a8:	90                   	nop
   117a9:	c9                   	leave
   117aa:	c3                   	ret

000117ab <init_log>:
{
   117ab:	55                   	push   %ebp
   117ac:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   117ae:	6a 00                	push   $0x0
   117b0:	68 f9 03 00 00       	push   $0x3f9
   117b5:	e8 d2 ff ff ff       	call   1178c <outb>
   117ba:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   117bd:	68 80 00 00 00       	push   $0x80
   117c2:	68 fb 03 00 00       	push   $0x3fb
   117c7:	e8 c0 ff ff ff       	call   1178c <outb>
   117cc:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   117cf:	6a 03                	push   $0x3
   117d1:	68 f8 03 00 00       	push   $0x3f8
   117d6:	e8 b1 ff ff ff       	call   1178c <outb>
   117db:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   117de:	6a 00                	push   $0x0
   117e0:	68 f9 03 00 00       	push   $0x3f9
   117e5:	e8 a2 ff ff ff       	call   1178c <outb>
   117ea:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   117ed:	6a 03                	push   $0x3
   117ef:	68 fb 03 00 00       	push   $0x3fb
   117f4:	e8 93 ff ff ff       	call   1178c <outb>
   117f9:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x07);
   117fc:	6a 07                	push   $0x7
   117fe:	68 fa 03 00 00       	push   $0x3fa
   11803:	e8 84 ff ff ff       	call   1178c <outb>
   11808:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   1180b:	6a 0f                	push   $0xf
   1180d:	68 fc 03 00 00       	push   $0x3fc
   11812:	e8 75 ff ff ff       	call   1178c <outb>
   11817:	83 c4 08             	add    $0x8,%esp
}
   1181a:	90                   	nop
   1181b:	c9                   	leave
   1181c:	c3                   	ret

0001181d <log_prinf>:
{
   1181d:	55                   	push   %ebp
   1181e:	89 e5                	mov    %esp,%ebp
   11820:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   11826:	83 ec 04             	sub    $0x4,%esp
   11829:	68 80 00 00 00       	push   $0x80
   1182e:	6a 00                	push   $0x0
   11830:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11836:	50                   	push   %eax
   11837:	e8 25 fa ff ff       	call   11261 <kernel_memset>
   1183c:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   1183f:	8d 45 0c             	lea    0xc(%ebp),%eax
   11842:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   11848:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1184e:	83 ec 04             	sub    $0x4,%esp
   11851:	50                   	push   %eax
   11852:	ff 75 08             	push   0x8(%ebp)
   11855:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1185b:	50                   	push   %eax
   1185c:	e8 9a fb ff ff       	call   113fb <kernel_vsprintf>
   11861:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   11864:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1186a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   1186d:	eb 3b                	jmp    118aa <log_prinf+0x8d>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   1186f:	90                   	nop
   11870:	83 ec 0c             	sub    $0xc,%esp
   11873:	68 fd 03 00 00       	push   $0x3fd
   11878:	e8 f2 fe ff ff       	call   1176f <inb>
   1187d:	83 c4 10             	add    $0x10,%esp
   11880:	0f b6 c0             	movzbl %al,%eax
   11883:	83 e0 40             	and    $0x40,%eax
   11886:	85 c0                	test   %eax,%eax
   11888:	74 e6                	je     11870 <log_prinf+0x53>
        outb(COM1_PORT, *p++);
   1188a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1188d:	8d 50 01             	lea    0x1(%eax),%edx
   11890:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11893:	0f b6 00             	movzbl (%eax),%eax
   11896:	0f b6 c0             	movzbl %al,%eax
   11899:	83 ec 08             	sub    $0x8,%esp
   1189c:	50                   	push   %eax
   1189d:	68 f8 03 00 00       	push   $0x3f8
   118a2:	e8 e5 fe ff ff       	call   1178c <outb>
   118a7:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   118aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118ad:	0f b6 00             	movzbl (%eax),%eax
   118b0:	84 c0                	test   %al,%al
   118b2:	75 bb                	jne    1186f <log_prinf+0x52>

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   118b4:	83 ec 08             	sub    $0x8,%esp
   118b7:	6a 0d                	push   $0xd
   118b9:	68 f8 03 00 00       	push   $0x3f8
   118be:	e8 c9 fe ff ff       	call   1178c <outb>
   118c3:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   118c6:	83 ec 08             	sub    $0x8,%esp
   118c9:	6a 0a                	push   $0xa
   118cb:	68 f8 03 00 00       	push   $0x3f8
   118d0:	e8 b7 fe ff ff       	call   1178c <outb>
   118d5:	83 c4 10             	add    $0x10,%esp
}
   118d8:	90                   	nop
   118d9:	c9                   	leave
   118da:	c3                   	ret
