
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000016f4 memsz 0x00004310 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001395  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000358  00011398  00011398  00002398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  000116f0  000116f0  000026f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002c10  00011700  00011700  000026f4  2**5
                  ALLOC
  4 .debug_line   00000a10  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000580  00000000  00000000  00003104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000182d  00000000  00000000  00003684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000009b4  00000000  00000000  00004eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000100  00000000  00000000  00005868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    000009a6  00000000  00000000  00005968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  0000630e  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000008c0  00000000  00000000  00006320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a8 l     F .text	0000000a tss_init
000113fc l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 cpu.c
000102f2 l     F .text	00000028 lgdt
00011700 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
0001045c l     F .text	0000001d inb
00010479 l     F .text	0000001f outb
00010498 l     F .text	00000007 cli
0001049f l     F .text	00000007 sti
000104a6 l     F .text	00000028 lidt
000104ce l     F .text	00000007 hlt
00011f00 l     O .bss	00000400 idt_table
000104d5 l     F .text	000000d9 dump_core_regs
000105ae l     F .text	0000003e do_default_handler
0001081c l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010be5 l     F .text	0000001f outb
00012300 l     O .bss	00000004 sys_tick
00010c27 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 klib.c
00010d4b l     F .text	00000007 hlt
000116f0 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 log.c
00011229 l     F .text	0000001d inb
00011246 l     F .text	0000001f outb
00010ec4 g     F .text	0000004f kernel_memcpy
00010baf g     F .text	0000000b irq_enable_global
00010720 g     F .text	0000001c do_handler_segment_not_present
00010f13 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010451 g     F .text	0000000b cpu_init
00010ce5 g     F .text	00000066 init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00010d52 g     F .text	00000047 kernel_strcpy
00010a92 g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
00010678 g     F .text	0000001c do_handler_overflow
000107ac g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010758 g     F .text	0000001c do_handler_general_protection
00010608 g     F .text	0000001c do_handler_divider
000106e8 g     F .text	0000001c do_handler_double_fault
00010cbc g     F .text	00000029 init_task_entry
00010774 g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010bba g     F .text	0000002b pic_send_eoi
00011265 g     F .text	00000072 init_log
000105ec g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00010800 g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
00010289 g       .text	00000000 exception_handler_time
00012310 g     O .bss	00002000 stack
000100e5 g       .text	00000000 exception_handler_bound_range
000106b0 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010790 g     F .text	0000001c do_handler_fpu_error
000107c8 g     F .text	0000001c do_handler_machine_check
00010624 g     F .text	0000001c do_handler_Debug
00010640 g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00010d99 g     F .text	00000070 kernel_strncpy
00010ba4 g     F .text	0000000b irq_disable_global
00010c9f g     F .text	0000001d kernel_init
00010000 g       .text	00000000 _start
000110ad g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
00010704 g     F .text	0000001c do_handler_invalid_tss
00010a5d g     F .text	00000035 irq_install
000112d7 g     F .text	000000be log_prinf
0001039d g     F .text	0000006d init_gdt
00010b1d g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
000106cc g     F .text	0000001c do_handler_device_unavailable
00010f54 g     F .text	0000005e kernel_memcmp
0001002b g       .text	00000000 exception_handler_unknow
000107e4 g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
000101f0 g       .text	00000000 exception_handler_fpu_error
000108af g     F .text	000001ae irq_init
00010e89 g     F .text	0000003b kernel_strlen
0001031a g     F .text	00000083 segment_desc_set
00010694 g     F .text	0000001c do_handler_bound_range
00010e09 g     F .text	00000080 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
00010c87 g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
00010069 g       .text	00000000 exception_handler_Debug
000111f3 g     F .text	00000036 pannic
0001073c g     F .text	0000001c do_handler_stack_segment_fault
0001065c g     F .text	0000001c do_handler_breakpoint
000102b2 g     F .text	00000040 task_init
00010fb2 g     F .text	00000024 kernel_sprintf
00010fd6 g     F .text	000000d7 kernel_itoa
0001040a g     F .text	00000047 gate_desc_set
00010c04 g     F .text	00000023 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 93 0c 00 00       	call   10c9f <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc 10 43 01 00       	mov    $0x14310,%esp
    jmp init_main
   10026:	e9 ba 0c 00 00       	jmp    10ce5 <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 b0 05 00 00       	call   105ec <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 ad 05 00 00       	call   10608 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 aa 05 00 00       	call   10624 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 a7 05 00 00       	call   10640 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 a4 05 00 00       	call   1065c <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 a1 05 00 00       	call   10678 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 9e 05 00 00       	call   10694 <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 9b 05 00 00       	call   106b0 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 98 05 00 00       	call   106cc <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 97 05 00 00       	call   106e8 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 96 05 00 00       	call   10704 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 95 05 00 00       	call   10720 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 94 05 00 00       	call   1073c <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 93 05 00 00       	call   10758 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 92 05 00 00       	call   10774 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 8f 05 00 00       	call   10790 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 8e 05 00 00       	call   107ac <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 8b 05 00 00       	call   107c8 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 88 05 00 00       	call   107e4 <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 85 05 00 00       	call   10800 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 6a 09 00 00       	call   10c04 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <tss_init>:
#include "core/task.h"
#include "tools/klib.h"

static int tss_init(task_t *task, uint32_t entry, uint32_t esp)
{
   102a8:	55                   	push   %ebp
   102a9:	89 e5                	mov    %esp,%ebp
    return 0;
   102ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
   102b0:	5d                   	pop    %ebp
   102b1:	c3                   	ret

000102b2 <task_init>:

int task_init(task_t *task, uint32_t entry, uint32_t esp)
{
   102b2:	55                   	push   %ebp
   102b3:	89 e5                	mov    %esp,%ebp
   102b5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t *)0);
   102b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   102bc:	75 19                	jne    102d7 <task_init+0x25>
   102be:	68 98 13 01 00       	push   $0x11398
   102c3:	68 fc 13 01 00       	push   $0x113fc
   102c8:	6a 0b                	push   $0xb
   102ca:	68 ac 13 01 00       	push   $0x113ac
   102cf:	e8 1f 0f 00 00       	call   111f3 <pannic>
   102d4:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   102d7:	83 ec 04             	sub    $0x4,%esp
   102da:	ff 75 10             	push   0x10(%ebp)
   102dd:	ff 75 0c             	push   0xc(%ebp)
   102e0:	ff 75 08             	push   0x8(%ebp)
   102e3:	e8 c0 ff ff ff       	call   102a8 <tss_init>
   102e8:	83 c4 10             	add    $0x10,%esp
    return 0;
   102eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   102f0:	c9                   	leave
   102f1:	c3                   	ret

000102f2 <lgdt>:
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}
void cpu_init(void)
{
    // 初始化gdt表
    init_gdt();
   102f2:	55                   	push   %ebp
   102f3:	89 e5                	mov    %esp,%ebp
   102f5:	83 ec 10             	sub    $0x10,%esp
   102f8:	8b 45 08             	mov    0x8(%ebp),%eax
   102fb:	c1 e8 10             	shr    $0x10,%eax
   102fe:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   10302:	8b 45 08             	mov    0x8(%ebp),%eax
   10305:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10309:	8b 45 0c             	mov    0xc(%ebp),%eax
   1030c:	83 e8 01             	sub    $0x1,%eax
   1030f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   10313:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
   10317:	90                   	nop
   10318:	c9                   	leave
   10319:	c3                   	ret

0001031a <segment_desc_set>:
{
   1031a:	55                   	push   %ebp
   1031b:	89 e5                	mov    %esp,%ebp
   1031d:	83 ec 14             	sub    $0x14,%esp
   10320:	8b 45 14             	mov    0x14(%ebp),%eax
   10323:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   10327:	8b 45 08             	mov    0x8(%ebp),%eax
   1032a:	83 e0 f8             	and    $0xfffffff8,%eax
   1032d:	05 00 17 01 00       	add    $0x11700,%eax
   10332:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   10335:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1033c:	76 0f                	jbe    1034d <segment_desc_set+0x33>
        attr |= SEG_G;
   1033e:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10344:	8b 45 10             	mov    0x10(%ebp),%eax
   10347:	c1 e8 0c             	shr    $0xc,%eax
   1034a:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   1034d:	8b 45 10             	mov    0x10(%ebp),%eax
   10350:	89 c2                	mov    %eax,%edx
   10352:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10355:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   10358:	8b 45 0c             	mov    0xc(%ebp),%eax
   1035b:	89 c2                	mov    %eax,%edx
   1035d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10360:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10364:	8b 45 0c             	mov    0xc(%ebp),%eax
   10367:	c1 e8 10             	shr    $0x10,%eax
   1036a:	89 c2                	mov    %eax,%edx
   1036c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1036f:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   10372:	8b 45 10             	mov    0x10(%ebp),%eax
   10375:	c1 e8 10             	shr    $0x10,%eax
   10378:	c1 e0 08             	shl    $0x8,%eax
   1037b:	66 25 00 0f          	and    $0xf00,%ax
   1037f:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10383:	89 c2                	mov    %eax,%edx
   10385:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10388:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   1038c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1038f:	c1 e8 18             	shr    $0x18,%eax
   10392:	89 c2                	mov    %eax,%edx
   10394:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10397:	88 50 07             	mov    %dl,0x7(%eax)
}
   1039a:	90                   	nop
   1039b:	c9                   	leave
   1039c:	c3                   	ret

0001039d <init_gdt>:
{
   1039d:	55                   	push   %ebp
   1039e:	89 e5                	mov    %esp,%ebp
   103a0:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   103a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   103aa:	eb 19                	jmp    103c5 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   103ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   103af:	c1 e0 03             	shl    $0x3,%eax
   103b2:	6a 00                	push   $0x0
   103b4:	6a 00                	push   $0x0
   103b6:	6a 00                	push   $0x0
   103b8:	50                   	push   %eax
   103b9:	e8 5c ff ff ff       	call   1031a <segment_desc_set>
   103be:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   103c1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   103c5:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   103cc:	7e de                	jle    103ac <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   103ce:	68 92 40 00 00       	push   $0x4092
   103d3:	6a ff                	push   $0xffffffff
   103d5:	6a 00                	push   $0x0
   103d7:	6a 10                	push   $0x10
   103d9:	e8 3c ff ff ff       	call   1031a <segment_desc_set>
   103de:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   103e1:	68 9a 40 00 00       	push   $0x409a
   103e6:	6a ff                	push   $0xffffffff
   103e8:	6a 00                	push   $0x0
   103ea:	6a 08                	push   $0x8
   103ec:	e8 29 ff ff ff       	call   1031a <segment_desc_set>
   103f1:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   103f4:	b8 00 17 01 00       	mov    $0x11700,%eax
   103f9:	68 00 08 00 00       	push   $0x800
   103fe:	50                   	push   %eax
   103ff:	e8 ee fe ff ff       	call   102f2 <lgdt>
   10404:	83 c4 08             	add    $0x8,%esp
}
   10407:	90                   	nop
   10408:	c9                   	leave
   10409:	c3                   	ret

0001040a <gate_desc_set>:
{
   1040a:	55                   	push   %ebp
   1040b:	89 e5                	mov    %esp,%ebp
   1040d:	83 ec 08             	sub    $0x8,%esp
   10410:	8b 55 0c             	mov    0xc(%ebp),%edx
   10413:	8b 45 14             	mov    0x14(%ebp),%eax
   10416:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1041a:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   1041e:	8b 45 10             	mov    0x10(%ebp),%eax
   10421:	89 c2                	mov    %eax,%edx
   10423:	8b 45 08             	mov    0x8(%ebp),%eax
   10426:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10429:	8b 45 08             	mov    0x8(%ebp),%eax
   1042c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10430:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10434:	8b 45 08             	mov    0x8(%ebp),%eax
   10437:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1043b:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   1043f:	8b 45 10             	mov    0x10(%ebp),%eax
   10442:	c1 e8 10             	shr    $0x10,%eax
   10445:	89 c2                	mov    %eax,%edx
   10447:	8b 45 08             	mov    0x8(%ebp),%eax
   1044a:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   1044e:	90                   	nop
   1044f:	c9                   	leave
   10450:	c3                   	ret

00010451 <cpu_init>:
{
   10451:	55                   	push   %ebp
   10452:	89 e5                	mov    %esp,%ebp
    init_gdt();
   10454:	e8 44 ff ff ff       	call   1039d <init_gdt>
   10459:	90                   	nop
   1045a:	5d                   	pop    %ebp
   1045b:	c3                   	ret

0001045c <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   1045c:	55                   	push   %ebp
   1045d:	89 e5                	mov    %esp,%ebp
   1045f:	83 ec 14             	sub    $0x14,%esp
   10462:	8b 45 08             	mov    0x8(%ebp),%eax
   10465:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   10469:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1046d:	89 c2                	mov    %eax,%edx
   1046f:	ec                   	in     (%dx),%al
   10470:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   10473:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   10477:	c9                   	leave
   10478:	c3                   	ret

00010479 <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   10479:	55                   	push   %ebp
   1047a:	89 e5                	mov    %esp,%ebp
   1047c:	83 ec 08             	sub    $0x8,%esp
   1047f:	8b 55 08             	mov    0x8(%ebp),%edx
   10482:	8b 45 0c             	mov    0xc(%ebp),%eax
   10485:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10489:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   1048c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10490:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10494:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   10495:	90                   	nop
   10496:	c9                   	leave
   10497:	c3                   	ret

00010498 <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   10498:	55                   	push   %ebp
   10499:	89 e5                	mov    %esp,%ebp
        hlt();
   1049b:	fa                   	cli
    }
   1049c:	90                   	nop
   1049d:	5d                   	pop    %ebp
   1049e:	c3                   	ret

0001049f <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   1049f:	55                   	push   %ebp
   104a0:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   104a2:	fb                   	sti
}
   104a3:	90                   	nop
   104a4:	5d                   	pop    %ebp
   104a5:	c3                   	ret

000104a6 <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   104a6:	55                   	push   %ebp
   104a7:	89 e5                	mov    %esp,%ebp
   104a9:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   104ac:	8b 45 08             	mov    0x8(%ebp),%eax
   104af:	c1 e8 10             	shr    $0x10,%eax
   104b2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   104b6:	8b 45 08             	mov    0x8(%ebp),%eax
   104b9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   104bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   104c0:	83 e8 01             	sub    $0x1,%eax
   104c3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   104c7:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   104cb:	90                   	nop
   104cc:	c9                   	leave
   104cd:	c3                   	ret

000104ce <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   104ce:	55                   	push   %ebp
   104cf:	89 e5                	mov    %esp,%ebp
}
   104d1:	f4                   	hlt

   104d2:	90                   	nop
   104d3:	5d                   	pop    %ebp
   104d4:	c3                   	ret

000104d5 <dump_core_regs>:
{
   104d5:	55                   	push   %ebp
   104d6:	89 e5                	mov    %esp,%ebp
   104d8:	57                   	push   %edi
   104d9:	56                   	push   %esi
   104da:	53                   	push   %ebx
   104db:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   104de:	8b 45 08             	mov    0x8(%ebp),%eax
   104e1:	8b 50 34             	mov    0x34(%eax),%edx
   104e4:	8b 45 08             	mov    0x8(%ebp),%eax
   104e7:	8b 40 30             	mov    0x30(%eax),%eax
   104ea:	83 ec 04             	sub    $0x4,%esp
   104ed:	52                   	push   %edx
   104ee:	50                   	push   %eax
   104ef:	68 08 14 01 00       	push   $0x11408
   104f4:	e8 de 0d 00 00       	call   112d7 <log_prinf>
   104f9:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   104fc:	8b 45 08             	mov    0x8(%ebp),%eax
   104ff:	8b 38                	mov    (%eax),%edi
   10501:	8b 45 08             	mov    0x8(%ebp),%eax
   10504:	8b 70 04             	mov    0x4(%eax),%esi
   10507:	8b 45 08             	mov    0x8(%ebp),%eax
   1050a:	8b 58 0c             	mov    0xc(%eax),%ebx
   1050d:	8b 45 08             	mov    0x8(%ebp),%eax
   10510:	8b 48 08             	mov    0x8(%eax),%ecx
   10513:	8b 45 08             	mov    0x8(%ebp),%eax
   10516:	8b 50 0c             	mov    0xc(%eax),%edx
   10519:	8b 45 08             	mov    0x8(%ebp),%eax
   1051c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1051f:	83 ec 04             	sub    $0x4,%esp
   10522:	57                   	push   %edi
   10523:	56                   	push   %esi
   10524:	53                   	push   %ebx
   10525:	51                   	push   %ecx
   10526:	52                   	push   %edx
   10527:	50                   	push   %eax
   10528:	68 20 14 01 00       	push   $0x11420
   1052d:	e8 a5 0d 00 00       	call   112d7 <log_prinf>
   10532:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   10535:	8b 45 08             	mov    0x8(%ebp),%eax
   10538:	8b 48 1c             	mov    0x1c(%eax),%ecx
   1053b:	8b 45 08             	mov    0x8(%ebp),%eax
   1053e:	8b 40 18             	mov    0x18(%eax),%eax
   10541:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10544:	8b 45 08             	mov    0x8(%ebp),%eax
   10547:	8b 58 14             	mov    0x14(%eax),%ebx
   1054a:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   1054d:	8b 45 08             	mov    0x8(%ebp),%eax
   10550:	8b 78 10             	mov    0x10(%eax),%edi
   10553:	8b 45 08             	mov    0x8(%ebp),%eax
   10556:	8b 70 24             	mov    0x24(%eax),%esi
   10559:	8b 45 08             	mov    0x8(%ebp),%eax
   1055c:	8b 58 28             	mov    0x28(%eax),%ebx
   1055f:	8b 45 08             	mov    0x8(%ebp),%eax
   10562:	8b 50 20             	mov    0x20(%eax),%edx
   10565:	8b 45 08             	mov    0x8(%ebp),%eax
   10568:	8b 40 2c             	mov    0x2c(%eax),%eax
   1056b:	83 ec 0c             	sub    $0xc,%esp
   1056e:	51                   	push   %ecx
   1056f:	ff 75 e4             	push   -0x1c(%ebp)
   10572:	ff 75 e0             	push   -0x20(%ebp)
   10575:	57                   	push   %edi
   10576:	56                   	push   %esi
   10577:	53                   	push   %ebx
   10578:	52                   	push   %edx
   10579:	50                   	push   %eax
   1057a:	68 48 14 01 00       	push   $0x11448
   1057f:	e8 53 0d 00 00       	call   112d7 <log_prinf>
   10584:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   10587:	8b 45 08             	mov    0x8(%ebp),%eax
   1058a:	8b 50 40             	mov    0x40(%eax),%edx
   1058d:	8b 45 08             	mov    0x8(%ebp),%eax
   10590:	8b 40 38             	mov    0x38(%eax),%eax
   10593:	83 ec 04             	sub    $0x4,%esp
   10596:	52                   	push   %edx
   10597:	50                   	push   %eax
   10598:	68 99 14 01 00       	push   $0x11499
   1059d:	e8 35 0d 00 00       	call   112d7 <log_prinf>
   105a2:	83 c4 10             	add    $0x10,%esp
}
   105a5:	90                   	nop
   105a6:	8d 65 f4             	lea    -0xc(%ebp),%esp
   105a9:	5b                   	pop    %ebx
   105aa:	5e                   	pop    %esi
   105ab:	5f                   	pop    %edi
   105ac:	5d                   	pop    %ebp
   105ad:	c3                   	ret

000105ae <do_default_handler>:
{
   105ae:	55                   	push   %ebp
   105af:	89 e5                	mov    %esp,%ebp
   105b1:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   105b4:	83 ec 0c             	sub    $0xc,%esp
   105b7:	68 b2 14 01 00       	push   $0x114b2
   105bc:	e8 16 0d 00 00       	call   112d7 <log_prinf>
   105c1:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   105c4:	83 ec 08             	sub    $0x8,%esp
   105c7:	ff 75 0c             	push   0xc(%ebp)
   105ca:	68 cf 14 01 00       	push   $0x114cf
   105cf:	e8 03 0d 00 00       	call   112d7 <log_prinf>
   105d4:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   105d7:	83 ec 0c             	sub    $0xc,%esp
   105da:	ff 75 08             	push   0x8(%ebp)
   105dd:	e8 f3 fe ff ff       	call   104d5 <dump_core_regs>
   105e2:	83 c4 10             	add    $0x10,%esp
        hlt();
   105e5:	e8 e4 fe ff ff       	call   104ce <hlt>
   105ea:	eb f9                	jmp    105e5 <do_default_handler+0x37>

000105ec <do_handler_unknow>:
{
   105ec:	55                   	push   %ebp
   105ed:	89 e5                	mov    %esp,%ebp
   105ef:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   105f2:	83 ec 08             	sub    $0x8,%esp
   105f5:	68 e0 14 01 00       	push   $0x114e0
   105fa:	ff 75 08             	push   0x8(%ebp)
   105fd:	e8 ac ff ff ff       	call   105ae <do_default_handler>
   10602:	83 c4 10             	add    $0x10,%esp
}
   10605:	90                   	nop
   10606:	c9                   	leave
   10607:	c3                   	ret

00010608 <do_handler_divider>:
{
   10608:	55                   	push   %ebp
   10609:	89 e5                	mov    %esp,%ebp
   1060b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   1060e:	83 ec 08             	sub    $0x8,%esp
   10611:	68 f4 14 01 00       	push   $0x114f4
   10616:	ff 75 08             	push   0x8(%ebp)
   10619:	e8 90 ff ff ff       	call   105ae <do_default_handler>
   1061e:	83 c4 10             	add    $0x10,%esp
}
   10621:	90                   	nop
   10622:	c9                   	leave
   10623:	c3                   	ret

00010624 <do_handler_Debug>:
{
   10624:	55                   	push   %ebp
   10625:	89 e5                	mov    %esp,%ebp
   10627:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   1062a:	83 ec 08             	sub    $0x8,%esp
   1062d:	68 09 15 01 00       	push   $0x11509
   10632:	ff 75 08             	push   0x8(%ebp)
   10635:	e8 74 ff ff ff       	call   105ae <do_default_handler>
   1063a:	83 c4 10             	add    $0x10,%esp
}
   1063d:	90                   	nop
   1063e:	c9                   	leave
   1063f:	c3                   	ret

00010640 <do_handler_NMI>:
{
   10640:	55                   	push   %ebp
   10641:	89 e5                	mov    %esp,%ebp
   10643:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10646:	83 ec 08             	sub    $0x8,%esp
   10649:	68 19 15 01 00       	push   $0x11519
   1064e:	ff 75 08             	push   0x8(%ebp)
   10651:	e8 58 ff ff ff       	call   105ae <do_default_handler>
   10656:	83 c4 10             	add    $0x10,%esp
}
   10659:	90                   	nop
   1065a:	c9                   	leave
   1065b:	c3                   	ret

0001065c <do_handler_breakpoint>:
{
   1065c:	55                   	push   %ebp
   1065d:	89 e5                	mov    %esp,%ebp
   1065f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10662:	83 ec 08             	sub    $0x8,%esp
   10665:	68 28 15 01 00       	push   $0x11528
   1066a:	ff 75 08             	push   0x8(%ebp)
   1066d:	e8 3c ff ff ff       	call   105ae <do_default_handler>
   10672:	83 c4 10             	add    $0x10,%esp
}
   10675:	90                   	nop
   10676:	c9                   	leave
   10677:	c3                   	ret

00010678 <do_handler_overflow>:
{
   10678:	55                   	push   %ebp
   10679:	89 e5                	mov    %esp,%ebp
   1067b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   1067e:	83 ec 08             	sub    $0x8,%esp
   10681:	68 34 15 01 00       	push   $0x11534
   10686:	ff 75 08             	push   0x8(%ebp)
   10689:	e8 20 ff ff ff       	call   105ae <do_default_handler>
   1068e:	83 c4 10             	add    $0x10,%esp
}
   10691:	90                   	nop
   10692:	c9                   	leave
   10693:	c3                   	ret

00010694 <do_handler_bound_range>:
{
   10694:	55                   	push   %ebp
   10695:	89 e5                	mov    %esp,%ebp
   10697:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   1069a:	83 ec 08             	sub    $0x8,%esp
   1069d:	68 3e 15 01 00       	push   $0x1153e
   106a2:	ff 75 08             	push   0x8(%ebp)
   106a5:	e8 04 ff ff ff       	call   105ae <do_default_handler>
   106aa:	83 c4 10             	add    $0x10,%esp
}
   106ad:	90                   	nop
   106ae:	c9                   	leave
   106af:	c3                   	ret

000106b0 <do_handler_invalid_opcode>:
{
   106b0:	55                   	push   %ebp
   106b1:	89 e5                	mov    %esp,%ebp
   106b3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   106b6:	83 ec 08             	sub    $0x8,%esp
   106b9:	68 54 15 01 00       	push   $0x11554
   106be:	ff 75 08             	push   0x8(%ebp)
   106c1:	e8 e8 fe ff ff       	call   105ae <do_default_handler>
   106c6:	83 c4 10             	add    $0x10,%esp
}
   106c9:	90                   	nop
   106ca:	c9                   	leave
   106cb:	c3                   	ret

000106cc <do_handler_device_unavailable>:
{
   106cc:	55                   	push   %ebp
   106cd:	89 e5                	mov    %esp,%ebp
   106cf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   106d2:	83 ec 08             	sub    $0x8,%esp
   106d5:	68 64 15 01 00       	push   $0x11564
   106da:	ff 75 08             	push   0x8(%ebp)
   106dd:	e8 cc fe ff ff       	call   105ae <do_default_handler>
   106e2:	83 c4 10             	add    $0x10,%esp
}
   106e5:	90                   	nop
   106e6:	c9                   	leave
   106e7:	c3                   	ret

000106e8 <do_handler_double_fault>:
{
   106e8:	55                   	push   %ebp
   106e9:	89 e5                	mov    %esp,%ebp
   106eb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   106ee:	83 ec 08             	sub    $0x8,%esp
   106f1:	68 7a 15 01 00       	push   $0x1157a
   106f6:	ff 75 08             	push   0x8(%ebp)
   106f9:	e8 b0 fe ff ff       	call   105ae <do_default_handler>
   106fe:	83 c4 10             	add    $0x10,%esp
}
   10701:	90                   	nop
   10702:	c9                   	leave
   10703:	c3                   	ret

00010704 <do_handler_invalid_tss>:
{
   10704:	55                   	push   %ebp
   10705:	89 e5                	mov    %esp,%ebp
   10707:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   1070a:	83 ec 08             	sub    $0x8,%esp
   1070d:	68 88 15 01 00       	push   $0x11588
   10712:	ff 75 08             	push   0x8(%ebp)
   10715:	e8 94 fe ff ff       	call   105ae <do_default_handler>
   1071a:	83 c4 10             	add    $0x10,%esp
}
   1071d:	90                   	nop
   1071e:	c9                   	leave
   1071f:	c3                   	ret

00010720 <do_handler_segment_not_present>:
{
   10720:	55                   	push   %ebp
   10721:	89 e5                	mov    %esp,%ebp
   10723:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10726:	83 ec 08             	sub    $0x8,%esp
   10729:	68 94 15 01 00       	push   $0x11594
   1072e:	ff 75 08             	push   0x8(%ebp)
   10731:	e8 78 fe ff ff       	call   105ae <do_default_handler>
   10736:	83 c4 10             	add    $0x10,%esp
}
   10739:	90                   	nop
   1073a:	c9                   	leave
   1073b:	c3                   	ret

0001073c <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   1073c:	55                   	push   %ebp
   1073d:	89 e5                	mov    %esp,%ebp
   1073f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10742:	83 ec 08             	sub    $0x8,%esp
   10745:	68 a9 15 01 00       	push   $0x115a9
   1074a:	ff 75 08             	push   0x8(%ebp)
   1074d:	e8 5c fe ff ff       	call   105ae <do_default_handler>
   10752:	83 c4 10             	add    $0x10,%esp
}
   10755:	90                   	nop
   10756:	c9                   	leave
   10757:	c3                   	ret

00010758 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   10758:	55                   	push   %ebp
   10759:	89 e5                	mov    %esp,%ebp
   1075b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   1075e:	83 ec 08             	sub    $0x8,%esp
   10761:	68 be 15 01 00       	push   $0x115be
   10766:	ff 75 08             	push   0x8(%ebp)
   10769:	e8 40 fe ff ff       	call   105ae <do_default_handler>
   1076e:	83 c4 10             	add    $0x10,%esp
}
   10771:	90                   	nop
   10772:	c9                   	leave
   10773:	c3                   	ret

00010774 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t *frame)
{
   10774:	55                   	push   %ebp
   10775:	89 e5                	mov    %esp,%ebp
   10777:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   1077a:	83 ec 08             	sub    $0x8,%esp
   1077d:	68 d2 15 01 00       	push   $0x115d2
   10782:	ff 75 08             	push   0x8(%ebp)
   10785:	e8 24 fe ff ff       	call   105ae <do_default_handler>
   1078a:	83 c4 10             	add    $0x10,%esp
}
   1078d:	90                   	nop
   1078e:	c9                   	leave
   1078f:	c3                   	ret

00010790 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   10790:	55                   	push   %ebp
   10791:	89 e5                	mov    %esp,%ebp
   10793:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10796:	83 ec 08             	sub    $0x8,%esp
   10799:	68 de 15 01 00       	push   $0x115de
   1079e:	ff 75 08             	push   0x8(%ebp)
   107a1:	e8 08 fe ff ff       	call   105ae <do_default_handler>
   107a6:	83 c4 10             	add    $0x10,%esp
}
   107a9:	90                   	nop
   107aa:	c9                   	leave
   107ab:	c3                   	ret

000107ac <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   107ac:	55                   	push   %ebp
   107ad:	89 e5                	mov    %esp,%ebp
   107af:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   107b2:	83 ec 08             	sub    $0x8,%esp
   107b5:	68 fc 15 01 00       	push   $0x115fc
   107ba:	ff 75 08             	push   0x8(%ebp)
   107bd:	e8 ec fd ff ff       	call   105ae <do_default_handler>
   107c2:	83 c4 10             	add    $0x10,%esp
}
   107c5:	90                   	nop
   107c6:	c9                   	leave
   107c7:	c3                   	ret

000107c8 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   107c8:	55                   	push   %ebp
   107c9:	89 e5                	mov    %esp,%ebp
   107cb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   107ce:	83 ec 08             	sub    $0x8,%esp
   107d1:	68 0d 16 01 00       	push   $0x1160d
   107d6:	ff 75 08             	push   0x8(%ebp)
   107d9:	e8 d0 fd ff ff       	call   105ae <do_default_handler>
   107de:	83 c4 10             	add    $0x10,%esp
}
   107e1:	90                   	nop
   107e2:	c9                   	leave
   107e3:	c3                   	ret

000107e4 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   107e4:	55                   	push   %ebp
   107e5:	89 e5                	mov    %esp,%ebp
   107e7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   107ea:	83 ec 08             	sub    $0x8,%esp
   107ed:	68 1c 16 01 00       	push   $0x1161c
   107f2:	ff 75 08             	push   0x8(%ebp)
   107f5:	e8 b4 fd ff ff       	call   105ae <do_default_handler>
   107fa:	83 c4 10             	add    $0x10,%esp
}
   107fd:	90                   	nop
   107fe:	c9                   	leave
   107ff:	c3                   	ret

00010800 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   10800:	55                   	push   %ebp
   10801:	89 e5                	mov    %esp,%ebp
   10803:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   10806:	83 ec 08             	sub    $0x8,%esp
   10809:	68 3b 16 01 00       	push   $0x1163b
   1080e:	ff 75 08             	push   0x8(%ebp)
   10811:	e8 98 fd ff ff       	call   105ae <do_default_handler>
   10816:	83 c4 10             	add    $0x10,%esp
}
   10819:	90                   	nop
   1081a:	c9                   	leave
   1081b:	c3                   	ret

0001081c <init_pic>:

static void init_pic(void)
{
   1081c:	55                   	push   %ebp
   1081d:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1081f:	6a 11                	push   $0x11
   10821:	6a 20                	push   $0x20
   10823:	e8 51 fc ff ff       	call   10479 <outb>
   10828:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   1082b:	6a 20                	push   $0x20
   1082d:	6a 21                	push   $0x21
   1082f:	e8 45 fc ff ff       	call   10479 <outb>
   10834:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10837:	6a 04                	push   $0x4
   10839:	6a 21                	push   $0x21
   1083b:	e8 39 fc ff ff       	call   10479 <outb>
   10840:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10843:	6a 01                	push   $0x1
   10845:	6a 21                	push   $0x21
   10847:	e8 2d fc ff ff       	call   10479 <outb>
   1084c:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1084f:	6a 11                	push   $0x11
   10851:	68 a0 00 00 00       	push   $0xa0
   10856:	e8 1e fc ff ff       	call   10479 <outb>
   1085b:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   1085e:	6a 28                	push   $0x28
   10860:	68 a1 00 00 00       	push   $0xa1
   10865:	e8 0f fc ff ff       	call   10479 <outb>
   1086a:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   1086d:	6a 02                	push   $0x2
   1086f:	68 a1 00 00 00       	push   $0xa1
   10874:	e8 00 fc ff ff       	call   10479 <outb>
   10879:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   1087c:	6a 01                	push   $0x1
   1087e:	68 a1 00 00 00       	push   $0xa1
   10883:	e8 f1 fb ff ff       	call   10479 <outb>
   10888:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   1088b:	68 fb 00 00 00       	push   $0xfb
   10890:	6a 21                	push   $0x21
   10892:	e8 e2 fb ff ff       	call   10479 <outb>
   10897:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   1089a:	68 ff 00 00 00       	push   $0xff
   1089f:	68 a1 00 00 00       	push   $0xa1
   108a4:	e8 d0 fb ff ff       	call   10479 <outb>
   108a9:	83 c4 08             	add    $0x8,%esp
}
   108ac:	90                   	nop
   108ad:	c9                   	leave
   108ae:	c3                   	ret

000108af <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   108af:	55                   	push   %ebp
   108b0:	89 e5                	mov    %esp,%ebp
   108b2:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   108b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   108bc:	eb 25                	jmp    108e3 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   108be:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   108c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108c6:	c1 e0 03             	shl    $0x3,%eax
   108c9:	05 00 1f 01 00       	add    $0x11f00,%eax
   108ce:	68 00 8e 00 00       	push   $0x8e00
   108d3:	52                   	push   %edx
   108d4:	6a 08                	push   $0x8
   108d6:	50                   	push   %eax
   108d7:	e8 2e fb ff ff       	call   1040a <gate_desc_set>
   108dc:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   108df:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108e3:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   108e7:	7e d5                	jle    108be <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   108e9:	83 ec 08             	sub    $0x8,%esp
   108ec:	68 4a 00 01 00       	push   $0x1004a
   108f1:	6a 00                	push   $0x0
   108f3:	e8 65 01 00 00       	call   10a5d <irq_install>
   108f8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   108fb:	83 ec 08             	sub    $0x8,%esp
   108fe:	68 69 00 01 00       	push   $0x10069
   10903:	6a 01                	push   $0x1
   10905:	e8 53 01 00 00       	call   10a5d <irq_install>
   1090a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   1090d:	83 ec 08             	sub    $0x8,%esp
   10910:	68 88 00 01 00       	push   $0x10088
   10915:	6a 02                	push   $0x2
   10917:	e8 41 01 00 00       	call   10a5d <irq_install>
   1091c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   1091f:	83 ec 08             	sub    $0x8,%esp
   10922:	68 a7 00 01 00       	push   $0x100a7
   10927:	6a 03                	push   $0x3
   10929:	e8 2f 01 00 00       	call   10a5d <irq_install>
   1092e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10931:	83 ec 08             	sub    $0x8,%esp
   10934:	68 c6 00 01 00       	push   $0x100c6
   10939:	6a 04                	push   $0x4
   1093b:	e8 1d 01 00 00       	call   10a5d <irq_install>
   10940:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10943:	83 ec 08             	sub    $0x8,%esp
   10946:	68 e5 00 01 00       	push   $0x100e5
   1094b:	6a 05                	push   $0x5
   1094d:	e8 0b 01 00 00       	call   10a5d <irq_install>
   10952:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10955:	83 ec 08             	sub    $0x8,%esp
   10958:	68 04 01 01 00       	push   $0x10104
   1095d:	6a 06                	push   $0x6
   1095f:	e8 f9 00 00 00       	call   10a5d <irq_install>
   10964:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10967:	83 ec 08             	sub    $0x8,%esp
   1096a:	68 23 01 01 00       	push   $0x10123
   1096f:	6a 07                	push   $0x7
   10971:	e8 e7 00 00 00       	call   10a5d <irq_install>
   10976:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10979:	83 ec 08             	sub    $0x8,%esp
   1097c:	68 42 01 01 00       	push   $0x10142
   10981:	6a 08                	push   $0x8
   10983:	e8 d5 00 00 00       	call   10a5d <irq_install>
   10988:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   1098b:	83 ec 08             	sub    $0x8,%esp
   1098e:	68 5f 01 01 00       	push   $0x1015f
   10993:	6a 0a                	push   $0xa
   10995:	e8 c3 00 00 00       	call   10a5d <irq_install>
   1099a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   1099d:	83 ec 08             	sub    $0x8,%esp
   109a0:	68 7c 01 01 00       	push   $0x1017c
   109a5:	6a 0b                	push   $0xb
   109a7:	e8 b1 00 00 00       	call   10a5d <irq_install>
   109ac:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   109af:	83 ec 08             	sub    $0x8,%esp
   109b2:	68 99 01 01 00       	push   $0x10199
   109b7:	6a 0c                	push   $0xc
   109b9:	e8 9f 00 00 00       	call   10a5d <irq_install>
   109be:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   109c1:	83 ec 08             	sub    $0x8,%esp
   109c4:	68 b6 01 01 00       	push   $0x101b6
   109c9:	6a 0d                	push   $0xd
   109cb:	e8 8d 00 00 00       	call   10a5d <irq_install>
   109d0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   109d3:	83 ec 08             	sub    $0x8,%esp
   109d6:	68 d3 01 01 00       	push   $0x101d3
   109db:	6a 0e                	push   $0xe
   109dd:	e8 7b 00 00 00       	call   10a5d <irq_install>
   109e2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   109e5:	83 ec 08             	sub    $0x8,%esp
   109e8:	68 f0 01 01 00       	push   $0x101f0
   109ed:	6a 10                	push   $0x10
   109ef:	e8 69 00 00 00       	call   10a5d <irq_install>
   109f4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   109f7:	83 ec 08             	sub    $0x8,%esp
   109fa:	68 0f 02 01 00       	push   $0x1020f
   109ff:	6a 11                	push   $0x11
   10a01:	e8 57 00 00 00       	call   10a5d <irq_install>
   10a06:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   10a09:	83 ec 08             	sub    $0x8,%esp
   10a0c:	68 2c 02 01 00       	push   $0x1022c
   10a11:	6a 12                	push   $0x12
   10a13:	e8 45 00 00 00       	call   10a5d <irq_install>
   10a18:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   10a1b:	83 ec 08             	sub    $0x8,%esp
   10a1e:	68 4b 02 01 00       	push   $0x1024b
   10a23:	6a 13                	push   $0x13
   10a25:	e8 33 00 00 00       	call   10a5d <irq_install>
   10a2a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   10a2d:	83 ec 08             	sub    $0x8,%esp
   10a30:	68 6a 02 01 00       	push   $0x1026a
   10a35:	6a 14                	push   $0x14
   10a37:	e8 21 00 00 00       	call   10a5d <irq_install>
   10a3c:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10a3f:	b8 00 1f 01 00       	mov    $0x11f00,%eax
   10a44:	83 ec 08             	sub    $0x8,%esp
   10a47:	68 00 04 00 00       	push   $0x400
   10a4c:	50                   	push   %eax
   10a4d:	e8 54 fa ff ff       	call   104a6 <lidt>
   10a52:	83 c4 10             	add    $0x10,%esp

    init_pic();
   10a55:	e8 c2 fd ff ff       	call   1081c <init_pic>
}
   10a5a:	90                   	nop
   10a5b:	c9                   	leave
   10a5c:	c3                   	ret

00010a5d <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   10a5d:	55                   	push   %ebp
   10a5e:	89 e5                	mov    %esp,%ebp
   10a60:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   10a63:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10a67:	7e 07                	jle    10a70 <irq_install+0x13>
    {
        return -1;
   10a69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10a6e:	eb 20                	jmp    10a90 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10a70:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a73:	8b 55 08             	mov    0x8(%ebp),%edx
   10a76:	c1 e2 03             	shl    $0x3,%edx
   10a79:	81 c2 00 1f 01 00    	add    $0x11f00,%edx
   10a7f:	68 00 8e 00 00       	push   $0x8e00
   10a84:	50                   	push   %eax
   10a85:	6a 08                	push   $0x8
   10a87:	52                   	push   %edx
   10a88:	e8 7d f9 ff ff       	call   1040a <gate_desc_set>
   10a8d:	83 c4 10             	add    $0x10,%esp
}
   10a90:	c9                   	leave
   10a91:	c3                   	ret

00010a92 <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   10a92:	55                   	push   %ebp
   10a93:	89 e5                	mov    %esp,%ebp
   10a95:	53                   	push   %ebx
   10a96:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10a99:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10a9d:	7e 78                	jle    10b17 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10a9f:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10aa3:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10aa7:	7f 32                	jg     10adb <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10aa9:	6a 21                	push   $0x21
   10aab:	e8 ac f9 ff ff       	call   1045c <inb>
   10ab0:	83 c4 04             	add    $0x4,%esp
   10ab3:	89 c3                	mov    %eax,%ebx
   10ab5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab8:	ba 01 00 00 00       	mov    $0x1,%edx
   10abd:	89 c1                	mov    %eax,%ecx
   10abf:	d3 e2                	shl    %cl,%edx
   10ac1:	89 d0                	mov    %edx,%eax
   10ac3:	f7 d0                	not    %eax
   10ac5:	21 d8                	and    %ebx,%eax
   10ac7:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10aca:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10ace:	50                   	push   %eax
   10acf:	6a 21                	push   $0x21
   10ad1:	e8 a3 f9 ff ff       	call   10479 <outb>
   10ad6:	83 c4 08             	add    $0x8,%esp
   10ad9:	eb 3d                	jmp    10b18 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   10adb:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10adf:	68 a1 00 00 00       	push   $0xa1
   10ae4:	e8 73 f9 ff ff       	call   1045c <inb>
   10ae9:	83 c4 04             	add    $0x4,%esp
   10aec:	89 c3                	mov    %eax,%ebx
   10aee:	8b 45 08             	mov    0x8(%ebp),%eax
   10af1:	ba 01 00 00 00       	mov    $0x1,%edx
   10af6:	89 c1                	mov    %eax,%ecx
   10af8:	d3 e2                	shl    %cl,%edx
   10afa:	89 d0                	mov    %edx,%eax
   10afc:	f7 d0                	not    %eax
   10afe:	21 d8                	and    %ebx,%eax
   10b00:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10b03:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10b07:	50                   	push   %eax
   10b08:	68 a1 00 00 00       	push   $0xa1
   10b0d:	e8 67 f9 ff ff       	call   10479 <outb>
   10b12:	83 c4 08             	add    $0x8,%esp
   10b15:	eb 01                	jmp    10b18 <irq_enable+0x86>
        return;
   10b17:	90                   	nop
    }
}
   10b18:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10b1b:	c9                   	leave
   10b1c:	c3                   	ret

00010b1d <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   10b1d:	55                   	push   %ebp
   10b1e:	89 e5                	mov    %esp,%ebp
   10b20:	53                   	push   %ebx
   10b21:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10b24:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10b28:	7e 74                	jle    10b9e <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10b2a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10b2e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10b32:	7f 30                	jg     10b64 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10b34:	6a 21                	push   $0x21
   10b36:	e8 21 f9 ff ff       	call   1045c <inb>
   10b3b:	83 c4 04             	add    $0x4,%esp
   10b3e:	89 c3                	mov    %eax,%ebx
   10b40:	8b 45 08             	mov    0x8(%ebp),%eax
   10b43:	ba 01 00 00 00       	mov    $0x1,%edx
   10b48:	89 c1                	mov    %eax,%ecx
   10b4a:	d3 e2                	shl    %cl,%edx
   10b4c:	89 d0                	mov    %edx,%eax
   10b4e:	09 d8                	or     %ebx,%eax
   10b50:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10b53:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10b57:	50                   	push   %eax
   10b58:	6a 21                	push   $0x21
   10b5a:	e8 1a f9 ff ff       	call   10479 <outb>
   10b5f:	83 c4 08             	add    $0x8,%esp
   10b62:	eb 3b                	jmp    10b9f <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   10b64:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10b68:	68 a1 00 00 00       	push   $0xa1
   10b6d:	e8 ea f8 ff ff       	call   1045c <inb>
   10b72:	83 c4 04             	add    $0x4,%esp
   10b75:	89 c3                	mov    %eax,%ebx
   10b77:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7a:	ba 01 00 00 00       	mov    $0x1,%edx
   10b7f:	89 c1                	mov    %eax,%ecx
   10b81:	d3 e2                	shl    %cl,%edx
   10b83:	89 d0                	mov    %edx,%eax
   10b85:	09 d8                	or     %ebx,%eax
   10b87:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10b8a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10b8e:	50                   	push   %eax
   10b8f:	68 a1 00 00 00       	push   $0xa1
   10b94:	e8 e0 f8 ff ff       	call   10479 <outb>
   10b99:	83 c4 08             	add    $0x8,%esp
   10b9c:	eb 01                	jmp    10b9f <irq_disable+0x82>
        return;
   10b9e:	90                   	nop
    }
}
   10b9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ba2:	c9                   	leave
   10ba3:	c3                   	ret

00010ba4 <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   10ba4:	55                   	push   %ebp
   10ba5:	89 e5                	mov    %esp,%ebp
    cli();
   10ba7:	e8 ec f8 ff ff       	call   10498 <cli>
}
   10bac:	90                   	nop
   10bad:	5d                   	pop    %ebp
   10bae:	c3                   	ret

00010baf <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   10baf:	55                   	push   %ebp
   10bb0:	89 e5                	mov    %esp,%ebp
    sti();
   10bb2:	e8 e8 f8 ff ff       	call   1049f <sti>
}
   10bb7:	90                   	nop
   10bb8:	5d                   	pop    %ebp
   10bb9:	c3                   	ret

00010bba <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   10bba:	55                   	push   %ebp
   10bbb:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10bbd:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   10bc1:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10bc5:	7e 0f                	jle    10bd6 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10bc7:	6a 20                	push   $0x20
   10bc9:	68 a0 00 00 00       	push   $0xa0
   10bce:	e8 a6 f8 ff ff       	call   10479 <outb>
   10bd3:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10bd6:	6a 20                	push   $0x20
   10bd8:	6a 20                	push   $0x20
   10bda:	e8 9a f8 ff ff       	call   10479 <outb>
   10bdf:	83 c4 08             	add    $0x8,%esp
   10be2:	90                   	nop
   10be3:	c9                   	leave
   10be4:	c3                   	ret

00010be5 <outb>:
{
    sys_tick = 0;
    init_pit();
   10be5:	55                   	push   %ebp
   10be6:	89 e5                	mov    %esp,%ebp
   10be8:	83 ec 08             	sub    $0x8,%esp
   10beb:	8b 55 08             	mov    0x8(%ebp),%edx
   10bee:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bf1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10bf5:	88 45 f8             	mov    %al,-0x8(%ebp)
   10bf8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10bfc:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10c00:	ee                   	out    %al,(%dx)
   10c01:	90                   	nop
   10c02:	c9                   	leave
   10c03:	c3                   	ret

00010c04 <do_handler_time>:
{
   10c04:	55                   	push   %ebp
   10c05:	89 e5                	mov    %esp,%ebp
   10c07:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   10c0a:	a1 00 23 01 00       	mov    0x12300,%eax
   10c0f:	83 c0 01             	add    $0x1,%eax
   10c12:	a3 00 23 01 00       	mov    %eax,0x12300
    pic_send_eoi(IRQ0_TIMER);
   10c17:	83 ec 0c             	sub    $0xc,%esp
   10c1a:	6a 20                	push   $0x20
   10c1c:	e8 99 ff ff ff       	call   10bba <pic_send_eoi>
   10c21:	83 c4 10             	add    $0x10,%esp
}
   10c24:	90                   	nop
   10c25:	c9                   	leave
   10c26:	c3                   	ret

00010c27 <init_pit>:
{
   10c27:	55                   	push   %ebp
   10c28:	89 e5                	mov    %esp,%ebp
   10c2a:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   10c2d:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   10c34:	6a 36                	push   $0x36
   10c36:	6a 43                	push   $0x43
   10c38:	e8 a8 ff ff ff       	call   10be5 <outb>
   10c3d:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   10c40:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c43:	0f b6 c0             	movzbl %al,%eax
   10c46:	50                   	push   %eax
   10c47:	6a 40                	push   $0x40
   10c49:	e8 97 ff ff ff       	call   10be5 <outb>
   10c4e:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   10c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c54:	c1 e8 08             	shr    $0x8,%eax
   10c57:	0f b6 c0             	movzbl %al,%eax
   10c5a:	50                   	push   %eax
   10c5b:	6a 40                	push   $0x40
   10c5d:	e8 83 ff ff ff       	call   10be5 <outb>
   10c62:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   10c65:	83 ec 08             	sub    $0x8,%esp
   10c68:	68 89 02 01 00       	push   $0x10289
   10c6d:	6a 20                	push   $0x20
   10c6f:	e8 e9 fd ff ff       	call   10a5d <irq_install>
   10c74:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   10c77:	83 ec 0c             	sub    $0xc,%esp
   10c7a:	6a 20                	push   $0x20
   10c7c:	e8 11 fe ff ff       	call   10a92 <irq_enable>
   10c81:	83 c4 10             	add    $0x10,%esp
}
   10c84:	90                   	nop
   10c85:	c9                   	leave
   10c86:	c3                   	ret

00010c87 <init_time>:
{
   10c87:	55                   	push   %ebp
   10c88:	89 e5                	mov    %esp,%ebp
   10c8a:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10c8d:	c7 05 00 23 01 00 00 	movl   $0x0,0x12300
   10c94:	00 00 00 
    init_pit();
   10c97:	e8 8b ff ff ff       	call   10c27 <init_pit>
   10c9c:	90                   	nop
   10c9d:	c9                   	leave
   10c9e:	c3                   	ret

00010c9f <kernel_init>:

/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   10c9f:	55                   	push   %ebp
   10ca0:	89 e5                	mov    %esp,%ebp
   10ca2:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10ca5:	e8 a7 f7 ff ff       	call   10451 <cpu_init>

    init_log(); // 初始化打印函数
   10caa:	e8 b6 05 00 00       	call   11265 <init_log>
    irq_init();
   10caf:	e8 fb fb ff ff       	call   108af <irq_init>
    // 初始化定时器
    init_time();
   10cb4:	e8 ce ff ff ff       	call   10c87 <init_time>
}
   10cb9:	90                   	nop
   10cba:	c9                   	leave
   10cbb:	c3                   	ret

00010cbc <init_task_entry>:

void init_task_entry(void)
{
   10cbc:	55                   	push   %ebp
   10cbd:	89 e5                	mov    %esp,%ebp
   10cbf:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10cc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_task_entry: %d", count++);
   10cc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ccc:	8d 50 01             	lea    0x1(%eax),%edx
   10ccf:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10cd2:	83 ec 08             	sub    $0x8,%esp
   10cd5:	50                   	push   %eax
   10cd6:	68 55 16 01 00       	push   $0x11655
   10cdb:	e8 f7 05 00 00       	call   112d7 <log_prinf>
   10ce0:	83 c4 10             	add    $0x10,%esp
   10ce3:	eb e4                	jmp    10cc9 <init_task_entry+0xd>

00010ce5 <init_main>:
    }
}
void init_main()
{
   10ce5:	55                   	push   %ebp
   10ce6:	89 e5                	mov    %esp,%ebp
   10ce8:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   10ceb:	83 ec 0c             	sub    $0xc,%esp
   10cee:	68 69 16 01 00       	push   $0x11669
   10cf3:	e8 df 05 00 00       	call   112d7 <log_prinf>
   10cf8:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   10cfb:	83 ec 08             	sub    $0x8,%esp
   10cfe:	68 77 16 01 00       	push   $0x11677
   10d03:	68 7d 16 01 00       	push   $0x1167d
   10d08:	e8 ca 05 00 00       	call   112d7 <log_prinf>
   10d0d:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   10d10:	83 ec 0c             	sub    $0xc,%esp
   10d13:	6a 63                	push   $0x63
   10d15:	6a 30                	push   $0x30
   10d17:	6a 14                	push   $0x14
   10d19:	6a f6                	push   $0xfffffff6
   10d1b:	68 88 16 01 00       	push   $0x11688
   10d20:	e8 b2 05 00 00       	call   112d7 <log_prinf>
   10d25:	83 c4 20             	add    $0x20,%esp
    // irq_enable_global();//暂时先关掉定时中断
    int count = 0;
   10d28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_main: %d", count++);
   10d2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d32:	8d 50 01             	lea    0x1(%eax),%edx
   10d35:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10d38:	83 ec 08             	sub    $0x8,%esp
   10d3b:	50                   	push   %eax
   10d3c:	68 94 16 01 00       	push   $0x11694
   10d41:	e8 91 05 00 00       	call   112d7 <log_prinf>
   10d46:	83 c4 10             	add    $0x10,%esp
   10d49:	eb e4                	jmp    10d2f <init_main+0x4a>

00010d4b <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   10d4b:	55                   	push   %ebp
   10d4c:	89 e5                	mov    %esp,%ebp
}
   10d4e:	f4                   	hlt

   10d4f:	90                   	nop
   10d50:	5d                   	pop    %ebp
   10d51:	c3                   	ret

00010d52 <kernel_strcpy>:
{
   10d52:	55                   	push   %ebp
   10d53:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   10d55:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d59:	74 3b                	je     10d96 <kernel_strcpy+0x44>
   10d5b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10d5f:	74 35                	je     10d96 <kernel_strcpy+0x44>
    while (*dest && *src)
   10d61:	eb 17                	jmp    10d7a <kernel_strcpy+0x28>
        *dest++ = *src++;
   10d63:	8b 55 0c             	mov    0xc(%ebp),%edx
   10d66:	8d 42 01             	lea    0x1(%edx),%eax
   10d69:	89 45 0c             	mov    %eax,0xc(%ebp)
   10d6c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d6f:	8d 48 01             	lea    0x1(%eax),%ecx
   10d72:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10d75:	0f b6 12             	movzbl (%edx),%edx
   10d78:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   10d7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d7d:	0f b6 00             	movzbl (%eax),%eax
   10d80:	84 c0                	test   %al,%al
   10d82:	74 0a                	je     10d8e <kernel_strcpy+0x3c>
   10d84:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d87:	0f b6 00             	movzbl (%eax),%eax
   10d8a:	84 c0                	test   %al,%al
   10d8c:	75 d5                	jne    10d63 <kernel_strcpy+0x11>
    *dest = '\0';
   10d8e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d91:	c6 00 00             	movb   $0x0,(%eax)
   10d94:	eb 01                	jmp    10d97 <kernel_strcpy+0x45>
        return;
   10d96:	90                   	nop
}
   10d97:	5d                   	pop    %ebp
   10d98:	c3                   	ret

00010d99 <kernel_strncpy>:
{
   10d99:	55                   	push   %ebp
   10d9a:	89 e5                	mov    %esp,%ebp
   10d9c:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   10d9f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10da3:	74 61                	je     10e06 <kernel_strncpy+0x6d>
   10da5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10da9:	74 5b                	je     10e06 <kernel_strncpy+0x6d>
   10dab:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10daf:	74 55                	je     10e06 <kernel_strncpy+0x6d>
    char *d = dest;
   10db1:	8b 45 08             	mov    0x8(%ebp),%eax
   10db4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   10db7:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dba:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   10dbd:	eb 17                	jmp    10dd6 <kernel_strncpy+0x3d>
        *d++ = *s++;
   10dbf:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10dc2:	8d 42 01             	lea    0x1(%edx),%eax
   10dc5:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10dc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10dcb:	8d 48 01             	lea    0x1(%eax),%ecx
   10dce:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10dd1:	0f b6 12             	movzbl (%edx),%edx
   10dd4:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   10dd6:	8b 45 10             	mov    0x10(%ebp),%eax
   10dd9:	8d 50 ff             	lea    -0x1(%eax),%edx
   10ddc:	89 55 10             	mov    %edx,0x10(%ebp)
   10ddf:	85 c0                	test   %eax,%eax
   10de1:	7e 0a                	jle    10ded <kernel_strncpy+0x54>
   10de3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10de6:	0f b6 00             	movzbl (%eax),%eax
   10de9:	84 c0                	test   %al,%al
   10deb:	75 d2                	jne    10dbf <kernel_strncpy+0x26>
    if (size == 0)
   10ded:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10df1:	75 0b                	jne    10dfe <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   10df3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10df6:	83 e8 01             	sub    $0x1,%eax
   10df9:	c6 00 00             	movb   $0x0,(%eax)
   10dfc:	eb 09                	jmp    10e07 <kernel_strncpy+0x6e>
        *d = '\0';
   10dfe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e01:	c6 00 00             	movb   $0x0,(%eax)
   10e04:	eb 01                	jmp    10e07 <kernel_strncpy+0x6e>
        return;
   10e06:	90                   	nop
}
   10e07:	c9                   	leave
   10e08:	c3                   	ret

00010e09 <kernel_strncmp>:
{
   10e09:	55                   	push   %ebp
   10e0a:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   10e0c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e10:	74 0c                	je     10e1e <kernel_strncmp+0x15>
   10e12:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e16:	74 06                	je     10e1e <kernel_strncmp+0x15>
   10e18:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10e1c:	75 0f                	jne    10e2d <kernel_strncmp+0x24>
        return -1;
   10e1e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10e23:	eb 62                	jmp    10e87 <kernel_strncmp+0x7e>
        s1++;
   10e25:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   10e29:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   10e2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e30:	0f b6 00             	movzbl (%eax),%eax
   10e33:	84 c0                	test   %al,%al
   10e35:	74 20                	je     10e57 <kernel_strncmp+0x4e>
   10e37:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e3a:	0f b6 00             	movzbl (%eax),%eax
   10e3d:	84 c0                	test   %al,%al
   10e3f:	74 16                	je     10e57 <kernel_strncmp+0x4e>
   10e41:	8b 45 08             	mov    0x8(%ebp),%eax
   10e44:	0f b6 10             	movzbl (%eax),%edx
   10e47:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e4a:	0f b6 00             	movzbl (%eax),%eax
   10e4d:	38 c2                	cmp    %al,%dl
   10e4f:	75 06                	jne    10e57 <kernel_strncmp+0x4e>
   10e51:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10e55:	75 ce                	jne    10e25 <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   10e57:	8b 45 08             	mov    0x8(%ebp),%eax
   10e5a:	0f b6 00             	movzbl (%eax),%eax
   10e5d:	84 c0                	test   %al,%al
   10e5f:	74 21                	je     10e82 <kernel_strncmp+0x79>
   10e61:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e64:	0f b6 00             	movzbl (%eax),%eax
   10e67:	84 c0                	test   %al,%al
   10e69:	74 17                	je     10e82 <kernel_strncmp+0x79>
   10e6b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e6e:	0f b6 10             	movzbl (%eax),%edx
   10e71:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e74:	0f b6 00             	movzbl (%eax),%eax
   10e77:	38 c2                	cmp    %al,%dl
   10e79:	74 07                	je     10e82 <kernel_strncmp+0x79>
   10e7b:	b8 01 00 00 00       	mov    $0x1,%eax
   10e80:	eb 05                	jmp    10e87 <kernel_strncmp+0x7e>
   10e82:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e87:	5d                   	pop    %ebp
   10e88:	c3                   	ret

00010e89 <kernel_strlen>:
{
   10e89:	55                   	push   %ebp
   10e8a:	89 e5                	mov    %esp,%ebp
   10e8c:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   10e8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e93:	75 07                	jne    10e9c <kernel_strlen+0x13>
        return 0;
   10e95:	b8 00 00 00 00       	mov    $0x0,%eax
   10e9a:	eb 26                	jmp    10ec2 <kernel_strlen+0x39>
    const char *c = str;
   10e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e9f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   10ea2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   10ea9:	eb 04                	jmp    10eaf <kernel_strlen+0x26>
        len++;
   10eab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   10eaf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10eb2:	8d 50 01             	lea    0x1(%eax),%edx
   10eb5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10eb8:	0f b6 00             	movzbl (%eax),%eax
   10ebb:	84 c0                	test   %al,%al
   10ebd:	75 ec                	jne    10eab <kernel_strlen+0x22>
    return len;
   10ebf:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   10ec2:	c9                   	leave
   10ec3:	c3                   	ret

00010ec4 <kernel_memcpy>:
{
   10ec4:	55                   	push   %ebp
   10ec5:	89 e5                	mov    %esp,%ebp
   10ec7:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   10eca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ece:	74 40                	je     10f10 <kernel_memcpy+0x4c>
   10ed0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ed4:	74 3a                	je     10f10 <kernel_memcpy+0x4c>
   10ed6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10eda:	74 34                	je     10f10 <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   10edc:	8b 45 0c             	mov    0xc(%ebp),%eax
   10edf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   10ee2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ee5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   10ee8:	eb 17                	jmp    10f01 <kernel_memcpy+0x3d>
        *d++ = *s++;
   10eea:	8b 55 fc             	mov    -0x4(%ebp),%edx
   10eed:	8d 42 01             	lea    0x1(%edx),%eax
   10ef0:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10ef3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10ef6:	8d 48 01             	lea    0x1(%eax),%ecx
   10ef9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   10efc:	0f b6 12             	movzbl (%edx),%edx
   10eff:	88 10                	mov    %dl,(%eax)
    while (size--)
   10f01:	8b 45 10             	mov    0x10(%ebp),%eax
   10f04:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f07:	89 55 10             	mov    %edx,0x10(%ebp)
   10f0a:	85 c0                	test   %eax,%eax
   10f0c:	75 dc                	jne    10eea <kernel_memcpy+0x26>
   10f0e:	eb 01                	jmp    10f11 <kernel_memcpy+0x4d>
        return;
   10f10:	90                   	nop
}
   10f11:	c9                   	leave
   10f12:	c3                   	ret

00010f13 <kernel_memset>:
{
   10f13:	55                   	push   %ebp
   10f14:	89 e5                	mov    %esp,%ebp
   10f16:	83 ec 14             	sub    $0x14,%esp
   10f19:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f1c:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   10f1f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f23:	74 2c                	je     10f51 <kernel_memset+0x3e>
   10f25:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f29:	74 26                	je     10f51 <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   10f2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f2e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   10f31:	eb 0f                	jmp    10f42 <kernel_memset+0x2f>
        *d++ = v;
   10f33:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f36:	8d 50 01             	lea    0x1(%eax),%edx
   10f39:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10f3c:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   10f40:	88 10                	mov    %dl,(%eax)
    while (size--)
   10f42:	8b 45 10             	mov    0x10(%ebp),%eax
   10f45:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f48:	89 55 10             	mov    %edx,0x10(%ebp)
   10f4b:	85 c0                	test   %eax,%eax
   10f4d:	75 e4                	jne    10f33 <kernel_memset+0x20>
   10f4f:	eb 01                	jmp    10f52 <kernel_memset+0x3f>
        return;
   10f51:	90                   	nop
}
   10f52:	c9                   	leave
   10f53:	c3                   	ret

00010f54 <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   10f54:	55                   	push   %ebp
   10f55:	89 e5                	mov    %esp,%ebp
   10f57:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   10f5a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f5e:	74 06                	je     10f66 <kernel_memcmp+0x12>
   10f60:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f64:	75 07                	jne    10f6d <kernel_memcmp+0x19>
    {
        return 1;
   10f66:	b8 01 00 00 00       	mov    $0x1,%eax
   10f6b:	eb 43                	jmp    10fb0 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   10f6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10f70:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   10f73:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f76:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   10f79:	eb 23                	jmp    10f9e <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   10f7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f7e:	8d 50 01             	lea    0x1(%eax),%edx
   10f81:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10f84:	0f b6 08             	movzbl (%eax),%ecx
   10f87:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10f8a:	8d 50 01             	lea    0x1(%eax),%edx
   10f8d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   10f90:	0f b6 00             	movzbl (%eax),%eax
   10f93:	38 c1                	cmp    %al,%cl
   10f95:	74 07                	je     10f9e <kernel_memcmp+0x4a>
        {
            return 1;
   10f97:	b8 01 00 00 00       	mov    $0x1,%eax
   10f9c:	eb 12                	jmp    10fb0 <kernel_memcmp+0x5c>
    while (size--)
   10f9e:	8b 45 10             	mov    0x10(%ebp),%eax
   10fa1:	8d 50 ff             	lea    -0x1(%eax),%edx
   10fa4:	89 55 10             	mov    %edx,0x10(%ebp)
   10fa7:	85 c0                	test   %eax,%eax
   10fa9:	75 d0                	jne    10f7b <kernel_memcmp+0x27>
        }
    }
    return 0;
   10fab:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10fb0:	c9                   	leave
   10fb1:	c3                   	ret

00010fb2 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   10fb2:	55                   	push   %ebp
   10fb3:	89 e5                	mov    %esp,%ebp
   10fb5:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   10fb8:	8d 45 10             	lea    0x10(%ebp),%eax
   10fbb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   10fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fc1:	83 ec 04             	sub    $0x4,%esp
   10fc4:	50                   	push   %eax
   10fc5:	ff 75 0c             	push   0xc(%ebp)
   10fc8:	ff 75 08             	push   0x8(%ebp)
   10fcb:	e8 dd 00 00 00       	call   110ad <kernel_vsprintf>
   10fd0:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   10fd3:	90                   	nop
   10fd4:	c9                   	leave
   10fd5:	c3                   	ret

00010fd6 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   10fd6:	55                   	push   %ebp
   10fd7:	89 e5                	mov    %esp,%ebp
   10fd9:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   10fdc:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   10fe2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   10fe8:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   10fec:	74 1d                	je     1100b <kernel_itoa+0x35>
   10fee:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   10ff2:	74 17                	je     1100b <kernel_itoa+0x35>
   10ff4:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   10ff8:	74 11                	je     1100b <kernel_itoa+0x35>
   10ffa:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   10ffe:	74 0b                	je     1100b <kernel_itoa+0x35>
    {
        *p = '\0';
   11000:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11003:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11006:	e9 a0 00 00 00       	jmp    110ab <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   1100b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1100f:	79 12                	jns    11023 <kernel_itoa+0x4d>
   11011:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11015:	75 0c                	jne    11023 <kernel_itoa+0x4d>
    {
        *p++ = '-';
   11017:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1101a:	8d 50 01             	lea    0x1(%eax),%edx
   1101d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11020:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   11023:	8b 0d f0 16 01 00    	mov    0x116f0,%ecx
   11029:	8b 45 0c             	mov    0xc(%ebp),%eax
   1102c:	99                   	cltd
   1102d:	f7 7d 10             	idivl  0x10(%ebp)
   11030:	89 d0                	mov    %edx,%eax
   11032:	83 c0 0f             	add    $0xf,%eax
   11035:	01 c8                	add    %ecx,%eax
   11037:	0f b6 00             	movzbl (%eax),%eax
   1103a:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   1103d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11040:	8d 50 01             	lea    0x1(%eax),%edx
   11043:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11046:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1104a:	88 10                	mov    %dl,(%eax)
        num /= base;
   1104c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1104f:	99                   	cltd
   11050:	f7 7d 10             	idivl  0x10(%ebp)
   11053:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   11056:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1105a:	75 c7                	jne    11023 <kernel_itoa+0x4d>
    *p-- = '\0';
   1105c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1105f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11062:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11065:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   11068:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1106c:	7f 08                	jg     11076 <kernel_itoa+0xa0>
   1106e:	8b 45 08             	mov    0x8(%ebp),%eax
   11071:	83 c0 01             	add    $0x1,%eax
   11074:	eb 03                	jmp    11079 <kernel_itoa+0xa3>
   11076:	8b 45 08             	mov    0x8(%ebp),%eax
   11079:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   1107c:	eb 25                	jmp    110a3 <kernel_itoa+0xcd>
    {
        char ch = *start;
   1107e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11081:	0f b6 00             	movzbl (%eax),%eax
   11084:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   11087:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1108a:	0f b6 10             	movzbl (%eax),%edx
   1108d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11090:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11092:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11095:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   11099:	88 10                	mov    %dl,(%eax)

        p--;
   1109b:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   1109f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   110a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   110a6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   110a9:	72 d3                	jb     1107e <kernel_itoa+0xa8>
    }
}
   110ab:	c9                   	leave
   110ac:	c3                   	ret

000110ad <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   110ad:	55                   	push   %ebp
   110ae:	89 e5                	mov    %esp,%ebp
   110b0:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   110b3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   110ba:	8b 45 08             	mov    0x8(%ebp),%eax
   110bd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   110c0:	e9 11 01 00 00       	jmp    111d6 <kernel_vsprintf+0x129>
    {
        switch (state)
   110c5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   110c9:	74 0b                	je     110d6 <kernel_vsprintf+0x29>
   110cb:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   110cf:	74 2b                	je     110fc <kernel_vsprintf+0x4f>
   110d1:	e9 00 01 00 00       	jmp    111d6 <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   110d6:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   110da:	75 0c                	jne    110e8 <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   110dc:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   110e3:	e9 ee 00 00 00       	jmp    111d6 <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   110e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   110eb:	8d 50 01             	lea    0x1(%eax),%edx
   110ee:	89 55 f8             	mov    %edx,-0x8(%ebp)
   110f1:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   110f5:	88 10                	mov    %dl,(%eax)
            }
            break;
   110f7:	e9 da 00 00 00       	jmp    111d6 <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   110fc:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11100:	75 31                	jne    11133 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11102:	8b 45 10             	mov    0x10(%ebp),%eax
   11105:	8d 50 04             	lea    0x4(%eax),%edx
   11108:	89 55 10             	mov    %edx,0x10(%ebp)
   1110b:	8b 00                	mov    (%eax),%eax
   1110d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   11110:	6a 0a                	push   $0xa
   11112:	ff 75 e4             	push   -0x1c(%ebp)
   11115:	ff 75 f8             	push   -0x8(%ebp)
   11118:	e8 b9 fe ff ff       	call   10fd6 <kernel_itoa>
   1111d:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11120:	ff 75 f8             	push   -0x8(%ebp)
   11123:	e8 61 fd ff ff       	call   10e89 <kernel_strlen>
   11128:	83 c4 04             	add    $0x4,%esp
   1112b:	01 45 f8             	add    %eax,-0x8(%ebp)
   1112e:	e9 9b 00 00 00       	jmp    111ce <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   11133:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11137:	75 2e                	jne    11167 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   11139:	8b 45 10             	mov    0x10(%ebp),%eax
   1113c:	8d 50 04             	lea    0x4(%eax),%edx
   1113f:	89 55 10             	mov    %edx,0x10(%ebp)
   11142:	8b 00                	mov    (%eax),%eax
   11144:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   11147:	6a 10                	push   $0x10
   11149:	ff 75 e8             	push   -0x18(%ebp)
   1114c:	ff 75 f8             	push   -0x8(%ebp)
   1114f:	e8 82 fe ff ff       	call   10fd6 <kernel_itoa>
   11154:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11157:	ff 75 f8             	push   -0x8(%ebp)
   1115a:	e8 2a fd ff ff       	call   10e89 <kernel_strlen>
   1115f:	83 c4 04             	add    $0x4,%esp
   11162:	01 45 f8             	add    %eax,-0x8(%ebp)
   11165:	eb 67                	jmp    111ce <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   11167:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1116b:	75 19                	jne    11186 <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   1116d:	8b 45 10             	mov    0x10(%ebp),%eax
   11170:	8d 50 04             	lea    0x4(%eax),%edx
   11173:	89 55 10             	mov    %edx,0x10(%ebp)
   11176:	8b 00                	mov    (%eax),%eax
   11178:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   1117b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1117e:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11182:	88 10                	mov    %dl,(%eax)
   11184:	eb 48                	jmp    111ce <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   11186:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1118a:	75 42                	jne    111ce <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   1118c:	8b 45 10             	mov    0x10(%ebp),%eax
   1118f:	8d 50 04             	lea    0x4(%eax),%edx
   11192:	89 55 10             	mov    %edx,0x10(%ebp)
   11195:	8b 00                	mov    (%eax),%eax
   11197:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   1119a:	ff 75 f4             	push   -0xc(%ebp)
   1119d:	e8 e7 fc ff ff       	call   10e89 <kernel_strlen>
   111a2:	83 c4 04             	add    $0x4,%esp
   111a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   111a8:	eb 17                	jmp    111c1 <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   111aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
   111ad:	8d 42 01             	lea    0x1(%edx),%eax
   111b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
   111b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111b6:	8d 48 01             	lea    0x1(%eax),%ecx
   111b9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   111bc:	0f b6 12             	movzbl (%edx),%edx
   111bf:	88 10                	mov    %dl,(%eax)
                while (len--)
   111c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111c4:	8d 50 ff             	lea    -0x1(%eax),%edx
   111c7:	89 55 f0             	mov    %edx,-0x10(%ebp)
   111ca:	85 c0                	test   %eax,%eax
   111cc:	75 dc                	jne    111aa <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   111ce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   111d5:	90                   	nop
    while ((ch = *fmt++))
   111d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   111d9:	8d 50 01             	lea    0x1(%eax),%edx
   111dc:	89 55 0c             	mov    %edx,0xc(%ebp)
   111df:	0f b6 00             	movzbl (%eax),%eax
   111e2:	88 45 ef             	mov    %al,-0x11(%ebp)
   111e5:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   111e9:	0f 85 d6 fe ff ff    	jne    110c5 <kernel_vsprintf+0x18>
        }
    }
}
   111ef:	90                   	nop
   111f0:	90                   	nop
   111f1:	c9                   	leave
   111f2:	c3                   	ret

000111f3 <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   111f3:	55                   	push   %ebp
   111f4:	89 e5                	mov    %esp,%ebp
   111f6:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   111f9:	83 ec 08             	sub    $0x8,%esp
   111fc:	ff 75 14             	push   0x14(%ebp)
   111ff:	68 a4 16 01 00       	push   $0x116a4
   11204:	e8 ce 00 00 00       	call   112d7 <log_prinf>
   11209:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   1120c:	ff 75 10             	push   0x10(%ebp)
   1120f:	ff 75 0c             	push   0xc(%ebp)
   11212:	ff 75 08             	push   0x8(%ebp)
   11215:	68 b6 16 01 00       	push   $0x116b6
   1121a:	e8 b8 00 00 00       	call   112d7 <log_prinf>
   1121f:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   11222:	e8 24 fb ff ff       	call   10d4b <hlt>
   11227:	eb f9                	jmp    11222 <pannic+0x2f>

00011229 <inb>:
    outb(COM1_PORT + 3, 0x80);
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
    outb(COM1_PORT + 4, 0x0F);
   11229:	55                   	push   %ebp
   1122a:	89 e5                	mov    %esp,%ebp
   1122c:	83 ec 14             	sub    $0x14,%esp
   1122f:	8b 45 08             	mov    0x8(%ebp),%eax
   11232:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
}

   11236:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1123a:	89 c2                	mov    %eax,%edx
   1123c:	ec                   	in     (%dx),%al
   1123d:	88 45 ff             	mov    %al,-0x1(%ebp)
void log_prinf(const char *fmt, ...)
{
    char str_buf[128];
   11240:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    va_list args;
   11244:	c9                   	leave
   11245:	c3                   	ret

00011246 <outb>:

    const char *p = str_buf;
    while (*p != '\0')
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
            ;
   11246:	55                   	push   %ebp
   11247:	89 e5                	mov    %esp,%ebp
   11249:	83 ec 08             	sub    $0x8,%esp
   1124c:	8b 55 08             	mov    0x8(%ebp),%edx
   1124f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11252:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11256:	88 45 f8             	mov    %al,-0x8(%ebp)
        outb(COM1_PORT, *p++);
   11259:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1125d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11261:	ee                   	out    %al,(%dx)
    }
   11262:	90                   	nop
   11263:	c9                   	leave
   11264:	c3                   	ret

00011265 <init_log>:
{
   11265:	55                   	push   %ebp
   11266:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11268:	6a 00                	push   $0x0
   1126a:	68 f9 03 00 00       	push   $0x3f9
   1126f:	e8 d2 ff ff ff       	call   11246 <outb>
   11274:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11277:	68 80 00 00 00       	push   $0x80
   1127c:	68 fb 03 00 00       	push   $0x3fb
   11281:	e8 c0 ff ff ff       	call   11246 <outb>
   11286:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11289:	6a 03                	push   $0x3
   1128b:	68 f8 03 00 00       	push   $0x3f8
   11290:	e8 b1 ff ff ff       	call   11246 <outb>
   11295:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11298:	6a 00                	push   $0x0
   1129a:	68 f9 03 00 00       	push   $0x3f9
   1129f:	e8 a2 ff ff ff       	call   11246 <outb>
   112a4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   112a7:	6a 03                	push   $0x3
   112a9:	68 fb 03 00 00       	push   $0x3fb
   112ae:	e8 93 ff ff ff       	call   11246 <outb>
   112b3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x07);
   112b6:	6a 07                	push   $0x7
   112b8:	68 fa 03 00 00       	push   $0x3fa
   112bd:	e8 84 ff ff ff       	call   11246 <outb>
   112c2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   112c5:	6a 0f                	push   $0xf
   112c7:	68 fc 03 00 00       	push   $0x3fc
   112cc:	e8 75 ff ff ff       	call   11246 <outb>
   112d1:	83 c4 08             	add    $0x8,%esp
}
   112d4:	90                   	nop
   112d5:	c9                   	leave
   112d6:	c3                   	ret

000112d7 <log_prinf>:
{
   112d7:	55                   	push   %ebp
   112d8:	89 e5                	mov    %esp,%ebp
   112da:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   112e0:	83 ec 04             	sub    $0x4,%esp
   112e3:	68 80 00 00 00       	push   $0x80
   112e8:	6a 00                	push   $0x0
   112ea:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   112f0:	50                   	push   %eax
   112f1:	e8 1d fc ff ff       	call   10f13 <kernel_memset>
   112f6:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   112f9:	8d 45 0c             	lea    0xc(%ebp),%eax
   112fc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   11302:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11308:	83 ec 04             	sub    $0x4,%esp
   1130b:	50                   	push   %eax
   1130c:	ff 75 08             	push   0x8(%ebp)
   1130f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11315:	50                   	push   %eax
   11316:	e8 92 fd ff ff       	call   110ad <kernel_vsprintf>
   1131b:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   1131e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11324:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   11327:	eb 3b                	jmp    11364 <log_prinf+0x8d>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   11329:	90                   	nop
   1132a:	83 ec 0c             	sub    $0xc,%esp
   1132d:	68 fd 03 00 00       	push   $0x3fd
   11332:	e8 f2 fe ff ff       	call   11229 <inb>
   11337:	83 c4 10             	add    $0x10,%esp
   1133a:	0f b6 c0             	movzbl %al,%eax
   1133d:	83 e0 40             	and    $0x40,%eax
   11340:	85 c0                	test   %eax,%eax
   11342:	74 e6                	je     1132a <log_prinf+0x53>
        outb(COM1_PORT, *p++);
   11344:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11347:	8d 50 01             	lea    0x1(%eax),%edx
   1134a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1134d:	0f b6 00             	movzbl (%eax),%eax
   11350:	0f b6 c0             	movzbl %al,%eax
   11353:	83 ec 08             	sub    $0x8,%esp
   11356:	50                   	push   %eax
   11357:	68 f8 03 00 00       	push   $0x3f8
   1135c:	e8 e5 fe ff ff       	call   11246 <outb>
   11361:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   11364:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11367:	0f b6 00             	movzbl (%eax),%eax
   1136a:	84 c0                	test   %al,%al
   1136c:	75 bb                	jne    11329 <log_prinf+0x52>

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   1136e:	83 ec 08             	sub    $0x8,%esp
   11371:	6a 0d                	push   $0xd
   11373:	68 f8 03 00 00       	push   $0x3f8
   11378:	e8 c9 fe ff ff       	call   11246 <outb>
   1137d:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   11380:	83 ec 08             	sub    $0x8,%esp
   11383:	6a 0a                	push   $0xa
   11385:	68 f8 03 00 00       	push   $0x3f8
   1138a:	e8 b7 fe ff ff       	call   11246 <outb>
   1138f:	83 c4 10             	add    $0x10,%esp
}
   11392:	90                   	nop
   11393:	c9                   	leave
   11394:	c3                   	ret
