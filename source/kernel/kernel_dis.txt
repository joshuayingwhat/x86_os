
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002564 memsz 0x00007440 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021da  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000384  000121dc  000121dc  000031dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00012560  00012560  00003560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004ec0  00012580  00012580  00003564  2**5
                  ALLOC
  4 .debug_line   0000120e  00000000  00000000  00003564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 000007b3  00000000  00000000  00004772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00003884  00000000  00000000  00004f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000011f9  00000000  00000000  000087a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000180  00000000  00000000  000099a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000df4  00000000  00000000  00009b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  0000a91c  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000f34  00000000  00000000  0000a930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102bd l     F .text	0000001b list_node_init
000102d8 l     F .text	0000000b list_node_next
000102e3 l     F .text	0000000b list_count
000102ee l     F .text	0000000a list_first
000102f8 l     F .text	00000007 hlt
000102ff l     F .text	00000017 write_tr
00012580 l     O .bss	00001000 idle_task_stack
00013580 l     O .bss	00000190 task_manager
00010316 l     F .text	00000107 tss_init
00012268 l     O .rodata	0000000a __func__.0
0001052c l     F .text	0000000a idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
000108bc l     F .text	00000028 lgdt
000108e4 l     F .text	0000001a far_jump
00013720 l     O .bss	00000800 gdt_table
00013f20 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00010adb l     F .text	0000001d inb
00010af8 l     F .text	0000001f outb
00010b17 l     F .text	00000007 cli
00010b1e l     F .text	00000007 sti
00010b25 l     F .text	00000028 lidt
00010b4d l     F .text	00000007 hlt
00010b54 l     F .text	00000010 read_eflags
00010b64 l     F .text	0000000b write_eflags
00013f40 l     O .bss	00000400 idt_table
00010b6f l     F .text	000000d9 dump_core_regs
00010c48 l     F .text	0000003e do_default_handler
00010eb6 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000112a8 l     F .text	0000001f outb
00014340 l     O .bss	00000004 sys_tick
000112ef l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00014360 l     O .bss	00001000 init_task_stack
00015360 l     O .bss	000000b4 init_task
00015414 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
00011452 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
000115d9 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00011950 l     F .text	00000007 hlt
00012560 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 list.c
00011e2e l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012026 l     F .text	0000001d inb
00012043 l     F .text	0000001f outb
00015424 l     O .bss	00000014 mutex
00011786 g     F .text	00000038 bitmap_get_bit
00011ac9 g     F .text	0000004f kernel_memcpy
0001063f g     F .text	0000000a task_current
00011249 g     F .text	0000000b irq_enable_global
00011ec5 g     F .text	00000064 list_insert_last
00010dba g     F .text	0000001c do_handler_segment_not_present
000105e0 g     F .text	00000034 task_set_ready
00011882 g     F .text	0000001b bitmap_is_set
00011b18 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010abd g     F .text	0000001e cpu_init
000113b2 g     F .text	000000a0 init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00011957 g     F .text	00000047 kernel_strcpy
0001112c g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
00010d12 g     F .text	0000001c do_handler_overflow
00010e46 g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010df2 g     F .text	0000001c do_handler_general_protection
000116f4 g     F .text	00000029 sem_count
00010ca2 g     F .text	0000001c do_handler_divider
000117be g     F .text	000000c4 bitmap_set_bit
00010d82 g     F .text	0000001c do_handler_double_fault
00011389 g     F .text	00000029 init_task_entry
00010e0e g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00011254 g     F .text	0000002b pic_send_eoi
000105d6 g     F .text	0000000a task_first_task
00011607 g     F .text	0000006b sem_wait
00012062 g     F .text	0000009a init_log
00010c86 g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00010e9a g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
00015440 g     O .bss	00002000 stack
00010865 g     F .text	00000057 sys_sleep
000100e5 g       .text	00000000 exception_handler_bound_range
00011672 g     F .text	00000082 sem_notify
00010d4a g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010e2a g     F .text	0000001c do_handler_fpu_error
00010599 g     F .text	0000003d task_first_init
00010e62 g     F .text	0000001c do_handler_machine_check
00010cbe g     F .text	0000001c do_handler_Debug
00011e66 g     F .text	0000005f list_insert_first
00010845 g     F .text	00000020 task_set_wakeup
00010cda g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
0001199e g     F .text	00000070 kernel_strncpy
0001123e g     F .text	0000000b irq_disable_global
00010649 g     F .text	00000061 sys_sched_yield
00011367 g     F .text	00000022 kernel_init
000115e4 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00011cb2 g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001148b g     F .text	00000091 mutex_lock
0001022c g       .text	00000000 exception_handler_machine_check
00010d9e g     F .text	0000001c do_handler_invalid_tss
0001080b g     F .text	0000003a task_set_sleep
000110f7 g     F .text	00000035 irq_install
000120fc g     F .text	000000de log_prinf
00010981 g     F .text	0000006d init_gdt
0001127f g     F .text	00000018 irq_enter_protection
0001145d g     F .text	0000002e mutex_init
000111b7 g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
0001171d g     F .text	00000016 bitmap_byte_count
00010d66 g     F .text	0000001c do_handler_device_unavailable
000106ed g     F .text	00000045 task_dispatch
00010aaa g     F .text	00000013 switch_to_tss
000106aa g     F .text	00000043 task_next_run
00011b59 g     F .text	0000005e kernel_memcmp
00011e41 g     F .text	00000025 list_init
0001002b g       .text	00000000 exception_handler_unknow
00010e7e g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
00010614 g     F .text	0000002b task_set_block
000101f0 g       .text	00000000 exception_handler_fpu_error
0001050e g     F .text	0000001e task_switch_from_to
00010a35 g     F .text	00000075 gdt_alloc_des
00010f49 g     F .text	000001ae irq_init
0001151c g     F .text	000000bd mutex_unlock
00011297 g     F .text	00000011 irq_leave_protection
00011a8e g     F .text	0000003b kernel_strlen
000108fe g     F .text	00000083 segment_desc_set
00010d2e g     F .text	0000001c do_handler_bound_range
00011f29 g     F .text	00000078 list_remove_first
00011a0e g     F .text	00000080 kernel_strncmp
00011733 g     F .text	00000053 bitmap_init
0001017c g       .text	00000000 exception_handler_segment_not_present
0001134f g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
0001189d g     F .text	000000b3 bitmap_alloc_nbits
00010536 g     F .text	00000063 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
00010732 g     F .text	000000d9 task_time_tick
00011df8 g     F .text	00000036 pannic
00010dd6 g     F .text	0000001c do_handler_stack_segment_fault
00010cf6 g     F .text	0000001c do_handler_breakpoint
0001041d g     F .text	000000f1 task_init
00011bb7 g     F .text	00000024 kernel_sprintf
00011bdb g     F .text	000000d7 kernel_itoa
00011fa1 g     F .text	00000085 list_remove
000109ee g     F .text	00000047 gate_desc_set
000112c7 g     F .text	00000028 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 5b 13 00 00       	call   11367 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc 40 74 01 00       	mov    $0x17440,%esp
    jmp init_main
   10026:	e9 87 13 00 00       	jmp    113b2 <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 4a 0c 00 00       	call   10c86 <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 47 0c 00 00       	call   10ca2 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 44 0c 00 00       	call   10cbe <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 41 0c 00 00       	call   10cda <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 3e 0c 00 00       	call   10cf6 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 3b 0c 00 00       	call   10d12 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 38 0c 00 00       	call   10d2e <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 35 0c 00 00       	call   10d4a <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 32 0c 00 00       	call   10d66 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 31 0c 00 00       	call   10d82 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 30 0c 00 00       	call   10d9e <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 2f 0c 00 00       	call   10dba <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 2e 0c 00 00       	call   10dd6 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 2d 0c 00 00       	call   10df2 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 2c 0c 00 00       	call   10e0e <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 29 0c 00 00       	call   10e2a <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 28 0c 00 00       	call   10e46 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 25 0c 00 00       	call   10e62 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 22 0c 00 00       	call   10e7e <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 1f 0c 00 00       	call   10e9a <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 2d 10 00 00       	call   112c7 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <simple_switch>:
    //simple_switch(&from,&to)
     .text
     .global simple_switch
simple_switch:
    //取出from
    mov 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    //取出to
    mov 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp

    ret
   102bc:	c3                   	ret

000102bd <list_node_init>:
        // gdt表已经满了无法添加tss描述副到gdt中
        log_prinf("alloc tss failed");
        return -1;
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   102bd:	55                   	push   %ebp
   102be:	89 e5                	mov    %esp,%ebp
                     SEG_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102ca:	8b 45 08             	mov    0x8(%ebp),%eax
   102cd:	8b 50 04             	mov    0x4(%eax),%edx
   102d0:	8b 45 08             	mov    0x8(%ebp),%eax
   102d3:	89 10                	mov    %edx,(%eax)

   102d5:	90                   	nop
   102d6:	5d                   	pop    %ebp
   102d7:	c3                   	ret

000102d8 <list_node_next>:
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp)
{
    ASSERT(task != (task_t *)0);
    tss_init(task, entry, esp);
    // 复制进程名到task.name中
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   102d8:	55                   	push   %ebp
   102d9:	89 e5                	mov    %esp,%ebp
    task->state = TASK_CREATED; // 将开始创建的进程状态设置成task_created
   102db:	8b 45 08             	mov    0x8(%ebp),%eax
   102de:	8b 40 04             	mov    0x4(%eax),%eax
    task->sleep_ticks = 0;      // 初始化任务延迟时间
   102e1:	5d                   	pop    %ebp
   102e2:	c3                   	ret

000102e3 <list_count>:
{
    for (;;)
    {
        hlt(); // 执行低功耗指令
    }
}
   102e3:	55                   	push   %ebp
   102e4:	89 e5                	mov    %esp,%ebp

   102e6:	8b 45 08             	mov    0x8(%ebp),%eax
   102e9:	8b 40 08             	mov    0x8(%eax),%eax
void task_manager_init(void)
   102ec:	5d                   	pop    %ebp
   102ed:	c3                   	ret

000102ee <list_first>:
    list_init(&task_manager.task_list);
    list_init(&task_manager.sleep_list);
    task_manager.currt_task = (task_t *)0;

    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)(idle_task_stack + IDLE_TASK_SIZE));
}
   102ee:	55                   	push   %ebp
   102ef:	89 e5                	mov    %esp,%ebp

   102f1:	8b 45 08             	mov    0x8(%ebp),%eax
   102f4:	8b 00                	mov    (%eax),%eax
void task_first_init(void)
   102f6:	5d                   	pop    %ebp
   102f7:	c3                   	ret

000102f8 <hlt>:
    uint32_t addr[] = {offset, selector};
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
}

static inline void hlt(void)
{
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   102fb:	f4                   	hlt
}
   102fc:	90                   	nop
   102fd:	5d                   	pop    %ebp
   102fe:	c3                   	ret

000102ff <write_tr>:

static inline void write_tr(uint16_t tss_sel)
{
   102ff:	55                   	push   %ebp
   10300:	89 e5                	mov    %esp,%ebp
   10302:	83 ec 04             	sub    $0x4,%esp
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_sel));
   1030c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10310:	0f 00 d8             	ltr    %ax
}
   10313:	90                   	nop
   10314:	c9                   	leave
   10315:	c3                   	ret

00010316 <tss_init>:
{
   10316:	55                   	push   %ebp
   10317:	89 e5                	mov    %esp,%ebp
   10319:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_des();
   1031c:	e8 14 07 00 00       	call   10a35 <gdt_alloc_des>
   10321:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   10324:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10328:	79 1a                	jns    10344 <tss_init+0x2e>
        log_prinf("alloc tss failed");
   1032a:	83 ec 0c             	sub    $0xc,%esp
   1032d:	68 dc 21 01 00       	push   $0x121dc
   10332:	e8 c5 1d 00 00       	call   120fc <log_prinf>
   10337:	83 c4 10             	add    $0x10,%esp
        return -1;
   1033a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1033f:	e9 d7 00 00 00       	jmp    1041b <tss_init+0x105>
    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   10344:	8b 45 08             	mov    0x8(%ebp),%eax
   10347:	83 c0 48             	add    $0x48,%eax
   1034a:	68 89 00 00 00       	push   $0x89
   1034f:	68 b4 00 00 00       	push   $0xb4
   10354:	50                   	push   %eax
   10355:	ff 75 f4             	push   -0xc(%ebp)
   10358:	e8 a1 05 00 00       	call   108fe <segment_desc_set>
   1035d:	83 c4 10             	add    $0x10,%esp
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10360:	8b 45 08             	mov    0x8(%ebp),%eax
   10363:	83 c0 48             	add    $0x48,%eax
   10366:	83 ec 04             	sub    $0x4,%esp
   10369:	6a 68                	push   $0x68
   1036b:	6a 00                	push   $0x0
   1036d:	50                   	push   %eax
   1036e:	e8 a5 17 00 00       	call   11b18 <kernel_memset>
   10373:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	8b 55 0c             	mov    0xc(%ebp),%edx
   1037c:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1037f:	8b 45 08             	mov    0x8(%ebp),%eax
   10382:	8b 55 10             	mov    0x10(%ebp),%edx
   10385:	89 50 4c             	mov    %edx,0x4c(%eax)
   10388:	8b 45 08             	mov    0x8(%ebp),%eax
   1038b:	8b 50 4c             	mov    0x4c(%eax),%edx
   1038e:	8b 45 08             	mov    0x8(%ebp),%eax
   10391:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10397:	8b 45 08             	mov    0x8(%ebp),%eax
   1039a:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	8b 50 50             	mov    0x50(%eax),%edx
   103a7:	8b 45 08             	mov    0x8(%ebp),%eax
   103aa:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   103ba:	00 00 00 
   103bd:	8b 45 08             	mov    0x8(%ebp),%eax
   103c0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   103c6:	8b 45 08             	mov    0x8(%ebp),%eax
   103c9:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   103cf:	8b 45 08             	mov    0x8(%ebp),%eax
   103d2:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   103d8:	8b 45 08             	mov    0x8(%ebp),%eax
   103db:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   103e1:	8b 45 08             	mov    0x8(%ebp),%eax
   103e4:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   103f3:	8b 45 08             	mov    0x8(%ebp),%eax
   103f6:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   103fd:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFALUT;
   10400:	8b 45 08             	mov    0x8(%ebp),%eax
   10403:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)
    task->tss_sel = tss_sel; // 将tss选择子保存到tss_sel中
   1040a:	8b 45 08             	mov    0x8(%ebp),%eax
   1040d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10410:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10416:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1041b:	c9                   	leave
   1041c:	c3                   	ret

0001041d <task_init>:
{
   1041d:	55                   	push   %ebp
   1041e:	89 e5                	mov    %esp,%ebp
   10420:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   10423:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10427:	75 19                	jne    10442 <task_init+0x25>
   10429:	68 ed 21 01 00       	push   $0x121ed
   1042e:	68 68 22 01 00       	push   $0x12268
   10433:	6a 29                	push   $0x29
   10435:	68 04 22 01 00       	push   $0x12204
   1043a:	e8 b9 19 00 00       	call   11df8 <pannic>
   1043f:	83 c4 10             	add    $0x10,%esp
    tss_init(task, entry, esp);
   10442:	83 ec 04             	sub    $0x4,%esp
   10445:	ff 75 14             	push   0x14(%ebp)
   10448:	ff 75 10             	push   0x10(%ebp)
   1044b:	ff 75 08             	push   0x8(%ebp)
   1044e:	e8 c3 fe ff ff       	call   10316 <tss_init>
   10453:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10456:	8b 45 08             	mov    0x8(%ebp),%eax
   10459:	83 c0 10             	add    $0x10,%eax
   1045c:	83 ec 04             	sub    $0x4,%esp
   1045f:	6a 20                	push   $0x20
   10461:	ff 75 0c             	push   0xc(%ebp)
   10464:	50                   	push   %eax
   10465:	e8 34 15 00 00       	call   1199e <kernel_strncpy>
   1046a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED; // 将开始创建的进程状态设置成task_created
   1046d:	8b 45 08             	mov    0x8(%ebp),%eax
   10470:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;      // 初始化任务延迟时间
   10476:	8b 45 08             	mov    0x8(%ebp),%eax
   10479:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10480:	8b 45 08             	mov    0x8(%ebp),%eax
   10483:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   1048a:	8b 45 08             	mov    0x8(%ebp),%eax
   1048d:	8b 50 08             	mov    0x8(%eax),%edx
   10490:	8b 45 08             	mov    0x8(%ebp),%eax
   10493:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   10496:	8b 45 08             	mov    0x8(%ebp),%eax
   10499:	83 c0 40             	add    $0x40,%eax
   1049c:	83 ec 0c             	sub    $0xc,%esp
   1049f:	50                   	push   %eax
   104a0:	e8 18 fe ff ff       	call   102bd <list_node_init>
   104a5:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   104a8:	8b 45 08             	mov    0x8(%ebp),%eax
   104ab:	83 c0 30             	add    $0x30,%eax
   104ae:	83 ec 0c             	sub    $0xc,%esp
   104b1:	50                   	push   %eax
   104b2:	e8 06 fe ff ff       	call   102bd <list_node_init>
   104b7:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   104ba:	8b 45 08             	mov    0x8(%ebp),%eax
   104bd:	83 c0 38             	add    $0x38,%eax
   104c0:	83 ec 0c             	sub    $0xc,%esp
   104c3:	50                   	push   %eax
   104c4:	e8 f4 fd ff ff       	call   102bd <list_node_init>
   104c9:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   104cc:	e8 ae 0d 00 00       	call   1127f <irq_enter_protection>
   104d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   104d4:	83 ec 0c             	sub    $0xc,%esp
   104d7:	ff 75 08             	push   0x8(%ebp)
   104da:	e8 01 01 00 00       	call   105e0 <task_set_ready>
   104df:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node);
   104e2:	8b 45 08             	mov    0x8(%ebp),%eax
   104e5:	83 c0 40             	add    $0x40,%eax
   104e8:	83 ec 08             	sub    $0x8,%esp
   104eb:	50                   	push   %eax
   104ec:	68 90 35 01 00       	push   $0x13590
   104f1:	e8 cf 19 00 00       	call   11ec5 <list_insert_last>
   104f6:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   104f9:	83 ec 0c             	sub    $0xc,%esp
   104fc:	ff 75 f4             	push   -0xc(%ebp)
   104ff:	e8 93 0d 00 00       	call   11297 <irq_leave_protection>
   10504:	83 c4 10             	add    $0x10,%esp
    return 0;
   10507:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1050c:	c9                   	leave
   1050d:	c3                   	ret

0001050e <task_switch_from_to>:
{
   1050e:	55                   	push   %ebp
   1050f:	89 e5                	mov    %esp,%ebp
   10511:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   10514:	8b 45 0c             	mov    0xc(%ebp),%eax
   10517:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   1051d:	83 ec 0c             	sub    $0xc,%esp
   10520:	50                   	push   %eax
   10521:	e8 84 05 00 00       	call   10aaa <switch_to_tss>
   10526:	83 c4 10             	add    $0x10,%esp
}
   10529:	90                   	nop
   1052a:	c9                   	leave
   1052b:	c3                   	ret

0001052c <idle_task_entry>:
{
   1052c:	55                   	push   %ebp
   1052d:	89 e5                	mov    %esp,%ebp
        hlt(); // 执行低功耗指令
   1052f:	e8 c4 fd ff ff       	call   102f8 <hlt>
   10534:	eb f9                	jmp    1052f <idle_task_entry+0x3>

00010536 <task_manager_init>:
{
   10536:	55                   	push   %ebp
   10537:	89 e5                	mov    %esp,%ebp
   10539:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   1053c:	83 ec 0c             	sub    $0xc,%esp
   1053f:	68 84 35 01 00       	push   $0x13584
   10544:	e8 f8 18 00 00       	call   11e41 <list_init>
   10549:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1054c:	83 ec 0c             	sub    $0xc,%esp
   1054f:	68 90 35 01 00       	push   $0x13590
   10554:	e8 e8 18 00 00       	call   11e41 <list_init>
   10559:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1055c:	83 ec 0c             	sub    $0xc,%esp
   1055f:	68 9c 35 01 00       	push   $0x1359c
   10564:	e8 d8 18 00 00       	call   11e41 <list_init>
   10569:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = (task_t *)0;
   1056c:	c7 05 80 35 01 00 00 	movl   $0x0,0x13580
   10573:	00 00 00 
    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)(idle_task_stack + IDLE_TASK_SIZE));
   10576:	b8 80 35 01 00       	mov    $0x13580,%eax
   1057b:	89 c2                	mov    %eax,%edx
   1057d:	b8 2c 05 01 00       	mov    $0x1052c,%eax
   10582:	52                   	push   %edx
   10583:	50                   	push   %eax
   10584:	68 51 22 01 00       	push   $0x12251
   10589:	68 5c 36 01 00       	push   $0x1365c
   1058e:	e8 8a fe ff ff       	call   1041d <task_init>
   10593:	83 c4 10             	add    $0x10,%esp
}
   10596:	90                   	nop
   10597:	c9                   	leave
   10598:	c3                   	ret

00010599 <task_first_init>:
{
   10599:	55                   	push   %ebp
   1059a:	89 e5                	mov    %esp,%ebp
   1059c:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 0, 0); //??为什么入口设置为0，堆栈也设置为0
   1059f:	6a 00                	push   $0x0
   105a1:	6a 00                	push   $0x0
   105a3:	68 5b 22 01 00       	push   $0x1225b
   105a8:	68 a8 35 01 00       	push   $0x135a8
   105ad:	e8 6b fe ff ff       	call   1041d <task_init>
   105b2:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   105b5:	a1 58 36 01 00       	mov    0x13658,%eax
   105ba:	0f b7 c0             	movzwl %ax,%eax
   105bd:	83 ec 0c             	sub    $0xc,%esp
   105c0:	50                   	push   %eax
   105c1:	e8 39 fd ff ff       	call   102ff <write_tr>
   105c6:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = &task_manager.first_task;
   105c9:	c7 05 80 35 01 00 a8 	movl   $0x135a8,0x13580
   105d0:	35 01 00 
}
   105d3:	90                   	nop
   105d4:	c9                   	leave
   105d5:	c3                   	ret

000105d6 <task_first_task>:

task_t *task_first_task(void)
{
   105d6:	55                   	push   %ebp
   105d7:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   105d9:	b8 a8 35 01 00       	mov    $0x135a8,%eax
}
   105de:	5d                   	pop    %ebp
   105df:	c3                   	ret

000105e0 <task_set_ready>:

void task_set_ready(task_t *task)
{
   105e0:	55                   	push   %ebp
   105e1:	89 e5                	mov    %esp,%ebp
   105e3:	83 ec 08             	sub    $0x8,%esp
    // 如果是空闲进程就直接返回不插入到就绪队列不然空闲进程也会运行
    if (task == &task_manager.idle_task)
   105e6:	81 7d 08 5c 36 01 00 	cmpl   $0x1365c,0x8(%ebp)
   105ed:	74 22                	je     10611 <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   105ef:	8b 45 08             	mov    0x8(%ebp),%eax
   105f2:	83 c0 30             	add    $0x30,%eax
   105f5:	83 ec 08             	sub    $0x8,%esp
   105f8:	50                   	push   %eax
   105f9:	68 84 35 01 00       	push   $0x13584
   105fe:	e8 c2 18 00 00       	call   11ec5 <list_insert_last>
   10603:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10606:	8b 45 08             	mov    0x8(%ebp),%eax
   10609:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   1060f:	eb 01                	jmp    10612 <task_set_ready+0x32>
        return;
   10611:	90                   	nop
}
   10612:	c9                   	leave
   10613:	c3                   	ret

00010614 <task_set_block>:
// 将任务从就绪队列中移除 此时任务的状态不确定 有可能是等待 有可能是睡眠因此不设置状态置
void task_set_block(task_t *task)
{
   10614:	55                   	push   %ebp
   10615:	89 e5                	mov    %esp,%ebp
   10617:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   1061a:	81 7d 08 5c 36 01 00 	cmpl   $0x1365c,0x8(%ebp)
   10621:	74 19                	je     1063c <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   10623:	8b 45 08             	mov    0x8(%ebp),%eax
   10626:	83 c0 30             	add    $0x30,%eax
   10629:	83 ec 08             	sub    $0x8,%esp
   1062c:	50                   	push   %eax
   1062d:	68 84 35 01 00       	push   $0x13584
   10632:	e8 6a 19 00 00       	call   11fa1 <list_remove>
   10637:	83 c4 10             	add    $0x10,%esp
   1063a:	eb 01                	jmp    1063d <task_set_block+0x29>
        return;
   1063c:	90                   	nop
}
   1063d:	c9                   	leave
   1063e:	c3                   	ret

0001063f <task_current>:

task_t *task_current(void)
{
   1063f:	55                   	push   %ebp
   10640:	89 e5                	mov    %esp,%ebp
    return task_manager.currt_task;
   10642:	a1 80 35 01 00       	mov    0x13580,%eax
}
   10647:	5d                   	pop    %ebp
   10648:	c3                   	ret

00010649 <sys_sched_yield>:

int sys_sched_yield()
{
   10649:	55                   	push   %ebp
   1064a:	89 e5                	mov    %esp,%ebp
   1064c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1064f:	e8 2b 0c 00 00       	call   1127f <irq_enter_protection>
   10654:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1)
   10657:	83 ec 0c             	sub    $0xc,%esp
   1065a:	68 84 35 01 00       	push   $0x13584
   1065f:	e8 7f fc ff ff       	call   102e3 <list_count>
   10664:	83 c4 10             	add    $0x10,%esp
   10667:	83 f8 01             	cmp    $0x1,%eax
   1066a:	7e 29                	jle    10695 <sys_sched_yield+0x4c>
    {
        // 如果就绪队列中有其他的任务则将头部任务移到尾部
        task_t *current_task = task_current();
   1066c:	e8 ce ff ff ff       	call   1063f <task_current>
   10671:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // 从队列头部取出当前任务
        task_set_block(current_task);
   10674:	83 ec 0c             	sub    $0xc,%esp
   10677:	ff 75 f0             	push   -0x10(%ebp)
   1067a:	e8 95 ff ff ff       	call   10614 <task_set_block>
   1067f:	83 c4 10             	add    $0x10,%esp
        // 将当前任务添加到队列尾部
        task_set_ready(current_task);
   10682:	83 ec 0c             	sub    $0xc,%esp
   10685:	ff 75 f0             	push   -0x10(%ebp)
   10688:	e8 53 ff ff ff       	call   105e0 <task_set_ready>
   1068d:	83 c4 10             	add    $0x10,%esp
        // 将cpu的使用权让给下一个任务
        task_dispatch();
   10690:	e8 58 00 00 00       	call   106ed <task_dispatch>
    }
    irq_leave_protection(state);
   10695:	83 ec 0c             	sub    $0xc,%esp
   10698:	ff 75 f4             	push   -0xc(%ebp)
   1069b:	e8 f7 0b 00 00       	call   11297 <irq_leave_protection>
   106a0:	83 c4 10             	add    $0x10,%esp
    // 没有其他的任务了就直接返回
    return 0;
   106a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106a8:	c9                   	leave
   106a9:	c3                   	ret

000106aa <task_next_run>:

task_t *task_next_run(void)
{
   106aa:	55                   	push   %ebp
   106ab:	89 e5                	mov    %esp,%ebp
   106ad:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   106b0:	68 84 35 01 00       	push   $0x13584
   106b5:	e8 29 fc ff ff       	call   102e3 <list_count>
   106ba:	83 c4 04             	add    $0x4,%esp
   106bd:	85 c0                	test   %eax,%eax
   106bf:	75 07                	jne    106c8 <task_next_run+0x1e>
    {
        // 将空闲进程放入接下来要执行的任务队列
        return &task_manager.idle_task;
   106c1:	b8 5c 36 01 00       	mov    $0x1365c,%eax
   106c6:	eb 23                	jmp    106eb <task_next_run+0x41>
    }
    list_node_t *task_node = list_first(&task_manager.ready_list);
   106c8:	68 84 35 01 00       	push   $0x13584
   106cd:	e8 1c fc ff ff       	call   102ee <list_first>
   106d2:	83 c4 04             	add    $0x4,%esp
   106d5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   106d8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   106dc:	74 08                	je     106e6 <task_next_run+0x3c>
   106de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   106e1:	83 e8 30             	sub    $0x30,%eax
   106e4:	eb 05                	jmp    106eb <task_next_run+0x41>
   106e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106eb:	c9                   	leave
   106ec:	c3                   	ret

000106ed <task_dispatch>:

void task_dispatch(void)
{
   106ed:	55                   	push   %ebp
   106ee:	89 e5                	mov    %esp,%ebp
   106f0:	83 ec 18             	sub    $0x18,%esp
    // irq_state_t state = irq_enter_protection();
    task_t *to = task_next_run();
   106f3:	e8 b2 ff ff ff       	call   106aa <task_next_run>
   106f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.currt_task)
   106fb:	a1 80 35 01 00       	mov    0x13580,%eax
   10700:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10703:	74 2a                	je     1072f <task_dispatch+0x42>
    {
        task_t *from = task_current();
   10705:	e8 35 ff ff ff       	call   1063f <task_current>
   1070a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_manager.currt_task = to;
   1070d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10710:	a3 80 35 01 00       	mov    %eax,0x13580
        to->state = TASK_RUNNING;
   10715:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10718:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   1071e:	83 ec 08             	sub    $0x8,%esp
   10721:	ff 75 f4             	push   -0xc(%ebp)
   10724:	ff 75 f0             	push   -0x10(%ebp)
   10727:	e8 e2 fd ff ff       	call   1050e <task_switch_from_to>
   1072c:	83 c4 10             	add    $0x10,%esp
    }
    // irq_leave_protection(state);
}
   1072f:	90                   	nop
   10730:	c9                   	leave
   10731:	c3                   	ret

00010732 <task_time_tick>:
// 当时间片到了之后将运行中队列中当前的任务移到队列尾部
// 并取出运行队列中的下一个任务
void task_time_tick(void)
{
   10732:	55                   	push   %ebp
   10733:	89 e5                	mov    %esp,%ebp
   10735:	83 ec 18             	sub    $0x18,%esp
    task_t *current_task = task_current();
   10738:	e8 02 ff ff ff       	call   1063f <task_current>
   1073d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // irq_state_t state = irq_enter_protection();
    // 当前任务的运行时间片已经为0了
    if (--current_task->slice_ticks == 0)
   10740:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10743:	8b 40 0c             	mov    0xc(%eax),%eax
   10746:	8d 50 ff             	lea    -0x1(%eax),%edx
   10749:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074c:	89 50 0c             	mov    %edx,0xc(%eax)
   1074f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10752:	8b 40 0c             	mov    0xc(%eax),%eax
   10755:	85 c0                	test   %eax,%eax
   10757:	75 2d                	jne    10786 <task_time_tick+0x54>
    {
        // 将这次的任务重新设置计数
        current_task->slice_ticks = current_task->time_ticks;
   10759:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1075c:	8b 50 08             	mov    0x8(%eax),%edx
   1075f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10762:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(current_task);
   10765:	83 ec 0c             	sub    $0xc,%esp
   10768:	ff 75 f0             	push   -0x10(%ebp)
   1076b:	e8 a4 fe ff ff       	call   10614 <task_set_block>
   10770:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   10773:	83 ec 0c             	sub    $0xc,%esp
   10776:	ff 75 f0             	push   -0x10(%ebp)
   10779:	e8 62 fe ff ff       	call   105e0 <task_set_ready>
   1077e:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   10781:	e8 67 ff ff ff       	call   106ed <task_dispatch>
    }
    list_node_t *curr = list_first(&task_manager.sleep_list);
   10786:	83 ec 0c             	sub    $0xc,%esp
   10789:	68 9c 35 01 00       	push   $0x1359c
   1078e:	e8 5b fb ff ff       	call   102ee <list_first>
   10793:	83 c4 10             	add    $0x10,%esp
   10796:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 如果当前节点有效不为空
    while (curr)
   10799:	eb 62                	jmp    107fd <task_time_tick+0xcb>
    {
        list_node_t *next = list_node_next(curr);
   1079b:	83 ec 0c             	sub    $0xc,%esp
   1079e:	ff 75 f4             	push   -0xc(%ebp)
   107a1:	e8 32 fb ff ff       	call   102d8 <list_node_next>
   107a6:	83 c4 10             	add    $0x10,%esp
   107a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task = list_node_parent(curr, task_t, run_node);
   107ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107b0:	74 08                	je     107ba <task_time_tick+0x88>
   107b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107b5:	83 e8 30             	sub    $0x30,%eax
   107b8:	eb 05                	jmp    107bf <task_time_tick+0x8d>
   107ba:	b8 00 00 00 00       	mov    $0x0,%eax
   107bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0)
   107c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107c5:	8b 40 04             	mov    0x4(%eax),%eax
   107c8:	8d 50 ff             	lea    -0x1(%eax),%edx
   107cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107ce:	89 50 04             	mov    %edx,0x4(%eax)
   107d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107d4:	8b 40 04             	mov    0x4(%eax),%eax
   107d7:	85 c0                	test   %eax,%eax
   107d9:	75 1c                	jne    107f7 <task_time_tick+0xc5>
        {
            task_set_wakeup(task);
   107db:	83 ec 0c             	sub    $0xc,%esp
   107de:	ff 75 e8             	push   -0x18(%ebp)
   107e1:	e8 5f 00 00 00       	call   10845 <task_set_wakeup>
   107e6:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   107e9:	83 ec 0c             	sub    $0xc,%esp
   107ec:	ff 75 e8             	push   -0x18(%ebp)
   107ef:	e8 ec fd ff ff       	call   105e0 <task_set_ready>
   107f4:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   107f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   107fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10801:	75 98                	jne    1079b <task_time_tick+0x69>
    }
    task_dispatch();
   10803:	e8 e5 fe ff ff       	call   106ed <task_dispatch>
    // irq_leave_protection(state);
}
   10808:	90                   	nop
   10809:	c9                   	leave
   1080a:	c3                   	ret

0001080b <task_set_sleep>:

// 将任务插入睡眠队列
void task_set_sleep(task_t *task, uint32_t ticks)
{
   1080b:	55                   	push   %ebp
   1080c:	89 e5                	mov    %esp,%ebp
   1080e:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0)
   10811:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10815:	74 2b                	je     10842 <task_set_sleep+0x37>
    {
        return; // 如果当前任务不需要睡眠则直接返回
    }
    task->sleep_ticks = ticks;
   10817:	8b 55 0c             	mov    0xc(%ebp),%edx
   1081a:	8b 45 08             	mov    0x8(%ebp),%eax
   1081d:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   10820:	8b 45 08             	mov    0x8(%ebp),%eax
   10823:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   10829:	8b 45 08             	mov    0x8(%ebp),%eax
   1082c:	83 c0 30             	add    $0x30,%eax
   1082f:	83 ec 08             	sub    $0x8,%esp
   10832:	50                   	push   %eax
   10833:	68 9c 35 01 00       	push   $0x1359c
   10838:	e8 88 16 00 00       	call   11ec5 <list_insert_last>
   1083d:	83 c4 10             	add    $0x10,%esp
   10840:	eb 01                	jmp    10843 <task_set_sleep+0x38>
        return; // 如果当前任务不需要睡眠则直接返回
   10842:	90                   	nop
}
   10843:	c9                   	leave
   10844:	c3                   	ret

00010845 <task_set_wakeup>:

// 将任务从睡眠队列移除出去(到就绪对垒)
void task_set_wakeup(task_t *task)
{
   10845:	55                   	push   %ebp
   10846:	89 e5                	mov    %esp,%ebp
   10848:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   1084b:	8b 45 08             	mov    0x8(%ebp),%eax
   1084e:	83 c0 30             	add    $0x30,%eax
   10851:	83 ec 08             	sub    $0x8,%esp
   10854:	50                   	push   %eax
   10855:	68 9c 35 01 00       	push   $0x1359c
   1085a:	e8 42 17 00 00       	call   11fa1 <list_remove>
   1085f:	83 c4 10             	add    $0x10,%esp
}
   10862:	90                   	nop
   10863:	c9                   	leave
   10864:	c3                   	ret

00010865 <sys_sleep>:
void sys_sleep(uint32_t ms)
{
   10865:	55                   	push   %ebp
   10866:	89 e5                	mov    %esp,%ebp
   10868:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1086b:	e8 0f 0a 00 00       	call   1127f <irq_enter_protection>
   10870:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_block(task_manager.currt_task); // 将当前进程从队列中移除
   10873:	a1 80 35 01 00       	mov    0x13580,%eax
   10878:	83 ec 0c             	sub    $0xc,%esp
   1087b:	50                   	push   %eax
   1087c:	e8 93 fd ff ff       	call   10614 <task_set_block>
   10881:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.currt_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS);
   10884:	8b 45 08             	mov    0x8(%ebp),%eax
   10887:	83 c0 09             	add    $0x9,%eax
   1088a:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   1088f:	f7 e2                	mul    %edx
   10891:	c1 ea 03             	shr    $0x3,%edx
   10894:	a1 80 35 01 00       	mov    0x13580,%eax
   10899:	83 ec 08             	sub    $0x8,%esp
   1089c:	52                   	push   %edx
   1089d:	50                   	push   %eax
   1089e:	e8 68 ff ff ff       	call   1080b <task_set_sleep>
   108a3:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   108a6:	e8 42 fe ff ff       	call   106ed <task_dispatch>
    irq_leave_protection(state);
   108ab:	83 ec 0c             	sub    $0xc,%esp
   108ae:	ff 75 f4             	push   -0xc(%ebp)
   108b1:	e8 e1 09 00 00       	call   11297 <irq_leave_protection>
   108b6:	83 c4 10             	add    $0x10,%esp
}
   108b9:	90                   	nop
   108ba:	c9                   	leave
   108bb:	c3                   	ret

000108bc <lgdt>:
    desc->offset15_0 = offset & 0xFFFF;
    desc->selector = selector;
    desc->attr = attr;
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}

   108bc:	55                   	push   %ebp
   108bd:	89 e5                	mov    %esp,%ebp
   108bf:	83 ec 10             	sub    $0x10,%esp
{
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
    // 跳过第0项
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
    {
   108c2:	8b 45 08             	mov    0x8(%ebp),%eax
   108c5:	c1 e8 10             	shr    $0x10,%eax
   108c8:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
        segment_desc_t *desc = gdt_table + i;
   108cc:	8b 45 08             	mov    0x8(%ebp),%eax
   108cf:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
        if (desc->attr == 0)
   108d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   108d6:	83 e8 01             	sub    $0x1,%eax
   108d9:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
        {
   108dd:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
            mutex_unlock(&mutex);
   108e1:	90                   	nop
   108e2:	c9                   	leave
   108e3:	c3                   	ret

000108e4 <far_jump>:
   108e4:	55                   	push   %ebp
   108e5:	89 e5                	mov    %esp,%ebp
   108e7:	83 ec 10             	sub    $0x10,%esp
   108ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   108ed:	89 45 f8             	mov    %eax,-0x8(%ebp)
   108f0:	8b 45 08             	mov    0x8(%ebp),%eax
   108f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
   108f6:	8d 45 f8             	lea    -0x8(%ebp),%eax
   108f9:	ff 28                	ljmp   *(%eax)
   108fb:	90                   	nop
   108fc:	c9                   	leave
   108fd:	c3                   	ret

000108fe <segment_desc_set>:
{
   108fe:	55                   	push   %ebp
   108ff:	89 e5                	mov    %esp,%ebp
   10901:	83 ec 14             	sub    $0x14,%esp
   10904:	8b 45 14             	mov    0x14(%ebp),%eax
   10907:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   1090b:	8b 45 08             	mov    0x8(%ebp),%eax
   1090e:	83 e0 f8             	and    $0xfffffff8,%eax
   10911:	05 20 37 01 00       	add    $0x13720,%eax
   10916:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   10919:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10920:	76 0f                	jbe    10931 <segment_desc_set+0x33>
        attr |= SEG_G;
   10922:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10928:	8b 45 10             	mov    0x10(%ebp),%eax
   1092b:	c1 e8 0c             	shr    $0xc,%eax
   1092e:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   10931:	8b 45 10             	mov    0x10(%ebp),%eax
   10934:	89 c2                	mov    %eax,%edx
   10936:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10939:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   1093c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1093f:	89 c2                	mov    %eax,%edx
   10941:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10944:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10948:	8b 45 0c             	mov    0xc(%ebp),%eax
   1094b:	c1 e8 10             	shr    $0x10,%eax
   1094e:	89 c2                	mov    %eax,%edx
   10950:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10953:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   10956:	8b 45 10             	mov    0x10(%ebp),%eax
   10959:	c1 e8 10             	shr    $0x10,%eax
   1095c:	c1 e0 08             	shl    $0x8,%eax
   1095f:	66 25 00 0f          	and    $0xf00,%ax
   10963:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10967:	89 c2                	mov    %eax,%edx
   10969:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1096c:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   10970:	8b 45 0c             	mov    0xc(%ebp),%eax
   10973:	c1 e8 18             	shr    $0x18,%eax
   10976:	89 c2                	mov    %eax,%edx
   10978:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1097b:	88 50 07             	mov    %dl,0x7(%eax)
}
   1097e:	90                   	nop
   1097f:	c9                   	leave
   10980:	c3                   	ret

00010981 <init_gdt>:
{
   10981:	55                   	push   %ebp
   10982:	89 e5                	mov    %esp,%ebp
   10984:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10987:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1098e:	eb 19                	jmp    109a9 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10990:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10993:	c1 e0 03             	shl    $0x3,%eax
   10996:	6a 00                	push   $0x0
   10998:	6a 00                	push   $0x0
   1099a:	6a 00                	push   $0x0
   1099c:	50                   	push   %eax
   1099d:	e8 5c ff ff ff       	call   108fe <segment_desc_set>
   109a2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   109a5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   109a9:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   109b0:	7e de                	jle    10990 <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   109b2:	68 92 40 00 00       	push   $0x4092
   109b7:	6a ff                	push   $0xffffffff
   109b9:	6a 00                	push   $0x0
   109bb:	6a 10                	push   $0x10
   109bd:	e8 3c ff ff ff       	call   108fe <segment_desc_set>
   109c2:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   109c5:	68 9a 40 00 00       	push   $0x409a
   109ca:	6a ff                	push   $0xffffffff
   109cc:	6a 00                	push   $0x0
   109ce:	6a 08                	push   $0x8
   109d0:	e8 29 ff ff ff       	call   108fe <segment_desc_set>
   109d5:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   109d8:	b8 20 37 01 00       	mov    $0x13720,%eax
   109dd:	68 00 08 00 00       	push   $0x800
   109e2:	50                   	push   %eax
   109e3:	e8 d4 fe ff ff       	call   108bc <lgdt>
   109e8:	83 c4 08             	add    $0x8,%esp
}
   109eb:	90                   	nop
   109ec:	c9                   	leave
   109ed:	c3                   	ret

000109ee <gate_desc_set>:
{
   109ee:	55                   	push   %ebp
   109ef:	89 e5                	mov    %esp,%ebp
   109f1:	83 ec 08             	sub    $0x8,%esp
   109f4:	8b 55 0c             	mov    0xc(%ebp),%edx
   109f7:	8b 45 14             	mov    0x14(%ebp),%eax
   109fa:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   109fe:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10a02:	8b 45 10             	mov    0x10(%ebp),%eax
   10a05:	89 c2                	mov    %eax,%edx
   10a07:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0a:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10a0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a10:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a14:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10a18:	8b 45 08             	mov    0x8(%ebp),%eax
   10a1b:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a1f:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10a23:	8b 45 10             	mov    0x10(%ebp),%eax
   10a26:	c1 e8 10             	shr    $0x10,%eax
   10a29:	89 c2                	mov    %eax,%edx
   10a2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a2e:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10a32:	90                   	nop
   10a33:	c9                   	leave
   10a34:	c3                   	ret

00010a35 <gdt_alloc_des>:
{
   10a35:	55                   	push   %ebp
   10a36:	89 e5                	mov    %esp,%ebp
   10a38:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&mutex);
   10a3b:	83 ec 0c             	sub    $0xc,%esp
   10a3e:	68 20 3f 01 00       	push   $0x13f20
   10a43:	e8 43 0a 00 00       	call   1148b <mutex_lock>
   10a48:	83 c4 10             	add    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10a4b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10a52:	eb 36                	jmp    10a8a <gdt_alloc_des+0x55>
        segment_desc_t *desc = gdt_table + i;
   10a54:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a57:	c1 e0 03             	shl    $0x3,%eax
   10a5a:	05 20 37 01 00       	add    $0x13720,%eax
   10a5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0)
   10a62:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a65:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a69:	66 85 c0             	test   %ax,%ax
   10a6c:	75 18                	jne    10a86 <gdt_alloc_des+0x51>
            mutex_unlock(&mutex);
   10a6e:	83 ec 0c             	sub    $0xc,%esp
   10a71:	68 20 3f 01 00       	push   $0x13f20
   10a76:	e8 a1 0a 00 00       	call   1151c <mutex_unlock>
   10a7b:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10a7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a81:	c1 e0 03             	shl    $0x3,%eax
   10a84:	eb 22                	jmp    10aa8 <gdt_alloc_des+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10a86:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a8a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10a91:	7e c1                	jle    10a54 <gdt_alloc_des+0x1f>
    mutex_unlock(&mutex);
   10a93:	83 ec 0c             	sub    $0xc,%esp
   10a96:	68 20 3f 01 00       	push   $0x13f20
   10a9b:	e8 7c 0a 00 00       	call   1151c <mutex_unlock>
   10aa0:	83 c4 10             	add    $0x10,%esp
    return -1;
   10aa3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10aa8:	c9                   	leave
   10aa9:	c3                   	ret

00010aaa <switch_to_tss>:
{
   10aaa:	55                   	push   %ebp
   10aab:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   10aad:	6a 00                	push   $0x0
   10aaf:	ff 75 08             	push   0x8(%ebp)
   10ab2:	e8 2d fe ff ff       	call   108e4 <far_jump>
   10ab7:	83 c4 08             	add    $0x8,%esp
}
   10aba:	90                   	nop
   10abb:	c9                   	leave
   10abc:	c3                   	ret

00010abd <cpu_init>:
{
   10abd:	55                   	push   %ebp
   10abe:	89 e5                	mov    %esp,%ebp
   10ac0:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   10ac3:	83 ec 0c             	sub    $0xc,%esp
   10ac6:	68 20 3f 01 00       	push   $0x13f20
   10acb:	e8 8d 09 00 00       	call   1145d <mutex_init>
   10ad0:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   10ad3:	e8 a9 fe ff ff       	call   10981 <init_gdt>
   10ad8:	90                   	nop
   10ad9:	c9                   	leave
   10ada:	c3                   	ret

00010adb <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   10adb:	55                   	push   %ebp
   10adc:	89 e5                	mov    %esp,%ebp
   10ade:	83 ec 14             	sub    $0x14,%esp
   10ae1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   10ae8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10aec:	89 c2                	mov    %eax,%edx
   10aee:	ec                   	in     (%dx),%al
   10aef:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   10af2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   10af6:	c9                   	leave
   10af7:	c3                   	ret

00010af8 <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   10af8:	55                   	push   %ebp
   10af9:	89 e5                	mov    %esp,%ebp
   10afb:	83 ec 08             	sub    $0x8,%esp
   10afe:	8b 55 08             	mov    0x8(%ebp),%edx
   10b01:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b04:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10b08:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   10b0b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10b0f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10b13:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   10b14:	90                   	nop
   10b15:	c9                   	leave
   10b16:	c3                   	ret

00010b17 <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   10b17:	55                   	push   %ebp
   10b18:	89 e5                	mov    %esp,%ebp
        hlt();
   10b1a:	fa                   	cli
    }
   10b1b:	90                   	nop
   10b1c:	5d                   	pop    %ebp
   10b1d:	c3                   	ret

00010b1e <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   10b1e:	55                   	push   %ebp
   10b1f:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   10b21:	fb                   	sti
}
   10b22:	90                   	nop
   10b23:	5d                   	pop    %ebp
   10b24:	c3                   	ret

00010b25 <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   10b25:	55                   	push   %ebp
   10b26:	89 e5                	mov    %esp,%ebp
   10b28:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   10b2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2e:	c1 e8 10             	shr    $0x10,%eax
   10b31:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   10b35:	8b 45 08             	mov    0x8(%ebp),%eax
   10b38:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   10b3c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b3f:	83 e8 01             	sub    $0x1,%eax
   10b42:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10b46:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   10b4a:	90                   	nop
   10b4b:	c9                   	leave
   10b4c:	c3                   	ret

00010b4d <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   10b4d:	55                   	push   %ebp
   10b4e:	89 e5                	mov    %esp,%ebp
}
   10b50:	f4                   	hlt

   10b51:	90                   	nop
   10b52:	5d                   	pop    %ebp
   10b53:	c3                   	ret

00010b54 <read_eflags>:
    do_default_handler(frame, "Stack-Segment Fault.");
}

void do_handler_general_protection(exception_frame_t *frame)
{
    do_default_handler(frame, "General Protection.");
   10b54:	55                   	push   %ebp
   10b55:	89 e5                	mov    %esp,%ebp
   10b57:	83 ec 10             	sub    $0x10,%esp
}

   10b5a:	9c                   	pushf
   10b5b:	58                   	pop    %eax
   10b5c:	89 45 fc             	mov    %eax,-0x4(%ebp)
void do_handler_page_fault(exception_frame_t *frame)
   10b5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
{
   10b62:	c9                   	leave
   10b63:	c3                   	ret

00010b64 <write_eflags>:
    do_default_handler(frame, "Page Fault.");
}

   10b64:	55                   	push   %ebp
   10b65:	89 e5                	mov    %esp,%ebp
void do_handler_fpu_error(exception_frame_t *frame)
   10b67:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6a:	50                   	push   %eax
   10b6b:	9d                   	popf
{
   10b6c:	90                   	nop
   10b6d:	5d                   	pop    %ebp
   10b6e:	c3                   	ret

00010b6f <dump_core_regs>:
{
   10b6f:	55                   	push   %ebp
   10b70:	89 e5                	mov    %esp,%ebp
   10b72:	57                   	push   %edi
   10b73:	56                   	push   %esi
   10b74:	53                   	push   %ebx
   10b75:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   10b78:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7b:	8b 50 34             	mov    0x34(%eax),%edx
   10b7e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b81:	8b 40 30             	mov    0x30(%eax),%eax
   10b84:	83 ec 04             	sub    $0x4,%esp
   10b87:	52                   	push   %edx
   10b88:	50                   	push   %eax
   10b89:	68 74 22 01 00       	push   $0x12274
   10b8e:	e8 69 15 00 00       	call   120fc <log_prinf>
   10b93:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   10b96:	8b 45 08             	mov    0x8(%ebp),%eax
   10b99:	8b 38                	mov    (%eax),%edi
   10b9b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9e:	8b 70 04             	mov    0x4(%eax),%esi
   10ba1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba4:	8b 58 0c             	mov    0xc(%eax),%ebx
   10ba7:	8b 45 08             	mov    0x8(%ebp),%eax
   10baa:	8b 48 08             	mov    0x8(%eax),%ecx
   10bad:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb0:	8b 50 0c             	mov    0xc(%eax),%edx
   10bb3:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb6:	8b 40 3c             	mov    0x3c(%eax),%eax
   10bb9:	83 ec 04             	sub    $0x4,%esp
   10bbc:	57                   	push   %edi
   10bbd:	56                   	push   %esi
   10bbe:	53                   	push   %ebx
   10bbf:	51                   	push   %ecx
   10bc0:	52                   	push   %edx
   10bc1:	50                   	push   %eax
   10bc2:	68 8c 22 01 00       	push   $0x1228c
   10bc7:	e8 30 15 00 00       	call   120fc <log_prinf>
   10bcc:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   10bcf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd2:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10bd5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd8:	8b 40 18             	mov    0x18(%eax),%eax
   10bdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10bde:	8b 45 08             	mov    0x8(%ebp),%eax
   10be1:	8b 58 14             	mov    0x14(%eax),%ebx
   10be4:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10be7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bea:	8b 78 10             	mov    0x10(%eax),%edi
   10bed:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf0:	8b 70 24             	mov    0x24(%eax),%esi
   10bf3:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf6:	8b 58 28             	mov    0x28(%eax),%ebx
   10bf9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfc:	8b 50 20             	mov    0x20(%eax),%edx
   10bff:	8b 45 08             	mov    0x8(%ebp),%eax
   10c02:	8b 40 2c             	mov    0x2c(%eax),%eax
   10c05:	83 ec 0c             	sub    $0xc,%esp
   10c08:	51                   	push   %ecx
   10c09:	ff 75 e4             	push   -0x1c(%ebp)
   10c0c:	ff 75 e0             	push   -0x20(%ebp)
   10c0f:	57                   	push   %edi
   10c10:	56                   	push   %esi
   10c11:	53                   	push   %ebx
   10c12:	52                   	push   %edx
   10c13:	50                   	push   %eax
   10c14:	68 b4 22 01 00       	push   $0x122b4
   10c19:	e8 de 14 00 00       	call   120fc <log_prinf>
   10c1e:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   10c21:	8b 45 08             	mov    0x8(%ebp),%eax
   10c24:	8b 50 40             	mov    0x40(%eax),%edx
   10c27:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2a:	8b 40 38             	mov    0x38(%eax),%eax
   10c2d:	83 ec 04             	sub    $0x4,%esp
   10c30:	52                   	push   %edx
   10c31:	50                   	push   %eax
   10c32:	68 05 23 01 00       	push   $0x12305
   10c37:	e8 c0 14 00 00       	call   120fc <log_prinf>
   10c3c:	83 c4 10             	add    $0x10,%esp
}
   10c3f:	90                   	nop
   10c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10c43:	5b                   	pop    %ebx
   10c44:	5e                   	pop    %esi
   10c45:	5f                   	pop    %edi
   10c46:	5d                   	pop    %ebp
   10c47:	c3                   	ret

00010c48 <do_default_handler>:
{
   10c48:	55                   	push   %ebp
   10c49:	89 e5                	mov    %esp,%ebp
   10c4b:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   10c4e:	83 ec 0c             	sub    $0xc,%esp
   10c51:	68 1e 23 01 00       	push   $0x1231e
   10c56:	e8 a1 14 00 00       	call   120fc <log_prinf>
   10c5b:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   10c5e:	83 ec 08             	sub    $0x8,%esp
   10c61:	ff 75 0c             	push   0xc(%ebp)
   10c64:	68 3b 23 01 00       	push   $0x1233b
   10c69:	e8 8e 14 00 00       	call   120fc <log_prinf>
   10c6e:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10c71:	83 ec 0c             	sub    $0xc,%esp
   10c74:	ff 75 08             	push   0x8(%ebp)
   10c77:	e8 f3 fe ff ff       	call   10b6f <dump_core_regs>
   10c7c:	83 c4 10             	add    $0x10,%esp
        hlt();
   10c7f:	e8 c9 fe ff ff       	call   10b4d <hlt>
   10c84:	eb f9                	jmp    10c7f <do_default_handler+0x37>

00010c86 <do_handler_unknow>:
{
   10c86:	55                   	push   %ebp
   10c87:	89 e5                	mov    %esp,%ebp
   10c89:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   10c8c:	83 ec 08             	sub    $0x8,%esp
   10c8f:	68 4c 23 01 00       	push   $0x1234c
   10c94:	ff 75 08             	push   0x8(%ebp)
   10c97:	e8 ac ff ff ff       	call   10c48 <do_default_handler>
   10c9c:	83 c4 10             	add    $0x10,%esp
}
   10c9f:	90                   	nop
   10ca0:	c9                   	leave
   10ca1:	c3                   	ret

00010ca2 <do_handler_divider>:
{
   10ca2:	55                   	push   %ebp
   10ca3:	89 e5                	mov    %esp,%ebp
   10ca5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   10ca8:	83 ec 08             	sub    $0x8,%esp
   10cab:	68 60 23 01 00       	push   $0x12360
   10cb0:	ff 75 08             	push   0x8(%ebp)
   10cb3:	e8 90 ff ff ff       	call   10c48 <do_default_handler>
   10cb8:	83 c4 10             	add    $0x10,%esp
}
   10cbb:	90                   	nop
   10cbc:	c9                   	leave
   10cbd:	c3                   	ret

00010cbe <do_handler_Debug>:
{
   10cbe:	55                   	push   %ebp
   10cbf:	89 e5                	mov    %esp,%ebp
   10cc1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   10cc4:	83 ec 08             	sub    $0x8,%esp
   10cc7:	68 75 23 01 00       	push   $0x12375
   10ccc:	ff 75 08             	push   0x8(%ebp)
   10ccf:	e8 74 ff ff ff       	call   10c48 <do_default_handler>
   10cd4:	83 c4 10             	add    $0x10,%esp
}
   10cd7:	90                   	nop
   10cd8:	c9                   	leave
   10cd9:	c3                   	ret

00010cda <do_handler_NMI>:
{
   10cda:	55                   	push   %ebp
   10cdb:	89 e5                	mov    %esp,%ebp
   10cdd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10ce0:	83 ec 08             	sub    $0x8,%esp
   10ce3:	68 85 23 01 00       	push   $0x12385
   10ce8:	ff 75 08             	push   0x8(%ebp)
   10ceb:	e8 58 ff ff ff       	call   10c48 <do_default_handler>
   10cf0:	83 c4 10             	add    $0x10,%esp
}
   10cf3:	90                   	nop
   10cf4:	c9                   	leave
   10cf5:	c3                   	ret

00010cf6 <do_handler_breakpoint>:
{
   10cf6:	55                   	push   %ebp
   10cf7:	89 e5                	mov    %esp,%ebp
   10cf9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10cfc:	83 ec 08             	sub    $0x8,%esp
   10cff:	68 94 23 01 00       	push   $0x12394
   10d04:	ff 75 08             	push   0x8(%ebp)
   10d07:	e8 3c ff ff ff       	call   10c48 <do_default_handler>
   10d0c:	83 c4 10             	add    $0x10,%esp
}
   10d0f:	90                   	nop
   10d10:	c9                   	leave
   10d11:	c3                   	ret

00010d12 <do_handler_overflow>:
{
   10d12:	55                   	push   %ebp
   10d13:	89 e5                	mov    %esp,%ebp
   10d15:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10d18:	83 ec 08             	sub    $0x8,%esp
   10d1b:	68 a0 23 01 00       	push   $0x123a0
   10d20:	ff 75 08             	push   0x8(%ebp)
   10d23:	e8 20 ff ff ff       	call   10c48 <do_default_handler>
   10d28:	83 c4 10             	add    $0x10,%esp
}
   10d2b:	90                   	nop
   10d2c:	c9                   	leave
   10d2d:	c3                   	ret

00010d2e <do_handler_bound_range>:
{
   10d2e:	55                   	push   %ebp
   10d2f:	89 e5                	mov    %esp,%ebp
   10d31:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10d34:	83 ec 08             	sub    $0x8,%esp
   10d37:	68 aa 23 01 00       	push   $0x123aa
   10d3c:	ff 75 08             	push   0x8(%ebp)
   10d3f:	e8 04 ff ff ff       	call   10c48 <do_default_handler>
   10d44:	83 c4 10             	add    $0x10,%esp
}
   10d47:	90                   	nop
   10d48:	c9                   	leave
   10d49:	c3                   	ret

00010d4a <do_handler_invalid_opcode>:
{
   10d4a:	55                   	push   %ebp
   10d4b:	89 e5                	mov    %esp,%ebp
   10d4d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10d50:	83 ec 08             	sub    $0x8,%esp
   10d53:	68 c0 23 01 00       	push   $0x123c0
   10d58:	ff 75 08             	push   0x8(%ebp)
   10d5b:	e8 e8 fe ff ff       	call   10c48 <do_default_handler>
   10d60:	83 c4 10             	add    $0x10,%esp
}
   10d63:	90                   	nop
   10d64:	c9                   	leave
   10d65:	c3                   	ret

00010d66 <do_handler_device_unavailable>:
{
   10d66:	55                   	push   %ebp
   10d67:	89 e5                	mov    %esp,%ebp
   10d69:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10d6c:	83 ec 08             	sub    $0x8,%esp
   10d6f:	68 d0 23 01 00       	push   $0x123d0
   10d74:	ff 75 08             	push   0x8(%ebp)
   10d77:	e8 cc fe ff ff       	call   10c48 <do_default_handler>
   10d7c:	83 c4 10             	add    $0x10,%esp
}
   10d7f:	90                   	nop
   10d80:	c9                   	leave
   10d81:	c3                   	ret

00010d82 <do_handler_double_fault>:
{
   10d82:	55                   	push   %ebp
   10d83:	89 e5                	mov    %esp,%ebp
   10d85:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   10d88:	83 ec 08             	sub    $0x8,%esp
   10d8b:	68 e6 23 01 00       	push   $0x123e6
   10d90:	ff 75 08             	push   0x8(%ebp)
   10d93:	e8 b0 fe ff ff       	call   10c48 <do_default_handler>
   10d98:	83 c4 10             	add    $0x10,%esp
}
   10d9b:	90                   	nop
   10d9c:	c9                   	leave
   10d9d:	c3                   	ret

00010d9e <do_handler_invalid_tss>:
{
   10d9e:	55                   	push   %ebp
   10d9f:	89 e5                	mov    %esp,%ebp
   10da1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   10da4:	83 ec 08             	sub    $0x8,%esp
   10da7:	68 f4 23 01 00       	push   $0x123f4
   10dac:	ff 75 08             	push   0x8(%ebp)
   10daf:	e8 94 fe ff ff       	call   10c48 <do_default_handler>
   10db4:	83 c4 10             	add    $0x10,%esp
}
   10db7:	90                   	nop
   10db8:	c9                   	leave
   10db9:	c3                   	ret

00010dba <do_handler_segment_not_present>:
{
   10dba:	55                   	push   %ebp
   10dbb:	89 e5                	mov    %esp,%ebp
   10dbd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10dc0:	83 ec 08             	sub    $0x8,%esp
   10dc3:	68 00 24 01 00       	push   $0x12400
   10dc8:	ff 75 08             	push   0x8(%ebp)
   10dcb:	e8 78 fe ff ff       	call   10c48 <do_default_handler>
   10dd0:	83 c4 10             	add    $0x10,%esp
}
   10dd3:	90                   	nop
   10dd4:	c9                   	leave
   10dd5:	c3                   	ret

00010dd6 <do_handler_stack_segment_fault>:
{
   10dd6:	55                   	push   %ebp
   10dd7:	89 e5                	mov    %esp,%ebp
   10dd9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10ddc:	83 ec 08             	sub    $0x8,%esp
   10ddf:	68 15 24 01 00       	push   $0x12415
   10de4:	ff 75 08             	push   0x8(%ebp)
   10de7:	e8 5c fe ff ff       	call   10c48 <do_default_handler>
   10dec:	83 c4 10             	add    $0x10,%esp
}
   10def:	90                   	nop
   10df0:	c9                   	leave
   10df1:	c3                   	ret

00010df2 <do_handler_general_protection>:
{
   10df2:	55                   	push   %ebp
   10df3:	89 e5                	mov    %esp,%ebp
   10df5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   10df8:	83 ec 08             	sub    $0x8,%esp
   10dfb:	68 2a 24 01 00       	push   $0x1242a
   10e00:	ff 75 08             	push   0x8(%ebp)
   10e03:	e8 40 fe ff ff       	call   10c48 <do_default_handler>
   10e08:	83 c4 10             	add    $0x10,%esp
}
   10e0b:	90                   	nop
   10e0c:	c9                   	leave
   10e0d:	c3                   	ret

00010e0e <do_handler_page_fault>:
{
   10e0e:	55                   	push   %ebp
   10e0f:	89 e5                	mov    %esp,%ebp
   10e11:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10e14:	83 ec 08             	sub    $0x8,%esp
   10e17:	68 3e 24 01 00       	push   $0x1243e
   10e1c:	ff 75 08             	push   0x8(%ebp)
   10e1f:	e8 24 fe ff ff       	call   10c48 <do_default_handler>
   10e24:	83 c4 10             	add    $0x10,%esp
}
   10e27:	90                   	nop
   10e28:	c9                   	leave
   10e29:	c3                   	ret

00010e2a <do_handler_fpu_error>:
{
   10e2a:	55                   	push   %ebp
   10e2b:	89 e5                	mov    %esp,%ebp
   10e2d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10e30:	83 ec 08             	sub    $0x8,%esp
   10e33:	68 4a 24 01 00       	push   $0x1244a
   10e38:	ff 75 08             	push   0x8(%ebp)
   10e3b:	e8 08 fe ff ff       	call   10c48 <do_default_handler>
   10e40:	83 c4 10             	add    $0x10,%esp
}
   10e43:	90                   	nop
   10e44:	c9                   	leave
   10e45:	c3                   	ret

00010e46 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   10e46:	55                   	push   %ebp
   10e47:	89 e5                	mov    %esp,%ebp
   10e49:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10e4c:	83 ec 08             	sub    $0x8,%esp
   10e4f:	68 68 24 01 00       	push   $0x12468
   10e54:	ff 75 08             	push   0x8(%ebp)
   10e57:	e8 ec fd ff ff       	call   10c48 <do_default_handler>
   10e5c:	83 c4 10             	add    $0x10,%esp
}
   10e5f:	90                   	nop
   10e60:	c9                   	leave
   10e61:	c3                   	ret

00010e62 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   10e62:	55                   	push   %ebp
   10e63:	89 e5                	mov    %esp,%ebp
   10e65:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   10e68:	83 ec 08             	sub    $0x8,%esp
   10e6b:	68 79 24 01 00       	push   $0x12479
   10e70:	ff 75 08             	push   0x8(%ebp)
   10e73:	e8 d0 fd ff ff       	call   10c48 <do_default_handler>
   10e78:	83 c4 10             	add    $0x10,%esp
}
   10e7b:	90                   	nop
   10e7c:	c9                   	leave
   10e7d:	c3                   	ret

00010e7e <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   10e7e:	55                   	push   %ebp
   10e7f:	89 e5                	mov    %esp,%ebp
   10e81:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   10e84:	83 ec 08             	sub    $0x8,%esp
   10e87:	68 88 24 01 00       	push   $0x12488
   10e8c:	ff 75 08             	push   0x8(%ebp)
   10e8f:	e8 b4 fd ff ff       	call   10c48 <do_default_handler>
   10e94:	83 c4 10             	add    $0x10,%esp
}
   10e97:	90                   	nop
   10e98:	c9                   	leave
   10e99:	c3                   	ret

00010e9a <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   10e9a:	55                   	push   %ebp
   10e9b:	89 e5                	mov    %esp,%ebp
   10e9d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   10ea0:	83 ec 08             	sub    $0x8,%esp
   10ea3:	68 a7 24 01 00       	push   $0x124a7
   10ea8:	ff 75 08             	push   0x8(%ebp)
   10eab:	e8 98 fd ff ff       	call   10c48 <do_default_handler>
   10eb0:	83 c4 10             	add    $0x10,%esp
}
   10eb3:	90                   	nop
   10eb4:	c9                   	leave
   10eb5:	c3                   	ret

00010eb6 <init_pic>:

static void init_pic(void)
{
   10eb6:	55                   	push   %ebp
   10eb7:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10eb9:	6a 11                	push   $0x11
   10ebb:	6a 20                	push   $0x20
   10ebd:	e8 36 fc ff ff       	call   10af8 <outb>
   10ec2:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10ec5:	6a 20                	push   $0x20
   10ec7:	6a 21                	push   $0x21
   10ec9:	e8 2a fc ff ff       	call   10af8 <outb>
   10ece:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10ed1:	6a 04                	push   $0x4
   10ed3:	6a 21                	push   $0x21
   10ed5:	e8 1e fc ff ff       	call   10af8 <outb>
   10eda:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10edd:	6a 01                	push   $0x1
   10edf:	6a 21                	push   $0x21
   10ee1:	e8 12 fc ff ff       	call   10af8 <outb>
   10ee6:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10ee9:	6a 11                	push   $0x11
   10eeb:	68 a0 00 00 00       	push   $0xa0
   10ef0:	e8 03 fc ff ff       	call   10af8 <outb>
   10ef5:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10ef8:	6a 28                	push   $0x28
   10efa:	68 a1 00 00 00       	push   $0xa1
   10eff:	e8 f4 fb ff ff       	call   10af8 <outb>
   10f04:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10f07:	6a 02                	push   $0x2
   10f09:	68 a1 00 00 00       	push   $0xa1
   10f0e:	e8 e5 fb ff ff       	call   10af8 <outb>
   10f13:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10f16:	6a 01                	push   $0x1
   10f18:	68 a1 00 00 00       	push   $0xa1
   10f1d:	e8 d6 fb ff ff       	call   10af8 <outb>
   10f22:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10f25:	68 fb 00 00 00       	push   $0xfb
   10f2a:	6a 21                	push   $0x21
   10f2c:	e8 c7 fb ff ff       	call   10af8 <outb>
   10f31:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   10f34:	68 ff 00 00 00       	push   $0xff
   10f39:	68 a1 00 00 00       	push   $0xa1
   10f3e:	e8 b5 fb ff ff       	call   10af8 <outb>
   10f43:	83 c4 08             	add    $0x8,%esp
}
   10f46:	90                   	nop
   10f47:	c9                   	leave
   10f48:	c3                   	ret

00010f49 <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   10f49:	55                   	push   %ebp
   10f4a:	89 e5                	mov    %esp,%ebp
   10f4c:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10f4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10f56:	eb 25                	jmp    10f7d <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10f58:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10f5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f60:	c1 e0 03             	shl    $0x3,%eax
   10f63:	05 40 3f 01 00       	add    $0x13f40,%eax
   10f68:	68 00 8e 00 00       	push   $0x8e00
   10f6d:	52                   	push   %edx
   10f6e:	6a 08                	push   $0x8
   10f70:	50                   	push   %eax
   10f71:	e8 78 fa ff ff       	call   109ee <gate_desc_set>
   10f76:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10f79:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10f7d:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10f81:	7e d5                	jle    10f58 <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10f83:	83 ec 08             	sub    $0x8,%esp
   10f86:	68 4a 00 01 00       	push   $0x1004a
   10f8b:	6a 00                	push   $0x0
   10f8d:	e8 65 01 00 00       	call   110f7 <irq_install>
   10f92:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10f95:	83 ec 08             	sub    $0x8,%esp
   10f98:	68 69 00 01 00       	push   $0x10069
   10f9d:	6a 01                	push   $0x1
   10f9f:	e8 53 01 00 00       	call   110f7 <irq_install>
   10fa4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10fa7:	83 ec 08             	sub    $0x8,%esp
   10faa:	68 88 00 01 00       	push   $0x10088
   10faf:	6a 02                	push   $0x2
   10fb1:	e8 41 01 00 00       	call   110f7 <irq_install>
   10fb6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10fb9:	83 ec 08             	sub    $0x8,%esp
   10fbc:	68 a7 00 01 00       	push   $0x100a7
   10fc1:	6a 03                	push   $0x3
   10fc3:	e8 2f 01 00 00       	call   110f7 <irq_install>
   10fc8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10fcb:	83 ec 08             	sub    $0x8,%esp
   10fce:	68 c6 00 01 00       	push   $0x100c6
   10fd3:	6a 04                	push   $0x4
   10fd5:	e8 1d 01 00 00       	call   110f7 <irq_install>
   10fda:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10fdd:	83 ec 08             	sub    $0x8,%esp
   10fe0:	68 e5 00 01 00       	push   $0x100e5
   10fe5:	6a 05                	push   $0x5
   10fe7:	e8 0b 01 00 00       	call   110f7 <irq_install>
   10fec:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10fef:	83 ec 08             	sub    $0x8,%esp
   10ff2:	68 04 01 01 00       	push   $0x10104
   10ff7:	6a 06                	push   $0x6
   10ff9:	e8 f9 00 00 00       	call   110f7 <irq_install>
   10ffe:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   11001:	83 ec 08             	sub    $0x8,%esp
   11004:	68 23 01 01 00       	push   $0x10123
   11009:	6a 07                	push   $0x7
   1100b:	e8 e7 00 00 00       	call   110f7 <irq_install>
   11010:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   11013:	83 ec 08             	sub    $0x8,%esp
   11016:	68 42 01 01 00       	push   $0x10142
   1101b:	6a 08                	push   $0x8
   1101d:	e8 d5 00 00 00       	call   110f7 <irq_install>
   11022:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   11025:	83 ec 08             	sub    $0x8,%esp
   11028:	68 5f 01 01 00       	push   $0x1015f
   1102d:	6a 0a                	push   $0xa
   1102f:	e8 c3 00 00 00       	call   110f7 <irq_install>
   11034:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   11037:	83 ec 08             	sub    $0x8,%esp
   1103a:	68 7c 01 01 00       	push   $0x1017c
   1103f:	6a 0b                	push   $0xb
   11041:	e8 b1 00 00 00       	call   110f7 <irq_install>
   11046:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   11049:	83 ec 08             	sub    $0x8,%esp
   1104c:	68 99 01 01 00       	push   $0x10199
   11051:	6a 0c                	push   $0xc
   11053:	e8 9f 00 00 00       	call   110f7 <irq_install>
   11058:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   1105b:	83 ec 08             	sub    $0x8,%esp
   1105e:	68 b6 01 01 00       	push   $0x101b6
   11063:	6a 0d                	push   $0xd
   11065:	e8 8d 00 00 00       	call   110f7 <irq_install>
   1106a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   1106d:	83 ec 08             	sub    $0x8,%esp
   11070:	68 d3 01 01 00       	push   $0x101d3
   11075:	6a 0e                	push   $0xe
   11077:	e8 7b 00 00 00       	call   110f7 <irq_install>
   1107c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   1107f:	83 ec 08             	sub    $0x8,%esp
   11082:	68 f0 01 01 00       	push   $0x101f0
   11087:	6a 10                	push   $0x10
   11089:	e8 69 00 00 00       	call   110f7 <irq_install>
   1108e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   11091:	83 ec 08             	sub    $0x8,%esp
   11094:	68 0f 02 01 00       	push   $0x1020f
   11099:	6a 11                	push   $0x11
   1109b:	e8 57 00 00 00       	call   110f7 <irq_install>
   110a0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   110a3:	83 ec 08             	sub    $0x8,%esp
   110a6:	68 2c 02 01 00       	push   $0x1022c
   110ab:	6a 12                	push   $0x12
   110ad:	e8 45 00 00 00       	call   110f7 <irq_install>
   110b2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   110b5:	83 ec 08             	sub    $0x8,%esp
   110b8:	68 4b 02 01 00       	push   $0x1024b
   110bd:	6a 13                	push   $0x13
   110bf:	e8 33 00 00 00       	call   110f7 <irq_install>
   110c4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   110c7:	83 ec 08             	sub    $0x8,%esp
   110ca:	68 6a 02 01 00       	push   $0x1026a
   110cf:	6a 14                	push   $0x14
   110d1:	e8 21 00 00 00       	call   110f7 <irq_install>
   110d6:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   110d9:	b8 40 3f 01 00       	mov    $0x13f40,%eax
   110de:	83 ec 08             	sub    $0x8,%esp
   110e1:	68 00 04 00 00       	push   $0x400
   110e6:	50                   	push   %eax
   110e7:	e8 39 fa ff ff       	call   10b25 <lidt>
   110ec:	83 c4 10             	add    $0x10,%esp

    init_pic();
   110ef:	e8 c2 fd ff ff       	call   10eb6 <init_pic>
}
   110f4:	90                   	nop
   110f5:	c9                   	leave
   110f6:	c3                   	ret

000110f7 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   110f7:	55                   	push   %ebp
   110f8:	89 e5                	mov    %esp,%ebp
   110fa:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   110fd:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11101:	7e 07                	jle    1110a <irq_install+0x13>
    {
        return -1;
   11103:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11108:	eb 20                	jmp    1112a <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   1110a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1110d:	8b 55 08             	mov    0x8(%ebp),%edx
   11110:	c1 e2 03             	shl    $0x3,%edx
   11113:	81 c2 40 3f 01 00    	add    $0x13f40,%edx
   11119:	68 00 8e 00 00       	push   $0x8e00
   1111e:	50                   	push   %eax
   1111f:	6a 08                	push   $0x8
   11121:	52                   	push   %edx
   11122:	e8 c7 f8 ff ff       	call   109ee <gate_desc_set>
   11127:	83 c4 10             	add    $0x10,%esp
}
   1112a:	c9                   	leave
   1112b:	c3                   	ret

0001112c <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   1112c:	55                   	push   %ebp
   1112d:	89 e5                	mov    %esp,%ebp
   1112f:	53                   	push   %ebx
   11130:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   11133:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11137:	7e 78                	jle    111b1 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11139:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   1113d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11141:	7f 32                	jg     11175 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11143:	6a 21                	push   $0x21
   11145:	e8 91 f9 ff ff       	call   10adb <inb>
   1114a:	83 c4 04             	add    $0x4,%esp
   1114d:	89 c3                	mov    %eax,%ebx
   1114f:	8b 45 08             	mov    0x8(%ebp),%eax
   11152:	ba 01 00 00 00       	mov    $0x1,%edx
   11157:	89 c1                	mov    %eax,%ecx
   11159:	d3 e2                	shl    %cl,%edx
   1115b:	89 d0                	mov    %edx,%eax
   1115d:	f7 d0                	not    %eax
   1115f:	21 d8                	and    %ebx,%eax
   11161:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11164:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11168:	50                   	push   %eax
   11169:	6a 21                	push   $0x21
   1116b:	e8 88 f9 ff ff       	call   10af8 <outb>
   11170:	83 c4 08             	add    $0x8,%esp
   11173:	eb 3d                	jmp    111b2 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   11175:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11179:	68 a1 00 00 00       	push   $0xa1
   1117e:	e8 58 f9 ff ff       	call   10adb <inb>
   11183:	83 c4 04             	add    $0x4,%esp
   11186:	89 c3                	mov    %eax,%ebx
   11188:	8b 45 08             	mov    0x8(%ebp),%eax
   1118b:	ba 01 00 00 00       	mov    $0x1,%edx
   11190:	89 c1                	mov    %eax,%ecx
   11192:	d3 e2                	shl    %cl,%edx
   11194:	89 d0                	mov    %edx,%eax
   11196:	f7 d0                	not    %eax
   11198:	21 d8                	and    %ebx,%eax
   1119a:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   1119d:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   111a1:	50                   	push   %eax
   111a2:	68 a1 00 00 00       	push   $0xa1
   111a7:	e8 4c f9 ff ff       	call   10af8 <outb>
   111ac:	83 c4 08             	add    $0x8,%esp
   111af:	eb 01                	jmp    111b2 <irq_enable+0x86>
        return;
   111b1:	90                   	nop
    }
}
   111b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   111b5:	c9                   	leave
   111b6:	c3                   	ret

000111b7 <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   111b7:	55                   	push   %ebp
   111b8:	89 e5                	mov    %esp,%ebp
   111ba:	53                   	push   %ebx
   111bb:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   111be:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   111c2:	7e 74                	jle    11238 <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   111c4:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   111c8:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   111cc:	7f 30                	jg     111fe <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   111ce:	6a 21                	push   $0x21
   111d0:	e8 06 f9 ff ff       	call   10adb <inb>
   111d5:	83 c4 04             	add    $0x4,%esp
   111d8:	89 c3                	mov    %eax,%ebx
   111da:	8b 45 08             	mov    0x8(%ebp),%eax
   111dd:	ba 01 00 00 00       	mov    $0x1,%edx
   111e2:	89 c1                	mov    %eax,%ecx
   111e4:	d3 e2                	shl    %cl,%edx
   111e6:	89 d0                	mov    %edx,%eax
   111e8:	09 d8                	or     %ebx,%eax
   111ea:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   111ed:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   111f1:	50                   	push   %eax
   111f2:	6a 21                	push   $0x21
   111f4:	e8 ff f8 ff ff       	call   10af8 <outb>
   111f9:	83 c4 08             	add    $0x8,%esp
   111fc:	eb 3b                	jmp    11239 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   111fe:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   11202:	68 a1 00 00 00       	push   $0xa1
   11207:	e8 cf f8 ff ff       	call   10adb <inb>
   1120c:	83 c4 04             	add    $0x4,%esp
   1120f:	89 c3                	mov    %eax,%ebx
   11211:	8b 45 08             	mov    0x8(%ebp),%eax
   11214:	ba 01 00 00 00       	mov    $0x1,%edx
   11219:	89 c1                	mov    %eax,%ecx
   1121b:	d3 e2                	shl    %cl,%edx
   1121d:	89 d0                	mov    %edx,%eax
   1121f:	09 d8                	or     %ebx,%eax
   11221:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   11224:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11228:	50                   	push   %eax
   11229:	68 a1 00 00 00       	push   $0xa1
   1122e:	e8 c5 f8 ff ff       	call   10af8 <outb>
   11233:	83 c4 08             	add    $0x8,%esp
   11236:	eb 01                	jmp    11239 <irq_disable+0x82>
        return;
   11238:	90                   	nop
    }
}
   11239:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1123c:	c9                   	leave
   1123d:	c3                   	ret

0001123e <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   1123e:	55                   	push   %ebp
   1123f:	89 e5                	mov    %esp,%ebp
    cli();
   11241:	e8 d1 f8 ff ff       	call   10b17 <cli>
}
   11246:	90                   	nop
   11247:	5d                   	pop    %ebp
   11248:	c3                   	ret

00011249 <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   11249:	55                   	push   %ebp
   1124a:	89 e5                	mov    %esp,%ebp
    sti();
   1124c:	e8 cd f8 ff ff       	call   10b1e <sti>
}
   11251:	90                   	nop
   11252:	5d                   	pop    %ebp
   11253:	c3                   	ret

00011254 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   11254:	55                   	push   %ebp
   11255:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11257:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   1125b:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1125f:	7e 0f                	jle    11270 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11261:	6a 20                	push   $0x20
   11263:	68 a0 00 00 00       	push   $0xa0
   11268:	e8 8b f8 ff ff       	call   10af8 <outb>
   1126d:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11270:	6a 20                	push   $0x20
   11272:	6a 20                	push   $0x20
   11274:	e8 7f f8 ff ff       	call   10af8 <outb>
   11279:	83 c4 08             	add    $0x8,%esp
}
   1127c:	90                   	nop
   1127d:	c9                   	leave
   1127e:	c3                   	ret

0001127f <irq_enter_protection>:

// 进入临界区保护执行关中断
irq_state_t irq_enter_protection(void)
{
   1127f:	55                   	push   %ebp
   11280:	89 e5                	mov    %esp,%ebp
   11282:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11285:	e8 ca f8 ff ff       	call   10b54 <read_eflags>
   1128a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   1128d:	e8 ac ff ff ff       	call   1123e <irq_disable_global>
    return state;
   11292:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11295:	c9                   	leave
   11296:	c3                   	ret

00011297 <irq_leave_protection>:
// 退出临界区保护执行开中断
void irq_leave_protection(irq_state_t state)
{
   11297:	55                   	push   %ebp
   11298:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   1129a:	ff 75 08             	push   0x8(%ebp)
   1129d:	e8 c2 f8 ff ff       	call   10b64 <write_eflags>
   112a2:	83 c4 04             	add    $0x4,%esp
   112a5:	90                   	nop
   112a6:	c9                   	leave
   112a7:	c3                   	ret

000112a8 <outb>:
}

void init_time(void)
{
    sys_tick = 0;
    init_pit();
   112a8:	55                   	push   %ebp
   112a9:	89 e5                	mov    %esp,%ebp
   112ab:	83 ec 08             	sub    $0x8,%esp
   112ae:	8b 55 08             	mov    0x8(%ebp),%edx
   112b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   112b4:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   112b8:	88 45 f8             	mov    %al,-0x8(%ebp)
   112bb:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   112bf:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   112c3:	ee                   	out    %al,(%dx)
   112c4:	90                   	nop
   112c5:	c9                   	leave
   112c6:	c3                   	ret

000112c7 <do_handler_time>:
{
   112c7:	55                   	push   %ebp
   112c8:	89 e5                	mov    %esp,%ebp
   112ca:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   112cd:	a1 40 43 01 00       	mov    0x14340,%eax
   112d2:	83 c0 01             	add    $0x1,%eax
   112d5:	a3 40 43 01 00       	mov    %eax,0x14340
    pic_send_eoi(IRQ0_TIMER);
   112da:	83 ec 0c             	sub    $0xc,%esp
   112dd:	6a 20                	push   $0x20
   112df:	e8 70 ff ff ff       	call   11254 <pic_send_eoi>
   112e4:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   112e7:	e8 46 f4 ff ff       	call   10732 <task_time_tick>
}
   112ec:	90                   	nop
   112ed:	c9                   	leave
   112ee:	c3                   	ret

000112ef <init_pit>:
{
   112ef:	55                   	push   %ebp
   112f0:	89 e5                	mov    %esp,%ebp
   112f2:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   112f5:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   112fc:	6a 36                	push   $0x36
   112fe:	6a 43                	push   $0x43
   11300:	e8 a3 ff ff ff       	call   112a8 <outb>
   11305:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   11308:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1130b:	0f b6 c0             	movzbl %al,%eax
   1130e:	50                   	push   %eax
   1130f:	6a 40                	push   $0x40
   11311:	e8 92 ff ff ff       	call   112a8 <outb>
   11316:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   11319:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1131c:	c1 e8 08             	shr    $0x8,%eax
   1131f:	0f b6 c0             	movzbl %al,%eax
   11322:	50                   	push   %eax
   11323:	6a 40                	push   $0x40
   11325:	e8 7e ff ff ff       	call   112a8 <outb>
   1132a:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   1132d:	83 ec 08             	sub    $0x8,%esp
   11330:	68 89 02 01 00       	push   $0x10289
   11335:	6a 20                	push   $0x20
   11337:	e8 bb fd ff ff       	call   110f7 <irq_install>
   1133c:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   1133f:	83 ec 0c             	sub    $0xc,%esp
   11342:	6a 20                	push   $0x20
   11344:	e8 e3 fd ff ff       	call   1112c <irq_enable>
   11349:	83 c4 10             	add    $0x10,%esp
}
   1134c:	90                   	nop
   1134d:	c9                   	leave
   1134e:	c3                   	ret

0001134f <init_time>:
{
   1134f:	55                   	push   %ebp
   11350:	89 e5                	mov    %esp,%ebp
   11352:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11355:	c7 05 40 43 01 00 00 	movl   $0x0,0x14340
   1135c:	00 00 00 
    init_pit();
   1135f:	e8 8b ff ff ff       	call   112ef <init_pit>
   11364:	90                   	nop
   11365:	c9                   	leave
   11366:	c3                   	ret

00011367 <kernel_init>:

/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   11367:	55                   	push   %ebp
   11368:	89 e5                	mov    %esp,%ebp
   1136a:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   1136d:	e8 4b f7 ff ff       	call   10abd <cpu_init>

    init_log(); // 初始化打印函数
   11372:	e8 eb 0c 00 00       	call   12062 <init_log>
    irq_init();
   11377:	e8 cd fb ff ff       	call   10f49 <irq_init>
    // 初始化定时器
    init_time();
   1137c:	e8 ce ff ff ff       	call   1134f <init_time>

    // 初始化任务管理
    task_manager_init();
   11381:	e8 b0 f1 ff ff       	call   10536 <task_manager_init>
}
   11386:	90                   	nop
   11387:	c9                   	leave
   11388:	c3                   	ret

00011389 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;
static sem_t sem;
void init_task_entry(void)
{
   11389:	55                   	push   %ebp
   1138a:	89 e5                	mov    %esp,%ebp
   1138c:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   1138f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        // sem_wait(&sem);
        log_prinf("init task: %d", count++);
   11396:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11399:	8d 50 01             	lea    0x1(%eax),%edx
   1139c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1139f:	83 ec 08             	sub    $0x8,%esp
   113a2:	50                   	push   %eax
   113a3:	68 c1 24 01 00       	push   $0x124c1
   113a8:	e8 4f 0d 00 00       	call   120fc <log_prinf>
   113ad:	83 c4 10             	add    $0x10,%esp
   113b0:	eb e4                	jmp    11396 <init_task_entry+0xd>

000113b2 <init_main>:
    }
}

void init_main(void)
{
   113b2:	55                   	push   %ebp
   113b3:	89 e5                	mov    %esp,%ebp
   113b5:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   113b8:	83 ec 0c             	sub    $0xc,%esp
   113bb:	68 cf 24 01 00       	push   $0x124cf
   113c0:	e8 37 0d 00 00       	call   120fc <log_prinf>
   113c5:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   113c8:	83 ec 08             	sub    $0x8,%esp
   113cb:	68 dd 24 01 00       	push   $0x124dd
   113d0:	68 e3 24 01 00       	push   $0x124e3
   113d5:	e8 22 0d 00 00       	call   120fc <log_prinf>
   113da:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   113dd:	83 ec 0c             	sub    $0xc,%esp
   113e0:	6a 63                	push   $0x63
   113e2:	6a 30                	push   $0x30
   113e4:	6a 14                	push   $0x14
   113e6:	6a f6                	push   $0xfffffff6
   113e8:	68 ee 24 01 00       	push   $0x124ee
   113ed:	e8 0a 0d 00 00       	call   120fc <log_prinf>
   113f2:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   113f5:	ba 60 53 01 00       	mov    $0x15360,%edx
   113fa:	b8 89 13 01 00       	mov    $0x11389,%eax
   113ff:	52                   	push   %edx
   11400:	50                   	push   %eax
   11401:	68 fa 24 01 00       	push   $0x124fa
   11406:	68 60 53 01 00       	push   $0x15360
   1140b:	e8 0d f0 ff ff       	call   1041d <task_init>
   11410:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11413:	e8 81 f1 ff ff       	call   10599 <task_first_init>

    sem_init(&sem, 0);
   11418:	83 ec 08             	sub    $0x8,%esp
   1141b:	6a 00                	push   $0x0
   1141d:	68 14 54 01 00       	push   $0x15414
   11422:	e8 bd 01 00 00       	call   115e4 <sem_init>
   11427:	83 c4 10             	add    $0x10,%esp
    irq_enable_global();
   1142a:	e8 1a fe ff ff       	call   11249 <irq_enable_global>
    int count = 0;
   1142f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_main: %d", count++);
   11436:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11439:	8d 50 01             	lea    0x1(%eax),%edx
   1143c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1143f:	83 ec 08             	sub    $0x8,%esp
   11442:	50                   	push   %eax
   11443:	68 04 25 01 00       	push   $0x12504
   11448:	e8 af 0c 00 00       	call   120fc <log_prinf>
   1144d:	83 c4 10             	add    $0x10,%esp
   11450:	eb e4                	jmp    11436 <init_main+0x84>

00011452 <list_count>:
   11452:	55                   	push   %ebp
   11453:	89 e5                	mov    %esp,%ebp
   11455:	8b 45 08             	mov    0x8(%ebp),%eax
   11458:	8b 40 08             	mov    0x8(%eax),%eax
   1145b:	5d                   	pop    %ebp
   1145c:	c3                   	ret

0001145d <mutex_init>:
{
   1145d:	55                   	push   %ebp
   1145e:	89 e5                	mov    %esp,%ebp
   11460:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   11463:	8b 45 08             	mov    0x8(%ebp),%eax
   11466:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   1146d:	8b 45 08             	mov    0x8(%ebp),%eax
   11470:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   11476:	8b 45 08             	mov    0x8(%ebp),%eax
   11479:	83 c0 08             	add    $0x8,%eax
   1147c:	83 ec 0c             	sub    $0xc,%esp
   1147f:	50                   	push   %eax
   11480:	e8 bc 09 00 00       	call   11e41 <list_init>
   11485:	83 c4 10             	add    $0x10,%esp
}
   11488:	90                   	nop
   11489:	c9                   	leave
   1148a:	c3                   	ret

0001148b <mutex_lock>:
{
   1148b:	55                   	push   %ebp
   1148c:	89 e5                	mov    %esp,%ebp
   1148e:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11491:	e8 e9 fd ff ff       	call   1127f <irq_enter_protection>
   11496:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   11499:	e8 a1 f1 ff ff       	call   1063f <task_current>
   1149e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0)
   114a1:	8b 45 08             	mov    0x8(%ebp),%eax
   114a4:	8b 40 04             	mov    0x4(%eax),%eax
   114a7:	85 c0                	test   %eax,%eax
   114a9:	75 19                	jne    114c4 <mutex_lock+0x39>
        mutex->locked_count++;
   114ab:	8b 45 08             	mov    0x8(%ebp),%eax
   114ae:	8b 40 04             	mov    0x4(%eax),%eax
   114b1:	8d 50 01             	lea    0x1(%eax),%edx
   114b4:	8b 45 08             	mov    0x8(%ebp),%eax
   114b7:	89 50 04             	mov    %edx,0x4(%eax)
        mutex->owner = curr;
   114ba:	8b 45 08             	mov    0x8(%ebp),%eax
   114bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   114c0:	89 10                	mov    %edx,(%eax)
   114c2:	eb 47                	jmp    1150b <mutex_lock+0x80>
    else if (mutex->owner == curr)
   114c4:	8b 45 08             	mov    0x8(%ebp),%eax
   114c7:	8b 00                	mov    (%eax),%eax
   114c9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   114cc:	75 11                	jne    114df <mutex_lock+0x54>
        mutex->locked_count++;
   114ce:	8b 45 08             	mov    0x8(%ebp),%eax
   114d1:	8b 40 04             	mov    0x4(%eax),%eax
   114d4:	8d 50 01             	lea    0x1(%eax),%edx
   114d7:	8b 45 08             	mov    0x8(%ebp),%eax
   114da:	89 50 04             	mov    %edx,0x4(%eax)
   114dd:	eb 2c                	jmp    1150b <mutex_lock+0x80>
        task_set_block(curr);
   114df:	83 ec 0c             	sub    $0xc,%esp
   114e2:	ff 75 f0             	push   -0x10(%ebp)
   114e5:	e8 2a f1 ff ff       	call   10614 <task_set_block>
   114ea:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   114ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114f0:	8d 50 38             	lea    0x38(%eax),%edx
   114f3:	8b 45 08             	mov    0x8(%ebp),%eax
   114f6:	83 c0 08             	add    $0x8,%eax
   114f9:	83 ec 08             	sub    $0x8,%esp
   114fc:	52                   	push   %edx
   114fd:	50                   	push   %eax
   114fe:	e8 c2 09 00 00       	call   11ec5 <list_insert_last>
   11503:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11506:	e8 e2 f1 ff ff       	call   106ed <task_dispatch>
    irq_leave_protection(state);
   1150b:	83 ec 0c             	sub    $0xc,%esp
   1150e:	ff 75 f4             	push   -0xc(%ebp)
   11511:	e8 81 fd ff ff       	call   11297 <irq_leave_protection>
   11516:	83 c4 10             	add    $0x10,%esp
}
   11519:	90                   	nop
   1151a:	c9                   	leave
   1151b:	c3                   	ret

0001151c <mutex_unlock>:
{
   1151c:	55                   	push   %ebp
   1151d:	89 e5                	mov    %esp,%ebp
   1151f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11522:	e8 58 fd ff ff       	call   1127f <irq_enter_protection>
   11527:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   1152a:	e8 10 f1 ff ff       	call   1063f <task_current>
   1152f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr)
   11532:	8b 45 08             	mov    0x8(%ebp),%eax
   11535:	8b 00                	mov    (%eax),%eax
   11537:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1153a:	0f 85 88 00 00 00    	jne    115c8 <mutex_unlock+0xac>
        if (--mutex->locked_count == 0)
   11540:	8b 45 08             	mov    0x8(%ebp),%eax
   11543:	8b 40 04             	mov    0x4(%eax),%eax
   11546:	8d 50 ff             	lea    -0x1(%eax),%edx
   11549:	8b 45 08             	mov    0x8(%ebp),%eax
   1154c:	89 50 04             	mov    %edx,0x4(%eax)
   1154f:	8b 45 08             	mov    0x8(%ebp),%eax
   11552:	8b 40 04             	mov    0x4(%eax),%eax
   11555:	85 c0                	test   %eax,%eax
   11557:	75 6f                	jne    115c8 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   11559:	8b 45 08             	mov    0x8(%ebp),%eax
   1155c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
            if (list_count(&mutex->wait_list))
   11562:	8b 45 08             	mov    0x8(%ebp),%eax
   11565:	83 c0 08             	add    $0x8,%eax
   11568:	83 ec 0c             	sub    $0xc,%esp
   1156b:	50                   	push   %eax
   1156c:	e8 e1 fe ff ff       	call   11452 <list_count>
   11571:	83 c4 10             	add    $0x10,%esp
   11574:	85 c0                	test   %eax,%eax
   11576:	74 50                	je     115c8 <mutex_unlock+0xac>
                list_node_t *node = list_remove_first(&mutex->wait_list);
   11578:	8b 45 08             	mov    0x8(%ebp),%eax
   1157b:	83 c0 08             	add    $0x8,%eax
   1157e:	83 ec 0c             	sub    $0xc,%esp
   11581:	50                   	push   %eax
   11582:	e8 a2 09 00 00       	call   11f29 <list_remove_first>
   11587:	83 c4 10             	add    $0x10,%esp
   1158a:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t *task = list_node_parent(node, task_t, wait_node);
   1158d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11591:	74 08                	je     1159b <mutex_unlock+0x7f>
   11593:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11596:	83 e8 38             	sub    $0x38,%eax
   11599:	eb 05                	jmp    115a0 <mutex_unlock+0x84>
   1159b:	b8 00 00 00 00       	mov    $0x0,%eax
   115a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   115a3:	83 ec 0c             	sub    $0xc,%esp
   115a6:	ff 75 e8             	push   -0x18(%ebp)
   115a9:	e8 32 f0 ff ff       	call   105e0 <task_set_ready>
   115ae:	83 c4 10             	add    $0x10,%esp
                mutex->locked_count = 1;
   115b1:	8b 45 08             	mov    0x8(%ebp),%eax
   115b4:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   115bb:	8b 45 08             	mov    0x8(%ebp),%eax
   115be:	8b 55 e8             	mov    -0x18(%ebp),%edx
   115c1:	89 10                	mov    %edx,(%eax)
                task_dispatch();
   115c3:	e8 25 f1 ff ff       	call   106ed <task_dispatch>
    irq_leave_protection(state);
   115c8:	83 ec 0c             	sub    $0xc,%esp
   115cb:	ff 75 f4             	push   -0xc(%ebp)
   115ce:	e8 c4 fc ff ff       	call   11297 <irq_leave_protection>
   115d3:	83 c4 10             	add    $0x10,%esp
   115d6:	90                   	nop
   115d7:	c9                   	leave
   115d8:	c3                   	ret

000115d9 <list_count>:
   115d9:	55                   	push   %ebp
   115da:	89 e5                	mov    %esp,%ebp
   115dc:	8b 45 08             	mov    0x8(%ebp),%eax
   115df:	8b 40 08             	mov    0x8(%eax),%eax
   115e2:	5d                   	pop    %ebp
   115e3:	c3                   	ret

000115e4 <sem_init>:
{
   115e4:	55                   	push   %ebp
   115e5:	89 e5                	mov    %esp,%ebp
   115e7:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   115ea:	8b 45 08             	mov    0x8(%ebp),%eax
   115ed:	8b 55 0c             	mov    0xc(%ebp),%edx
   115f0:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   115f2:	8b 45 08             	mov    0x8(%ebp),%eax
   115f5:	83 c0 04             	add    $0x4,%eax
   115f8:	83 ec 0c             	sub    $0xc,%esp
   115fb:	50                   	push   %eax
   115fc:	e8 40 08 00 00       	call   11e41 <list_init>
   11601:	83 c4 10             	add    $0x10,%esp
}
   11604:	90                   	nop
   11605:	c9                   	leave
   11606:	c3                   	ret

00011607 <sem_wait>:
{
   11607:	55                   	push   %ebp
   11608:	89 e5                	mov    %esp,%ebp
   1160a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1160d:	e8 6d fc ff ff       	call   1127f <irq_enter_protection>
   11612:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0)
   11615:	8b 45 08             	mov    0x8(%ebp),%eax
   11618:	8b 00                	mov    (%eax),%eax
   1161a:	85 c0                	test   %eax,%eax
   1161c:	7e 0f                	jle    1162d <sem_wait+0x26>
        sem->count--;
   1161e:	8b 45 08             	mov    0x8(%ebp),%eax
   11621:	8b 00                	mov    (%eax),%eax
   11623:	8d 50 ff             	lea    -0x1(%eax),%edx
   11626:	8b 45 08             	mov    0x8(%ebp),%eax
   11629:	89 10                	mov    %edx,(%eax)
   1162b:	eb 34                	jmp    11661 <sem_wait+0x5a>
        task_t *curr = task_current();
   1162d:	e8 0d f0 ff ff       	call   1063f <task_current>
   11632:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   11635:	83 ec 0c             	sub    $0xc,%esp
   11638:	ff 75 f0             	push   -0x10(%ebp)
   1163b:	e8 d4 ef ff ff       	call   10614 <task_set_block>
   11640:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   11643:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11646:	8d 50 38             	lea    0x38(%eax),%edx
   11649:	8b 45 08             	mov    0x8(%ebp),%eax
   1164c:	83 c0 04             	add    $0x4,%eax
   1164f:	83 ec 08             	sub    $0x8,%esp
   11652:	52                   	push   %edx
   11653:	50                   	push   %eax
   11654:	e8 6c 08 00 00       	call   11ec5 <list_insert_last>
   11659:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1165c:	e8 8c f0 ff ff       	call   106ed <task_dispatch>
    irq_leave_protection(state);
   11661:	83 ec 0c             	sub    $0xc,%esp
   11664:	ff 75 f4             	push   -0xc(%ebp)
   11667:	e8 2b fc ff ff       	call   11297 <irq_leave_protection>
   1166c:	83 c4 10             	add    $0x10,%esp
}
   1166f:	90                   	nop
   11670:	c9                   	leave
   11671:	c3                   	ret

00011672 <sem_notify>:
{
   11672:	55                   	push   %ebp
   11673:	89 e5                	mov    %esp,%ebp
   11675:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11678:	e8 02 fc ff ff       	call   1127f <irq_enter_protection>
   1167d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list))
   11680:	8b 45 08             	mov    0x8(%ebp),%eax
   11683:	83 c0 04             	add    $0x4,%eax
   11686:	83 ec 0c             	sub    $0xc,%esp
   11689:	50                   	push   %eax
   1168a:	e8 4a ff ff ff       	call   115d9 <list_count>
   1168f:	83 c4 10             	add    $0x10,%esp
   11692:	85 c0                	test   %eax,%eax
   11694:	74 40                	je     116d6 <sem_notify+0x64>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11696:	8b 45 08             	mov    0x8(%ebp),%eax
   11699:	83 c0 04             	add    $0x4,%eax
   1169c:	83 ec 0c             	sub    $0xc,%esp
   1169f:	50                   	push   %eax
   116a0:	e8 84 08 00 00       	call   11f29 <list_remove_first>
   116a5:	83 c4 10             	add    $0x10,%esp
   116a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   116ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   116af:	74 08                	je     116b9 <sem_notify+0x47>
   116b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116b4:	83 e8 38             	sub    $0x38,%eax
   116b7:	eb 05                	jmp    116be <sem_notify+0x4c>
   116b9:	b8 00 00 00 00       	mov    $0x0,%eax
   116be:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   116c1:	83 ec 0c             	sub    $0xc,%esp
   116c4:	ff 75 ec             	push   -0x14(%ebp)
   116c7:	e8 14 ef ff ff       	call   105e0 <task_set_ready>
   116cc:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   116cf:	e8 19 f0 ff ff       	call   106ed <task_dispatch>
   116d4:	eb 0d                	jmp    116e3 <sem_notify+0x71>
        sem->count++;
   116d6:	8b 45 08             	mov    0x8(%ebp),%eax
   116d9:	8b 00                	mov    (%eax),%eax
   116db:	8d 50 01             	lea    0x1(%eax),%edx
   116de:	8b 45 08             	mov    0x8(%ebp),%eax
   116e1:	89 10                	mov    %edx,(%eax)
    irq_leave_protection(state);
   116e3:	83 ec 0c             	sub    $0xc,%esp
   116e6:	ff 75 f4             	push   -0xc(%ebp)
   116e9:	e8 a9 fb ff ff       	call   11297 <irq_leave_protection>
   116ee:	83 c4 10             	add    $0x10,%esp
}
   116f1:	90                   	nop
   116f2:	c9                   	leave
   116f3:	c3                   	ret

000116f4 <sem_count>:
{
   116f4:	55                   	push   %ebp
   116f5:	89 e5                	mov    %esp,%ebp
   116f7:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   116fa:	e8 80 fb ff ff       	call   1127f <irq_enter_protection>
   116ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11702:	8b 45 08             	mov    0x8(%ebp),%eax
   11705:	8b 00                	mov    (%eax),%eax
   11707:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   1170a:	83 ec 0c             	sub    $0xc,%esp
   1170d:	ff 75 f4             	push   -0xc(%ebp)
   11710:	e8 82 fb ff ff       	call   11297 <irq_leave_protection>
   11715:	83 c4 10             	add    $0x10,%esp
    return count;
   11718:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1171b:	c9                   	leave
   1171c:	c3                   	ret

0001171d <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count)
{
   1171d:	55                   	push   %ebp
   1171e:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   11720:	8b 45 08             	mov    0x8(%ebp),%eax
   11723:	83 c0 07             	add    $0x7,%eax
   11726:	8d 50 07             	lea    0x7(%eax),%edx
   11729:	85 c0                	test   %eax,%eax
   1172b:	0f 48 c2             	cmovs  %edx,%eax
   1172e:	c1 f8 03             	sar    $0x3,%eax
}
   11731:	5d                   	pop    %ebp
   11732:	c3                   	ret

00011733 <bitmap_init>:

void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   11733:	55                   	push   %ebp
   11734:	89 e5                	mov    %esp,%ebp
   11736:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   11739:	8b 45 08             	mov    0x8(%ebp),%eax
   1173c:	8b 55 10             	mov    0x10(%ebp),%edx
   1173f:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   11741:	8b 45 08             	mov    0x8(%ebp),%eax
   11744:	8b 55 0c             	mov    0xc(%ebp),%edx
   11747:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count); // 计算位图的位数
   1174a:	8b 45 08             	mov    0x8(%ebp),%eax
   1174d:	8b 00                	mov    (%eax),%eax
   1174f:	50                   	push   %eax
   11750:	e8 c8 ff ff ff       	call   1171d <bitmap_byte_count>
   11755:	83 c4 04             	add    $0x4,%esp
   11758:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF : 0, bytes);
   1175b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1175f:	74 07                	je     11768 <bitmap_init+0x35>
   11761:	ba ff 00 00 00       	mov    $0xff,%edx
   11766:	eb 05                	jmp    1176d <bitmap_init+0x3a>
   11768:	ba 00 00 00 00       	mov    $0x0,%edx
   1176d:	8b 45 08             	mov    0x8(%ebp),%eax
   11770:	8b 40 04             	mov    0x4(%eax),%eax
   11773:	83 ec 04             	sub    $0x4,%esp
   11776:	ff 75 f4             	push   -0xc(%ebp)
   11779:	52                   	push   %edx
   1177a:	50                   	push   %eax
   1177b:	e8 98 03 00 00       	call   11b18 <kernel_memset>
   11780:	83 c4 10             	add    $0x10,%esp
}
   11783:	90                   	nop
   11784:	c9                   	leave
   11785:	c3                   	ret

00011786 <bitmap_get_bit>:

int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   11786:	55                   	push   %ebp
   11787:	89 e5                	mov    %esp,%ebp
   11789:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   1178a:	8b 45 08             	mov    0x8(%ebp),%eax
   1178d:	8b 50 04             	mov    0x4(%eax),%edx
   11790:	8b 45 0c             	mov    0xc(%ebp),%eax
   11793:	8d 48 07             	lea    0x7(%eax),%ecx
   11796:	85 c0                	test   %eax,%eax
   11798:	0f 48 c1             	cmovs  %ecx,%eax
   1179b:	c1 f8 03             	sar    $0x3,%eax
   1179e:	01 d0                	add    %edx,%eax
   117a0:	0f b6 00             	movzbl (%eax),%eax
   117a3:	0f b6 c0             	movzbl %al,%eax
   117a6:	8b 55 0c             	mov    0xc(%ebp),%edx
   117a9:	83 e2 07             	and    $0x7,%edx
   117ac:	bb 01 00 00 00       	mov    $0x1,%ebx
   117b1:	89 d1                	mov    %edx,%ecx
   117b3:	d3 e3                	shl    %cl,%ebx
   117b5:	89 da                	mov    %ebx,%edx
   117b7:	21 d0                	and    %edx,%eax
}
   117b9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   117bc:	c9                   	leave
   117bd:	c3                   	ret

000117be <bitmap_set_bit>:

void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit)
{
   117be:	55                   	push   %ebp
   117bf:	89 e5                	mov    %esp,%ebp
   117c1:	56                   	push   %esi
   117c2:	53                   	push   %ebx
   117c3:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   117c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   117cd:	e9 92 00 00 00       	jmp    11864 <bitmap_set_bit+0xa6>
    {
        if (bit) // bit = 1
   117d2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   117d6:	74 42                	je     1181a <bitmap_set_bit+0x5c>
        {
            bitmap->bits[index / 8] |= (1 << (index % 8));
   117d8:	8b 45 08             	mov    0x8(%ebp),%eax
   117db:	8b 50 04             	mov    0x4(%eax),%edx
   117de:	8b 45 0c             	mov    0xc(%ebp),%eax
   117e1:	8d 48 07             	lea    0x7(%eax),%ecx
   117e4:	85 c0                	test   %eax,%eax
   117e6:	0f 48 c1             	cmovs  %ecx,%eax
   117e9:	c1 f8 03             	sar    $0x3,%eax
   117ec:	89 c3                	mov    %eax,%ebx
   117ee:	89 d8                	mov    %ebx,%eax
   117f0:	01 d0                	add    %edx,%eax
   117f2:	0f b6 00             	movzbl (%eax),%eax
   117f5:	89 c6                	mov    %eax,%esi
   117f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   117fa:	83 e0 07             	and    $0x7,%eax
   117fd:	ba 01 00 00 00       	mov    $0x1,%edx
   11802:	89 c1                	mov    %eax,%ecx
   11804:	d3 e2                	shl    %cl,%edx
   11806:	89 d0                	mov    %edx,%eax
   11808:	89 f2                	mov    %esi,%edx
   1180a:	09 c2                	or     %eax,%edx
   1180c:	8b 45 08             	mov    0x8(%ebp),%eax
   1180f:	8b 40 04             	mov    0x4(%eax),%eax
   11812:	89 d9                	mov    %ebx,%ecx
   11814:	01 c8                	add    %ecx,%eax
   11816:	88 10                	mov    %dl,(%eax)
   11818:	eb 42                	jmp    1185c <bitmap_set_bit+0x9e>
        }
        else
        { // bit = 0
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   1181a:	8b 45 08             	mov    0x8(%ebp),%eax
   1181d:	8b 50 04             	mov    0x4(%eax),%edx
   11820:	8b 45 0c             	mov    0xc(%ebp),%eax
   11823:	8d 48 07             	lea    0x7(%eax),%ecx
   11826:	85 c0                	test   %eax,%eax
   11828:	0f 48 c1             	cmovs  %ecx,%eax
   1182b:	c1 f8 03             	sar    $0x3,%eax
   1182e:	89 c3                	mov    %eax,%ebx
   11830:	89 d8                	mov    %ebx,%eax
   11832:	01 d0                	add    %edx,%eax
   11834:	0f b6 00             	movzbl (%eax),%eax
   11837:	89 c6                	mov    %eax,%esi
   11839:	8b 45 0c             	mov    0xc(%ebp),%eax
   1183c:	83 e0 07             	and    $0x7,%eax
   1183f:	ba 01 00 00 00       	mov    $0x1,%edx
   11844:	89 c1                	mov    %eax,%ecx
   11846:	d3 e2                	shl    %cl,%edx
   11848:	89 d0                	mov    %edx,%eax
   1184a:	f7 d0                	not    %eax
   1184c:	89 f2                	mov    %esi,%edx
   1184e:	21 c2                	and    %eax,%edx
   11850:	8b 45 08             	mov    0x8(%ebp),%eax
   11853:	8b 40 04             	mov    0x4(%eax),%eax
   11856:	89 d9                	mov    %ebx,%ecx
   11858:	01 c8                	add    %ecx,%eax
   1185a:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   1185c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11860:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   11864:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11867:	3b 45 10             	cmp    0x10(%ebp),%eax
   1186a:	7d 0e                	jge    1187a <bitmap_set_bit+0xbc>
   1186c:	8b 45 08             	mov    0x8(%ebp),%eax
   1186f:	8b 00                	mov    (%eax),%eax
   11871:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11874:	0f 8c 58 ff ff ff    	jl     117d2 <bitmap_set_bit+0x14>
        }
    }
}
   1187a:	90                   	nop
   1187b:	83 c4 10             	add    $0x10,%esp
   1187e:	5b                   	pop    %ebx
   1187f:	5e                   	pop    %esi
   11880:	5d                   	pop    %ebp
   11881:	c3                   	ret

00011882 <bitmap_is_set>:

int bitmap_is_set(bitmap_t *bitmap, int index)
{
   11882:	55                   	push   %ebp
   11883:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   11885:	ff 75 0c             	push   0xc(%ebp)
   11888:	ff 75 08             	push   0x8(%ebp)
   1188b:	e8 f6 fe ff ff       	call   11786 <bitmap_get_bit>
   11890:	83 c4 08             	add    $0x8,%esp
   11893:	85 c0                	test   %eax,%eax
   11895:	0f 95 c0             	setne  %al
   11898:	0f b6 c0             	movzbl %al,%eax
}
   1189b:	c9                   	leave
   1189c:	c3                   	ret

0001189d <bitmap_alloc_nbits>:

int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   1189d:	55                   	push   %ebp
   1189e:	89 e5                	mov    %esp,%ebp
   118a0:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   118a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   118aa:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count)
   118b1:	e9 85 00 00 00       	jmp    1193b <bitmap_alloc_nbits+0x9e>
    {
        if (bitmap_get_bit(bitmap, search_idx) != bit)
   118b6:	ff 75 fc             	push   -0x4(%ebp)
   118b9:	ff 75 08             	push   0x8(%ebp)
   118bc:	e8 c5 fe ff ff       	call   11786 <bitmap_get_bit>
   118c1:	83 c4 08             	add    $0x8,%esp
   118c4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   118c7:	74 06                	je     118cf <bitmap_alloc_nbits+0x32>
        {
            search_idx++;
   118c9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   118cd:	eb 6c                	jmp    1193b <bitmap_alloc_nbits+0x9e>
        }
        ok_index = search_idx;
   118cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118d2:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   118d5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   118dc:	eb 27                	jmp    11905 <bitmap_alloc_nbits+0x68>
        {
            if (bitmap_get_bit(bitmap, search_idx++) != bit)
   118de:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118e1:	8d 50 01             	lea    0x1(%eax),%edx
   118e4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   118e7:	50                   	push   %eax
   118e8:	ff 75 08             	push   0x8(%ebp)
   118eb:	e8 96 fe ff ff       	call   11786 <bitmap_get_bit>
   118f0:	83 c4 08             	add    $0x8,%esp
   118f3:	39 45 0c             	cmp    %eax,0xc(%ebp)
   118f6:	74 09                	je     11901 <bitmap_alloc_nbits+0x64>
            {
                ok_index = -1;
   118f8:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   118ff:	eb 16                	jmp    11917 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   11901:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11905:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11908:	3b 45 10             	cmp    0x10(%ebp),%eax
   1190b:	7d 0a                	jge    11917 <bitmap_alloc_nbits+0x7a>
   1190d:	8b 45 08             	mov    0x8(%ebp),%eax
   11910:	8b 00                	mov    (%eax),%eax
   11912:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11915:	7c c7                	jl     118de <bitmap_alloc_nbits+0x41>
            }
        }
        if (i >= count)
   11917:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1191a:	3b 45 10             	cmp    0x10(%ebp),%eax
   1191d:	7c 1c                	jl     1193b <bitmap_alloc_nbits+0x9e>
        {
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   1191f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11922:	f7 d0                	not    %eax
   11924:	50                   	push   %eax
   11925:	ff 75 10             	push   0x10(%ebp)
   11928:	ff 75 f8             	push   -0x8(%ebp)
   1192b:	ff 75 08             	push   0x8(%ebp)
   1192e:	e8 8b fe ff ff       	call   117be <bitmap_set_bit>
   11933:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   11936:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11939:	eb 13                	jmp    1194e <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count)
   1193b:	8b 45 08             	mov    0x8(%ebp),%eax
   1193e:	8b 00                	mov    (%eax),%eax
   11940:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11943:	0f 8c 6d ff ff ff    	jl     118b6 <bitmap_alloc_nbits+0x19>
        }
    }
    return -1;
   11949:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1194e:	c9                   	leave
   1194f:	c3                   	ret

00011950 <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   11950:	55                   	push   %ebp
   11951:	89 e5                	mov    %esp,%ebp
}
   11953:	f4                   	hlt

   11954:	90                   	nop
   11955:	5d                   	pop    %ebp
   11956:	c3                   	ret

00011957 <kernel_strcpy>:
{
   11957:	55                   	push   %ebp
   11958:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   1195a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1195e:	74 3b                	je     1199b <kernel_strcpy+0x44>
   11960:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11964:	74 35                	je     1199b <kernel_strcpy+0x44>
    while (*dest && *src)
   11966:	eb 17                	jmp    1197f <kernel_strcpy+0x28>
        *dest++ = *src++;
   11968:	8b 55 0c             	mov    0xc(%ebp),%edx
   1196b:	8d 42 01             	lea    0x1(%edx),%eax
   1196e:	89 45 0c             	mov    %eax,0xc(%ebp)
   11971:	8b 45 08             	mov    0x8(%ebp),%eax
   11974:	8d 48 01             	lea    0x1(%eax),%ecx
   11977:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1197a:	0f b6 12             	movzbl (%edx),%edx
   1197d:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   1197f:	8b 45 08             	mov    0x8(%ebp),%eax
   11982:	0f b6 00             	movzbl (%eax),%eax
   11985:	84 c0                	test   %al,%al
   11987:	74 0a                	je     11993 <kernel_strcpy+0x3c>
   11989:	8b 45 0c             	mov    0xc(%ebp),%eax
   1198c:	0f b6 00             	movzbl (%eax),%eax
   1198f:	84 c0                	test   %al,%al
   11991:	75 d5                	jne    11968 <kernel_strcpy+0x11>
    *dest = '\0';
   11993:	8b 45 08             	mov    0x8(%ebp),%eax
   11996:	c6 00 00             	movb   $0x0,(%eax)
   11999:	eb 01                	jmp    1199c <kernel_strcpy+0x45>
        return;
   1199b:	90                   	nop
}
   1199c:	5d                   	pop    %ebp
   1199d:	c3                   	ret

0001199e <kernel_strncpy>:
{
   1199e:	55                   	push   %ebp
   1199f:	89 e5                	mov    %esp,%ebp
   119a1:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   119a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119a8:	74 61                	je     11a0b <kernel_strncpy+0x6d>
   119aa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   119ae:	74 5b                	je     11a0b <kernel_strncpy+0x6d>
   119b0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   119b4:	74 55                	je     11a0b <kernel_strncpy+0x6d>
    char *d = dest;
   119b6:	8b 45 08             	mov    0x8(%ebp),%eax
   119b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   119bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   119bf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   119c2:	eb 17                	jmp    119db <kernel_strncpy+0x3d>
        *d++ = *s++;
   119c4:	8b 55 f8             	mov    -0x8(%ebp),%edx
   119c7:	8d 42 01             	lea    0x1(%edx),%eax
   119ca:	89 45 f8             	mov    %eax,-0x8(%ebp)
   119cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   119d0:	8d 48 01             	lea    0x1(%eax),%ecx
   119d3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   119d6:	0f b6 12             	movzbl (%edx),%edx
   119d9:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   119db:	8b 45 10             	mov    0x10(%ebp),%eax
   119de:	8d 50 ff             	lea    -0x1(%eax),%edx
   119e1:	89 55 10             	mov    %edx,0x10(%ebp)
   119e4:	85 c0                	test   %eax,%eax
   119e6:	7e 0a                	jle    119f2 <kernel_strncpy+0x54>
   119e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   119eb:	0f b6 00             	movzbl (%eax),%eax
   119ee:	84 c0                	test   %al,%al
   119f0:	75 d2                	jne    119c4 <kernel_strncpy+0x26>
    if (size == 0)
   119f2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   119f6:	75 0b                	jne    11a03 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   119f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   119fb:	83 e8 01             	sub    $0x1,%eax
   119fe:	c6 00 00             	movb   $0x0,(%eax)
   11a01:	eb 09                	jmp    11a0c <kernel_strncpy+0x6e>
        *d = '\0';
   11a03:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a06:	c6 00 00             	movb   $0x0,(%eax)
   11a09:	eb 01                	jmp    11a0c <kernel_strncpy+0x6e>
        return;
   11a0b:	90                   	nop
}
   11a0c:	c9                   	leave
   11a0d:	c3                   	ret

00011a0e <kernel_strncmp>:
{
   11a0e:	55                   	push   %ebp
   11a0f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   11a11:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a15:	74 0c                	je     11a23 <kernel_strncmp+0x15>
   11a17:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11a1b:	74 06                	je     11a23 <kernel_strncmp+0x15>
   11a1d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11a21:	75 0f                	jne    11a32 <kernel_strncmp+0x24>
        return -1;
   11a23:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11a28:	eb 62                	jmp    11a8c <kernel_strncmp+0x7e>
        s1++;
   11a2a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11a2e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   11a32:	8b 45 08             	mov    0x8(%ebp),%eax
   11a35:	0f b6 00             	movzbl (%eax),%eax
   11a38:	84 c0                	test   %al,%al
   11a3a:	74 20                	je     11a5c <kernel_strncmp+0x4e>
   11a3c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a3f:	0f b6 00             	movzbl (%eax),%eax
   11a42:	84 c0                	test   %al,%al
   11a44:	74 16                	je     11a5c <kernel_strncmp+0x4e>
   11a46:	8b 45 08             	mov    0x8(%ebp),%eax
   11a49:	0f b6 10             	movzbl (%eax),%edx
   11a4c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a4f:	0f b6 00             	movzbl (%eax),%eax
   11a52:	38 c2                	cmp    %al,%dl
   11a54:	75 06                	jne    11a5c <kernel_strncmp+0x4e>
   11a56:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11a5a:	75 ce                	jne    11a2a <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11a5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a5f:	0f b6 00             	movzbl (%eax),%eax
   11a62:	84 c0                	test   %al,%al
   11a64:	74 21                	je     11a87 <kernel_strncmp+0x79>
   11a66:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a69:	0f b6 00             	movzbl (%eax),%eax
   11a6c:	84 c0                	test   %al,%al
   11a6e:	74 17                	je     11a87 <kernel_strncmp+0x79>
   11a70:	8b 45 08             	mov    0x8(%ebp),%eax
   11a73:	0f b6 10             	movzbl (%eax),%edx
   11a76:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a79:	0f b6 00             	movzbl (%eax),%eax
   11a7c:	38 c2                	cmp    %al,%dl
   11a7e:	74 07                	je     11a87 <kernel_strncmp+0x79>
   11a80:	b8 01 00 00 00       	mov    $0x1,%eax
   11a85:	eb 05                	jmp    11a8c <kernel_strncmp+0x7e>
   11a87:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11a8c:	5d                   	pop    %ebp
   11a8d:	c3                   	ret

00011a8e <kernel_strlen>:
{
   11a8e:	55                   	push   %ebp
   11a8f:	89 e5                	mov    %esp,%ebp
   11a91:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   11a94:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11a98:	75 07                	jne    11aa1 <kernel_strlen+0x13>
        return 0;
   11a9a:	b8 00 00 00 00       	mov    $0x0,%eax
   11a9f:	eb 26                	jmp    11ac7 <kernel_strlen+0x39>
    const char *c = str;
   11aa1:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11aa7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   11aae:	eb 04                	jmp    11ab4 <kernel_strlen+0x26>
        len++;
   11ab0:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   11ab4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ab7:	8d 50 01             	lea    0x1(%eax),%edx
   11aba:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11abd:	0f b6 00             	movzbl (%eax),%eax
   11ac0:	84 c0                	test   %al,%al
   11ac2:	75 ec                	jne    11ab0 <kernel_strlen+0x22>
    return len;
   11ac4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11ac7:	c9                   	leave
   11ac8:	c3                   	ret

00011ac9 <kernel_memcpy>:
{
   11ac9:	55                   	push   %ebp
   11aca:	89 e5                	mov    %esp,%ebp
   11acc:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11acf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ad3:	74 40                	je     11b15 <kernel_memcpy+0x4c>
   11ad5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11ad9:	74 3a                	je     11b15 <kernel_memcpy+0x4c>
   11adb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11adf:	74 34                	je     11b15 <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   11ae1:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ae4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   11ae7:	8b 45 08             	mov    0x8(%ebp),%eax
   11aea:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11aed:	eb 17                	jmp    11b06 <kernel_memcpy+0x3d>
        *d++ = *s++;
   11aef:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11af2:	8d 42 01             	lea    0x1(%edx),%eax
   11af5:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11af8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11afb:	8d 48 01             	lea    0x1(%eax),%ecx
   11afe:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11b01:	0f b6 12             	movzbl (%edx),%edx
   11b04:	88 10                	mov    %dl,(%eax)
    while (size--)
   11b06:	8b 45 10             	mov    0x10(%ebp),%eax
   11b09:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b0c:	89 55 10             	mov    %edx,0x10(%ebp)
   11b0f:	85 c0                	test   %eax,%eax
   11b11:	75 dc                	jne    11aef <kernel_memcpy+0x26>
   11b13:	eb 01                	jmp    11b16 <kernel_memcpy+0x4d>
        return;
   11b15:	90                   	nop
}
   11b16:	c9                   	leave
   11b17:	c3                   	ret

00011b18 <kernel_memset>:
{
   11b18:	55                   	push   %ebp
   11b19:	89 e5                	mov    %esp,%ebp
   11b1b:	83 ec 14             	sub    $0x14,%esp
   11b1e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b21:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   11b24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b28:	74 2c                	je     11b56 <kernel_memset+0x3e>
   11b2a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11b2e:	74 26                	je     11b56 <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   11b30:	8b 45 08             	mov    0x8(%ebp),%eax
   11b33:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   11b36:	eb 0f                	jmp    11b47 <kernel_memset+0x2f>
        *d++ = v;
   11b38:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b3b:	8d 50 01             	lea    0x1(%eax),%edx
   11b3e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11b41:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11b45:	88 10                	mov    %dl,(%eax)
    while (size--)
   11b47:	8b 45 10             	mov    0x10(%ebp),%eax
   11b4a:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b4d:	89 55 10             	mov    %edx,0x10(%ebp)
   11b50:	85 c0                	test   %eax,%eax
   11b52:	75 e4                	jne    11b38 <kernel_memset+0x20>
   11b54:	eb 01                	jmp    11b57 <kernel_memset+0x3f>
        return;
   11b56:	90                   	nop
}
   11b57:	c9                   	leave
   11b58:	c3                   	ret

00011b59 <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   11b59:	55                   	push   %ebp
   11b5a:	89 e5                	mov    %esp,%ebp
   11b5c:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   11b5f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b63:	74 06                	je     11b6b <kernel_memcmp+0x12>
   11b65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b69:	75 07                	jne    11b72 <kernel_memcmp+0x19>
    {
        return 1;
   11b6b:	b8 01 00 00 00       	mov    $0x1,%eax
   11b70:	eb 43                	jmp    11bb5 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   11b72:	8b 45 08             	mov    0x8(%ebp),%eax
   11b75:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   11b78:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b7b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11b7e:	eb 23                	jmp    11ba3 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   11b80:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b83:	8d 50 01             	lea    0x1(%eax),%edx
   11b86:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11b89:	0f b6 08             	movzbl (%eax),%ecx
   11b8c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b8f:	8d 50 01             	lea    0x1(%eax),%edx
   11b92:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11b95:	0f b6 00             	movzbl (%eax),%eax
   11b98:	38 c1                	cmp    %al,%cl
   11b9a:	74 07                	je     11ba3 <kernel_memcmp+0x4a>
        {
            return 1;
   11b9c:	b8 01 00 00 00       	mov    $0x1,%eax
   11ba1:	eb 12                	jmp    11bb5 <kernel_memcmp+0x5c>
    while (size--)
   11ba3:	8b 45 10             	mov    0x10(%ebp),%eax
   11ba6:	8d 50 ff             	lea    -0x1(%eax),%edx
   11ba9:	89 55 10             	mov    %edx,0x10(%ebp)
   11bac:	85 c0                	test   %eax,%eax
   11bae:	75 d0                	jne    11b80 <kernel_memcmp+0x27>
        }
    }
    return 0;
   11bb0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11bb5:	c9                   	leave
   11bb6:	c3                   	ret

00011bb7 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   11bb7:	55                   	push   %ebp
   11bb8:	89 e5                	mov    %esp,%ebp
   11bba:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   11bbd:	8d 45 10             	lea    0x10(%ebp),%eax
   11bc0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   11bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bc6:	83 ec 04             	sub    $0x4,%esp
   11bc9:	50                   	push   %eax
   11bca:	ff 75 0c             	push   0xc(%ebp)
   11bcd:	ff 75 08             	push   0x8(%ebp)
   11bd0:	e8 dd 00 00 00       	call   11cb2 <kernel_vsprintf>
   11bd5:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11bd8:	90                   	nop
   11bd9:	c9                   	leave
   11bda:	c3                   	ret

00011bdb <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   11bdb:	55                   	push   %ebp
   11bdc:	89 e5                	mov    %esp,%ebp
   11bde:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11be1:	8b 45 08             	mov    0x8(%ebp),%eax
   11be4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   11be7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   11bed:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11bf1:	74 1d                	je     11c10 <kernel_itoa+0x35>
   11bf3:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11bf7:	74 17                	je     11c10 <kernel_itoa+0x35>
   11bf9:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11bfd:	74 11                	je     11c10 <kernel_itoa+0x35>
   11bff:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11c03:	74 0b                	je     11c10 <kernel_itoa+0x35>
    {
        *p = '\0';
   11c05:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c08:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11c0b:	e9 a0 00 00 00       	jmp    11cb0 <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   11c10:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11c14:	79 12                	jns    11c28 <kernel_itoa+0x4d>
   11c16:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11c1a:	75 0c                	jne    11c28 <kernel_itoa+0x4d>
    {
        *p++ = '-';
   11c1c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c1f:	8d 50 01             	lea    0x1(%eax),%edx
   11c22:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11c25:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   11c28:	8b 0d 60 25 01 00    	mov    0x12560,%ecx
   11c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c31:	99                   	cltd
   11c32:	f7 7d 10             	idivl  0x10(%ebp)
   11c35:	89 d0                	mov    %edx,%eax
   11c37:	83 c0 0f             	add    $0xf,%eax
   11c3a:	01 c8                	add    %ecx,%eax
   11c3c:	0f b6 00             	movzbl (%eax),%eax
   11c3f:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11c42:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c45:	8d 50 01             	lea    0x1(%eax),%edx
   11c48:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11c4b:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   11c4f:	88 10                	mov    %dl,(%eax)
        num /= base;
   11c51:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c54:	99                   	cltd
   11c55:	f7 7d 10             	idivl  0x10(%ebp)
   11c58:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   11c5b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11c5f:	75 c7                	jne    11c28 <kernel_itoa+0x4d>
    *p-- = '\0';
   11c61:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c64:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c67:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11c6a:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   11c6d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11c71:	7f 08                	jg     11c7b <kernel_itoa+0xa0>
   11c73:	8b 45 08             	mov    0x8(%ebp),%eax
   11c76:	83 c0 01             	add    $0x1,%eax
   11c79:	eb 03                	jmp    11c7e <kernel_itoa+0xa3>
   11c7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11c7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   11c81:	eb 25                	jmp    11ca8 <kernel_itoa+0xcd>
    {
        char ch = *start;
   11c83:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11c86:	0f b6 00             	movzbl (%eax),%eax
   11c89:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   11c8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c8f:	0f b6 10             	movzbl (%eax),%edx
   11c92:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11c95:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11c97:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c9a:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   11c9e:	88 10                	mov    %dl,(%eax)

        p--;
   11ca0:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11ca4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   11ca8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11cab:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   11cae:	72 d3                	jb     11c83 <kernel_itoa+0xa8>
    }
}
   11cb0:	c9                   	leave
   11cb1:	c3                   	ret

00011cb2 <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   11cb2:	55                   	push   %ebp
   11cb3:	89 e5                	mov    %esp,%ebp
   11cb5:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   11cb8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   11cbf:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   11cc5:	e9 11 01 00 00       	jmp    11ddb <kernel_vsprintf+0x129>
    {
        switch (state)
   11cca:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11cce:	74 0b                	je     11cdb <kernel_vsprintf+0x29>
   11cd0:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   11cd4:	74 2b                	je     11d01 <kernel_vsprintf+0x4f>
   11cd6:	e9 00 01 00 00       	jmp    11ddb <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   11cdb:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11cdf:	75 0c                	jne    11ced <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   11ce1:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11ce8:	e9 ee 00 00 00       	jmp    11ddb <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   11ced:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11cf0:	8d 50 01             	lea    0x1(%eax),%edx
   11cf3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11cf6:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11cfa:	88 10                	mov    %dl,(%eax)
            }
            break;
   11cfc:	e9 da 00 00 00       	jmp    11ddb <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   11d01:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11d05:	75 31                	jne    11d38 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11d07:	8b 45 10             	mov    0x10(%ebp),%eax
   11d0a:	8d 50 04             	lea    0x4(%eax),%edx
   11d0d:	89 55 10             	mov    %edx,0x10(%ebp)
   11d10:	8b 00                	mov    (%eax),%eax
   11d12:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   11d15:	6a 0a                	push   $0xa
   11d17:	ff 75 e4             	push   -0x1c(%ebp)
   11d1a:	ff 75 f8             	push   -0x8(%ebp)
   11d1d:	e8 b9 fe ff ff       	call   11bdb <kernel_itoa>
   11d22:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11d25:	ff 75 f8             	push   -0x8(%ebp)
   11d28:	e8 61 fd ff ff       	call   11a8e <kernel_strlen>
   11d2d:	83 c4 04             	add    $0x4,%esp
   11d30:	01 45 f8             	add    %eax,-0x8(%ebp)
   11d33:	e9 9b 00 00 00       	jmp    11dd3 <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   11d38:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11d3c:	75 2e                	jne    11d6c <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   11d3e:	8b 45 10             	mov    0x10(%ebp),%eax
   11d41:	8d 50 04             	lea    0x4(%eax),%edx
   11d44:	89 55 10             	mov    %edx,0x10(%ebp)
   11d47:	8b 00                	mov    (%eax),%eax
   11d49:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   11d4c:	6a 10                	push   $0x10
   11d4e:	ff 75 e8             	push   -0x18(%ebp)
   11d51:	ff 75 f8             	push   -0x8(%ebp)
   11d54:	e8 82 fe ff ff       	call   11bdb <kernel_itoa>
   11d59:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11d5c:	ff 75 f8             	push   -0x8(%ebp)
   11d5f:	e8 2a fd ff ff       	call   11a8e <kernel_strlen>
   11d64:	83 c4 04             	add    $0x4,%esp
   11d67:	01 45 f8             	add    %eax,-0x8(%ebp)
   11d6a:	eb 67                	jmp    11dd3 <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   11d6c:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11d70:	75 19                	jne    11d8b <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   11d72:	8b 45 10             	mov    0x10(%ebp),%eax
   11d75:	8d 50 04             	lea    0x4(%eax),%edx
   11d78:	89 55 10             	mov    %edx,0x10(%ebp)
   11d7b:	8b 00                	mov    (%eax),%eax
   11d7d:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   11d80:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11d83:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11d87:	88 10                	mov    %dl,(%eax)
   11d89:	eb 48                	jmp    11dd3 <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   11d8b:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11d8f:	75 42                	jne    11dd3 <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   11d91:	8b 45 10             	mov    0x10(%ebp),%eax
   11d94:	8d 50 04             	lea    0x4(%eax),%edx
   11d97:	89 55 10             	mov    %edx,0x10(%ebp)
   11d9a:	8b 00                	mov    (%eax),%eax
   11d9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   11d9f:	ff 75 f4             	push   -0xc(%ebp)
   11da2:	e8 e7 fc ff ff       	call   11a8e <kernel_strlen>
   11da7:	83 c4 04             	add    $0x4,%esp
   11daa:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   11dad:	eb 17                	jmp    11dc6 <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   11daf:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11db2:	8d 42 01             	lea    0x1(%edx),%eax
   11db5:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11db8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11dbb:	8d 48 01             	lea    0x1(%eax),%ecx
   11dbe:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11dc1:	0f b6 12             	movzbl (%edx),%edx
   11dc4:	88 10                	mov    %dl,(%eax)
                while (len--)
   11dc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11dc9:	8d 50 ff             	lea    -0x1(%eax),%edx
   11dcc:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11dcf:	85 c0                	test   %eax,%eax
   11dd1:	75 dc                	jne    11daf <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   11dd3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11dda:	90                   	nop
    while ((ch = *fmt++))
   11ddb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11dde:	8d 50 01             	lea    0x1(%eax),%edx
   11de1:	89 55 0c             	mov    %edx,0xc(%ebp)
   11de4:	0f b6 00             	movzbl (%eax),%eax
   11de7:	88 45 ef             	mov    %al,-0x11(%ebp)
   11dea:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11dee:	0f 85 d6 fe ff ff    	jne    11cca <kernel_vsprintf+0x18>
        }
    }
}
   11df4:	90                   	nop
   11df5:	90                   	nop
   11df6:	c9                   	leave
   11df7:	c3                   	ret

00011df8 <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   11df8:	55                   	push   %ebp
   11df9:	89 e5                	mov    %esp,%ebp
   11dfb:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   11dfe:	83 ec 08             	sub    $0x8,%esp
   11e01:	ff 75 14             	push   0x14(%ebp)
   11e04:	68 14 25 01 00       	push   $0x12514
   11e09:	e8 ee 02 00 00       	call   120fc <log_prinf>
   11e0e:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   11e11:	ff 75 10             	push   0x10(%ebp)
   11e14:	ff 75 0c             	push   0xc(%ebp)
   11e17:	ff 75 08             	push   0x8(%ebp)
   11e1a:	68 26 25 01 00       	push   $0x12526
   11e1f:	e8 d8 02 00 00       	call   120fc <log_prinf>
   11e24:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   11e27:	e8 24 fb ff ff       	call   11950 <hlt>
   11e2c:	eb f9                	jmp    11e27 <pannic+0x2f>

00011e2e <list_is_empty>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
    // 表项为空，返回空
   11e2e:	55                   	push   %ebp
   11e2f:	89 e5                	mov    %esp,%ebp
    if (list_is_empty(list)) {
   11e31:	8b 45 08             	mov    0x8(%ebp),%eax
   11e34:	8b 40 08             	mov    0x8(%eax),%eax
   11e37:	85 c0                	test   %eax,%eax
   11e39:	0f 94 c0             	sete   %al
   11e3c:	0f b6 c0             	movzbl %al,%eax
        return (list_node_t*)0;
   11e3f:	5d                   	pop    %ebp
   11e40:	c3                   	ret

00011e41 <list_init>:
void list_init(list_t *list) {
   11e41:	55                   	push   %ebp
   11e42:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   11e44:	8b 45 08             	mov    0x8(%ebp),%eax
   11e47:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e4e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e51:	8b 50 04             	mov    0x4(%eax),%edx
   11e54:	8b 45 08             	mov    0x8(%ebp),%eax
   11e57:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11e59:	8b 45 08             	mov    0x8(%ebp),%eax
   11e5c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11e63:	90                   	nop
   11e64:	5d                   	pop    %ebp
   11e65:	c3                   	ret

00011e66 <list_insert_first>:
void list_insert_first(list_t *list, list_node_t *node) {
   11e66:	55                   	push   %ebp
   11e67:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   11e69:	8b 45 08             	mov    0x8(%ebp),%eax
   11e6c:	8b 10                	mov    (%eax),%edx
   11e6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e71:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   11e74:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if (list_is_empty(list)) {
   11e7d:	ff 75 08             	push   0x8(%ebp)
   11e80:	e8 a9 ff ff ff       	call   11e2e <list_is_empty>
   11e85:	83 c4 04             	add    $0x4,%esp
   11e88:	85 c0                	test   %eax,%eax
   11e8a:	74 15                	je     11ea1 <list_insert_first+0x3b>
        list->last = list->first = node;
   11e8c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e8f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11e92:	89 10                	mov    %edx,(%eax)
   11e94:	8b 45 08             	mov    0x8(%ebp),%eax
   11e97:	8b 10                	mov    (%eax),%edx
   11e99:	8b 45 08             	mov    0x8(%ebp),%eax
   11e9c:	89 50 04             	mov    %edx,0x4(%eax)
   11e9f:	eb 12                	jmp    11eb3 <list_insert_first+0x4d>
        list->first->pre = node;
   11ea1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ea4:	8b 00                	mov    (%eax),%eax
   11ea6:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ea9:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11eab:	8b 45 08             	mov    0x8(%ebp),%eax
   11eae:	8b 55 0c             	mov    0xc(%ebp),%edx
   11eb1:	89 10                	mov    %edx,(%eax)
    list->count++;
   11eb3:	8b 45 08             	mov    0x8(%ebp),%eax
   11eb6:	8b 40 08             	mov    0x8(%eax),%eax
   11eb9:	8d 50 01             	lea    0x1(%eax),%edx
   11ebc:	8b 45 08             	mov    0x8(%ebp),%eax
   11ebf:	89 50 08             	mov    %edx,0x8(%eax)
}
   11ec2:	90                   	nop
   11ec3:	c9                   	leave
   11ec4:	c3                   	ret

00011ec5 <list_insert_last>:
void list_insert_last(list_t *list, list_node_t *node) {
   11ec5:	55                   	push   %ebp
   11ec6:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11ec8:	8b 45 08             	mov    0x8(%ebp),%eax
   11ecb:	8b 50 04             	mov    0x4(%eax),%edx
   11ece:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ed1:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ed6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if (list_is_empty(list)) {
   11edd:	ff 75 08             	push   0x8(%ebp)
   11ee0:	e8 49 ff ff ff       	call   11e2e <list_is_empty>
   11ee5:	83 c4 04             	add    $0x4,%esp
   11ee8:	85 c0                	test   %eax,%eax
   11eea:	74 16                	je     11f02 <list_insert_last+0x3d>
        list->first = list->last = node;
   11eec:	8b 45 08             	mov    0x8(%ebp),%eax
   11eef:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ef2:	89 50 04             	mov    %edx,0x4(%eax)
   11ef5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef8:	8b 50 04             	mov    0x4(%eax),%edx
   11efb:	8b 45 08             	mov    0x8(%ebp),%eax
   11efe:	89 10                	mov    %edx,(%eax)
   11f00:	eb 15                	jmp    11f17 <list_insert_last+0x52>
        list->last->next = node;
   11f02:	8b 45 08             	mov    0x8(%ebp),%eax
   11f05:	8b 40 04             	mov    0x4(%eax),%eax
   11f08:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f0b:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11f0e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f11:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f14:	89 50 04             	mov    %edx,0x4(%eax)
    list->count++;
   11f17:	8b 45 08             	mov    0x8(%ebp),%eax
   11f1a:	8b 40 08             	mov    0x8(%eax),%eax
   11f1d:	8d 50 01             	lea    0x1(%eax),%edx
   11f20:	8b 45 08             	mov    0x8(%ebp),%eax
   11f23:	89 50 08             	mov    %edx,0x8(%eax)
}
   11f26:	90                   	nop
   11f27:	c9                   	leave
   11f28:	c3                   	ret

00011f29 <list_remove_first>:
list_node_t* list_remove_first(list_t *list) {
   11f29:	55                   	push   %ebp
   11f2a:	89 e5                	mov    %esp,%ebp
   11f2c:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   11f2f:	ff 75 08             	push   0x8(%ebp)
   11f32:	e8 f7 fe ff ff       	call   11e2e <list_is_empty>
   11f37:	83 c4 04             	add    $0x4,%esp
   11f3a:	85 c0                	test   %eax,%eax
   11f3c:	74 07                	je     11f45 <list_remove_first+0x1c>
        return (list_node_t*)0;
   11f3e:	b8 00 00 00 00       	mov    $0x0,%eax
   11f43:	eb 5a                	jmp    11f9f <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   11f45:	8b 45 08             	mov    0x8(%ebp),%eax
   11f48:	8b 00                	mov    (%eax),%eax
   11f4a:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   11f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11f50:	8b 50 04             	mov    0x4(%eax),%edx
   11f53:	8b 45 08             	mov    0x8(%ebp),%eax
   11f56:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   11f58:	8b 45 08             	mov    0x8(%ebp),%eax
   11f5b:	8b 00                	mov    (%eax),%eax
   11f5d:	85 c0                	test   %eax,%eax
   11f5f:	75 0c                	jne    11f6d <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   11f61:	8b 45 08             	mov    0x8(%ebp),%eax
   11f64:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11f6b:	eb 0c                	jmp    11f79 <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   11f6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11f70:	8b 40 04             	mov    0x4(%eax),%eax
   11f73:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   11f79:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11f7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   11f82:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11f85:	8b 10                	mov    (%eax),%edx
   11f87:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11f8a:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   11f8d:	8b 45 08             	mov    0x8(%ebp),%eax
   11f90:	8b 40 08             	mov    0x8(%eax),%eax
   11f93:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f96:	8b 45 08             	mov    0x8(%ebp),%eax
   11f99:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   11f9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11f9f:	c9                   	leave
   11fa0:	c3                   	ret

00011fa1 <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   11fa1:	55                   	push   %ebp
   11fa2:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   11fa4:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa7:	8b 00                	mov    (%eax),%eax
   11fa9:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11fac:	75 0b                	jne    11fb9 <list_remove+0x18>
        list->first = remove_node->next;
   11fae:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fb1:	8b 50 04             	mov    0x4(%eax),%edx
   11fb4:	8b 45 08             	mov    0x8(%ebp),%eax
   11fb7:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   11fb9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fbc:	8b 40 04             	mov    0x4(%eax),%eax
   11fbf:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11fc2:	75 0b                	jne    11fcf <list_remove+0x2e>
        list->last = remove_node->pre;
   11fc4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fc7:	8b 10                	mov    (%eax),%edx
   11fc9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fcc:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   11fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fd2:	8b 00                	mov    (%eax),%eax
   11fd4:	85 c0                	test   %eax,%eax
   11fd6:	74 0e                	je     11fe6 <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   11fd8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fdb:	8b 00                	mov    (%eax),%eax
   11fdd:	8b 55 0c             	mov    0xc(%ebp),%edx
   11fe0:	8b 52 04             	mov    0x4(%edx),%edx
   11fe3:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   11fe6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fe9:	8b 40 04             	mov    0x4(%eax),%eax
   11fec:	85 c0                	test   %eax,%eax
   11fee:	74 0d                	je     11ffd <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   11ff0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ff3:	8b 40 04             	mov    0x4(%eax),%eax
   11ff6:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ff9:	8b 12                	mov    (%edx),%edx
   11ffb:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   11ffd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12000:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12007:	8b 45 0c             	mov    0xc(%ebp),%eax
   1200a:	8b 50 04             	mov    0x4(%eax),%edx
   1200d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12010:	89 10                	mov    %edx,(%eax)
    --list->count;
   12012:	8b 45 08             	mov    0x8(%ebp),%eax
   12015:	8b 40 08             	mov    0x8(%eax),%eax
   12018:	8d 50 ff             	lea    -0x1(%eax),%edx
   1201b:	8b 45 08             	mov    0x8(%ebp),%eax
   1201e:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   12021:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   12024:	5d                   	pop    %ebp
   12025:	c3                   	ret

00012026 <inb>:
void init_log()
{
    mutex_init(&mutex);
    // 对硬件初始化
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x80);
   12026:	55                   	push   %ebp
   12027:	89 e5                	mov    %esp,%ebp
   12029:	83 ec 14             	sub    $0x14,%esp
   1202c:	8b 45 08             	mov    0x8(%ebp),%eax
   1202f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
   12033:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12037:	89 c2                	mov    %eax,%edx
   12039:	ec                   	in     (%dx),%al
   1203a:	88 45 ff             	mov    %al,-0x1(%ebp)
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
    outb(COM1_PORT + 4, 0x0F);
   1203d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12041:	c9                   	leave
   12042:	c3                   	ret

00012043 <outb>:
    kernel_memset(str_buf, '\0', sizeof(str_buf));
    va_start(args, fmt);

    kernel_vsprintf(str_buf, fmt, args);
    va_end(args);

   12043:	55                   	push   %ebp
   12044:	89 e5                	mov    %esp,%ebp
   12046:	83 ec 08             	sub    $0x8,%esp
   12049:	8b 55 08             	mov    0x8(%ebp),%edx
   1204c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1204f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12053:	88 45 f8             	mov    %al,-0x8(%ebp)
    mutex_lock(&mutex);
   12056:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1205a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1205e:	ee                   	out    %al,(%dx)
    const char *p = str_buf;
   1205f:	90                   	nop
   12060:	c9                   	leave
   12061:	c3                   	ret

00012062 <init_log>:
{
   12062:	55                   	push   %ebp
   12063:	89 e5                	mov    %esp,%ebp
   12065:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12068:	83 ec 0c             	sub    $0xc,%esp
   1206b:	68 24 54 01 00       	push   $0x15424
   12070:	e8 e8 f3 ff ff       	call   1145d <mutex_init>
   12075:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12078:	83 ec 08             	sub    $0x8,%esp
   1207b:	6a 00                	push   $0x0
   1207d:	68 f9 03 00 00       	push   $0x3f9
   12082:	e8 bc ff ff ff       	call   12043 <outb>
   12087:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   1208a:	83 ec 08             	sub    $0x8,%esp
   1208d:	68 80 00 00 00       	push   $0x80
   12092:	68 fb 03 00 00       	push   $0x3fb
   12097:	e8 a7 ff ff ff       	call   12043 <outb>
   1209c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   1209f:	83 ec 08             	sub    $0x8,%esp
   120a2:	6a 03                	push   $0x3
   120a4:	68 f8 03 00 00       	push   $0x3f8
   120a9:	e8 95 ff ff ff       	call   12043 <outb>
   120ae:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   120b1:	83 ec 08             	sub    $0x8,%esp
   120b4:	6a 00                	push   $0x0
   120b6:	68 f9 03 00 00       	push   $0x3f9
   120bb:	e8 83 ff ff ff       	call   12043 <outb>
   120c0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   120c3:	83 ec 08             	sub    $0x8,%esp
   120c6:	6a 03                	push   $0x3
   120c8:	68 fb 03 00 00       	push   $0x3fb
   120cd:	e8 71 ff ff ff       	call   12043 <outb>
   120d2:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0x07);
   120d5:	83 ec 08             	sub    $0x8,%esp
   120d8:	6a 07                	push   $0x7
   120da:	68 fa 03 00 00       	push   $0x3fa
   120df:	e8 5f ff ff ff       	call   12043 <outb>
   120e4:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0F);
   120e7:	83 ec 08             	sub    $0x8,%esp
   120ea:	6a 0f                	push   $0xf
   120ec:	68 fc 03 00 00       	push   $0x3fc
   120f1:	e8 4d ff ff ff       	call   12043 <outb>
   120f6:	83 c4 10             	add    $0x10,%esp
}
   120f9:	90                   	nop
   120fa:	c9                   	leave
   120fb:	c3                   	ret

000120fc <log_prinf>:
{
   120fc:	55                   	push   %ebp
   120fd:	89 e5                	mov    %esp,%ebp
   120ff:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12105:	83 ec 04             	sub    $0x4,%esp
   12108:	68 80 00 00 00       	push   $0x80
   1210d:	6a 00                	push   $0x0
   1210f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12115:	50                   	push   %eax
   12116:	e8 fd f9 ff ff       	call   11b18 <kernel_memset>
   1211b:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   1211e:	8d 45 0c             	lea    0xc(%ebp),%eax
   12121:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   12127:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1212d:	83 ec 04             	sub    $0x4,%esp
   12130:	50                   	push   %eax
   12131:	ff 75 08             	push   0x8(%ebp)
   12134:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1213a:	50                   	push   %eax
   1213b:	e8 72 fb ff ff       	call   11cb2 <kernel_vsprintf>
   12140:	83 c4 10             	add    $0x10,%esp
    mutex_lock(&mutex);
   12143:	83 ec 0c             	sub    $0xc,%esp
   12146:	68 24 54 01 00       	push   $0x15424
   1214b:	e8 3b f3 ff ff       	call   1148b <mutex_lock>
   12150:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   12153:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12159:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   1215c:	eb 3b                	jmp    12199 <log_prinf+0x9d>
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   1215e:	90                   	nop
   1215f:	83 ec 0c             	sub    $0xc,%esp
   12162:	68 fd 03 00 00       	push   $0x3fd
   12167:	e8 ba fe ff ff       	call   12026 <inb>
   1216c:	83 c4 10             	add    $0x10,%esp
   1216f:	0f b6 c0             	movzbl %al,%eax
   12172:	83 e0 40             	and    $0x40,%eax
   12175:	85 c0                	test   %eax,%eax
   12177:	74 e6                	je     1215f <log_prinf+0x63>
            ;
        outb(COM1_PORT, *p++);
   12179:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1217c:	8d 50 01             	lea    0x1(%eax),%edx
   1217f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12182:	0f b6 00             	movzbl (%eax),%eax
   12185:	0f b6 c0             	movzbl %al,%eax
   12188:	83 ec 08             	sub    $0x8,%esp
   1218b:	50                   	push   %eax
   1218c:	68 f8 03 00 00       	push   $0x3f8
   12191:	e8 ad fe ff ff       	call   12043 <outb>
   12196:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   12199:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1219c:	0f b6 00             	movzbl (%eax),%eax
   1219f:	84 c0                	test   %al,%al
   121a1:	75 bb                	jne    1215e <log_prinf+0x62>
    }

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   121a3:	83 ec 08             	sub    $0x8,%esp
   121a6:	6a 0d                	push   $0xd
   121a8:	68 f8 03 00 00       	push   $0x3f8
   121ad:	e8 91 fe ff ff       	call   12043 <outb>
   121b2:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   121b5:	83 ec 08             	sub    $0x8,%esp
   121b8:	6a 0a                	push   $0xa
   121ba:	68 f8 03 00 00       	push   $0x3f8
   121bf:	e8 7f fe ff ff       	call   12043 <outb>
   121c4:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&mutex);
   121c7:	83 ec 0c             	sub    $0xc,%esp
   121ca:	68 24 54 01 00       	push   $0x15424
   121cf:	e8 48 f3 ff ff       	call   1151c <mutex_unlock>
   121d4:	83 c4 10             	add    $0x10,%esp
}
   121d7:	90                   	nop
   121d8:	c9                   	leave
   121d9:	c3                   	ret
