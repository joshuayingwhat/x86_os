
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000018ec memsz 0x00005610 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000157a  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000036c  0001157c  0001157c  0000257c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  000118e8  000118e8  000028e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d10  00011900  00011900  000028ec  2**5
                  ALLOC
  4 .debug_line   00000acd  00000000  00000000  000028ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000580  00000000  00000000  000033b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001c0f  00000000  00000000  00003939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000a67  00000000  00000000  00005548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000100  00000000  00000000  00005fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000a1a  00000000  00000000  000060b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  00006aca  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000960  00000000  00000000  00006adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102a8 l     F .text	000000dd tss_init
000115f4 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 cpu.c
000103e0 l     F .text	00000028 lgdt
00010408 l     F .text	0000001a far_jump
00011900 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000105bc l     F .text	0000001d inb
000105d9 l     F .text	0000001f outb
000105f8 l     F .text	00000007 cli
000105ff l     F .text	00000007 sti
00010606 l     F .text	00000028 lidt
0001062e l     F .text	00000007 hlt
00012100 l     O .bss	00000400 idt_table
00010635 l     F .text	000000d9 dump_core_regs
0001070e l     F .text	0000003e do_default_handler
0001097c l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010d45 l     F .text	0000001f outb
00012500 l     O .bss	00000004 sys_tick
00010d87 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00010dff l     F .text	00000017 write_tr
00012520 l     O .bss	0000006c first_task
000125a0 l     O .bss	00001000 init_task_stack
000135a0 l     O .bss	0000006c init_task
00000000 l    df *ABS*	00000000 klib.c
00010f30 l     F .text	00000007 hlt
000118e8 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 log.c
0001140e l     F .text	0000001d inb
0001142b l     F .text	0000001f outb
000110a9 g     F .text	0000004f kernel_memcpy
00010d0f g     F .text	0000000b irq_enable_global
00010880 g     F .text	0000001c do_handler_segment_not_present
000110f8 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
000105b1 g     F .text	0000000b cpu_init
00010e71 g     F .text	000000bf init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00010f37 g     F .text	00000047 kernel_strcpy
00010bf2 g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
000107d8 g     F .text	0000001c do_handler_overflow
0001090c g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
000108b8 g     F .text	0000001c do_handler_general_protection
00010768 g     F .text	0000001c do_handler_divider
00010848 g     F .text	0000001c do_handler_double_fault
00010e33 g     F .text	0000003e init_task_entry
000108d4 g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010d1a g     F .text	0000002b pic_send_eoi
0001144a g     F .text	00000072 init_log
0001074c g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00010960 g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
00010289 g       .text	00000000 exception_handler_time
00013610 g     O .bss	00002000 stack
000100e5 g       .text	00000000 exception_handler_bound_range
00010810 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
000108f0 g     F .text	0000001c do_handler_fpu_error
00010928 g     F .text	0000001c do_handler_machine_check
00010784 g     F .text	0000001c do_handler_Debug
000107a0 g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00010f7e g     F .text	00000070 kernel_strncpy
00010d04 g     F .text	0000000b irq_disable_global
00010e16 g     F .text	0000001d kernel_init
00010000 g       .text	00000000 _start
00011292 g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
00010864 g     F .text	0000001c do_handler_invalid_tss
00010bbd g     F .text	00000035 irq_install
000114bc g     F .text	000000be log_prinf
000104a5 g     F .text	0000006d init_gdt
00010c7d g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
0001082c g     F .text	0000001c do_handler_device_unavailable
0001059e g     F .text	00000013 switch_to_tss
00011139 g     F .text	0000005e kernel_memcmp
0001002b g       .text	00000000 exception_handler_unknow
00010944 g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
000101f0 g       .text	00000000 exception_handler_fpu_error
000103c5 g     F .text	0000001b task_switch_from_to
00010559 g     F .text	00000045 gdt_alloc_des
00010a0f g     F .text	000001ae irq_init
0001106e g     F .text	0000003b kernel_strlen
00010422 g     F .text	00000083 segment_desc_set
000107f4 g     F .text	0000001c do_handler_bound_range
00010fee g     F .text	00000080 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
00010de7 g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
00010069 g       .text	00000000 exception_handler_Debug
000113d8 g     F .text	00000036 pannic
0001089c g     F .text	0000001c do_handler_stack_segment_fault
000107bc g     F .text	0000001c do_handler_breakpoint
00010385 g     F .text	00000040 task_init
00011197 g     F .text	00000024 kernel_sprintf
000111bb g     F .text	000000d7 kernel_itoa
00010512 g     F .text	00000047 gate_desc_set
00010d64 g     F .text	00000023 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 0a 0e 00 00       	call   10e16 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc 10 56 01 00       	mov    $0x15610,%esp
    jmp init_main
   10026:	e9 46 0e 00 00       	jmp    10e71 <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 10 07 00 00       	call   1074c <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 0d 07 00 00       	call   10768 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 0a 07 00 00       	call   10784 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 07 07 00 00       	call   107a0 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 04 07 00 00       	call   107bc <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 01 07 00 00       	call   107d8 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 fe 06 00 00       	call   107f4 <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 fb 06 00 00       	call   10810 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 f8 06 00 00       	call   1082c <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 f7 06 00 00       	call   10848 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 f6 06 00 00       	call   10864 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 f5 06 00 00       	call   10880 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 f4 06 00 00       	call   1089c <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 f3 06 00 00       	call   108b8 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 f2 06 00 00       	call   108d4 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 ef 06 00 00       	call   108f0 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 ee 06 00 00       	call   1090c <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 eb 06 00 00       	call   10928 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 e8 06 00 00       	call   10944 <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 e5 06 00 00       	call   10960 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 ca 0a 00 00       	call   10d64 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <tss_init>:
#include "cpu/cpu.h"
#include "tools/log.h"

// 任务切换后设置另外一个程序的tss
static int tss_init(task_t *task, uint32_t entry, uint32_t esp)
{
   102a8:	55                   	push   %ebp
   102a9:	89 e5                	mov    %esp,%ebp
   102ab:	83 ec 18             	sub    $0x18,%esp
    // 找到一个空闲的gdt描述副
    int tss_sel = gdt_alloc_des();
   102ae:	e8 a6 02 00 00       	call   10559 <gdt_alloc_des>
   102b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   102b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102ba:	79 1a                	jns    102d6 <tss_init+0x2e>
    {
        // gdt表已经满了无法添加tss描述副到gdt中
        log_prinf("alloc tss failed");
   102bc:	83 ec 0c             	sub    $0xc,%esp
   102bf:	68 7c 15 01 00       	push   $0x1157c
   102c4:	e8 f3 11 00 00       	call   114bc <log_prinf>
   102c9:	83 c4 10             	add    $0x10,%esp
        return -1;
   102cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102d1:	e9 ad 00 00 00       	jmp    10383 <tss_init+0xdb>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   102d6:	8b 45 08             	mov    0x8(%ebp),%eax
   102d9:	68 89 00 00 00       	push   $0x89
   102de:	6a 6c                	push   $0x6c
   102e0:	50                   	push   %eax
   102e1:	ff 75 f4             	push   -0xc(%ebp)
   102e4:	e8 39 01 00 00       	call   10422 <segment_desc_set>
   102e9:	83 c4 10             	add    $0x10,%esp
                     SEG_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t));
   102ec:	8b 45 08             	mov    0x8(%ebp),%eax
   102ef:	83 ec 04             	sub    $0x4,%esp
   102f2:	6a 68                	push   $0x68
   102f4:	6a 00                	push   $0x0
   102f6:	50                   	push   %eax
   102f7:	e8 fc 0d 00 00       	call   110f8 <kernel_memset>
   102fc:	83 c4 10             	add    $0x10,%esp

    task->tss.eip = entry;
   102ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10302:	8b 55 0c             	mov    0xc(%ebp),%edx
   10305:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10308:	8b 45 08             	mov    0x8(%ebp),%eax
   1030b:	8b 55 10             	mov    0x10(%ebp),%edx
   1030e:	89 50 04             	mov    %edx,0x4(%eax)
   10311:	8b 45 08             	mov    0x8(%ebp),%eax
   10314:	8b 50 04             	mov    0x4(%eax),%edx
   10317:	8b 45 08             	mov    0x8(%ebp),%eax
   1031a:	89 50 38             	mov    %edx,0x38(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1031d:	8b 45 08             	mov    0x8(%ebp),%eax
   10320:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
   10327:	8b 45 08             	mov    0x8(%ebp),%eax
   1032a:	8b 50 08             	mov    0x8(%eax),%edx
   1032d:	8b 45 08             	mov    0x8(%ebp),%eax
   10330:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10333:	8b 45 08             	mov    0x8(%ebp),%eax
   10336:	c7 40 5c 10 00 00 00 	movl   $0x10,0x5c(%eax)
   1033d:	8b 45 08             	mov    0x8(%ebp),%eax
   10340:	8b 50 5c             	mov    0x5c(%eax),%edx
   10343:	8b 45 08             	mov    0x8(%ebp),%eax
   10346:	89 50 58             	mov    %edx,0x58(%eax)
   10349:	8b 45 08             	mov    0x8(%ebp),%eax
   1034c:	8b 50 58             	mov    0x58(%eax),%edx
   1034f:	8b 45 08             	mov    0x8(%ebp),%eax
   10352:	89 50 54             	mov    %edx,0x54(%eax)
   10355:	8b 45 08             	mov    0x8(%ebp),%eax
   10358:	8b 50 54             	mov    0x54(%eax),%edx
   1035b:	8b 45 08             	mov    0x8(%ebp),%eax
   1035e:	89 50 48             	mov    %edx,0x48(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   10361:	8b 45 08             	mov    0x8(%ebp),%eax
   10364:	c7 40 4c 08 00 00 00 	movl   $0x8,0x4c(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFALUT;
   1036b:	8b 45 08             	mov    0x8(%ebp),%eax
   1036e:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)
    task->tss_sel = tss_sel; // 将tss选择子保存到tss_sel中
   10375:	8b 45 08             	mov    0x8(%ebp),%eax
   10378:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1037b:	89 50 68             	mov    %edx,0x68(%eax)
    return 0;
   1037e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10383:	c9                   	leave
   10384:	c3                   	ret

00010385 <task_init>:

int task_init(task_t *task, uint32_t entry, uint32_t esp)
{
   10385:	55                   	push   %ebp
   10386:	89 e5                	mov    %esp,%ebp
   10388:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t *)0);
   1038b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1038f:	75 19                	jne    103aa <task_init+0x25>
   10391:	68 8d 15 01 00       	push   $0x1158d
   10396:	68 f4 15 01 00       	push   $0x115f4
   1039b:	6a 24                	push   $0x24
   1039d:	68 a4 15 01 00       	push   $0x115a4
   103a2:	e8 31 10 00 00       	call   113d8 <pannic>
   103a7:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   103aa:	83 ec 04             	sub    $0x4,%esp
   103ad:	ff 75 10             	push   0x10(%ebp)
   103b0:	ff 75 0c             	push   0xc(%ebp)
   103b3:	ff 75 08             	push   0x8(%ebp)
   103b6:	e8 ed fe ff ff       	call   102a8 <tss_init>
   103bb:	83 c4 10             	add    $0x10,%esp
    return 0;
   103be:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103c3:	c9                   	leave
   103c4:	c3                   	ret

000103c5 <task_switch_from_to>:

void task_switch_from_to(task_t *from, task_t *to)
{
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
   103c8:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   103cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   103ce:	8b 40 68             	mov    0x68(%eax),%eax
   103d1:	83 ec 0c             	sub    $0xc,%esp
   103d4:	50                   	push   %eax
   103d5:	e8 c4 01 00 00       	call   1059e <switch_to_tss>
   103da:	83 c4 10             	add    $0x10,%esp
}
   103dd:	90                   	nop
   103de:	c9                   	leave
   103df:	c3                   	ret

000103e0 <lgdt>:
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}

// 从gdt表中找到一个空闲的项设置给tss
int gdt_alloc_des(void)
{
   103e0:	55                   	push   %ebp
   103e1:	89 e5                	mov    %esp,%ebp
   103e3:	83 ec 10             	sub    $0x10,%esp
    {
        segment_desc_t *desc = gdt_table + i;
        if (desc->attr == 0)
        {
            return i * sizeof(segment_desc_t);
        }
   103e6:	8b 45 08             	mov    0x8(%ebp),%eax
   103e9:	c1 e8 10             	shr    $0x10,%eax
   103ec:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    }
   103f0:	8b 45 08             	mov    0x8(%ebp),%eax
   103f3:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return -1;
   103f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   103fa:	83 e8 01             	sub    $0x1,%eax
   103fd:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10401:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

   10405:	90                   	nop
   10406:	c9                   	leave
   10407:	c3                   	ret

00010408 <far_jump>:
   10408:	55                   	push   %ebp
   10409:	89 e5                	mov    %esp,%ebp
   1040b:	83 ec 10             	sub    $0x10,%esp
   1040e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10411:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10414:	8b 45 08             	mov    0x8(%ebp),%eax
   10417:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1041a:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1041d:	ff 28                	ljmp   *(%eax)
   1041f:	90                   	nop
   10420:	c9                   	leave
   10421:	c3                   	ret

00010422 <segment_desc_set>:
{
   10422:	55                   	push   %ebp
   10423:	89 e5                	mov    %esp,%ebp
   10425:	83 ec 14             	sub    $0x14,%esp
   10428:	8b 45 14             	mov    0x14(%ebp),%eax
   1042b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	83 e0 f8             	and    $0xfffffff8,%eax
   10435:	05 00 19 01 00       	add    $0x11900,%eax
   1043a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   1043d:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10444:	76 0f                	jbe    10455 <segment_desc_set+0x33>
        attr |= SEG_G;
   10446:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   1044c:	8b 45 10             	mov    0x10(%ebp),%eax
   1044f:	c1 e8 0c             	shr    $0xc,%eax
   10452:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   10455:	8b 45 10             	mov    0x10(%ebp),%eax
   10458:	89 c2                	mov    %eax,%edx
   1045a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1045d:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   10460:	8b 45 0c             	mov    0xc(%ebp),%eax
   10463:	89 c2                	mov    %eax,%edx
   10465:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10468:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   1046c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1046f:	c1 e8 10             	shr    $0x10,%eax
   10472:	89 c2                	mov    %eax,%edx
   10474:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10477:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   1047a:	8b 45 10             	mov    0x10(%ebp),%eax
   1047d:	c1 e8 10             	shr    $0x10,%eax
   10480:	c1 e0 08             	shl    $0x8,%eax
   10483:	66 25 00 0f          	and    $0xf00,%ax
   10487:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1048b:	89 c2                	mov    %eax,%edx
   1048d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10490:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   10494:	8b 45 0c             	mov    0xc(%ebp),%eax
   10497:	c1 e8 18             	shr    $0x18,%eax
   1049a:	89 c2                	mov    %eax,%edx
   1049c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1049f:	88 50 07             	mov    %dl,0x7(%eax)
}
   104a2:	90                   	nop
   104a3:	c9                   	leave
   104a4:	c3                   	ret

000104a5 <init_gdt>:
{
   104a5:	55                   	push   %ebp
   104a6:	89 e5                	mov    %esp,%ebp
   104a8:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   104ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   104b2:	eb 19                	jmp    104cd <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   104b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104b7:	c1 e0 03             	shl    $0x3,%eax
   104ba:	6a 00                	push   $0x0
   104bc:	6a 00                	push   $0x0
   104be:	6a 00                	push   $0x0
   104c0:	50                   	push   %eax
   104c1:	e8 5c ff ff ff       	call   10422 <segment_desc_set>
   104c6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   104c9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104cd:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   104d4:	7e de                	jle    104b4 <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   104d6:	68 92 40 00 00       	push   $0x4092
   104db:	6a ff                	push   $0xffffffff
   104dd:	6a 00                	push   $0x0
   104df:	6a 10                	push   $0x10
   104e1:	e8 3c ff ff ff       	call   10422 <segment_desc_set>
   104e6:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   104e9:	68 9a 40 00 00       	push   $0x409a
   104ee:	6a ff                	push   $0xffffffff
   104f0:	6a 00                	push   $0x0
   104f2:	6a 08                	push   $0x8
   104f4:	e8 29 ff ff ff       	call   10422 <segment_desc_set>
   104f9:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   104fc:	b8 00 19 01 00       	mov    $0x11900,%eax
   10501:	68 00 08 00 00       	push   $0x800
   10506:	50                   	push   %eax
   10507:	e8 d4 fe ff ff       	call   103e0 <lgdt>
   1050c:	83 c4 08             	add    $0x8,%esp
}
   1050f:	90                   	nop
   10510:	c9                   	leave
   10511:	c3                   	ret

00010512 <gate_desc_set>:
{
   10512:	55                   	push   %ebp
   10513:	89 e5                	mov    %esp,%ebp
   10515:	83 ec 08             	sub    $0x8,%esp
   10518:	8b 55 0c             	mov    0xc(%ebp),%edx
   1051b:	8b 45 14             	mov    0x14(%ebp),%eax
   1051e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10522:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10526:	8b 45 10             	mov    0x10(%ebp),%eax
   10529:	89 c2                	mov    %eax,%edx
   1052b:	8b 45 08             	mov    0x8(%ebp),%eax
   1052e:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10531:	8b 45 08             	mov    0x8(%ebp),%eax
   10534:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10538:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1053c:	8b 45 08             	mov    0x8(%ebp),%eax
   1053f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10543:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10547:	8b 45 10             	mov    0x10(%ebp),%eax
   1054a:	c1 e8 10             	shr    $0x10,%eax
   1054d:	89 c2                	mov    %eax,%edx
   1054f:	8b 45 08             	mov    0x8(%ebp),%eax
   10552:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10556:	90                   	nop
   10557:	c9                   	leave
   10558:	c3                   	ret

00010559 <gdt_alloc_des>:
{
   10559:	55                   	push   %ebp
   1055a:	89 e5                	mov    %esp,%ebp
   1055c:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1055f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10566:	eb 26                	jmp    1058e <gdt_alloc_des+0x35>
        segment_desc_t *desc = gdt_table + i;
   10568:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1056b:	c1 e0 03             	shl    $0x3,%eax
   1056e:	05 00 19 01 00       	add    $0x11900,%eax
   10573:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->attr == 0)
   10576:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10579:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1057d:	66 85 c0             	test   %ax,%ax
   10580:	75 08                	jne    1058a <gdt_alloc_des+0x31>
            return i * sizeof(segment_desc_t);
   10582:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10585:	c1 e0 03             	shl    $0x3,%eax
   10588:	eb 12                	jmp    1059c <gdt_alloc_des+0x43>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1058a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1058e:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10595:	7e d1                	jle    10568 <gdt_alloc_des+0xf>
    return -1;
   10597:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1059c:	c9                   	leave
   1059d:	c3                   	ret

0001059e <switch_to_tss>:
{
   1059e:	55                   	push   %ebp
   1059f:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   105a1:	6a 00                	push   $0x0
   105a3:	ff 75 08             	push   0x8(%ebp)
   105a6:	e8 5d fe ff ff       	call   10408 <far_jump>
   105ab:	83 c4 08             	add    $0x8,%esp
}
   105ae:	90                   	nop
   105af:	c9                   	leave
   105b0:	c3                   	ret

000105b1 <cpu_init>:
{
   105b1:	55                   	push   %ebp
   105b2:	89 e5                	mov    %esp,%ebp
    init_gdt();
   105b4:	e8 ec fe ff ff       	call   104a5 <init_gdt>
   105b9:	90                   	nop
   105ba:	5d                   	pop    %ebp
   105bb:	c3                   	ret

000105bc <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   105bc:	55                   	push   %ebp
   105bd:	89 e5                	mov    %esp,%ebp
   105bf:	83 ec 14             	sub    $0x14,%esp
   105c2:	8b 45 08             	mov    0x8(%ebp),%eax
   105c5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   105c9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   105cd:	89 c2                	mov    %eax,%edx
   105cf:	ec                   	in     (%dx),%al
   105d0:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   105d3:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   105d7:	c9                   	leave
   105d8:	c3                   	ret

000105d9 <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   105d9:	55                   	push   %ebp
   105da:	89 e5                	mov    %esp,%ebp
   105dc:	83 ec 08             	sub    $0x8,%esp
   105df:	8b 55 08             	mov    0x8(%ebp),%edx
   105e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   105e5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   105e9:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   105ec:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   105f0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   105f4:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   105f5:	90                   	nop
   105f6:	c9                   	leave
   105f7:	c3                   	ret

000105f8 <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   105f8:	55                   	push   %ebp
   105f9:	89 e5                	mov    %esp,%ebp
        hlt();
   105fb:	fa                   	cli
    }
   105fc:	90                   	nop
   105fd:	5d                   	pop    %ebp
   105fe:	c3                   	ret

000105ff <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   105ff:	55                   	push   %ebp
   10600:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   10602:	fb                   	sti
}
   10603:	90                   	nop
   10604:	5d                   	pop    %ebp
   10605:	c3                   	ret

00010606 <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   10606:	55                   	push   %ebp
   10607:	89 e5                	mov    %esp,%ebp
   10609:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   1060c:	8b 45 08             	mov    0x8(%ebp),%eax
   1060f:	c1 e8 10             	shr    $0x10,%eax
   10612:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   10616:	8b 45 08             	mov    0x8(%ebp),%eax
   10619:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   1061d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10620:	83 e8 01             	sub    $0x1,%eax
   10623:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10627:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   1062b:	90                   	nop
   1062c:	c9                   	leave
   1062d:	c3                   	ret

0001062e <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   1062e:	55                   	push   %ebp
   1062f:	89 e5                	mov    %esp,%ebp
}
   10631:	f4                   	hlt

   10632:	90                   	nop
   10633:	5d                   	pop    %ebp
   10634:	c3                   	ret

00010635 <dump_core_regs>:
{
   10635:	55                   	push   %ebp
   10636:	89 e5                	mov    %esp,%ebp
   10638:	57                   	push   %edi
   10639:	56                   	push   %esi
   1063a:	53                   	push   %ebx
   1063b:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   1063e:	8b 45 08             	mov    0x8(%ebp),%eax
   10641:	8b 50 34             	mov    0x34(%eax),%edx
   10644:	8b 45 08             	mov    0x8(%ebp),%eax
   10647:	8b 40 30             	mov    0x30(%eax),%eax
   1064a:	83 ec 04             	sub    $0x4,%esp
   1064d:	52                   	push   %edx
   1064e:	50                   	push   %eax
   1064f:	68 00 16 01 00       	push   $0x11600
   10654:	e8 63 0e 00 00       	call   114bc <log_prinf>
   10659:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   1065c:	8b 45 08             	mov    0x8(%ebp),%eax
   1065f:	8b 38                	mov    (%eax),%edi
   10661:	8b 45 08             	mov    0x8(%ebp),%eax
   10664:	8b 70 04             	mov    0x4(%eax),%esi
   10667:	8b 45 08             	mov    0x8(%ebp),%eax
   1066a:	8b 58 0c             	mov    0xc(%eax),%ebx
   1066d:	8b 45 08             	mov    0x8(%ebp),%eax
   10670:	8b 48 08             	mov    0x8(%eax),%ecx
   10673:	8b 45 08             	mov    0x8(%ebp),%eax
   10676:	8b 50 0c             	mov    0xc(%eax),%edx
   10679:	8b 45 08             	mov    0x8(%ebp),%eax
   1067c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1067f:	83 ec 04             	sub    $0x4,%esp
   10682:	57                   	push   %edi
   10683:	56                   	push   %esi
   10684:	53                   	push   %ebx
   10685:	51                   	push   %ecx
   10686:	52                   	push   %edx
   10687:	50                   	push   %eax
   10688:	68 18 16 01 00       	push   $0x11618
   1068d:	e8 2a 0e 00 00       	call   114bc <log_prinf>
   10692:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   10695:	8b 45 08             	mov    0x8(%ebp),%eax
   10698:	8b 48 1c             	mov    0x1c(%eax),%ecx
   1069b:	8b 45 08             	mov    0x8(%ebp),%eax
   1069e:	8b 40 18             	mov    0x18(%eax),%eax
   106a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   106a4:	8b 45 08             	mov    0x8(%ebp),%eax
   106a7:	8b 58 14             	mov    0x14(%eax),%ebx
   106aa:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   106ad:	8b 45 08             	mov    0x8(%ebp),%eax
   106b0:	8b 78 10             	mov    0x10(%eax),%edi
   106b3:	8b 45 08             	mov    0x8(%ebp),%eax
   106b6:	8b 70 24             	mov    0x24(%eax),%esi
   106b9:	8b 45 08             	mov    0x8(%ebp),%eax
   106bc:	8b 58 28             	mov    0x28(%eax),%ebx
   106bf:	8b 45 08             	mov    0x8(%ebp),%eax
   106c2:	8b 50 20             	mov    0x20(%eax),%edx
   106c5:	8b 45 08             	mov    0x8(%ebp),%eax
   106c8:	8b 40 2c             	mov    0x2c(%eax),%eax
   106cb:	83 ec 0c             	sub    $0xc,%esp
   106ce:	51                   	push   %ecx
   106cf:	ff 75 e4             	push   -0x1c(%ebp)
   106d2:	ff 75 e0             	push   -0x20(%ebp)
   106d5:	57                   	push   %edi
   106d6:	56                   	push   %esi
   106d7:	53                   	push   %ebx
   106d8:	52                   	push   %edx
   106d9:	50                   	push   %eax
   106da:	68 40 16 01 00       	push   $0x11640
   106df:	e8 d8 0d 00 00       	call   114bc <log_prinf>
   106e4:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   106e7:	8b 45 08             	mov    0x8(%ebp),%eax
   106ea:	8b 50 40             	mov    0x40(%eax),%edx
   106ed:	8b 45 08             	mov    0x8(%ebp),%eax
   106f0:	8b 40 38             	mov    0x38(%eax),%eax
   106f3:	83 ec 04             	sub    $0x4,%esp
   106f6:	52                   	push   %edx
   106f7:	50                   	push   %eax
   106f8:	68 91 16 01 00       	push   $0x11691
   106fd:	e8 ba 0d 00 00       	call   114bc <log_prinf>
   10702:	83 c4 10             	add    $0x10,%esp
}
   10705:	90                   	nop
   10706:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10709:	5b                   	pop    %ebx
   1070a:	5e                   	pop    %esi
   1070b:	5f                   	pop    %edi
   1070c:	5d                   	pop    %ebp
   1070d:	c3                   	ret

0001070e <do_default_handler>:
{
   1070e:	55                   	push   %ebp
   1070f:	89 e5                	mov    %esp,%ebp
   10711:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   10714:	83 ec 0c             	sub    $0xc,%esp
   10717:	68 aa 16 01 00       	push   $0x116aa
   1071c:	e8 9b 0d 00 00       	call   114bc <log_prinf>
   10721:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   10724:	83 ec 08             	sub    $0x8,%esp
   10727:	ff 75 0c             	push   0xc(%ebp)
   1072a:	68 c7 16 01 00       	push   $0x116c7
   1072f:	e8 88 0d 00 00       	call   114bc <log_prinf>
   10734:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10737:	83 ec 0c             	sub    $0xc,%esp
   1073a:	ff 75 08             	push   0x8(%ebp)
   1073d:	e8 f3 fe ff ff       	call   10635 <dump_core_regs>
   10742:	83 c4 10             	add    $0x10,%esp
        hlt();
   10745:	e8 e4 fe ff ff       	call   1062e <hlt>
   1074a:	eb f9                	jmp    10745 <do_default_handler+0x37>

0001074c <do_handler_unknow>:
{
   1074c:	55                   	push   %ebp
   1074d:	89 e5                	mov    %esp,%ebp
   1074f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   10752:	83 ec 08             	sub    $0x8,%esp
   10755:	68 d8 16 01 00       	push   $0x116d8
   1075a:	ff 75 08             	push   0x8(%ebp)
   1075d:	e8 ac ff ff ff       	call   1070e <do_default_handler>
   10762:	83 c4 10             	add    $0x10,%esp
}
   10765:	90                   	nop
   10766:	c9                   	leave
   10767:	c3                   	ret

00010768 <do_handler_divider>:
{
   10768:	55                   	push   %ebp
   10769:	89 e5                	mov    %esp,%ebp
   1076b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   1076e:	83 ec 08             	sub    $0x8,%esp
   10771:	68 ec 16 01 00       	push   $0x116ec
   10776:	ff 75 08             	push   0x8(%ebp)
   10779:	e8 90 ff ff ff       	call   1070e <do_default_handler>
   1077e:	83 c4 10             	add    $0x10,%esp
}
   10781:	90                   	nop
   10782:	c9                   	leave
   10783:	c3                   	ret

00010784 <do_handler_Debug>:
{
   10784:	55                   	push   %ebp
   10785:	89 e5                	mov    %esp,%ebp
   10787:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   1078a:	83 ec 08             	sub    $0x8,%esp
   1078d:	68 01 17 01 00       	push   $0x11701
   10792:	ff 75 08             	push   0x8(%ebp)
   10795:	e8 74 ff ff ff       	call   1070e <do_default_handler>
   1079a:	83 c4 10             	add    $0x10,%esp
}
   1079d:	90                   	nop
   1079e:	c9                   	leave
   1079f:	c3                   	ret

000107a0 <do_handler_NMI>:
{
   107a0:	55                   	push   %ebp
   107a1:	89 e5                	mov    %esp,%ebp
   107a3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   107a6:	83 ec 08             	sub    $0x8,%esp
   107a9:	68 11 17 01 00       	push   $0x11711
   107ae:	ff 75 08             	push   0x8(%ebp)
   107b1:	e8 58 ff ff ff       	call   1070e <do_default_handler>
   107b6:	83 c4 10             	add    $0x10,%esp
}
   107b9:	90                   	nop
   107ba:	c9                   	leave
   107bb:	c3                   	ret

000107bc <do_handler_breakpoint>:
{
   107bc:	55                   	push   %ebp
   107bd:	89 e5                	mov    %esp,%ebp
   107bf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   107c2:	83 ec 08             	sub    $0x8,%esp
   107c5:	68 20 17 01 00       	push   $0x11720
   107ca:	ff 75 08             	push   0x8(%ebp)
   107cd:	e8 3c ff ff ff       	call   1070e <do_default_handler>
   107d2:	83 c4 10             	add    $0x10,%esp
}
   107d5:	90                   	nop
   107d6:	c9                   	leave
   107d7:	c3                   	ret

000107d8 <do_handler_overflow>:
{
   107d8:	55                   	push   %ebp
   107d9:	89 e5                	mov    %esp,%ebp
   107db:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   107de:	83 ec 08             	sub    $0x8,%esp
   107e1:	68 2c 17 01 00       	push   $0x1172c
   107e6:	ff 75 08             	push   0x8(%ebp)
   107e9:	e8 20 ff ff ff       	call   1070e <do_default_handler>
   107ee:	83 c4 10             	add    $0x10,%esp
}
   107f1:	90                   	nop
   107f2:	c9                   	leave
   107f3:	c3                   	ret

000107f4 <do_handler_bound_range>:
{
   107f4:	55                   	push   %ebp
   107f5:	89 e5                	mov    %esp,%ebp
   107f7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   107fa:	83 ec 08             	sub    $0x8,%esp
   107fd:	68 36 17 01 00       	push   $0x11736
   10802:	ff 75 08             	push   0x8(%ebp)
   10805:	e8 04 ff ff ff       	call   1070e <do_default_handler>
   1080a:	83 c4 10             	add    $0x10,%esp
}
   1080d:	90                   	nop
   1080e:	c9                   	leave
   1080f:	c3                   	ret

00010810 <do_handler_invalid_opcode>:
{
   10810:	55                   	push   %ebp
   10811:	89 e5                	mov    %esp,%ebp
   10813:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10816:	83 ec 08             	sub    $0x8,%esp
   10819:	68 4c 17 01 00       	push   $0x1174c
   1081e:	ff 75 08             	push   0x8(%ebp)
   10821:	e8 e8 fe ff ff       	call   1070e <do_default_handler>
   10826:	83 c4 10             	add    $0x10,%esp
}
   10829:	90                   	nop
   1082a:	c9                   	leave
   1082b:	c3                   	ret

0001082c <do_handler_device_unavailable>:
{
   1082c:	55                   	push   %ebp
   1082d:	89 e5                	mov    %esp,%ebp
   1082f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10832:	83 ec 08             	sub    $0x8,%esp
   10835:	68 5c 17 01 00       	push   $0x1175c
   1083a:	ff 75 08             	push   0x8(%ebp)
   1083d:	e8 cc fe ff ff       	call   1070e <do_default_handler>
   10842:	83 c4 10             	add    $0x10,%esp
}
   10845:	90                   	nop
   10846:	c9                   	leave
   10847:	c3                   	ret

00010848 <do_handler_double_fault>:
{
   10848:	55                   	push   %ebp
   10849:	89 e5                	mov    %esp,%ebp
   1084b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   1084e:	83 ec 08             	sub    $0x8,%esp
   10851:	68 72 17 01 00       	push   $0x11772
   10856:	ff 75 08             	push   0x8(%ebp)
   10859:	e8 b0 fe ff ff       	call   1070e <do_default_handler>
   1085e:	83 c4 10             	add    $0x10,%esp
}
   10861:	90                   	nop
   10862:	c9                   	leave
   10863:	c3                   	ret

00010864 <do_handler_invalid_tss>:
{
   10864:	55                   	push   %ebp
   10865:	89 e5                	mov    %esp,%ebp
   10867:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   1086a:	83 ec 08             	sub    $0x8,%esp
   1086d:	68 80 17 01 00       	push   $0x11780
   10872:	ff 75 08             	push   0x8(%ebp)
   10875:	e8 94 fe ff ff       	call   1070e <do_default_handler>
   1087a:	83 c4 10             	add    $0x10,%esp
}
   1087d:	90                   	nop
   1087e:	c9                   	leave
   1087f:	c3                   	ret

00010880 <do_handler_segment_not_present>:
{
   10880:	55                   	push   %ebp
   10881:	89 e5                	mov    %esp,%ebp
   10883:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10886:	83 ec 08             	sub    $0x8,%esp
   10889:	68 8c 17 01 00       	push   $0x1178c
   1088e:	ff 75 08             	push   0x8(%ebp)
   10891:	e8 78 fe ff ff       	call   1070e <do_default_handler>
   10896:	83 c4 10             	add    $0x10,%esp
}
   10899:	90                   	nop
   1089a:	c9                   	leave
   1089b:	c3                   	ret

0001089c <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   1089c:	55                   	push   %ebp
   1089d:	89 e5                	mov    %esp,%ebp
   1089f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   108a2:	83 ec 08             	sub    $0x8,%esp
   108a5:	68 a1 17 01 00       	push   $0x117a1
   108aa:	ff 75 08             	push   0x8(%ebp)
   108ad:	e8 5c fe ff ff       	call   1070e <do_default_handler>
   108b2:	83 c4 10             	add    $0x10,%esp
}
   108b5:	90                   	nop
   108b6:	c9                   	leave
   108b7:	c3                   	ret

000108b8 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   108b8:	55                   	push   %ebp
   108b9:	89 e5                	mov    %esp,%ebp
   108bb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   108be:	83 ec 08             	sub    $0x8,%esp
   108c1:	68 b6 17 01 00       	push   $0x117b6
   108c6:	ff 75 08             	push   0x8(%ebp)
   108c9:	e8 40 fe ff ff       	call   1070e <do_default_handler>
   108ce:	83 c4 10             	add    $0x10,%esp
}
   108d1:	90                   	nop
   108d2:	c9                   	leave
   108d3:	c3                   	ret

000108d4 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t *frame)
{
   108d4:	55                   	push   %ebp
   108d5:	89 e5                	mov    %esp,%ebp
   108d7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   108da:	83 ec 08             	sub    $0x8,%esp
   108dd:	68 ca 17 01 00       	push   $0x117ca
   108e2:	ff 75 08             	push   0x8(%ebp)
   108e5:	e8 24 fe ff ff       	call   1070e <do_default_handler>
   108ea:	83 c4 10             	add    $0x10,%esp
}
   108ed:	90                   	nop
   108ee:	c9                   	leave
   108ef:	c3                   	ret

000108f0 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   108f0:	55                   	push   %ebp
   108f1:	89 e5                	mov    %esp,%ebp
   108f3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   108f6:	83 ec 08             	sub    $0x8,%esp
   108f9:	68 d6 17 01 00       	push   $0x117d6
   108fe:	ff 75 08             	push   0x8(%ebp)
   10901:	e8 08 fe ff ff       	call   1070e <do_default_handler>
   10906:	83 c4 10             	add    $0x10,%esp
}
   10909:	90                   	nop
   1090a:	c9                   	leave
   1090b:	c3                   	ret

0001090c <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   1090c:	55                   	push   %ebp
   1090d:	89 e5                	mov    %esp,%ebp
   1090f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10912:	83 ec 08             	sub    $0x8,%esp
   10915:	68 f4 17 01 00       	push   $0x117f4
   1091a:	ff 75 08             	push   0x8(%ebp)
   1091d:	e8 ec fd ff ff       	call   1070e <do_default_handler>
   10922:	83 c4 10             	add    $0x10,%esp
}
   10925:	90                   	nop
   10926:	c9                   	leave
   10927:	c3                   	ret

00010928 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   10928:	55                   	push   %ebp
   10929:	89 e5                	mov    %esp,%ebp
   1092b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   1092e:	83 ec 08             	sub    $0x8,%esp
   10931:	68 05 18 01 00       	push   $0x11805
   10936:	ff 75 08             	push   0x8(%ebp)
   10939:	e8 d0 fd ff ff       	call   1070e <do_default_handler>
   1093e:	83 c4 10             	add    $0x10,%esp
}
   10941:	90                   	nop
   10942:	c9                   	leave
   10943:	c3                   	ret

00010944 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   10944:	55                   	push   %ebp
   10945:	89 e5                	mov    %esp,%ebp
   10947:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   1094a:	83 ec 08             	sub    $0x8,%esp
   1094d:	68 14 18 01 00       	push   $0x11814
   10952:	ff 75 08             	push   0x8(%ebp)
   10955:	e8 b4 fd ff ff       	call   1070e <do_default_handler>
   1095a:	83 c4 10             	add    $0x10,%esp
}
   1095d:	90                   	nop
   1095e:	c9                   	leave
   1095f:	c3                   	ret

00010960 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   10960:	55                   	push   %ebp
   10961:	89 e5                	mov    %esp,%ebp
   10963:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   10966:	83 ec 08             	sub    $0x8,%esp
   10969:	68 33 18 01 00       	push   $0x11833
   1096e:	ff 75 08             	push   0x8(%ebp)
   10971:	e8 98 fd ff ff       	call   1070e <do_default_handler>
   10976:	83 c4 10             	add    $0x10,%esp
}
   10979:	90                   	nop
   1097a:	c9                   	leave
   1097b:	c3                   	ret

0001097c <init_pic>:

static void init_pic(void)
{
   1097c:	55                   	push   %ebp
   1097d:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1097f:	6a 11                	push   $0x11
   10981:	6a 20                	push   $0x20
   10983:	e8 51 fc ff ff       	call   105d9 <outb>
   10988:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   1098b:	6a 20                	push   $0x20
   1098d:	6a 21                	push   $0x21
   1098f:	e8 45 fc ff ff       	call   105d9 <outb>
   10994:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10997:	6a 04                	push   $0x4
   10999:	6a 21                	push   $0x21
   1099b:	e8 39 fc ff ff       	call   105d9 <outb>
   109a0:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   109a3:	6a 01                	push   $0x1
   109a5:	6a 21                	push   $0x21
   109a7:	e8 2d fc ff ff       	call   105d9 <outb>
   109ac:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   109af:	6a 11                	push   $0x11
   109b1:	68 a0 00 00 00       	push   $0xa0
   109b6:	e8 1e fc ff ff       	call   105d9 <outb>
   109bb:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   109be:	6a 28                	push   $0x28
   109c0:	68 a1 00 00 00       	push   $0xa1
   109c5:	e8 0f fc ff ff       	call   105d9 <outb>
   109ca:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   109cd:	6a 02                	push   $0x2
   109cf:	68 a1 00 00 00       	push   $0xa1
   109d4:	e8 00 fc ff ff       	call   105d9 <outb>
   109d9:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   109dc:	6a 01                	push   $0x1
   109de:	68 a1 00 00 00       	push   $0xa1
   109e3:	e8 f1 fb ff ff       	call   105d9 <outb>
   109e8:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   109eb:	68 fb 00 00 00       	push   $0xfb
   109f0:	6a 21                	push   $0x21
   109f2:	e8 e2 fb ff ff       	call   105d9 <outb>
   109f7:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   109fa:	68 ff 00 00 00       	push   $0xff
   109ff:	68 a1 00 00 00       	push   $0xa1
   10a04:	e8 d0 fb ff ff       	call   105d9 <outb>
   10a09:	83 c4 08             	add    $0x8,%esp
}
   10a0c:	90                   	nop
   10a0d:	c9                   	leave
   10a0e:	c3                   	ret

00010a0f <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   10a0f:	55                   	push   %ebp
   10a10:	89 e5                	mov    %esp,%ebp
   10a12:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10a15:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10a1c:	eb 25                	jmp    10a43 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10a1e:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a26:	c1 e0 03             	shl    $0x3,%eax
   10a29:	05 00 21 01 00       	add    $0x12100,%eax
   10a2e:	68 00 8e 00 00       	push   $0x8e00
   10a33:	52                   	push   %edx
   10a34:	6a 08                	push   $0x8
   10a36:	50                   	push   %eax
   10a37:	e8 d6 fa ff ff       	call   10512 <gate_desc_set>
   10a3c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10a3f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a43:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10a47:	7e d5                	jle    10a1e <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10a49:	83 ec 08             	sub    $0x8,%esp
   10a4c:	68 4a 00 01 00       	push   $0x1004a
   10a51:	6a 00                	push   $0x0
   10a53:	e8 65 01 00 00       	call   10bbd <irq_install>
   10a58:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10a5b:	83 ec 08             	sub    $0x8,%esp
   10a5e:	68 69 00 01 00       	push   $0x10069
   10a63:	6a 01                	push   $0x1
   10a65:	e8 53 01 00 00       	call   10bbd <irq_install>
   10a6a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10a6d:	83 ec 08             	sub    $0x8,%esp
   10a70:	68 88 00 01 00       	push   $0x10088
   10a75:	6a 02                	push   $0x2
   10a77:	e8 41 01 00 00       	call   10bbd <irq_install>
   10a7c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10a7f:	83 ec 08             	sub    $0x8,%esp
   10a82:	68 a7 00 01 00       	push   $0x100a7
   10a87:	6a 03                	push   $0x3
   10a89:	e8 2f 01 00 00       	call   10bbd <irq_install>
   10a8e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10a91:	83 ec 08             	sub    $0x8,%esp
   10a94:	68 c6 00 01 00       	push   $0x100c6
   10a99:	6a 04                	push   $0x4
   10a9b:	e8 1d 01 00 00       	call   10bbd <irq_install>
   10aa0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10aa3:	83 ec 08             	sub    $0x8,%esp
   10aa6:	68 e5 00 01 00       	push   $0x100e5
   10aab:	6a 05                	push   $0x5
   10aad:	e8 0b 01 00 00       	call   10bbd <irq_install>
   10ab2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10ab5:	83 ec 08             	sub    $0x8,%esp
   10ab8:	68 04 01 01 00       	push   $0x10104
   10abd:	6a 06                	push   $0x6
   10abf:	e8 f9 00 00 00       	call   10bbd <irq_install>
   10ac4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10ac7:	83 ec 08             	sub    $0x8,%esp
   10aca:	68 23 01 01 00       	push   $0x10123
   10acf:	6a 07                	push   $0x7
   10ad1:	e8 e7 00 00 00       	call   10bbd <irq_install>
   10ad6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10ad9:	83 ec 08             	sub    $0x8,%esp
   10adc:	68 42 01 01 00       	push   $0x10142
   10ae1:	6a 08                	push   $0x8
   10ae3:	e8 d5 00 00 00       	call   10bbd <irq_install>
   10ae8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   10aeb:	83 ec 08             	sub    $0x8,%esp
   10aee:	68 5f 01 01 00       	push   $0x1015f
   10af3:	6a 0a                	push   $0xa
   10af5:	e8 c3 00 00 00       	call   10bbd <irq_install>
   10afa:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   10afd:	83 ec 08             	sub    $0x8,%esp
   10b00:	68 7c 01 01 00       	push   $0x1017c
   10b05:	6a 0b                	push   $0xb
   10b07:	e8 b1 00 00 00       	call   10bbd <irq_install>
   10b0c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   10b0f:	83 ec 08             	sub    $0x8,%esp
   10b12:	68 99 01 01 00       	push   $0x10199
   10b17:	6a 0c                	push   $0xc
   10b19:	e8 9f 00 00 00       	call   10bbd <irq_install>
   10b1e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   10b21:	83 ec 08             	sub    $0x8,%esp
   10b24:	68 b6 01 01 00       	push   $0x101b6
   10b29:	6a 0d                	push   $0xd
   10b2b:	e8 8d 00 00 00       	call   10bbd <irq_install>
   10b30:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   10b33:	83 ec 08             	sub    $0x8,%esp
   10b36:	68 d3 01 01 00       	push   $0x101d3
   10b3b:	6a 0e                	push   $0xe
   10b3d:	e8 7b 00 00 00       	call   10bbd <irq_install>
   10b42:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   10b45:	83 ec 08             	sub    $0x8,%esp
   10b48:	68 f0 01 01 00       	push   $0x101f0
   10b4d:	6a 10                	push   $0x10
   10b4f:	e8 69 00 00 00       	call   10bbd <irq_install>
   10b54:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   10b57:	83 ec 08             	sub    $0x8,%esp
   10b5a:	68 0f 02 01 00       	push   $0x1020f
   10b5f:	6a 11                	push   $0x11
   10b61:	e8 57 00 00 00       	call   10bbd <irq_install>
   10b66:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   10b69:	83 ec 08             	sub    $0x8,%esp
   10b6c:	68 2c 02 01 00       	push   $0x1022c
   10b71:	6a 12                	push   $0x12
   10b73:	e8 45 00 00 00       	call   10bbd <irq_install>
   10b78:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   10b7b:	83 ec 08             	sub    $0x8,%esp
   10b7e:	68 4b 02 01 00       	push   $0x1024b
   10b83:	6a 13                	push   $0x13
   10b85:	e8 33 00 00 00       	call   10bbd <irq_install>
   10b8a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   10b8d:	83 ec 08             	sub    $0x8,%esp
   10b90:	68 6a 02 01 00       	push   $0x1026a
   10b95:	6a 14                	push   $0x14
   10b97:	e8 21 00 00 00       	call   10bbd <irq_install>
   10b9c:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10b9f:	b8 00 21 01 00       	mov    $0x12100,%eax
   10ba4:	83 ec 08             	sub    $0x8,%esp
   10ba7:	68 00 04 00 00       	push   $0x400
   10bac:	50                   	push   %eax
   10bad:	e8 54 fa ff ff       	call   10606 <lidt>
   10bb2:	83 c4 10             	add    $0x10,%esp

    init_pic();
   10bb5:	e8 c2 fd ff ff       	call   1097c <init_pic>
}
   10bba:	90                   	nop
   10bbb:	c9                   	leave
   10bbc:	c3                   	ret

00010bbd <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   10bbd:	55                   	push   %ebp
   10bbe:	89 e5                	mov    %esp,%ebp
   10bc0:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   10bc3:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10bc7:	7e 07                	jle    10bd0 <irq_install+0x13>
    {
        return -1;
   10bc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bce:	eb 20                	jmp    10bf0 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10bd0:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bd3:	8b 55 08             	mov    0x8(%ebp),%edx
   10bd6:	c1 e2 03             	shl    $0x3,%edx
   10bd9:	81 c2 00 21 01 00    	add    $0x12100,%edx
   10bdf:	68 00 8e 00 00       	push   $0x8e00
   10be4:	50                   	push   %eax
   10be5:	6a 08                	push   $0x8
   10be7:	52                   	push   %edx
   10be8:	e8 25 f9 ff ff       	call   10512 <gate_desc_set>
   10bed:	83 c4 10             	add    $0x10,%esp
}
   10bf0:	c9                   	leave
   10bf1:	c3                   	ret

00010bf2 <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   10bf2:	55                   	push   %ebp
   10bf3:	89 e5                	mov    %esp,%ebp
   10bf5:	53                   	push   %ebx
   10bf6:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10bf9:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10bfd:	7e 78                	jle    10c77 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10bff:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10c03:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10c07:	7f 32                	jg     10c3b <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10c09:	6a 21                	push   $0x21
   10c0b:	e8 ac f9 ff ff       	call   105bc <inb>
   10c10:	83 c4 04             	add    $0x4,%esp
   10c13:	89 c3                	mov    %eax,%ebx
   10c15:	8b 45 08             	mov    0x8(%ebp),%eax
   10c18:	ba 01 00 00 00       	mov    $0x1,%edx
   10c1d:	89 c1                	mov    %eax,%ecx
   10c1f:	d3 e2                	shl    %cl,%edx
   10c21:	89 d0                	mov    %edx,%eax
   10c23:	f7 d0                	not    %eax
   10c25:	21 d8                	and    %ebx,%eax
   10c27:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10c2a:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10c2e:	50                   	push   %eax
   10c2f:	6a 21                	push   $0x21
   10c31:	e8 a3 f9 ff ff       	call   105d9 <outb>
   10c36:	83 c4 08             	add    $0x8,%esp
   10c39:	eb 3d                	jmp    10c78 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   10c3b:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10c3f:	68 a1 00 00 00       	push   $0xa1
   10c44:	e8 73 f9 ff ff       	call   105bc <inb>
   10c49:	83 c4 04             	add    $0x4,%esp
   10c4c:	89 c3                	mov    %eax,%ebx
   10c4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c51:	ba 01 00 00 00       	mov    $0x1,%edx
   10c56:	89 c1                	mov    %eax,%ecx
   10c58:	d3 e2                	shl    %cl,%edx
   10c5a:	89 d0                	mov    %edx,%eax
   10c5c:	f7 d0                	not    %eax
   10c5e:	21 d8                	and    %ebx,%eax
   10c60:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10c63:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10c67:	50                   	push   %eax
   10c68:	68 a1 00 00 00       	push   $0xa1
   10c6d:	e8 67 f9 ff ff       	call   105d9 <outb>
   10c72:	83 c4 08             	add    $0x8,%esp
   10c75:	eb 01                	jmp    10c78 <irq_enable+0x86>
        return;
   10c77:	90                   	nop
    }
}
   10c78:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10c7b:	c9                   	leave
   10c7c:	c3                   	ret

00010c7d <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   10c7d:	55                   	push   %ebp
   10c7e:	89 e5                	mov    %esp,%ebp
   10c80:	53                   	push   %ebx
   10c81:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10c84:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c88:	7e 74                	jle    10cfe <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10c8a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10c8e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10c92:	7f 30                	jg     10cc4 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10c94:	6a 21                	push   $0x21
   10c96:	e8 21 f9 ff ff       	call   105bc <inb>
   10c9b:	83 c4 04             	add    $0x4,%esp
   10c9e:	89 c3                	mov    %eax,%ebx
   10ca0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca3:	ba 01 00 00 00       	mov    $0x1,%edx
   10ca8:	89 c1                	mov    %eax,%ecx
   10caa:	d3 e2                	shl    %cl,%edx
   10cac:	89 d0                	mov    %edx,%eax
   10cae:	09 d8                	or     %ebx,%eax
   10cb0:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10cb3:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10cb7:	50                   	push   %eax
   10cb8:	6a 21                	push   $0x21
   10cba:	e8 1a f9 ff ff       	call   105d9 <outb>
   10cbf:	83 c4 08             	add    $0x8,%esp
   10cc2:	eb 3b                	jmp    10cff <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   10cc4:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10cc8:	68 a1 00 00 00       	push   $0xa1
   10ccd:	e8 ea f8 ff ff       	call   105bc <inb>
   10cd2:	83 c4 04             	add    $0x4,%esp
   10cd5:	89 c3                	mov    %eax,%ebx
   10cd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10cda:	ba 01 00 00 00       	mov    $0x1,%edx
   10cdf:	89 c1                	mov    %eax,%ecx
   10ce1:	d3 e2                	shl    %cl,%edx
   10ce3:	89 d0                	mov    %edx,%eax
   10ce5:	09 d8                	or     %ebx,%eax
   10ce7:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10cea:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10cee:	50                   	push   %eax
   10cef:	68 a1 00 00 00       	push   $0xa1
   10cf4:	e8 e0 f8 ff ff       	call   105d9 <outb>
   10cf9:	83 c4 08             	add    $0x8,%esp
   10cfc:	eb 01                	jmp    10cff <irq_disable+0x82>
        return;
   10cfe:	90                   	nop
    }
}
   10cff:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d02:	c9                   	leave
   10d03:	c3                   	ret

00010d04 <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   10d04:	55                   	push   %ebp
   10d05:	89 e5                	mov    %esp,%ebp
    cli();
   10d07:	e8 ec f8 ff ff       	call   105f8 <cli>
}
   10d0c:	90                   	nop
   10d0d:	5d                   	pop    %ebp
   10d0e:	c3                   	ret

00010d0f <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   10d0f:	55                   	push   %ebp
   10d10:	89 e5                	mov    %esp,%ebp
    sti();
   10d12:	e8 e8 f8 ff ff       	call   105ff <sti>
}
   10d17:	90                   	nop
   10d18:	5d                   	pop    %ebp
   10d19:	c3                   	ret

00010d1a <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   10d1a:	55                   	push   %ebp
   10d1b:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10d1d:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   10d21:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d25:	7e 0f                	jle    10d36 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10d27:	6a 20                	push   $0x20
   10d29:	68 a0 00 00 00       	push   $0xa0
   10d2e:	e8 a6 f8 ff ff       	call   105d9 <outb>
   10d33:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10d36:	6a 20                	push   $0x20
   10d38:	6a 20                	push   $0x20
   10d3a:	e8 9a f8 ff ff       	call   105d9 <outb>
   10d3f:	83 c4 08             	add    $0x8,%esp
   10d42:	90                   	nop
   10d43:	c9                   	leave
   10d44:	c3                   	ret

00010d45 <outb>:
{
    sys_tick = 0;
    init_pit();
   10d45:	55                   	push   %ebp
   10d46:	89 e5                	mov    %esp,%ebp
   10d48:	83 ec 08             	sub    $0x8,%esp
   10d4b:	8b 55 08             	mov    0x8(%ebp),%edx
   10d4e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d51:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10d55:	88 45 f8             	mov    %al,-0x8(%ebp)
   10d58:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10d5c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10d60:	ee                   	out    %al,(%dx)
   10d61:	90                   	nop
   10d62:	c9                   	leave
   10d63:	c3                   	ret

00010d64 <do_handler_time>:
{
   10d64:	55                   	push   %ebp
   10d65:	89 e5                	mov    %esp,%ebp
   10d67:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   10d6a:	a1 00 25 01 00       	mov    0x12500,%eax
   10d6f:	83 c0 01             	add    $0x1,%eax
   10d72:	a3 00 25 01 00       	mov    %eax,0x12500
    pic_send_eoi(IRQ0_TIMER);
   10d77:	83 ec 0c             	sub    $0xc,%esp
   10d7a:	6a 20                	push   $0x20
   10d7c:	e8 99 ff ff ff       	call   10d1a <pic_send_eoi>
   10d81:	83 c4 10             	add    $0x10,%esp
}
   10d84:	90                   	nop
   10d85:	c9                   	leave
   10d86:	c3                   	ret

00010d87 <init_pit>:
{
   10d87:	55                   	push   %ebp
   10d88:	89 e5                	mov    %esp,%ebp
   10d8a:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   10d8d:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   10d94:	6a 36                	push   $0x36
   10d96:	6a 43                	push   $0x43
   10d98:	e8 a8 ff ff ff       	call   10d45 <outb>
   10d9d:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   10da0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10da3:	0f b6 c0             	movzbl %al,%eax
   10da6:	50                   	push   %eax
   10da7:	6a 40                	push   $0x40
   10da9:	e8 97 ff ff ff       	call   10d45 <outb>
   10dae:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   10db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10db4:	c1 e8 08             	shr    $0x8,%eax
   10db7:	0f b6 c0             	movzbl %al,%eax
   10dba:	50                   	push   %eax
   10dbb:	6a 40                	push   $0x40
   10dbd:	e8 83 ff ff ff       	call   10d45 <outb>
   10dc2:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   10dc5:	83 ec 08             	sub    $0x8,%esp
   10dc8:	68 89 02 01 00       	push   $0x10289
   10dcd:	6a 20                	push   $0x20
   10dcf:	e8 e9 fd ff ff       	call   10bbd <irq_install>
   10dd4:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   10dd7:	83 ec 0c             	sub    $0xc,%esp
   10dda:	6a 20                	push   $0x20
   10ddc:	e8 11 fe ff ff       	call   10bf2 <irq_enable>
   10de1:	83 c4 10             	add    $0x10,%esp
}
   10de4:	90                   	nop
   10de5:	c9                   	leave
   10de6:	c3                   	ret

00010de7 <init_time>:
{
   10de7:	55                   	push   %ebp
   10de8:	89 e5                	mov    %esp,%ebp
   10dea:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10ded:	c7 05 00 25 01 00 00 	movl   $0x0,0x12500
   10df4:	00 00 00 
    init_pit();
   10df7:	e8 8b ff ff ff       	call   10d87 <init_pit>
   10dfc:	90                   	nop
   10dfd:	c9                   	leave
   10dfe:	c3                   	ret

00010dff <write_tr>:
   10dff:	55                   	push   %ebp
   10e00:	89 e5                	mov    %esp,%ebp
   10e02:	83 ec 04             	sub    $0x4,%esp
   10e05:	8b 45 08             	mov    0x8(%ebp),%eax
   10e08:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10e0c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10e10:	0f 00 d8             	ltr    %ax
   10e13:	90                   	nop
   10e14:	c9                   	leave
   10e15:	c3                   	ret

00010e16 <kernel_init>:
{
   10e16:	55                   	push   %ebp
   10e17:	89 e5                	mov    %esp,%ebp
   10e19:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10e1c:	e8 90 f7 ff ff       	call   105b1 <cpu_init>
    init_log(); // 初始化打印函数
   10e21:	e8 24 06 00 00       	call   1144a <init_log>
    irq_init();
   10e26:	e8 e4 fb ff ff       	call   10a0f <irq_init>
    init_time();
   10e2b:	e8 b7 ff ff ff       	call   10de7 <init_time>
}
   10e30:	90                   	nop
   10e31:	c9                   	leave
   10e32:	c3                   	ret

00010e33 <init_task_entry>:
{
   10e33:	55                   	push   %ebp
   10e34:	89 e5                	mov    %esp,%ebp
   10e36:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10e39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        log_prinf("init_task_entry: %d", count++);
   10e40:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e43:	8d 50 01             	lea    0x1(%eax),%edx
   10e46:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10e49:	83 ec 08             	sub    $0x8,%esp
   10e4c:	50                   	push   %eax
   10e4d:	68 4d 18 01 00       	push   $0x1184d
   10e52:	e8 65 06 00 00       	call   114bc <log_prinf>
   10e57:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task, &first_task);
   10e5a:	83 ec 08             	sub    $0x8,%esp
   10e5d:	68 20 25 01 00       	push   $0x12520
   10e62:	68 a0 35 01 00       	push   $0x135a0
   10e67:	e8 59 f5 ff ff       	call   103c5 <task_switch_from_to>
   10e6c:	83 c4 10             	add    $0x10,%esp
        log_prinf("init_task_entry: %d", count++);
   10e6f:	eb cf                	jmp    10e40 <init_task_entry+0xd>

00010e71 <init_main>:
{
   10e71:	55                   	push   %ebp
   10e72:	89 e5                	mov    %esp,%ebp
   10e74:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   10e77:	83 ec 0c             	sub    $0xc,%esp
   10e7a:	68 61 18 01 00       	push   $0x11861
   10e7f:	e8 38 06 00 00       	call   114bc <log_prinf>
   10e84:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   10e87:	83 ec 08             	sub    $0x8,%esp
   10e8a:	68 6f 18 01 00       	push   $0x1186f
   10e8f:	68 75 18 01 00       	push   $0x11875
   10e94:	e8 23 06 00 00       	call   114bc <log_prinf>
   10e99:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   10e9c:	83 ec 0c             	sub    $0xc,%esp
   10e9f:	6a 63                	push   $0x63
   10ea1:	6a 30                	push   $0x30
   10ea3:	6a 14                	push   $0x14
   10ea5:	6a f6                	push   $0xfffffff6
   10ea7:	68 80 18 01 00       	push   $0x11880
   10eac:	e8 0b 06 00 00       	call   114bc <log_prinf>
   10eb1:	83 c4 20             	add    $0x20,%esp
    task_init(&init_task, (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   10eb4:	ba a0 35 01 00       	mov    $0x135a0,%edx
   10eb9:	b8 33 0e 01 00       	mov    $0x10e33,%eax
   10ebe:	83 ec 04             	sub    $0x4,%esp
   10ec1:	52                   	push   %edx
   10ec2:	50                   	push   %eax
   10ec3:	68 a0 35 01 00       	push   $0x135a0
   10ec8:	e8 b8 f4 ff ff       	call   10385 <task_init>
   10ecd:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, 0, 0); //??为什么入口设置为0，堆栈也设置为0
   10ed0:	83 ec 04             	sub    $0x4,%esp
   10ed3:	6a 00                	push   $0x0
   10ed5:	6a 00                	push   $0x0
   10ed7:	68 20 25 01 00       	push   $0x12520
   10edc:	e8 a4 f4 ff ff       	call   10385 <task_init>
   10ee1:	83 c4 10             	add    $0x10,%esp
    write_tr(first_task.tss_sel);
   10ee4:	a1 88 25 01 00       	mov    0x12588,%eax
   10ee9:	0f b7 c0             	movzwl %ax,%eax
   10eec:	83 ec 0c             	sub    $0xc,%esp
   10eef:	50                   	push   %eax
   10ef0:	e8 0a ff ff ff       	call   10dff <write_tr>
   10ef5:	83 c4 10             	add    $0x10,%esp
    int count = 0;
   10ef8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        log_prinf("init_main: %d", count++);
   10eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f02:	8d 50 01             	lea    0x1(%eax),%edx
   10f05:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f08:	83 ec 08             	sub    $0x8,%esp
   10f0b:	50                   	push   %eax
   10f0c:	68 8c 18 01 00       	push   $0x1188c
   10f11:	e8 a6 05 00 00       	call   114bc <log_prinf>
   10f16:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&first_task, &init_task);
   10f19:	83 ec 08             	sub    $0x8,%esp
   10f1c:	68 a0 35 01 00       	push   $0x135a0
   10f21:	68 20 25 01 00       	push   $0x12520
   10f26:	e8 9a f4 ff ff       	call   103c5 <task_switch_from_to>
   10f2b:	83 c4 10             	add    $0x10,%esp
        log_prinf("init_main: %d", count++);
   10f2e:	eb cf                	jmp    10eff <init_main+0x8e>

00010f30 <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   10f30:	55                   	push   %ebp
   10f31:	89 e5                	mov    %esp,%ebp
}
   10f33:	f4                   	hlt

   10f34:	90                   	nop
   10f35:	5d                   	pop    %ebp
   10f36:	c3                   	ret

00010f37 <kernel_strcpy>:
{
   10f37:	55                   	push   %ebp
   10f38:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   10f3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f3e:	74 3b                	je     10f7b <kernel_strcpy+0x44>
   10f40:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f44:	74 35                	je     10f7b <kernel_strcpy+0x44>
    while (*dest && *src)
   10f46:	eb 17                	jmp    10f5f <kernel_strcpy+0x28>
        *dest++ = *src++;
   10f48:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f4b:	8d 42 01             	lea    0x1(%edx),%eax
   10f4e:	89 45 0c             	mov    %eax,0xc(%ebp)
   10f51:	8b 45 08             	mov    0x8(%ebp),%eax
   10f54:	8d 48 01             	lea    0x1(%eax),%ecx
   10f57:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10f5a:	0f b6 12             	movzbl (%edx),%edx
   10f5d:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   10f5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f62:	0f b6 00             	movzbl (%eax),%eax
   10f65:	84 c0                	test   %al,%al
   10f67:	74 0a                	je     10f73 <kernel_strcpy+0x3c>
   10f69:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f6c:	0f b6 00             	movzbl (%eax),%eax
   10f6f:	84 c0                	test   %al,%al
   10f71:	75 d5                	jne    10f48 <kernel_strcpy+0x11>
    *dest = '\0';
   10f73:	8b 45 08             	mov    0x8(%ebp),%eax
   10f76:	c6 00 00             	movb   $0x0,(%eax)
   10f79:	eb 01                	jmp    10f7c <kernel_strcpy+0x45>
        return;
   10f7b:	90                   	nop
}
   10f7c:	5d                   	pop    %ebp
   10f7d:	c3                   	ret

00010f7e <kernel_strncpy>:
{
   10f7e:	55                   	push   %ebp
   10f7f:	89 e5                	mov    %esp,%ebp
   10f81:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   10f84:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f88:	74 61                	je     10feb <kernel_strncpy+0x6d>
   10f8a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f8e:	74 5b                	je     10feb <kernel_strncpy+0x6d>
   10f90:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10f94:	74 55                	je     10feb <kernel_strncpy+0x6d>
    char *d = dest;
   10f96:	8b 45 08             	mov    0x8(%ebp),%eax
   10f99:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   10f9c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f9f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   10fa2:	eb 17                	jmp    10fbb <kernel_strncpy+0x3d>
        *d++ = *s++;
   10fa4:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10fa7:	8d 42 01             	lea    0x1(%edx),%eax
   10faa:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10fad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fb0:	8d 48 01             	lea    0x1(%eax),%ecx
   10fb3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10fb6:	0f b6 12             	movzbl (%edx),%edx
   10fb9:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   10fbb:	8b 45 10             	mov    0x10(%ebp),%eax
   10fbe:	8d 50 ff             	lea    -0x1(%eax),%edx
   10fc1:	89 55 10             	mov    %edx,0x10(%ebp)
   10fc4:	85 c0                	test   %eax,%eax
   10fc6:	7e 0a                	jle    10fd2 <kernel_strncpy+0x54>
   10fc8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10fcb:	0f b6 00             	movzbl (%eax),%eax
   10fce:	84 c0                	test   %al,%al
   10fd0:	75 d2                	jne    10fa4 <kernel_strncpy+0x26>
    if (size == 0)
   10fd2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10fd6:	75 0b                	jne    10fe3 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   10fd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fdb:	83 e8 01             	sub    $0x1,%eax
   10fde:	c6 00 00             	movb   $0x0,(%eax)
   10fe1:	eb 09                	jmp    10fec <kernel_strncpy+0x6e>
        *d = '\0';
   10fe3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fe6:	c6 00 00             	movb   $0x0,(%eax)
   10fe9:	eb 01                	jmp    10fec <kernel_strncpy+0x6e>
        return;
   10feb:	90                   	nop
}
   10fec:	c9                   	leave
   10fed:	c3                   	ret

00010fee <kernel_strncmp>:
{
   10fee:	55                   	push   %ebp
   10fef:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   10ff1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ff5:	74 0c                	je     11003 <kernel_strncmp+0x15>
   10ff7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ffb:	74 06                	je     11003 <kernel_strncmp+0x15>
   10ffd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11001:	75 0f                	jne    11012 <kernel_strncmp+0x24>
        return -1;
   11003:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11008:	eb 62                	jmp    1106c <kernel_strncmp+0x7e>
        s1++;
   1100a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   1100e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   11012:	8b 45 08             	mov    0x8(%ebp),%eax
   11015:	0f b6 00             	movzbl (%eax),%eax
   11018:	84 c0                	test   %al,%al
   1101a:	74 20                	je     1103c <kernel_strncmp+0x4e>
   1101c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1101f:	0f b6 00             	movzbl (%eax),%eax
   11022:	84 c0                	test   %al,%al
   11024:	74 16                	je     1103c <kernel_strncmp+0x4e>
   11026:	8b 45 08             	mov    0x8(%ebp),%eax
   11029:	0f b6 10             	movzbl (%eax),%edx
   1102c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1102f:	0f b6 00             	movzbl (%eax),%eax
   11032:	38 c2                	cmp    %al,%dl
   11034:	75 06                	jne    1103c <kernel_strncmp+0x4e>
   11036:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1103a:	75 ce                	jne    1100a <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1103c:	8b 45 08             	mov    0x8(%ebp),%eax
   1103f:	0f b6 00             	movzbl (%eax),%eax
   11042:	84 c0                	test   %al,%al
   11044:	74 21                	je     11067 <kernel_strncmp+0x79>
   11046:	8b 45 0c             	mov    0xc(%ebp),%eax
   11049:	0f b6 00             	movzbl (%eax),%eax
   1104c:	84 c0                	test   %al,%al
   1104e:	74 17                	je     11067 <kernel_strncmp+0x79>
   11050:	8b 45 08             	mov    0x8(%ebp),%eax
   11053:	0f b6 10             	movzbl (%eax),%edx
   11056:	8b 45 0c             	mov    0xc(%ebp),%eax
   11059:	0f b6 00             	movzbl (%eax),%eax
   1105c:	38 c2                	cmp    %al,%dl
   1105e:	74 07                	je     11067 <kernel_strncmp+0x79>
   11060:	b8 01 00 00 00       	mov    $0x1,%eax
   11065:	eb 05                	jmp    1106c <kernel_strncmp+0x7e>
   11067:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1106c:	5d                   	pop    %ebp
   1106d:	c3                   	ret

0001106e <kernel_strlen>:
{
   1106e:	55                   	push   %ebp
   1106f:	89 e5                	mov    %esp,%ebp
   11071:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   11074:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11078:	75 07                	jne    11081 <kernel_strlen+0x13>
        return 0;
   1107a:	b8 00 00 00 00       	mov    $0x0,%eax
   1107f:	eb 26                	jmp    110a7 <kernel_strlen+0x39>
    const char *c = str;
   11081:	8b 45 08             	mov    0x8(%ebp),%eax
   11084:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11087:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   1108e:	eb 04                	jmp    11094 <kernel_strlen+0x26>
        len++;
   11090:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   11094:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11097:	8d 50 01             	lea    0x1(%eax),%edx
   1109a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1109d:	0f b6 00             	movzbl (%eax),%eax
   110a0:	84 c0                	test   %al,%al
   110a2:	75 ec                	jne    11090 <kernel_strlen+0x22>
    return len;
   110a4:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   110a7:	c9                   	leave
   110a8:	c3                   	ret

000110a9 <kernel_memcpy>:
{
   110a9:	55                   	push   %ebp
   110aa:	89 e5                	mov    %esp,%ebp
   110ac:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   110af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110b3:	74 40                	je     110f5 <kernel_memcpy+0x4c>
   110b5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110b9:	74 3a                	je     110f5 <kernel_memcpy+0x4c>
   110bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110bf:	74 34                	je     110f5 <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   110c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   110c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   110c7:	8b 45 08             	mov    0x8(%ebp),%eax
   110ca:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   110cd:	eb 17                	jmp    110e6 <kernel_memcpy+0x3d>
        *d++ = *s++;
   110cf:	8b 55 fc             	mov    -0x4(%ebp),%edx
   110d2:	8d 42 01             	lea    0x1(%edx),%eax
   110d5:	89 45 fc             	mov    %eax,-0x4(%ebp)
   110d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   110db:	8d 48 01             	lea    0x1(%eax),%ecx
   110de:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   110e1:	0f b6 12             	movzbl (%edx),%edx
   110e4:	88 10                	mov    %dl,(%eax)
    while (size--)
   110e6:	8b 45 10             	mov    0x10(%ebp),%eax
   110e9:	8d 50 ff             	lea    -0x1(%eax),%edx
   110ec:	89 55 10             	mov    %edx,0x10(%ebp)
   110ef:	85 c0                	test   %eax,%eax
   110f1:	75 dc                	jne    110cf <kernel_memcpy+0x26>
   110f3:	eb 01                	jmp    110f6 <kernel_memcpy+0x4d>
        return;
   110f5:	90                   	nop
}
   110f6:	c9                   	leave
   110f7:	c3                   	ret

000110f8 <kernel_memset>:
{
   110f8:	55                   	push   %ebp
   110f9:	89 e5                	mov    %esp,%ebp
   110fb:	83 ec 14             	sub    $0x14,%esp
   110fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   11101:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   11104:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11108:	74 2c                	je     11136 <kernel_memset+0x3e>
   1110a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1110e:	74 26                	je     11136 <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   11110:	8b 45 08             	mov    0x8(%ebp),%eax
   11113:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   11116:	eb 0f                	jmp    11127 <kernel_memset+0x2f>
        *d++ = v;
   11118:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1111b:	8d 50 01             	lea    0x1(%eax),%edx
   1111e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11121:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11125:	88 10                	mov    %dl,(%eax)
    while (size--)
   11127:	8b 45 10             	mov    0x10(%ebp),%eax
   1112a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1112d:	89 55 10             	mov    %edx,0x10(%ebp)
   11130:	85 c0                	test   %eax,%eax
   11132:	75 e4                	jne    11118 <kernel_memset+0x20>
   11134:	eb 01                	jmp    11137 <kernel_memset+0x3f>
        return;
   11136:	90                   	nop
}
   11137:	c9                   	leave
   11138:	c3                   	ret

00011139 <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   11139:	55                   	push   %ebp
   1113a:	89 e5                	mov    %esp,%ebp
   1113c:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   1113f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11143:	74 06                	je     1114b <kernel_memcmp+0x12>
   11145:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11149:	75 07                	jne    11152 <kernel_memcmp+0x19>
    {
        return 1;
   1114b:	b8 01 00 00 00       	mov    $0x1,%eax
   11150:	eb 43                	jmp    11195 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   11152:	8b 45 08             	mov    0x8(%ebp),%eax
   11155:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   11158:	8b 45 0c             	mov    0xc(%ebp),%eax
   1115b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   1115e:	eb 23                	jmp    11183 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   11160:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11163:	8d 50 01             	lea    0x1(%eax),%edx
   11166:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11169:	0f b6 08             	movzbl (%eax),%ecx
   1116c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1116f:	8d 50 01             	lea    0x1(%eax),%edx
   11172:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11175:	0f b6 00             	movzbl (%eax),%eax
   11178:	38 c1                	cmp    %al,%cl
   1117a:	74 07                	je     11183 <kernel_memcmp+0x4a>
        {
            return 1;
   1117c:	b8 01 00 00 00       	mov    $0x1,%eax
   11181:	eb 12                	jmp    11195 <kernel_memcmp+0x5c>
    while (size--)
   11183:	8b 45 10             	mov    0x10(%ebp),%eax
   11186:	8d 50 ff             	lea    -0x1(%eax),%edx
   11189:	89 55 10             	mov    %edx,0x10(%ebp)
   1118c:	85 c0                	test   %eax,%eax
   1118e:	75 d0                	jne    11160 <kernel_memcmp+0x27>
        }
    }
    return 0;
   11190:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11195:	c9                   	leave
   11196:	c3                   	ret

00011197 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   11197:	55                   	push   %ebp
   11198:	89 e5                	mov    %esp,%ebp
   1119a:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   1119d:	8d 45 10             	lea    0x10(%ebp),%eax
   111a0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   111a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111a6:	83 ec 04             	sub    $0x4,%esp
   111a9:	50                   	push   %eax
   111aa:	ff 75 0c             	push   0xc(%ebp)
   111ad:	ff 75 08             	push   0x8(%ebp)
   111b0:	e8 dd 00 00 00       	call   11292 <kernel_vsprintf>
   111b5:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   111b8:	90                   	nop
   111b9:	c9                   	leave
   111ba:	c3                   	ret

000111bb <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   111bb:	55                   	push   %ebp
   111bc:	89 e5                	mov    %esp,%ebp
   111be:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   111c1:	8b 45 08             	mov    0x8(%ebp),%eax
   111c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   111c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   111ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   111cd:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   111d1:	74 1d                	je     111f0 <kernel_itoa+0x35>
   111d3:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   111d7:	74 17                	je     111f0 <kernel_itoa+0x35>
   111d9:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   111dd:	74 11                	je     111f0 <kernel_itoa+0x35>
   111df:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   111e3:	74 0b                	je     111f0 <kernel_itoa+0x35>
    {
        *p = '\0';
   111e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111e8:	c6 00 00             	movb   $0x0,(%eax)
        return;
   111eb:	e9 a0 00 00 00       	jmp    11290 <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   111f0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111f4:	79 12                	jns    11208 <kernel_itoa+0x4d>
   111f6:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   111fa:	75 0c                	jne    11208 <kernel_itoa+0x4d>
    {
        *p++ = '-';
   111fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111ff:	8d 50 01             	lea    0x1(%eax),%edx
   11202:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11205:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   11208:	8b 0d e8 18 01 00    	mov    0x118e8,%ecx
   1120e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11211:	99                   	cltd
   11212:	f7 7d 10             	idivl  0x10(%ebp)
   11215:	89 d0                	mov    %edx,%eax
   11217:	83 c0 0f             	add    $0xf,%eax
   1121a:	01 c8                	add    %ecx,%eax
   1121c:	0f b6 00             	movzbl (%eax),%eax
   1121f:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11222:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11225:	8d 50 01             	lea    0x1(%eax),%edx
   11228:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1122b:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1122f:	88 10                	mov    %dl,(%eax)
        num /= base;
   11231:	8b 45 0c             	mov    0xc(%ebp),%eax
   11234:	99                   	cltd
   11235:	f7 7d 10             	idivl  0x10(%ebp)
   11238:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   1123b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1123f:	75 c7                	jne    11208 <kernel_itoa+0x4d>
    *p-- = '\0';
   11241:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11244:	8d 50 ff             	lea    -0x1(%eax),%edx
   11247:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1124a:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   1124d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11251:	7f 08                	jg     1125b <kernel_itoa+0xa0>
   11253:	8b 45 08             	mov    0x8(%ebp),%eax
   11256:	83 c0 01             	add    $0x1,%eax
   11259:	eb 03                	jmp    1125e <kernel_itoa+0xa3>
   1125b:	8b 45 08             	mov    0x8(%ebp),%eax
   1125e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   11261:	eb 25                	jmp    11288 <kernel_itoa+0xcd>
    {
        char ch = *start;
   11263:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11266:	0f b6 00             	movzbl (%eax),%eax
   11269:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1126c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1126f:	0f b6 10             	movzbl (%eax),%edx
   11272:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11275:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11277:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1127a:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1127e:	88 10                	mov    %dl,(%eax)

        p--;
   11280:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11284:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   11288:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1128b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1128e:	72 d3                	jb     11263 <kernel_itoa+0xa8>
    }
}
   11290:	c9                   	leave
   11291:	c3                   	ret

00011292 <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   11292:	55                   	push   %ebp
   11293:	89 e5                	mov    %esp,%ebp
   11295:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   11298:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   1129f:	8b 45 08             	mov    0x8(%ebp),%eax
   112a2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   112a5:	e9 11 01 00 00       	jmp    113bb <kernel_vsprintf+0x129>
    {
        switch (state)
   112aa:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   112ae:	74 0b                	je     112bb <kernel_vsprintf+0x29>
   112b0:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   112b4:	74 2b                	je     112e1 <kernel_vsprintf+0x4f>
   112b6:	e9 00 01 00 00       	jmp    113bb <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   112bb:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   112bf:	75 0c                	jne    112cd <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   112c1:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   112c8:	e9 ee 00 00 00       	jmp    113bb <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   112cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112d0:	8d 50 01             	lea    0x1(%eax),%edx
   112d3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112d6:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   112da:	88 10                	mov    %dl,(%eax)
            }
            break;
   112dc:	e9 da 00 00 00       	jmp    113bb <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   112e1:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   112e5:	75 31                	jne    11318 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   112e7:	8b 45 10             	mov    0x10(%ebp),%eax
   112ea:	8d 50 04             	lea    0x4(%eax),%edx
   112ed:	89 55 10             	mov    %edx,0x10(%ebp)
   112f0:	8b 00                	mov    (%eax),%eax
   112f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   112f5:	6a 0a                	push   $0xa
   112f7:	ff 75 e4             	push   -0x1c(%ebp)
   112fa:	ff 75 f8             	push   -0x8(%ebp)
   112fd:	e8 b9 fe ff ff       	call   111bb <kernel_itoa>
   11302:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11305:	ff 75 f8             	push   -0x8(%ebp)
   11308:	e8 61 fd ff ff       	call   1106e <kernel_strlen>
   1130d:	83 c4 04             	add    $0x4,%esp
   11310:	01 45 f8             	add    %eax,-0x8(%ebp)
   11313:	e9 9b 00 00 00       	jmp    113b3 <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   11318:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1131c:	75 2e                	jne    1134c <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   1131e:	8b 45 10             	mov    0x10(%ebp),%eax
   11321:	8d 50 04             	lea    0x4(%eax),%edx
   11324:	89 55 10             	mov    %edx,0x10(%ebp)
   11327:	8b 00                	mov    (%eax),%eax
   11329:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   1132c:	6a 10                	push   $0x10
   1132e:	ff 75 e8             	push   -0x18(%ebp)
   11331:	ff 75 f8             	push   -0x8(%ebp)
   11334:	e8 82 fe ff ff       	call   111bb <kernel_itoa>
   11339:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   1133c:	ff 75 f8             	push   -0x8(%ebp)
   1133f:	e8 2a fd ff ff       	call   1106e <kernel_strlen>
   11344:	83 c4 04             	add    $0x4,%esp
   11347:	01 45 f8             	add    %eax,-0x8(%ebp)
   1134a:	eb 67                	jmp    113b3 <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   1134c:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11350:	75 19                	jne    1136b <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   11352:	8b 45 10             	mov    0x10(%ebp),%eax
   11355:	8d 50 04             	lea    0x4(%eax),%edx
   11358:	89 55 10             	mov    %edx,0x10(%ebp)
   1135b:	8b 00                	mov    (%eax),%eax
   1135d:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   11360:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11363:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11367:	88 10                	mov    %dl,(%eax)
   11369:	eb 48                	jmp    113b3 <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   1136b:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1136f:	75 42                	jne    113b3 <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   11371:	8b 45 10             	mov    0x10(%ebp),%eax
   11374:	8d 50 04             	lea    0x4(%eax),%edx
   11377:	89 55 10             	mov    %edx,0x10(%ebp)
   1137a:	8b 00                	mov    (%eax),%eax
   1137c:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   1137f:	ff 75 f4             	push   -0xc(%ebp)
   11382:	e8 e7 fc ff ff       	call   1106e <kernel_strlen>
   11387:	83 c4 04             	add    $0x4,%esp
   1138a:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   1138d:	eb 17                	jmp    113a6 <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   1138f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11392:	8d 42 01             	lea    0x1(%edx),%eax
   11395:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11398:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1139b:	8d 48 01             	lea    0x1(%eax),%ecx
   1139e:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113a1:	0f b6 12             	movzbl (%edx),%edx
   113a4:	88 10                	mov    %dl,(%eax)
                while (len--)
   113a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   113a9:	8d 50 ff             	lea    -0x1(%eax),%edx
   113ac:	89 55 f0             	mov    %edx,-0x10(%ebp)
   113af:	85 c0                	test   %eax,%eax
   113b1:	75 dc                	jne    1138f <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   113b3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   113ba:	90                   	nop
    while ((ch = *fmt++))
   113bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   113be:	8d 50 01             	lea    0x1(%eax),%edx
   113c1:	89 55 0c             	mov    %edx,0xc(%ebp)
   113c4:	0f b6 00             	movzbl (%eax),%eax
   113c7:	88 45 ef             	mov    %al,-0x11(%ebp)
   113ca:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   113ce:	0f 85 d6 fe ff ff    	jne    112aa <kernel_vsprintf+0x18>
        }
    }
}
   113d4:	90                   	nop
   113d5:	90                   	nop
   113d6:	c9                   	leave
   113d7:	c3                   	ret

000113d8 <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   113d8:	55                   	push   %ebp
   113d9:	89 e5                	mov    %esp,%ebp
   113db:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   113de:	83 ec 08             	sub    $0x8,%esp
   113e1:	ff 75 14             	push   0x14(%ebp)
   113e4:	68 9c 18 01 00       	push   $0x1189c
   113e9:	e8 ce 00 00 00       	call   114bc <log_prinf>
   113ee:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   113f1:	ff 75 10             	push   0x10(%ebp)
   113f4:	ff 75 0c             	push   0xc(%ebp)
   113f7:	ff 75 08             	push   0x8(%ebp)
   113fa:	68 ae 18 01 00       	push   $0x118ae
   113ff:	e8 b8 00 00 00       	call   114bc <log_prinf>
   11404:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   11407:	e8 24 fb ff ff       	call   10f30 <hlt>
   1140c:	eb f9                	jmp    11407 <pannic+0x2f>

0001140e <inb>:
    outb(COM1_PORT + 3, 0x80);
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
    outb(COM1_PORT + 4, 0x0F);
   1140e:	55                   	push   %ebp
   1140f:	89 e5                	mov    %esp,%ebp
   11411:	83 ec 14             	sub    $0x14,%esp
   11414:	8b 45 08             	mov    0x8(%ebp),%eax
   11417:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
}

   1141b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1141f:	89 c2                	mov    %eax,%edx
   11421:	ec                   	in     (%dx),%al
   11422:	88 45 ff             	mov    %al,-0x1(%ebp)
void log_prinf(const char *fmt, ...)
{
    char str_buf[128];
   11425:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    va_list args;
   11429:	c9                   	leave
   1142a:	c3                   	ret

0001142b <outb>:

    const char *p = str_buf;
    while (*p != '\0')
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
            ;
   1142b:	55                   	push   %ebp
   1142c:	89 e5                	mov    %esp,%ebp
   1142e:	83 ec 08             	sub    $0x8,%esp
   11431:	8b 55 08             	mov    0x8(%ebp),%edx
   11434:	8b 45 0c             	mov    0xc(%ebp),%eax
   11437:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1143b:	88 45 f8             	mov    %al,-0x8(%ebp)
        outb(COM1_PORT, *p++);
   1143e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11442:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11446:	ee                   	out    %al,(%dx)
    }
   11447:	90                   	nop
   11448:	c9                   	leave
   11449:	c3                   	ret

0001144a <init_log>:
{
   1144a:	55                   	push   %ebp
   1144b:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   1144d:	6a 00                	push   $0x0
   1144f:	68 f9 03 00 00       	push   $0x3f9
   11454:	e8 d2 ff ff ff       	call   1142b <outb>
   11459:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   1145c:	68 80 00 00 00       	push   $0x80
   11461:	68 fb 03 00 00       	push   $0x3fb
   11466:	e8 c0 ff ff ff       	call   1142b <outb>
   1146b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   1146e:	6a 03                	push   $0x3
   11470:	68 f8 03 00 00       	push   $0x3f8
   11475:	e8 b1 ff ff ff       	call   1142b <outb>
   1147a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   1147d:	6a 00                	push   $0x0
   1147f:	68 f9 03 00 00       	push   $0x3f9
   11484:	e8 a2 ff ff ff       	call   1142b <outb>
   11489:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   1148c:	6a 03                	push   $0x3
   1148e:	68 fb 03 00 00       	push   $0x3fb
   11493:	e8 93 ff ff ff       	call   1142b <outb>
   11498:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x07);
   1149b:	6a 07                	push   $0x7
   1149d:	68 fa 03 00 00       	push   $0x3fa
   114a2:	e8 84 ff ff ff       	call   1142b <outb>
   114a7:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   114aa:	6a 0f                	push   $0xf
   114ac:	68 fc 03 00 00       	push   $0x3fc
   114b1:	e8 75 ff ff ff       	call   1142b <outb>
   114b6:	83 c4 08             	add    $0x8,%esp
}
   114b9:	90                   	nop
   114ba:	c9                   	leave
   114bb:	c3                   	ret

000114bc <log_prinf>:
{
   114bc:	55                   	push   %ebp
   114bd:	89 e5                	mov    %esp,%ebp
   114bf:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   114c5:	83 ec 04             	sub    $0x4,%esp
   114c8:	68 80 00 00 00       	push   $0x80
   114cd:	6a 00                	push   $0x0
   114cf:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   114d5:	50                   	push   %eax
   114d6:	e8 1d fc ff ff       	call   110f8 <kernel_memset>
   114db:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   114de:	8d 45 0c             	lea    0xc(%ebp),%eax
   114e1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   114e7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   114ed:	83 ec 04             	sub    $0x4,%esp
   114f0:	50                   	push   %eax
   114f1:	ff 75 08             	push   0x8(%ebp)
   114f4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   114fa:	50                   	push   %eax
   114fb:	e8 92 fd ff ff       	call   11292 <kernel_vsprintf>
   11500:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   11503:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11509:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   1150c:	eb 3b                	jmp    11549 <log_prinf+0x8d>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   1150e:	90                   	nop
   1150f:	83 ec 0c             	sub    $0xc,%esp
   11512:	68 fd 03 00 00       	push   $0x3fd
   11517:	e8 f2 fe ff ff       	call   1140e <inb>
   1151c:	83 c4 10             	add    $0x10,%esp
   1151f:	0f b6 c0             	movzbl %al,%eax
   11522:	83 e0 40             	and    $0x40,%eax
   11525:	85 c0                	test   %eax,%eax
   11527:	74 e6                	je     1150f <log_prinf+0x53>
        outb(COM1_PORT, *p++);
   11529:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1152c:	8d 50 01             	lea    0x1(%eax),%edx
   1152f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11532:	0f b6 00             	movzbl (%eax),%eax
   11535:	0f b6 c0             	movzbl %al,%eax
   11538:	83 ec 08             	sub    $0x8,%esp
   1153b:	50                   	push   %eax
   1153c:	68 f8 03 00 00       	push   $0x3f8
   11541:	e8 e5 fe ff ff       	call   1142b <outb>
   11546:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   11549:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1154c:	0f b6 00             	movzbl (%eax),%eax
   1154f:	84 c0                	test   %al,%al
   11551:	75 bb                	jne    1150e <log_prinf+0x52>

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   11553:	83 ec 08             	sub    $0x8,%esp
   11556:	6a 0d                	push   $0xd
   11558:	68 f8 03 00 00       	push   $0x3f8
   1155d:	e8 c9 fe ff ff       	call   1142b <outb>
   11562:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   11565:	83 ec 08             	sub    $0x8,%esp
   11568:	6a 0a                	push   $0xa
   1156a:	68 f8 03 00 00       	push   $0x3f8
   1156f:	e8 b7 fe ff ff       	call   1142b <outb>
   11574:	83 c4 10             	add    $0x10,%esp
}
   11577:	90                   	nop
   11578:	c9                   	leave
   11579:	c3                   	ret
