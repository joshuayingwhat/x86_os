
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001ddc memsz 0x00005b90 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a5a  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000037c  00011a5c  00011a5c  00002a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011dd8  00011dd8  00002dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003db0  00011de0  00011de0  00002ddc  2**5
                  ALLOC
  4 .debug_line   00000d5e  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000622  00000000  00000000  00003b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00002326  00000000  00000000  0000415c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000cbe  00000000  00000000  00006482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000120  00000000  00000000  00007140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000c53  00000000  00000000  00007260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  00007eb3  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000c54  00000000  00000000  00007ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102bd l     F .text	0000001b list_node_init
000102d8 l     F .text	0000000b list_count
000102e3 l     F .text	0000000a list_first
000102ed l     F .text	00000017 write_tr
00011de0 l     O .bss	000000c4 task_manager
00010304 l     F .text	00000104 tss_init
00011adc l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 cpu.c
000106c1 l     F .text	00000028 lgdt
000106e9 l     F .text	0000001a far_jump
00011ec0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
0001089d l     F .text	0000001d inb
000108ba l     F .text	0000001f outb
000108d9 l     F .text	00000007 cli
000108e0 l     F .text	00000007 sti
000108e7 l     F .text	00000028 lidt
0001090f l     F .text	00000007 hlt
00010916 l     F .text	00000010 read_eflags
00010926 l     F .text	0000000b write_eflags
000126c0 l     O .bss	00000400 idt_table
00010931 l     F .text	000000d9 dump_core_regs
00010a0a l     F .text	0000003e do_default_handler
00010c78 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
0001106a l     F .text	0000001f outb
00012ac0 l     O .bss	00000004 sys_tick
000110b1 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012ae0 l     O .bss	00001000 init_task_stack
00013ae0 l     O .bss	000000a8 init_task
00000000 l    df *ABS*	00000000 klib.c
00011202 l     F .text	00000007 hlt
00011dd8 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 list.c
000116e0 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000118d8 l     F .text	0000001d inb
000118f5 l     F .text	0000001f outb
0001137b g     F .text	0000004f kernel_memcpy
000105a8 g     F .text	0000000a task_current
0001100b g     F .text	0000000b irq_enable_global
00011777 g     F .text	00000064 list_insert_last
00010b7c g     F .text	0000001c do_handler_segment_not_present
0001055f g     F .text	00000029 task_set_ready
000113ca g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010892 g     F .text	0000000b cpu_init
00011174 g     F .text	0000008e init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00011209 g     F .text	00000047 kernel_strcpy
00010eee g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
00010ad4 g     F .text	0000001c do_handler_overflow
00010c08 g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010bb4 g     F .text	0000001c do_handler_general_protection
00010a64 g     F .text	0000001c do_handler_divider
00010b44 g     F .text	0000001c do_handler_double_fault
0001114b g     F .text	00000029 init_task_entry
00010bd0 g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00011016 g     F .text	0000002b pic_send_eoi
00010555 g     F .text	0000000a task_first_task
00011914 g     F .text	00000072 init_log
00010a48 g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00010c5c g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
00013b90 g     O .bss	00002000 stack
000100e5 g       .text	00000000 exception_handler_bound_range
00010b0c g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010bec g     F .text	0000001c do_handler_fpu_error
00010518 g     F .text	0000003d task_first_init
00010c24 g     F .text	0000001c do_handler_machine_check
00010a80 g     F .text	0000001c do_handler_Debug
00011718 g     F .text	0000005f list_insert_first
00010a9c g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00011250 g     F .text	00000070 kernel_strncpy
00011000 g     F .text	0000000b irq_disable_global
000105b2 g     F .text	00000048 sys_sched_yield
00011129 g     F .text	00000022 kernel_init
00010000 g       .text	00000000 _start
00011564 g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
00010b60 g     F .text	0000001c do_handler_invalid_tss
00010eb9 g     F .text	00000035 irq_install
00011986 g     F .text	000000d4 log_prinf
00010786 g     F .text	0000006d init_gdt
00011041 g     F .text	00000018 irq_enter_protection
00010f79 g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00010b28 g     F .text	0000001c do_handler_device_unavailable
00010625 g     F .text	00000045 task_dispatch
0001087f g     F .text	00000013 switch_to_tss
000105fa g     F .text	0000002b task_next_run
0001140b g     F .text	0000005e kernel_memcmp
000116f3 g     F .text	00000025 list_init
0001002b g       .text	00000000 exception_handler_unknow
00010c40 g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
00010588 g     F .text	00000020 task_set_block
000101f0 g       .text	00000000 exception_handler_fpu_error
000104c7 g     F .text	0000001e task_switch_from_to
0001083a g     F .text	00000045 gdt_alloc_des
00010d0b g     F .text	000001ae irq_init
00011059 g     F .text	00000011 irq_leave_protection
00011340 g     F .text	0000003b kernel_strlen
00010703 g     F .text	00000083 segment_desc_set
00010af0 g     F .text	0000001c do_handler_bound_range
000117db g     F .text	00000078 list_remove_first
000112c0 g     F .text	00000080 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
00011111 g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
000104e5 g     F .text	00000033 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
0001066a g     F .text	00000057 task_time_tick
000116aa g     F .text	00000036 pannic
00010b98 g     F .text	0000001c do_handler_stack_segment_fault
00010ab8 g     F .text	0000001c do_handler_breakpoint
00010408 g     F .text	000000bf task_init
00011469 g     F .text	00000024 kernel_sprintf
0001148d g     F .text	000000d7 kernel_itoa
00011853 g     F .text	00000085 list_remove
000107f3 g     F .text	00000047 gate_desc_set
00011089 g     F .text	00000028 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 1d 11 00 00       	call   11129 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc 90 5b 01 00       	mov    $0x15b90,%esp
    jmp init_main
   10026:	e9 49 11 00 00       	jmp    11174 <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 0c 0a 00 00       	call   10a48 <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 09 0a 00 00       	call   10a64 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 06 0a 00 00       	call   10a80 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 03 0a 00 00       	call   10a9c <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 00 0a 00 00       	call   10ab8 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 fd 09 00 00       	call   10ad4 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 fa 09 00 00       	call   10af0 <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 f7 09 00 00       	call   10b0c <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 f4 09 00 00       	call   10b28 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 f3 09 00 00       	call   10b44 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 f2 09 00 00       	call   10b60 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 f1 09 00 00       	call   10b7c <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 f0 09 00 00       	call   10b98 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 ef 09 00 00       	call   10bb4 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 ee 09 00 00       	call   10bd0 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 eb 09 00 00       	call   10bec <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 ea 09 00 00       	call   10c08 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 e7 09 00 00       	call   10c24 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 e4 09 00 00       	call   10c40 <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 e1 09 00 00       	call   10c5c <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 ef 0d 00 00       	call   11089 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <simple_switch>:
    //simple_switch(&from,&to)
     .text
     .global simple_switch
simple_switch:
    //取出from
    mov 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    //取出to
    mov 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp

    ret
   102bc:	c3                   	ret

000102bd <list_node_init>:
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
                     SEG_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t));
   102bd:	55                   	push   %ebp
   102be:	89 e5                	mov    %esp,%ebp

   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102ca:	8b 45 08             	mov    0x8(%ebp),%eax
   102cd:	8b 50 04             	mov    0x4(%eax),%edx
   102d0:	8b 45 08             	mov    0x8(%ebp),%eax
   102d3:	89 10                	mov    %edx,(%eax)
    task->tss.eip = entry;
   102d5:	90                   	nop
   102d6:	5d                   	pop    %ebp
   102d7:	c3                   	ret

000102d8 <list_count>:
    write_tr(task_manager.first_task.tss_sel);
    task_manager.currt_task = &task_manager.first_task;
}

task_t *task_first_task(void)
{
   102d8:	55                   	push   %ebp
   102d9:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   102db:	8b 45 08             	mov    0x8(%ebp),%eax
   102de:	8b 40 08             	mov    0x8(%eax),%eax
}
   102e1:	5d                   	pop    %ebp
   102e2:	c3                   	ret

000102e3 <list_first>:
{
    list_insert_last(&task_manager.ready_list, &task->run_node);
    task->state = TASK_READY;
}
// 将任务从就绪队列中移除 此时任务的状态不确定 有可能是等待 有可能是睡眠因此不设置状态置
void task_set_block(task_t *task)
   102e3:	55                   	push   %ebp
   102e4:	89 e5                	mov    %esp,%ebp
{
   102e6:	8b 45 08             	mov    0x8(%ebp),%eax
   102e9:	8b 00                	mov    (%eax),%eax
    list_remove(&task_manager.ready_list, &task->run_node);
   102eb:	5d                   	pop    %ebp
   102ec:	c3                   	ret

000102ed <write_tr>:
{
    __asm__ __volatile__("hlt");
}

static inline void write_tr(uint16_t tss_sel)
{
   102ed:	55                   	push   %ebp
   102ee:	89 e5                	mov    %esp,%ebp
   102f0:	83 ec 04             	sub    $0x4,%esp
   102f3:	8b 45 08             	mov    0x8(%ebp),%eax
   102f6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_sel));
   102fa:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102fe:	0f 00 d8             	ltr    %ax
}
   10301:	90                   	nop
   10302:	c9                   	leave
   10303:	c3                   	ret

00010304 <tss_init>:
{
   10304:	55                   	push   %ebp
   10305:	89 e5                	mov    %esp,%ebp
   10307:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_des();
   1030a:	e8 2b 05 00 00       	call   1083a <gdt_alloc_des>
   1030f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   10312:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10316:	79 1a                	jns    10332 <tss_init+0x2e>
        log_prinf("alloc tss failed");
   10318:	83 ec 0c             	sub    $0xc,%esp
   1031b:	68 5c 1a 01 00       	push   $0x11a5c
   10320:	e8 61 16 00 00       	call   11986 <log_prinf>
   10325:	83 c4 10             	add    $0x10,%esp
        return -1;
   10328:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1032d:	e9 d4 00 00 00       	jmp    10406 <tss_init+0x102>
    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	83 c0 3c             	add    $0x3c,%eax
   10338:	68 89 00 00 00       	push   $0x89
   1033d:	68 a8 00 00 00       	push   $0xa8
   10342:	50                   	push   %eax
   10343:	ff 75 f4             	push   -0xc(%ebp)
   10346:	e8 b8 03 00 00       	call   10703 <segment_desc_set>
   1034b:	83 c4 10             	add    $0x10,%esp
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   1034e:	8b 45 08             	mov    0x8(%ebp),%eax
   10351:	83 c0 3c             	add    $0x3c,%eax
   10354:	83 ec 04             	sub    $0x4,%esp
   10357:	6a 68                	push   $0x68
   10359:	6a 00                	push   $0x0
   1035b:	50                   	push   %eax
   1035c:	e8 69 10 00 00       	call   113ca <kernel_memset>
   10361:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10364:	8b 45 08             	mov    0x8(%ebp),%eax
   10367:	8b 55 0c             	mov    0xc(%ebp),%edx
   1036a:	89 50 5c             	mov    %edx,0x5c(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1036d:	8b 45 08             	mov    0x8(%ebp),%eax
   10370:	8b 55 10             	mov    0x10(%ebp),%edx
   10373:	89 50 40             	mov    %edx,0x40(%eax)
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	8b 50 40             	mov    0x40(%eax),%edx
   1037c:	8b 45 08             	mov    0x8(%ebp),%eax
   1037f:	89 50 74             	mov    %edx,0x74(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	c7 40 44 10 00 00 00 	movl   $0x10,0x44(%eax)
   1038c:	8b 45 08             	mov    0x8(%ebp),%eax
   1038f:	8b 50 44             	mov    0x44(%eax),%edx
   10392:	8b 45 08             	mov    0x8(%ebp),%eax
   10395:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   1039b:	8b 45 08             	mov    0x8(%ebp),%eax
   1039e:	c7 80 98 00 00 00 10 	movl   $0x10,0x98(%eax)
   103a5:	00 00 00 
   103a8:	8b 45 08             	mov    0x8(%ebp),%eax
   103ab:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   103b1:	8b 45 08             	mov    0x8(%ebp),%eax
   103b4:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
   103ba:	8b 45 08             	mov    0x8(%ebp),%eax
   103bd:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
   103c3:	8b 45 08             	mov    0x8(%ebp),%eax
   103c6:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
   103cc:	8b 45 08             	mov    0x8(%ebp),%eax
   103cf:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   103d5:	8b 45 08             	mov    0x8(%ebp),%eax
   103d8:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   103de:	8b 45 08             	mov    0x8(%ebp),%eax
   103e1:	c7 80 88 00 00 00 08 	movl   $0x8,0x88(%eax)
   103e8:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFALUT;
   103eb:	8b 45 08             	mov    0x8(%ebp),%eax
   103ee:	c7 40 60 02 02 00 00 	movl   $0x202,0x60(%eax)
    task->tss_sel = tss_sel; // 将tss选择子保存到tss_sel中
   103f5:	8b 45 08             	mov    0x8(%ebp),%eax
   103f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103fb:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
    return 0;
   10401:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10406:	c9                   	leave
   10407:	c3                   	ret

00010408 <task_init>:
{
   10408:	55                   	push   %ebp
   10409:	89 e5                	mov    %esp,%ebp
   1040b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t *)0);
   1040e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10412:	75 19                	jne    1042d <task_init+0x25>
   10414:	68 6d 1a 01 00       	push   $0x11a6d
   10419:	68 dc 1a 01 00       	push   $0x11adc
   1041e:	6a 26                	push   $0x26
   10420:	68 84 1a 01 00       	push   $0x11a84
   10425:	e8 80 12 00 00       	call   116aa <pannic>
   1042a:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1042d:	8b 45 08             	mov    0x8(%ebp),%eax
   10430:	83 c0 0c             	add    $0xc,%eax
   10433:	83 ec 04             	sub    $0x4,%esp
   10436:	6a 20                	push   $0x20
   10438:	ff 75 0c             	push   0xc(%ebp)
   1043b:	50                   	push   %eax
   1043c:	e8 0f 0e 00 00       	call   11250 <kernel_strncpy>
   10441:	83 c4 10             	add    $0x10,%esp
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10444:	8b 45 08             	mov    0x8(%ebp),%eax
   10447:	c7 40 04 0a 00 00 00 	movl   $0xa,0x4(%eax)
    task->slice_ticks = task->time_ticks;
   1044e:	8b 45 08             	mov    0x8(%ebp),%eax
   10451:	8b 50 04             	mov    0x4(%eax),%edx
   10454:	8b 45 08             	mov    0x8(%ebp),%eax
   10457:	89 50 08             	mov    %edx,0x8(%eax)
    task->state = TASK_CREATED; // 将开始创建的进程状态设置成task_created
   1045a:	8b 45 08             	mov    0x8(%ebp),%eax
   1045d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tss_init(task, entry, esp);
   10463:	83 ec 04             	sub    $0x4,%esp
   10466:	ff 75 14             	push   0x14(%ebp)
   10469:	ff 75 10             	push   0x10(%ebp)
   1046c:	ff 75 08             	push   0x8(%ebp)
   1046f:	e8 90 fe ff ff       	call   10304 <tss_init>
   10474:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   10477:	8b 45 08             	mov    0x8(%ebp),%eax
   1047a:	83 c0 34             	add    $0x34,%eax
   1047d:	83 ec 0c             	sub    $0xc,%esp
   10480:	50                   	push   %eax
   10481:	e8 37 fe ff ff       	call   102bd <list_node_init>
   10486:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10489:	8b 45 08             	mov    0x8(%ebp),%eax
   1048c:	83 c0 2c             	add    $0x2c,%eax
   1048f:	83 ec 0c             	sub    $0xc,%esp
   10492:	50                   	push   %eax
   10493:	e8 25 fe ff ff       	call   102bd <list_node_init>
   10498:	83 c4 10             	add    $0x10,%esp
    task_set_ready(task);
   1049b:	83 ec 0c             	sub    $0xc,%esp
   1049e:	ff 75 08             	push   0x8(%ebp)
   104a1:	e8 b9 00 00 00       	call   1055f <task_set_ready>
   104a6:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node);
   104a9:	8b 45 08             	mov    0x8(%ebp),%eax
   104ac:	83 c0 34             	add    $0x34,%eax
   104af:	83 ec 08             	sub    $0x8,%esp
   104b2:	50                   	push   %eax
   104b3:	68 f0 1d 01 00       	push   $0x11df0
   104b8:	e8 ba 12 00 00       	call   11777 <list_insert_last>
   104bd:	83 c4 10             	add    $0x10,%esp
    return 0;
   104c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   104c5:	c9                   	leave
   104c6:	c3                   	ret

000104c7 <task_switch_from_to>:
{
   104c7:	55                   	push   %ebp
   104c8:	89 e5                	mov    %esp,%ebp
   104ca:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   104cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   104d0:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
   104d6:	83 ec 0c             	sub    $0xc,%esp
   104d9:	50                   	push   %eax
   104da:	e8 a0 03 00 00       	call   1087f <switch_to_tss>
   104df:	83 c4 10             	add    $0x10,%esp
}
   104e2:	90                   	nop
   104e3:	c9                   	leave
   104e4:	c3                   	ret

000104e5 <task_manager_init>:
{
   104e5:	55                   	push   %ebp
   104e6:	89 e5                	mov    %esp,%ebp
   104e8:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   104eb:	83 ec 0c             	sub    $0xc,%esp
   104ee:	68 e4 1d 01 00       	push   $0x11de4
   104f3:	e8 fb 11 00 00       	call   116f3 <list_init>
   104f8:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   104fb:	83 ec 0c             	sub    $0xc,%esp
   104fe:	68 f0 1d 01 00       	push   $0x11df0
   10503:	e8 eb 11 00 00       	call   116f3 <list_init>
   10508:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = (task_t *)0;
   1050b:	c7 05 e0 1d 01 00 00 	movl   $0x0,0x11de0
   10512:	00 00 00 
}
   10515:	90                   	nop
   10516:	c9                   	leave
   10517:	c3                   	ret

00010518 <task_first_init>:
{
   10518:	55                   	push   %ebp
   10519:	89 e5                	mov    %esp,%ebp
   1051b:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 0, 0); //??为什么入口设置为0，堆栈也设置为0
   1051e:	6a 00                	push   $0x0
   10520:	6a 00                	push   $0x0
   10522:	68 d1 1a 01 00       	push   $0x11ad1
   10527:	68 fc 1d 01 00       	push   $0x11dfc
   1052c:	e8 d7 fe ff ff       	call   10408 <task_init>
   10531:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10534:	a1 a0 1e 01 00       	mov    0x11ea0,%eax
   10539:	0f b7 c0             	movzwl %ax,%eax
   1053c:	83 ec 0c             	sub    $0xc,%esp
   1053f:	50                   	push   %eax
   10540:	e8 a8 fd ff ff       	call   102ed <write_tr>
   10545:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = &task_manager.first_task;
   10548:	c7 05 e0 1d 01 00 fc 	movl   $0x11dfc,0x11de0
   1054f:	1d 01 00 
}
   10552:	90                   	nop
   10553:	c9                   	leave
   10554:	c3                   	ret

00010555 <task_first_task>:
{
   10555:	55                   	push   %ebp
   10556:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10558:	b8 fc 1d 01 00       	mov    $0x11dfc,%eax
}
   1055d:	5d                   	pop    %ebp
   1055e:	c3                   	ret

0001055f <task_set_ready>:
{
   1055f:	55                   	push   %ebp
   10560:	89 e5                	mov    %esp,%ebp
   10562:	83 ec 08             	sub    $0x8,%esp
    list_insert_last(&task_manager.ready_list, &task->run_node);
   10565:	8b 45 08             	mov    0x8(%ebp),%eax
   10568:	83 c0 2c             	add    $0x2c,%eax
   1056b:	83 ec 08             	sub    $0x8,%esp
   1056e:	50                   	push   %eax
   1056f:	68 e4 1d 01 00       	push   $0x11de4
   10574:	e8 fe 11 00 00       	call   11777 <list_insert_last>
   10579:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1057c:	8b 45 08             	mov    0x8(%ebp),%eax
   1057f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10585:	90                   	nop
   10586:	c9                   	leave
   10587:	c3                   	ret

00010588 <task_set_block>:
{
   10588:	55                   	push   %ebp
   10589:	89 e5                	mov    %esp,%ebp
   1058b:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list, &task->run_node);
   1058e:	8b 45 08             	mov    0x8(%ebp),%eax
   10591:	83 c0 2c             	add    $0x2c,%eax
   10594:	83 ec 08             	sub    $0x8,%esp
   10597:	50                   	push   %eax
   10598:	68 e4 1d 01 00       	push   $0x11de4
   1059d:	e8 b1 12 00 00       	call   11853 <list_remove>
   105a2:	83 c4 10             	add    $0x10,%esp
}
   105a5:	90                   	nop
   105a6:	c9                   	leave
   105a7:	c3                   	ret

000105a8 <task_current>:

task_t *task_current(void)
{
   105a8:	55                   	push   %ebp
   105a9:	89 e5                	mov    %esp,%ebp
    return task_manager.currt_task;
   105ab:	a1 e0 1d 01 00       	mov    0x11de0,%eax
}
   105b0:	5d                   	pop    %ebp
   105b1:	c3                   	ret

000105b2 <sys_sched_yield>:

int sys_sched_yield()
{
   105b2:	55                   	push   %ebp
   105b3:	89 e5                	mov    %esp,%ebp
   105b5:	83 ec 18             	sub    $0x18,%esp
    if (list_count(&task_manager.ready_list) > 1)
   105b8:	68 e4 1d 01 00       	push   $0x11de4
   105bd:	e8 16 fd ff ff       	call   102d8 <list_count>
   105c2:	83 c4 04             	add    $0x4,%esp
   105c5:	83 f8 01             	cmp    $0x1,%eax
   105c8:	7e 29                	jle    105f3 <sys_sched_yield+0x41>
    {
        // 如果就绪队列中有其他的任务则将头部任务移到尾部
        task_t *current_task = task_current();
   105ca:	e8 d9 ff ff ff       	call   105a8 <task_current>
   105cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // 从队列头部取出当前任务
        task_set_block(current_task);
   105d2:	83 ec 0c             	sub    $0xc,%esp
   105d5:	ff 75 f4             	push   -0xc(%ebp)
   105d8:	e8 ab ff ff ff       	call   10588 <task_set_block>
   105dd:	83 c4 10             	add    $0x10,%esp
        // 将当前任务添加到队列尾部
        task_set_ready(current_task);
   105e0:	83 ec 0c             	sub    $0xc,%esp
   105e3:	ff 75 f4             	push   -0xc(%ebp)
   105e6:	e8 74 ff ff ff       	call   1055f <task_set_ready>
   105eb:	83 c4 10             	add    $0x10,%esp
        // 将cpu的使用权让给下一个任务
        task_dispatch();
   105ee:	e8 32 00 00 00       	call   10625 <task_dispatch>
    }
    // 没有其他的任务了就直接返回
    return 0;
   105f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   105f8:	c9                   	leave
   105f9:	c3                   	ret

000105fa <task_next_run>:

task_t *task_next_run(void)
{
   105fa:	55                   	push   %ebp
   105fb:	89 e5                	mov    %esp,%ebp
   105fd:	83 ec 10             	sub    $0x10,%esp
    list_node_t *task_node = list_first(&task_manager.ready_list);
   10600:	68 e4 1d 01 00       	push   $0x11de4
   10605:	e8 d9 fc ff ff       	call   102e3 <list_first>
   1060a:	83 c4 04             	add    $0x4,%esp
   1060d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   10610:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10614:	74 08                	je     1061e <task_next_run+0x24>
   10616:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10619:	83 e8 2c             	sub    $0x2c,%eax
   1061c:	eb 05                	jmp    10623 <task_next_run+0x29>
   1061e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10623:	c9                   	leave
   10624:	c3                   	ret

00010625 <task_dispatch>:

void task_dispatch(void)
{
   10625:	55                   	push   %ebp
   10626:	89 e5                	mov    %esp,%ebp
   10628:	83 ec 18             	sub    $0x18,%esp
    task_t *to = task_next_run();
   1062b:	e8 ca ff ff ff       	call   105fa <task_next_run>
   10630:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.currt_task)
   10633:	a1 e0 1d 01 00       	mov    0x11de0,%eax
   10638:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1063b:	74 2a                	je     10667 <task_dispatch+0x42>
    {
        task_t *from = task_current();
   1063d:	e8 66 ff ff ff       	call   105a8 <task_current>
   10642:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_manager.currt_task = to;
   10645:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10648:	a3 e0 1d 01 00       	mov    %eax,0x11de0
        to->state = TASK_RUNNING;
   1064d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10650:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   10656:	83 ec 08             	sub    $0x8,%esp
   10659:	ff 75 f4             	push   -0xc(%ebp)
   1065c:	ff 75 f0             	push   -0x10(%ebp)
   1065f:	e8 63 fe ff ff       	call   104c7 <task_switch_from_to>
   10664:	83 c4 10             	add    $0x10,%esp
    }
}
   10667:	90                   	nop
   10668:	c9                   	leave
   10669:	c3                   	ret

0001066a <task_time_tick>:
// 当时间片到了之后将运行中队列中当前的任务移到队列尾部
// 并取出运行队列中的下一个任务
void task_time_tick()
{
   1066a:	55                   	push   %ebp
   1066b:	89 e5                	mov    %esp,%ebp
   1066d:	83 ec 18             	sub    $0x18,%esp
    task_t *current_task = task_current();
   10670:	e8 33 ff ff ff       	call   105a8 <task_current>
   10675:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 当前任务的运行时间片已经为0了
    if (--current_task->slice_ticks == 0)
   10678:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1067b:	8b 40 08             	mov    0x8(%eax),%eax
   1067e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10681:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10684:	89 50 08             	mov    %edx,0x8(%eax)
   10687:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1068a:	8b 40 08             	mov    0x8(%eax),%eax
   1068d:	85 c0                	test   %eax,%eax
   1068f:	75 2d                	jne    106be <task_time_tick+0x54>
    {
        // 将这次的任务重新设置计数
        current_task->slice_ticks = current_task->time_ticks;
   10691:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10694:	8b 50 04             	mov    0x4(%eax),%edx
   10697:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1069a:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_block(current_task);
   1069d:	83 ec 0c             	sub    $0xc,%esp
   106a0:	ff 75 f4             	push   -0xc(%ebp)
   106a3:	e8 e0 fe ff ff       	call   10588 <task_set_block>
   106a8:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   106ab:	83 ec 0c             	sub    $0xc,%esp
   106ae:	ff 75 f4             	push   -0xc(%ebp)
   106b1:	e8 a9 fe ff ff       	call   1055f <task_set_ready>
   106b6:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   106b9:	e8 67 ff ff ff       	call   10625 <task_dispatch>
    }
}
   106be:	90                   	nop
   106bf:	c9                   	leave
   106c0:	c3                   	ret

000106c1 <lgdt>:
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}

// 从gdt表中找到一个空闲的项设置给tss
int gdt_alloc_des(void)
{
   106c1:	55                   	push   %ebp
   106c2:	89 e5                	mov    %esp,%ebp
   106c4:	83 ec 10             	sub    $0x10,%esp
    {
        segment_desc_t *desc = gdt_table + i;
        if (desc->attr == 0)
        {
            return i * sizeof(segment_desc_t);
        }
   106c7:	8b 45 08             	mov    0x8(%ebp),%eax
   106ca:	c1 e8 10             	shr    $0x10,%eax
   106cd:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    }
   106d1:	8b 45 08             	mov    0x8(%ebp),%eax
   106d4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return -1;
   106d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   106db:	83 e8 01             	sub    $0x1,%eax
   106de:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   106e2:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

   106e6:	90                   	nop
   106e7:	c9                   	leave
   106e8:	c3                   	ret

000106e9 <far_jump>:
   106e9:	55                   	push   %ebp
   106ea:	89 e5                	mov    %esp,%ebp
   106ec:	83 ec 10             	sub    $0x10,%esp
   106ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   106f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
   106f5:	8b 45 08             	mov    0x8(%ebp),%eax
   106f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
   106fb:	8d 45 f8             	lea    -0x8(%ebp),%eax
   106fe:	ff 28                	ljmp   *(%eax)
   10700:	90                   	nop
   10701:	c9                   	leave
   10702:	c3                   	ret

00010703 <segment_desc_set>:
{
   10703:	55                   	push   %ebp
   10704:	89 e5                	mov    %esp,%ebp
   10706:	83 ec 14             	sub    $0x14,%esp
   10709:	8b 45 14             	mov    0x14(%ebp),%eax
   1070c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   10710:	8b 45 08             	mov    0x8(%ebp),%eax
   10713:	83 e0 f8             	and    $0xfffffff8,%eax
   10716:	05 c0 1e 01 00       	add    $0x11ec0,%eax
   1071b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   1071e:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10725:	76 0f                	jbe    10736 <segment_desc_set+0x33>
        attr |= SEG_G;
   10727:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   1072d:	8b 45 10             	mov    0x10(%ebp),%eax
   10730:	c1 e8 0c             	shr    $0xc,%eax
   10733:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   10736:	8b 45 10             	mov    0x10(%ebp),%eax
   10739:	89 c2                	mov    %eax,%edx
   1073b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1073e:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   10741:	8b 45 0c             	mov    0xc(%ebp),%eax
   10744:	89 c2                	mov    %eax,%edx
   10746:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10749:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   1074d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10750:	c1 e8 10             	shr    $0x10,%eax
   10753:	89 c2                	mov    %eax,%edx
   10755:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10758:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   1075b:	8b 45 10             	mov    0x10(%ebp),%eax
   1075e:	c1 e8 10             	shr    $0x10,%eax
   10761:	c1 e0 08             	shl    $0x8,%eax
   10764:	66 25 00 0f          	and    $0xf00,%ax
   10768:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1076c:	89 c2                	mov    %eax,%edx
   1076e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10771:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   10775:	8b 45 0c             	mov    0xc(%ebp),%eax
   10778:	c1 e8 18             	shr    $0x18,%eax
   1077b:	89 c2                	mov    %eax,%edx
   1077d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10780:	88 50 07             	mov    %dl,0x7(%eax)
}
   10783:	90                   	nop
   10784:	c9                   	leave
   10785:	c3                   	ret

00010786 <init_gdt>:
{
   10786:	55                   	push   %ebp
   10787:	89 e5                	mov    %esp,%ebp
   10789:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1078c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10793:	eb 19                	jmp    107ae <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10795:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10798:	c1 e0 03             	shl    $0x3,%eax
   1079b:	6a 00                	push   $0x0
   1079d:	6a 00                	push   $0x0
   1079f:	6a 00                	push   $0x0
   107a1:	50                   	push   %eax
   107a2:	e8 5c ff ff ff       	call   10703 <segment_desc_set>
   107a7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   107aa:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   107ae:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   107b5:	7e de                	jle    10795 <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   107b7:	68 92 40 00 00       	push   $0x4092
   107bc:	6a ff                	push   $0xffffffff
   107be:	6a 00                	push   $0x0
   107c0:	6a 10                	push   $0x10
   107c2:	e8 3c ff ff ff       	call   10703 <segment_desc_set>
   107c7:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   107ca:	68 9a 40 00 00       	push   $0x409a
   107cf:	6a ff                	push   $0xffffffff
   107d1:	6a 00                	push   $0x0
   107d3:	6a 08                	push   $0x8
   107d5:	e8 29 ff ff ff       	call   10703 <segment_desc_set>
   107da:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   107dd:	b8 c0 1e 01 00       	mov    $0x11ec0,%eax
   107e2:	68 00 08 00 00       	push   $0x800
   107e7:	50                   	push   %eax
   107e8:	e8 d4 fe ff ff       	call   106c1 <lgdt>
   107ed:	83 c4 08             	add    $0x8,%esp
}
   107f0:	90                   	nop
   107f1:	c9                   	leave
   107f2:	c3                   	ret

000107f3 <gate_desc_set>:
{
   107f3:	55                   	push   %ebp
   107f4:	89 e5                	mov    %esp,%ebp
   107f6:	83 ec 08             	sub    $0x8,%esp
   107f9:	8b 55 0c             	mov    0xc(%ebp),%edx
   107fc:	8b 45 14             	mov    0x14(%ebp),%eax
   107ff:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10803:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10807:	8b 45 10             	mov    0x10(%ebp),%eax
   1080a:	89 c2                	mov    %eax,%edx
   1080c:	8b 45 08             	mov    0x8(%ebp),%eax
   1080f:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10812:	8b 45 08             	mov    0x8(%ebp),%eax
   10815:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10819:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1081d:	8b 45 08             	mov    0x8(%ebp),%eax
   10820:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10824:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10828:	8b 45 10             	mov    0x10(%ebp),%eax
   1082b:	c1 e8 10             	shr    $0x10,%eax
   1082e:	89 c2                	mov    %eax,%edx
   10830:	8b 45 08             	mov    0x8(%ebp),%eax
   10833:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10837:	90                   	nop
   10838:	c9                   	leave
   10839:	c3                   	ret

0001083a <gdt_alloc_des>:
{
   1083a:	55                   	push   %ebp
   1083b:	89 e5                	mov    %esp,%ebp
   1083d:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10840:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10847:	eb 26                	jmp    1086f <gdt_alloc_des+0x35>
        segment_desc_t *desc = gdt_table + i;
   10849:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1084c:	c1 e0 03             	shl    $0x3,%eax
   1084f:	05 c0 1e 01 00       	add    $0x11ec0,%eax
   10854:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->attr == 0)
   10857:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1085a:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1085e:	66 85 c0             	test   %ax,%ax
   10861:	75 08                	jne    1086b <gdt_alloc_des+0x31>
            return i * sizeof(segment_desc_t);
   10863:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10866:	c1 e0 03             	shl    $0x3,%eax
   10869:	eb 12                	jmp    1087d <gdt_alloc_des+0x43>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1086b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1086f:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10876:	7e d1                	jle    10849 <gdt_alloc_des+0xf>
    return -1;
   10878:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1087d:	c9                   	leave
   1087e:	c3                   	ret

0001087f <switch_to_tss>:
{
   1087f:	55                   	push   %ebp
   10880:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   10882:	6a 00                	push   $0x0
   10884:	ff 75 08             	push   0x8(%ebp)
   10887:	e8 5d fe ff ff       	call   106e9 <far_jump>
   1088c:	83 c4 08             	add    $0x8,%esp
}
   1088f:	90                   	nop
   10890:	c9                   	leave
   10891:	c3                   	ret

00010892 <cpu_init>:
{
   10892:	55                   	push   %ebp
   10893:	89 e5                	mov    %esp,%ebp
    init_gdt();
   10895:	e8 ec fe ff ff       	call   10786 <init_gdt>
   1089a:	90                   	nop
   1089b:	5d                   	pop    %ebp
   1089c:	c3                   	ret

0001089d <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   1089d:	55                   	push   %ebp
   1089e:	89 e5                	mov    %esp,%ebp
   108a0:	83 ec 14             	sub    $0x14,%esp
   108a3:	8b 45 08             	mov    0x8(%ebp),%eax
   108a6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   108aa:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   108ae:	89 c2                	mov    %eax,%edx
   108b0:	ec                   	in     (%dx),%al
   108b1:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   108b4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   108b8:	c9                   	leave
   108b9:	c3                   	ret

000108ba <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   108ba:	55                   	push   %ebp
   108bb:	89 e5                	mov    %esp,%ebp
   108bd:	83 ec 08             	sub    $0x8,%esp
   108c0:	8b 55 08             	mov    0x8(%ebp),%edx
   108c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   108c6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   108ca:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   108cd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   108d1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   108d5:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   108d6:	90                   	nop
   108d7:	c9                   	leave
   108d8:	c3                   	ret

000108d9 <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   108d9:	55                   	push   %ebp
   108da:	89 e5                	mov    %esp,%ebp
        hlt();
   108dc:	fa                   	cli
    }
   108dd:	90                   	nop
   108de:	5d                   	pop    %ebp
   108df:	c3                   	ret

000108e0 <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   108e0:	55                   	push   %ebp
   108e1:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   108e3:	fb                   	sti
}
   108e4:	90                   	nop
   108e5:	5d                   	pop    %ebp
   108e6:	c3                   	ret

000108e7 <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   108e7:	55                   	push   %ebp
   108e8:	89 e5                	mov    %esp,%ebp
   108ea:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   108ed:	8b 45 08             	mov    0x8(%ebp),%eax
   108f0:	c1 e8 10             	shr    $0x10,%eax
   108f3:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   108f7:	8b 45 08             	mov    0x8(%ebp),%eax
   108fa:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   108fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   10901:	83 e8 01             	sub    $0x1,%eax
   10904:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10908:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   1090c:	90                   	nop
   1090d:	c9                   	leave
   1090e:	c3                   	ret

0001090f <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   1090f:	55                   	push   %ebp
   10910:	89 e5                	mov    %esp,%ebp
}
   10912:	f4                   	hlt

   10913:	90                   	nop
   10914:	5d                   	pop    %ebp
   10915:	c3                   	ret

00010916 <read_eflags>:
    do_default_handler(frame, "Stack-Segment Fault.");
}

void do_handler_general_protection(exception_frame_t *frame)
{
    do_default_handler(frame, "General Protection.");
   10916:	55                   	push   %ebp
   10917:	89 e5                	mov    %esp,%ebp
   10919:	83 ec 10             	sub    $0x10,%esp
}

   1091c:	9c                   	pushf
   1091d:	58                   	pop    %eax
   1091e:	89 45 fc             	mov    %eax,-0x4(%ebp)
void do_handler_page_fault(exception_frame_t *frame)
   10921:	8b 45 fc             	mov    -0x4(%ebp),%eax
{
   10924:	c9                   	leave
   10925:	c3                   	ret

00010926 <write_eflags>:
    do_default_handler(frame, "Page Fault.");
}

   10926:	55                   	push   %ebp
   10927:	89 e5                	mov    %esp,%ebp
void do_handler_fpu_error(exception_frame_t *frame)
   10929:	8b 45 08             	mov    0x8(%ebp),%eax
   1092c:	50                   	push   %eax
   1092d:	9d                   	popf
{
   1092e:	90                   	nop
   1092f:	5d                   	pop    %ebp
   10930:	c3                   	ret

00010931 <dump_core_regs>:
{
   10931:	55                   	push   %ebp
   10932:	89 e5                	mov    %esp,%ebp
   10934:	57                   	push   %edi
   10935:	56                   	push   %esi
   10936:	53                   	push   %ebx
   10937:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   1093a:	8b 45 08             	mov    0x8(%ebp),%eax
   1093d:	8b 50 34             	mov    0x34(%eax),%edx
   10940:	8b 45 08             	mov    0x8(%ebp),%eax
   10943:	8b 40 30             	mov    0x30(%eax),%eax
   10946:	83 ec 04             	sub    $0x4,%esp
   10949:	52                   	push   %edx
   1094a:	50                   	push   %eax
   1094b:	68 e8 1a 01 00       	push   $0x11ae8
   10950:	e8 31 10 00 00       	call   11986 <log_prinf>
   10955:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   10958:	8b 45 08             	mov    0x8(%ebp),%eax
   1095b:	8b 38                	mov    (%eax),%edi
   1095d:	8b 45 08             	mov    0x8(%ebp),%eax
   10960:	8b 70 04             	mov    0x4(%eax),%esi
   10963:	8b 45 08             	mov    0x8(%ebp),%eax
   10966:	8b 58 0c             	mov    0xc(%eax),%ebx
   10969:	8b 45 08             	mov    0x8(%ebp),%eax
   1096c:	8b 48 08             	mov    0x8(%eax),%ecx
   1096f:	8b 45 08             	mov    0x8(%ebp),%eax
   10972:	8b 50 0c             	mov    0xc(%eax),%edx
   10975:	8b 45 08             	mov    0x8(%ebp),%eax
   10978:	8b 40 3c             	mov    0x3c(%eax),%eax
   1097b:	83 ec 04             	sub    $0x4,%esp
   1097e:	57                   	push   %edi
   1097f:	56                   	push   %esi
   10980:	53                   	push   %ebx
   10981:	51                   	push   %ecx
   10982:	52                   	push   %edx
   10983:	50                   	push   %eax
   10984:	68 00 1b 01 00       	push   $0x11b00
   10989:	e8 f8 0f 00 00       	call   11986 <log_prinf>
   1098e:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   10991:	8b 45 08             	mov    0x8(%ebp),%eax
   10994:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10997:	8b 45 08             	mov    0x8(%ebp),%eax
   1099a:	8b 40 18             	mov    0x18(%eax),%eax
   1099d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   109a0:	8b 45 08             	mov    0x8(%ebp),%eax
   109a3:	8b 58 14             	mov    0x14(%eax),%ebx
   109a6:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   109a9:	8b 45 08             	mov    0x8(%ebp),%eax
   109ac:	8b 78 10             	mov    0x10(%eax),%edi
   109af:	8b 45 08             	mov    0x8(%ebp),%eax
   109b2:	8b 70 24             	mov    0x24(%eax),%esi
   109b5:	8b 45 08             	mov    0x8(%ebp),%eax
   109b8:	8b 58 28             	mov    0x28(%eax),%ebx
   109bb:	8b 45 08             	mov    0x8(%ebp),%eax
   109be:	8b 50 20             	mov    0x20(%eax),%edx
   109c1:	8b 45 08             	mov    0x8(%ebp),%eax
   109c4:	8b 40 2c             	mov    0x2c(%eax),%eax
   109c7:	83 ec 0c             	sub    $0xc,%esp
   109ca:	51                   	push   %ecx
   109cb:	ff 75 e4             	push   -0x1c(%ebp)
   109ce:	ff 75 e0             	push   -0x20(%ebp)
   109d1:	57                   	push   %edi
   109d2:	56                   	push   %esi
   109d3:	53                   	push   %ebx
   109d4:	52                   	push   %edx
   109d5:	50                   	push   %eax
   109d6:	68 28 1b 01 00       	push   $0x11b28
   109db:	e8 a6 0f 00 00       	call   11986 <log_prinf>
   109e0:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   109e3:	8b 45 08             	mov    0x8(%ebp),%eax
   109e6:	8b 50 40             	mov    0x40(%eax),%edx
   109e9:	8b 45 08             	mov    0x8(%ebp),%eax
   109ec:	8b 40 38             	mov    0x38(%eax),%eax
   109ef:	83 ec 04             	sub    $0x4,%esp
   109f2:	52                   	push   %edx
   109f3:	50                   	push   %eax
   109f4:	68 79 1b 01 00       	push   $0x11b79
   109f9:	e8 88 0f 00 00       	call   11986 <log_prinf>
   109fe:	83 c4 10             	add    $0x10,%esp
}
   10a01:	90                   	nop
   10a02:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10a05:	5b                   	pop    %ebx
   10a06:	5e                   	pop    %esi
   10a07:	5f                   	pop    %edi
   10a08:	5d                   	pop    %ebp
   10a09:	c3                   	ret

00010a0a <do_default_handler>:
{
   10a0a:	55                   	push   %ebp
   10a0b:	89 e5                	mov    %esp,%ebp
   10a0d:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   10a10:	83 ec 0c             	sub    $0xc,%esp
   10a13:	68 92 1b 01 00       	push   $0x11b92
   10a18:	e8 69 0f 00 00       	call   11986 <log_prinf>
   10a1d:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   10a20:	83 ec 08             	sub    $0x8,%esp
   10a23:	ff 75 0c             	push   0xc(%ebp)
   10a26:	68 af 1b 01 00       	push   $0x11baf
   10a2b:	e8 56 0f 00 00       	call   11986 <log_prinf>
   10a30:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10a33:	83 ec 0c             	sub    $0xc,%esp
   10a36:	ff 75 08             	push   0x8(%ebp)
   10a39:	e8 f3 fe ff ff       	call   10931 <dump_core_regs>
   10a3e:	83 c4 10             	add    $0x10,%esp
        hlt();
   10a41:	e8 c9 fe ff ff       	call   1090f <hlt>
   10a46:	eb f9                	jmp    10a41 <do_default_handler+0x37>

00010a48 <do_handler_unknow>:
{
   10a48:	55                   	push   %ebp
   10a49:	89 e5                	mov    %esp,%ebp
   10a4b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   10a4e:	83 ec 08             	sub    $0x8,%esp
   10a51:	68 c0 1b 01 00       	push   $0x11bc0
   10a56:	ff 75 08             	push   0x8(%ebp)
   10a59:	e8 ac ff ff ff       	call   10a0a <do_default_handler>
   10a5e:	83 c4 10             	add    $0x10,%esp
}
   10a61:	90                   	nop
   10a62:	c9                   	leave
   10a63:	c3                   	ret

00010a64 <do_handler_divider>:
{
   10a64:	55                   	push   %ebp
   10a65:	89 e5                	mov    %esp,%ebp
   10a67:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   10a6a:	83 ec 08             	sub    $0x8,%esp
   10a6d:	68 d4 1b 01 00       	push   $0x11bd4
   10a72:	ff 75 08             	push   0x8(%ebp)
   10a75:	e8 90 ff ff ff       	call   10a0a <do_default_handler>
   10a7a:	83 c4 10             	add    $0x10,%esp
}
   10a7d:	90                   	nop
   10a7e:	c9                   	leave
   10a7f:	c3                   	ret

00010a80 <do_handler_Debug>:
{
   10a80:	55                   	push   %ebp
   10a81:	89 e5                	mov    %esp,%ebp
   10a83:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   10a86:	83 ec 08             	sub    $0x8,%esp
   10a89:	68 e9 1b 01 00       	push   $0x11be9
   10a8e:	ff 75 08             	push   0x8(%ebp)
   10a91:	e8 74 ff ff ff       	call   10a0a <do_default_handler>
   10a96:	83 c4 10             	add    $0x10,%esp
}
   10a99:	90                   	nop
   10a9a:	c9                   	leave
   10a9b:	c3                   	ret

00010a9c <do_handler_NMI>:
{
   10a9c:	55                   	push   %ebp
   10a9d:	89 e5                	mov    %esp,%ebp
   10a9f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10aa2:	83 ec 08             	sub    $0x8,%esp
   10aa5:	68 f9 1b 01 00       	push   $0x11bf9
   10aaa:	ff 75 08             	push   0x8(%ebp)
   10aad:	e8 58 ff ff ff       	call   10a0a <do_default_handler>
   10ab2:	83 c4 10             	add    $0x10,%esp
}
   10ab5:	90                   	nop
   10ab6:	c9                   	leave
   10ab7:	c3                   	ret

00010ab8 <do_handler_breakpoint>:
{
   10ab8:	55                   	push   %ebp
   10ab9:	89 e5                	mov    %esp,%ebp
   10abb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10abe:	83 ec 08             	sub    $0x8,%esp
   10ac1:	68 08 1c 01 00       	push   $0x11c08
   10ac6:	ff 75 08             	push   0x8(%ebp)
   10ac9:	e8 3c ff ff ff       	call   10a0a <do_default_handler>
   10ace:	83 c4 10             	add    $0x10,%esp
}
   10ad1:	90                   	nop
   10ad2:	c9                   	leave
   10ad3:	c3                   	ret

00010ad4 <do_handler_overflow>:
{
   10ad4:	55                   	push   %ebp
   10ad5:	89 e5                	mov    %esp,%ebp
   10ad7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10ada:	83 ec 08             	sub    $0x8,%esp
   10add:	68 14 1c 01 00       	push   $0x11c14
   10ae2:	ff 75 08             	push   0x8(%ebp)
   10ae5:	e8 20 ff ff ff       	call   10a0a <do_default_handler>
   10aea:	83 c4 10             	add    $0x10,%esp
}
   10aed:	90                   	nop
   10aee:	c9                   	leave
   10aef:	c3                   	ret

00010af0 <do_handler_bound_range>:
{
   10af0:	55                   	push   %ebp
   10af1:	89 e5                	mov    %esp,%ebp
   10af3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10af6:	83 ec 08             	sub    $0x8,%esp
   10af9:	68 1e 1c 01 00       	push   $0x11c1e
   10afe:	ff 75 08             	push   0x8(%ebp)
   10b01:	e8 04 ff ff ff       	call   10a0a <do_default_handler>
   10b06:	83 c4 10             	add    $0x10,%esp
}
   10b09:	90                   	nop
   10b0a:	c9                   	leave
   10b0b:	c3                   	ret

00010b0c <do_handler_invalid_opcode>:
{
   10b0c:	55                   	push   %ebp
   10b0d:	89 e5                	mov    %esp,%ebp
   10b0f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10b12:	83 ec 08             	sub    $0x8,%esp
   10b15:	68 34 1c 01 00       	push   $0x11c34
   10b1a:	ff 75 08             	push   0x8(%ebp)
   10b1d:	e8 e8 fe ff ff       	call   10a0a <do_default_handler>
   10b22:	83 c4 10             	add    $0x10,%esp
}
   10b25:	90                   	nop
   10b26:	c9                   	leave
   10b27:	c3                   	ret

00010b28 <do_handler_device_unavailable>:
{
   10b28:	55                   	push   %ebp
   10b29:	89 e5                	mov    %esp,%ebp
   10b2b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10b2e:	83 ec 08             	sub    $0x8,%esp
   10b31:	68 44 1c 01 00       	push   $0x11c44
   10b36:	ff 75 08             	push   0x8(%ebp)
   10b39:	e8 cc fe ff ff       	call   10a0a <do_default_handler>
   10b3e:	83 c4 10             	add    $0x10,%esp
}
   10b41:	90                   	nop
   10b42:	c9                   	leave
   10b43:	c3                   	ret

00010b44 <do_handler_double_fault>:
{
   10b44:	55                   	push   %ebp
   10b45:	89 e5                	mov    %esp,%ebp
   10b47:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   10b4a:	83 ec 08             	sub    $0x8,%esp
   10b4d:	68 5a 1c 01 00       	push   $0x11c5a
   10b52:	ff 75 08             	push   0x8(%ebp)
   10b55:	e8 b0 fe ff ff       	call   10a0a <do_default_handler>
   10b5a:	83 c4 10             	add    $0x10,%esp
}
   10b5d:	90                   	nop
   10b5e:	c9                   	leave
   10b5f:	c3                   	ret

00010b60 <do_handler_invalid_tss>:
{
   10b60:	55                   	push   %ebp
   10b61:	89 e5                	mov    %esp,%ebp
   10b63:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   10b66:	83 ec 08             	sub    $0x8,%esp
   10b69:	68 68 1c 01 00       	push   $0x11c68
   10b6e:	ff 75 08             	push   0x8(%ebp)
   10b71:	e8 94 fe ff ff       	call   10a0a <do_default_handler>
   10b76:	83 c4 10             	add    $0x10,%esp
}
   10b79:	90                   	nop
   10b7a:	c9                   	leave
   10b7b:	c3                   	ret

00010b7c <do_handler_segment_not_present>:
{
   10b7c:	55                   	push   %ebp
   10b7d:	89 e5                	mov    %esp,%ebp
   10b7f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10b82:	83 ec 08             	sub    $0x8,%esp
   10b85:	68 74 1c 01 00       	push   $0x11c74
   10b8a:	ff 75 08             	push   0x8(%ebp)
   10b8d:	e8 78 fe ff ff       	call   10a0a <do_default_handler>
   10b92:	83 c4 10             	add    $0x10,%esp
}
   10b95:	90                   	nop
   10b96:	c9                   	leave
   10b97:	c3                   	ret

00010b98 <do_handler_stack_segment_fault>:
{
   10b98:	55                   	push   %ebp
   10b99:	89 e5                	mov    %esp,%ebp
   10b9b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10b9e:	83 ec 08             	sub    $0x8,%esp
   10ba1:	68 89 1c 01 00       	push   $0x11c89
   10ba6:	ff 75 08             	push   0x8(%ebp)
   10ba9:	e8 5c fe ff ff       	call   10a0a <do_default_handler>
   10bae:	83 c4 10             	add    $0x10,%esp
}
   10bb1:	90                   	nop
   10bb2:	c9                   	leave
   10bb3:	c3                   	ret

00010bb4 <do_handler_general_protection>:
{
   10bb4:	55                   	push   %ebp
   10bb5:	89 e5                	mov    %esp,%ebp
   10bb7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   10bba:	83 ec 08             	sub    $0x8,%esp
   10bbd:	68 9e 1c 01 00       	push   $0x11c9e
   10bc2:	ff 75 08             	push   0x8(%ebp)
   10bc5:	e8 40 fe ff ff       	call   10a0a <do_default_handler>
   10bca:	83 c4 10             	add    $0x10,%esp
}
   10bcd:	90                   	nop
   10bce:	c9                   	leave
   10bcf:	c3                   	ret

00010bd0 <do_handler_page_fault>:
{
   10bd0:	55                   	push   %ebp
   10bd1:	89 e5                	mov    %esp,%ebp
   10bd3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10bd6:	83 ec 08             	sub    $0x8,%esp
   10bd9:	68 b2 1c 01 00       	push   $0x11cb2
   10bde:	ff 75 08             	push   0x8(%ebp)
   10be1:	e8 24 fe ff ff       	call   10a0a <do_default_handler>
   10be6:	83 c4 10             	add    $0x10,%esp
}
   10be9:	90                   	nop
   10bea:	c9                   	leave
   10beb:	c3                   	ret

00010bec <do_handler_fpu_error>:
{
   10bec:	55                   	push   %ebp
   10bed:	89 e5                	mov    %esp,%ebp
   10bef:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10bf2:	83 ec 08             	sub    $0x8,%esp
   10bf5:	68 be 1c 01 00       	push   $0x11cbe
   10bfa:	ff 75 08             	push   0x8(%ebp)
   10bfd:	e8 08 fe ff ff       	call   10a0a <do_default_handler>
   10c02:	83 c4 10             	add    $0x10,%esp
}
   10c05:	90                   	nop
   10c06:	c9                   	leave
   10c07:	c3                   	ret

00010c08 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   10c08:	55                   	push   %ebp
   10c09:	89 e5                	mov    %esp,%ebp
   10c0b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10c0e:	83 ec 08             	sub    $0x8,%esp
   10c11:	68 dc 1c 01 00       	push   $0x11cdc
   10c16:	ff 75 08             	push   0x8(%ebp)
   10c19:	e8 ec fd ff ff       	call   10a0a <do_default_handler>
   10c1e:	83 c4 10             	add    $0x10,%esp
}
   10c21:	90                   	nop
   10c22:	c9                   	leave
   10c23:	c3                   	ret

00010c24 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   10c24:	55                   	push   %ebp
   10c25:	89 e5                	mov    %esp,%ebp
   10c27:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   10c2a:	83 ec 08             	sub    $0x8,%esp
   10c2d:	68 ed 1c 01 00       	push   $0x11ced
   10c32:	ff 75 08             	push   0x8(%ebp)
   10c35:	e8 d0 fd ff ff       	call   10a0a <do_default_handler>
   10c3a:	83 c4 10             	add    $0x10,%esp
}
   10c3d:	90                   	nop
   10c3e:	c9                   	leave
   10c3f:	c3                   	ret

00010c40 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   10c40:	55                   	push   %ebp
   10c41:	89 e5                	mov    %esp,%ebp
   10c43:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   10c46:	83 ec 08             	sub    $0x8,%esp
   10c49:	68 fc 1c 01 00       	push   $0x11cfc
   10c4e:	ff 75 08             	push   0x8(%ebp)
   10c51:	e8 b4 fd ff ff       	call   10a0a <do_default_handler>
   10c56:	83 c4 10             	add    $0x10,%esp
}
   10c59:	90                   	nop
   10c5a:	c9                   	leave
   10c5b:	c3                   	ret

00010c5c <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   10c5c:	55                   	push   %ebp
   10c5d:	89 e5                	mov    %esp,%ebp
   10c5f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   10c62:	83 ec 08             	sub    $0x8,%esp
   10c65:	68 1b 1d 01 00       	push   $0x11d1b
   10c6a:	ff 75 08             	push   0x8(%ebp)
   10c6d:	e8 98 fd ff ff       	call   10a0a <do_default_handler>
   10c72:	83 c4 10             	add    $0x10,%esp
}
   10c75:	90                   	nop
   10c76:	c9                   	leave
   10c77:	c3                   	ret

00010c78 <init_pic>:

static void init_pic(void)
{
   10c78:	55                   	push   %ebp
   10c79:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10c7b:	6a 11                	push   $0x11
   10c7d:	6a 20                	push   $0x20
   10c7f:	e8 36 fc ff ff       	call   108ba <outb>
   10c84:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10c87:	6a 20                	push   $0x20
   10c89:	6a 21                	push   $0x21
   10c8b:	e8 2a fc ff ff       	call   108ba <outb>
   10c90:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10c93:	6a 04                	push   $0x4
   10c95:	6a 21                	push   $0x21
   10c97:	e8 1e fc ff ff       	call   108ba <outb>
   10c9c:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10c9f:	6a 01                	push   $0x1
   10ca1:	6a 21                	push   $0x21
   10ca3:	e8 12 fc ff ff       	call   108ba <outb>
   10ca8:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10cab:	6a 11                	push   $0x11
   10cad:	68 a0 00 00 00       	push   $0xa0
   10cb2:	e8 03 fc ff ff       	call   108ba <outb>
   10cb7:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10cba:	6a 28                	push   $0x28
   10cbc:	68 a1 00 00 00       	push   $0xa1
   10cc1:	e8 f4 fb ff ff       	call   108ba <outb>
   10cc6:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10cc9:	6a 02                	push   $0x2
   10ccb:	68 a1 00 00 00       	push   $0xa1
   10cd0:	e8 e5 fb ff ff       	call   108ba <outb>
   10cd5:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10cd8:	6a 01                	push   $0x1
   10cda:	68 a1 00 00 00       	push   $0xa1
   10cdf:	e8 d6 fb ff ff       	call   108ba <outb>
   10ce4:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10ce7:	68 fb 00 00 00       	push   $0xfb
   10cec:	6a 21                	push   $0x21
   10cee:	e8 c7 fb ff ff       	call   108ba <outb>
   10cf3:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   10cf6:	68 ff 00 00 00       	push   $0xff
   10cfb:	68 a1 00 00 00       	push   $0xa1
   10d00:	e8 b5 fb ff ff       	call   108ba <outb>
   10d05:	83 c4 08             	add    $0x8,%esp
}
   10d08:	90                   	nop
   10d09:	c9                   	leave
   10d0a:	c3                   	ret

00010d0b <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   10d0b:	55                   	push   %ebp
   10d0c:	89 e5                	mov    %esp,%ebp
   10d0e:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10d11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10d18:	eb 25                	jmp    10d3f <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10d1a:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10d1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d22:	c1 e0 03             	shl    $0x3,%eax
   10d25:	05 c0 26 01 00       	add    $0x126c0,%eax
   10d2a:	68 00 8e 00 00       	push   $0x8e00
   10d2f:	52                   	push   %edx
   10d30:	6a 08                	push   $0x8
   10d32:	50                   	push   %eax
   10d33:	e8 bb fa ff ff       	call   107f3 <gate_desc_set>
   10d38:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10d3b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10d3f:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10d43:	7e d5                	jle    10d1a <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10d45:	83 ec 08             	sub    $0x8,%esp
   10d48:	68 4a 00 01 00       	push   $0x1004a
   10d4d:	6a 00                	push   $0x0
   10d4f:	e8 65 01 00 00       	call   10eb9 <irq_install>
   10d54:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10d57:	83 ec 08             	sub    $0x8,%esp
   10d5a:	68 69 00 01 00       	push   $0x10069
   10d5f:	6a 01                	push   $0x1
   10d61:	e8 53 01 00 00       	call   10eb9 <irq_install>
   10d66:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10d69:	83 ec 08             	sub    $0x8,%esp
   10d6c:	68 88 00 01 00       	push   $0x10088
   10d71:	6a 02                	push   $0x2
   10d73:	e8 41 01 00 00       	call   10eb9 <irq_install>
   10d78:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10d7b:	83 ec 08             	sub    $0x8,%esp
   10d7e:	68 a7 00 01 00       	push   $0x100a7
   10d83:	6a 03                	push   $0x3
   10d85:	e8 2f 01 00 00       	call   10eb9 <irq_install>
   10d8a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10d8d:	83 ec 08             	sub    $0x8,%esp
   10d90:	68 c6 00 01 00       	push   $0x100c6
   10d95:	6a 04                	push   $0x4
   10d97:	e8 1d 01 00 00       	call   10eb9 <irq_install>
   10d9c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10d9f:	83 ec 08             	sub    $0x8,%esp
   10da2:	68 e5 00 01 00       	push   $0x100e5
   10da7:	6a 05                	push   $0x5
   10da9:	e8 0b 01 00 00       	call   10eb9 <irq_install>
   10dae:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10db1:	83 ec 08             	sub    $0x8,%esp
   10db4:	68 04 01 01 00       	push   $0x10104
   10db9:	6a 06                	push   $0x6
   10dbb:	e8 f9 00 00 00       	call   10eb9 <irq_install>
   10dc0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10dc3:	83 ec 08             	sub    $0x8,%esp
   10dc6:	68 23 01 01 00       	push   $0x10123
   10dcb:	6a 07                	push   $0x7
   10dcd:	e8 e7 00 00 00       	call   10eb9 <irq_install>
   10dd2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10dd5:	83 ec 08             	sub    $0x8,%esp
   10dd8:	68 42 01 01 00       	push   $0x10142
   10ddd:	6a 08                	push   $0x8
   10ddf:	e8 d5 00 00 00       	call   10eb9 <irq_install>
   10de4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   10de7:	83 ec 08             	sub    $0x8,%esp
   10dea:	68 5f 01 01 00       	push   $0x1015f
   10def:	6a 0a                	push   $0xa
   10df1:	e8 c3 00 00 00       	call   10eb9 <irq_install>
   10df6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   10df9:	83 ec 08             	sub    $0x8,%esp
   10dfc:	68 7c 01 01 00       	push   $0x1017c
   10e01:	6a 0b                	push   $0xb
   10e03:	e8 b1 00 00 00       	call   10eb9 <irq_install>
   10e08:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   10e0b:	83 ec 08             	sub    $0x8,%esp
   10e0e:	68 99 01 01 00       	push   $0x10199
   10e13:	6a 0c                	push   $0xc
   10e15:	e8 9f 00 00 00       	call   10eb9 <irq_install>
   10e1a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   10e1d:	83 ec 08             	sub    $0x8,%esp
   10e20:	68 b6 01 01 00       	push   $0x101b6
   10e25:	6a 0d                	push   $0xd
   10e27:	e8 8d 00 00 00       	call   10eb9 <irq_install>
   10e2c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   10e2f:	83 ec 08             	sub    $0x8,%esp
   10e32:	68 d3 01 01 00       	push   $0x101d3
   10e37:	6a 0e                	push   $0xe
   10e39:	e8 7b 00 00 00       	call   10eb9 <irq_install>
   10e3e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   10e41:	83 ec 08             	sub    $0x8,%esp
   10e44:	68 f0 01 01 00       	push   $0x101f0
   10e49:	6a 10                	push   $0x10
   10e4b:	e8 69 00 00 00       	call   10eb9 <irq_install>
   10e50:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   10e53:	83 ec 08             	sub    $0x8,%esp
   10e56:	68 0f 02 01 00       	push   $0x1020f
   10e5b:	6a 11                	push   $0x11
   10e5d:	e8 57 00 00 00       	call   10eb9 <irq_install>
   10e62:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   10e65:	83 ec 08             	sub    $0x8,%esp
   10e68:	68 2c 02 01 00       	push   $0x1022c
   10e6d:	6a 12                	push   $0x12
   10e6f:	e8 45 00 00 00       	call   10eb9 <irq_install>
   10e74:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   10e77:	83 ec 08             	sub    $0x8,%esp
   10e7a:	68 4b 02 01 00       	push   $0x1024b
   10e7f:	6a 13                	push   $0x13
   10e81:	e8 33 00 00 00       	call   10eb9 <irq_install>
   10e86:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   10e89:	83 ec 08             	sub    $0x8,%esp
   10e8c:	68 6a 02 01 00       	push   $0x1026a
   10e91:	6a 14                	push   $0x14
   10e93:	e8 21 00 00 00       	call   10eb9 <irq_install>
   10e98:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10e9b:	b8 c0 26 01 00       	mov    $0x126c0,%eax
   10ea0:	83 ec 08             	sub    $0x8,%esp
   10ea3:	68 00 04 00 00       	push   $0x400
   10ea8:	50                   	push   %eax
   10ea9:	e8 39 fa ff ff       	call   108e7 <lidt>
   10eae:	83 c4 10             	add    $0x10,%esp

    init_pic();
   10eb1:	e8 c2 fd ff ff       	call   10c78 <init_pic>
}
   10eb6:	90                   	nop
   10eb7:	c9                   	leave
   10eb8:	c3                   	ret

00010eb9 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   10eb9:	55                   	push   %ebp
   10eba:	89 e5                	mov    %esp,%ebp
   10ebc:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   10ebf:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10ec3:	7e 07                	jle    10ecc <irq_install+0x13>
    {
        return -1;
   10ec5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10eca:	eb 20                	jmp    10eec <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10ecc:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ecf:	8b 55 08             	mov    0x8(%ebp),%edx
   10ed2:	c1 e2 03             	shl    $0x3,%edx
   10ed5:	81 c2 c0 26 01 00    	add    $0x126c0,%edx
   10edb:	68 00 8e 00 00       	push   $0x8e00
   10ee0:	50                   	push   %eax
   10ee1:	6a 08                	push   $0x8
   10ee3:	52                   	push   %edx
   10ee4:	e8 0a f9 ff ff       	call   107f3 <gate_desc_set>
   10ee9:	83 c4 10             	add    $0x10,%esp
}
   10eec:	c9                   	leave
   10eed:	c3                   	ret

00010eee <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   10eee:	55                   	push   %ebp
   10eef:	89 e5                	mov    %esp,%ebp
   10ef1:	53                   	push   %ebx
   10ef2:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10ef5:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ef9:	7e 78                	jle    10f73 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10efb:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10eff:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f03:	7f 32                	jg     10f37 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10f05:	6a 21                	push   $0x21
   10f07:	e8 91 f9 ff ff       	call   1089d <inb>
   10f0c:	83 c4 04             	add    $0x4,%esp
   10f0f:	89 c3                	mov    %eax,%ebx
   10f11:	8b 45 08             	mov    0x8(%ebp),%eax
   10f14:	ba 01 00 00 00       	mov    $0x1,%edx
   10f19:	89 c1                	mov    %eax,%ecx
   10f1b:	d3 e2                	shl    %cl,%edx
   10f1d:	89 d0                	mov    %edx,%eax
   10f1f:	f7 d0                	not    %eax
   10f21:	21 d8                	and    %ebx,%eax
   10f23:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10f26:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10f2a:	50                   	push   %eax
   10f2b:	6a 21                	push   $0x21
   10f2d:	e8 88 f9 ff ff       	call   108ba <outb>
   10f32:	83 c4 08             	add    $0x8,%esp
   10f35:	eb 3d                	jmp    10f74 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   10f37:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10f3b:	68 a1 00 00 00       	push   $0xa1
   10f40:	e8 58 f9 ff ff       	call   1089d <inb>
   10f45:	83 c4 04             	add    $0x4,%esp
   10f48:	89 c3                	mov    %eax,%ebx
   10f4a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4d:	ba 01 00 00 00       	mov    $0x1,%edx
   10f52:	89 c1                	mov    %eax,%ecx
   10f54:	d3 e2                	shl    %cl,%edx
   10f56:	89 d0                	mov    %edx,%eax
   10f58:	f7 d0                	not    %eax
   10f5a:	21 d8                	and    %ebx,%eax
   10f5c:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10f5f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10f63:	50                   	push   %eax
   10f64:	68 a1 00 00 00       	push   $0xa1
   10f69:	e8 4c f9 ff ff       	call   108ba <outb>
   10f6e:	83 c4 08             	add    $0x8,%esp
   10f71:	eb 01                	jmp    10f74 <irq_enable+0x86>
        return;
   10f73:	90                   	nop
    }
}
   10f74:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f77:	c9                   	leave
   10f78:	c3                   	ret

00010f79 <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   10f79:	55                   	push   %ebp
   10f7a:	89 e5                	mov    %esp,%ebp
   10f7c:	53                   	push   %ebx
   10f7d:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10f80:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10f84:	7e 74                	jle    10ffa <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10f86:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10f8a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f8e:	7f 30                	jg     10fc0 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10f90:	6a 21                	push   $0x21
   10f92:	e8 06 f9 ff ff       	call   1089d <inb>
   10f97:	83 c4 04             	add    $0x4,%esp
   10f9a:	89 c3                	mov    %eax,%ebx
   10f9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9f:	ba 01 00 00 00       	mov    $0x1,%edx
   10fa4:	89 c1                	mov    %eax,%ecx
   10fa6:	d3 e2                	shl    %cl,%edx
   10fa8:	89 d0                	mov    %edx,%eax
   10faa:	09 d8                	or     %ebx,%eax
   10fac:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10faf:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10fb3:	50                   	push   %eax
   10fb4:	6a 21                	push   $0x21
   10fb6:	e8 ff f8 ff ff       	call   108ba <outb>
   10fbb:	83 c4 08             	add    $0x8,%esp
   10fbe:	eb 3b                	jmp    10ffb <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   10fc0:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10fc4:	68 a1 00 00 00       	push   $0xa1
   10fc9:	e8 cf f8 ff ff       	call   1089d <inb>
   10fce:	83 c4 04             	add    $0x4,%esp
   10fd1:	89 c3                	mov    %eax,%ebx
   10fd3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd6:	ba 01 00 00 00       	mov    $0x1,%edx
   10fdb:	89 c1                	mov    %eax,%ecx
   10fdd:	d3 e2                	shl    %cl,%edx
   10fdf:	89 d0                	mov    %edx,%eax
   10fe1:	09 d8                	or     %ebx,%eax
   10fe3:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10fe6:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10fea:	50                   	push   %eax
   10feb:	68 a1 00 00 00       	push   $0xa1
   10ff0:	e8 c5 f8 ff ff       	call   108ba <outb>
   10ff5:	83 c4 08             	add    $0x8,%esp
   10ff8:	eb 01                	jmp    10ffb <irq_disable+0x82>
        return;
   10ffa:	90                   	nop
    }
}
   10ffb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ffe:	c9                   	leave
   10fff:	c3                   	ret

00011000 <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   11000:	55                   	push   %ebp
   11001:	89 e5                	mov    %esp,%ebp
    cli();
   11003:	e8 d1 f8 ff ff       	call   108d9 <cli>
}
   11008:	90                   	nop
   11009:	5d                   	pop    %ebp
   1100a:	c3                   	ret

0001100b <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   1100b:	55                   	push   %ebp
   1100c:	89 e5                	mov    %esp,%ebp
    sti();
   1100e:	e8 cd f8 ff ff       	call   108e0 <sti>
}
   11013:	90                   	nop
   11014:	5d                   	pop    %ebp
   11015:	c3                   	ret

00011016 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   11016:	55                   	push   %ebp
   11017:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11019:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   1101d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11021:	7e 0f                	jle    11032 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11023:	6a 20                	push   $0x20
   11025:	68 a0 00 00 00       	push   $0xa0
   1102a:	e8 8b f8 ff ff       	call   108ba <outb>
   1102f:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11032:	6a 20                	push   $0x20
   11034:	6a 20                	push   $0x20
   11036:	e8 7f f8 ff ff       	call   108ba <outb>
   1103b:	83 c4 08             	add    $0x8,%esp
}
   1103e:	90                   	nop
   1103f:	c9                   	leave
   11040:	c3                   	ret

00011041 <irq_enter_protection>:

// 进入临界区保护执行关中断
irq_state_t irq_enter_protection(void)
{
   11041:	55                   	push   %ebp
   11042:	89 e5                	mov    %esp,%ebp
   11044:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11047:	e8 ca f8 ff ff       	call   10916 <read_eflags>
   1104c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   1104f:	e8 ac ff ff ff       	call   11000 <irq_disable_global>
    return state;
   11054:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11057:	c9                   	leave
   11058:	c3                   	ret

00011059 <irq_leave_protection>:
// 退出临界区保护执行开中断
void irq_leave_protection(irq_state_t state)
{
   11059:	55                   	push   %ebp
   1105a:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   1105c:	ff 75 08             	push   0x8(%ebp)
   1105f:	e8 c2 f8 ff ff       	call   10926 <write_eflags>
   11064:	83 c4 04             	add    $0x4,%esp
   11067:	90                   	nop
   11068:	c9                   	leave
   11069:	c3                   	ret

0001106a <outb>:
}

void init_time(void)
{
    sys_tick = 0;
    init_pit();
   1106a:	55                   	push   %ebp
   1106b:	89 e5                	mov    %esp,%ebp
   1106d:	83 ec 08             	sub    $0x8,%esp
   11070:	8b 55 08             	mov    0x8(%ebp),%edx
   11073:	8b 45 0c             	mov    0xc(%ebp),%eax
   11076:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1107a:	88 45 f8             	mov    %al,-0x8(%ebp)
   1107d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11081:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11085:	ee                   	out    %al,(%dx)
   11086:	90                   	nop
   11087:	c9                   	leave
   11088:	c3                   	ret

00011089 <do_handler_time>:
{
   11089:	55                   	push   %ebp
   1108a:	89 e5                	mov    %esp,%ebp
   1108c:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   1108f:	a1 c0 2a 01 00       	mov    0x12ac0,%eax
   11094:	83 c0 01             	add    $0x1,%eax
   11097:	a3 c0 2a 01 00       	mov    %eax,0x12ac0
    pic_send_eoi(IRQ0_TIMER);
   1109c:	83 ec 0c             	sub    $0xc,%esp
   1109f:	6a 20                	push   $0x20
   110a1:	e8 70 ff ff ff       	call   11016 <pic_send_eoi>
   110a6:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   110a9:	e8 bc f5 ff ff       	call   1066a <task_time_tick>
}
   110ae:	90                   	nop
   110af:	c9                   	leave
   110b0:	c3                   	ret

000110b1 <init_pit>:
{
   110b1:	55                   	push   %ebp
   110b2:	89 e5                	mov    %esp,%ebp
   110b4:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   110b7:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   110be:	6a 36                	push   $0x36
   110c0:	6a 43                	push   $0x43
   110c2:	e8 a3 ff ff ff       	call   1106a <outb>
   110c7:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   110ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110cd:	0f b6 c0             	movzbl %al,%eax
   110d0:	50                   	push   %eax
   110d1:	6a 40                	push   $0x40
   110d3:	e8 92 ff ff ff       	call   1106a <outb>
   110d8:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   110db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110de:	c1 e8 08             	shr    $0x8,%eax
   110e1:	0f b6 c0             	movzbl %al,%eax
   110e4:	50                   	push   %eax
   110e5:	6a 40                	push   $0x40
   110e7:	e8 7e ff ff ff       	call   1106a <outb>
   110ec:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   110ef:	83 ec 08             	sub    $0x8,%esp
   110f2:	68 89 02 01 00       	push   $0x10289
   110f7:	6a 20                	push   $0x20
   110f9:	e8 bb fd ff ff       	call   10eb9 <irq_install>
   110fe:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   11101:	83 ec 0c             	sub    $0xc,%esp
   11104:	6a 20                	push   $0x20
   11106:	e8 e3 fd ff ff       	call   10eee <irq_enable>
   1110b:	83 c4 10             	add    $0x10,%esp
}
   1110e:	90                   	nop
   1110f:	c9                   	leave
   11110:	c3                   	ret

00011111 <init_time>:
{
   11111:	55                   	push   %ebp
   11112:	89 e5                	mov    %esp,%ebp
   11114:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11117:	c7 05 c0 2a 01 00 00 	movl   $0x0,0x12ac0
   1111e:	00 00 00 
    init_pit();
   11121:	e8 8b ff ff ff       	call   110b1 <init_pit>
   11126:	90                   	nop
   11127:	c9                   	leave
   11128:	c3                   	ret

00011129 <kernel_init>:

/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   11129:	55                   	push   %ebp
   1112a:	89 e5                	mov    %esp,%ebp
   1112c:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   1112f:	e8 5e f7 ff ff       	call   10892 <cpu_init>

    init_log(); // 初始化打印函数
   11134:	e8 db 07 00 00       	call   11914 <init_log>
    irq_init();
   11139:	e8 cd fb ff ff       	call   10d0b <irq_init>
    // 初始化定时器
    init_time();
   1113e:	e8 ce ff ff ff       	call   11111 <init_time>

    // 初始化任务管理
    task_manager_init();
   11143:	e8 9d f3 ff ff       	call   104e5 <task_manager_init>
}
   11148:	90                   	nop
   11149:	c9                   	leave
   1114a:	c3                   	ret

0001114b <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;
void init_task_entry(void)
{
   1114b:	55                   	push   %ebp
   1114c:	89 e5                	mov    %esp,%ebp
   1114e:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11151:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_task_entry: %d", count++);
   11158:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1115b:	8d 50 01             	lea    0x1(%eax),%edx
   1115e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11161:	83 ec 08             	sub    $0x8,%esp
   11164:	50                   	push   %eax
   11165:	68 35 1d 01 00       	push   $0x11d35
   1116a:	e8 17 08 00 00       	call   11986 <log_prinf>
   1116f:	83 c4 10             	add    $0x10,%esp
   11172:	eb e4                	jmp    11158 <init_task_entry+0xd>

00011174 <init_main>:
    }
}

void init_main(void)
{
   11174:	55                   	push   %ebp
   11175:	89 e5                	mov    %esp,%ebp
   11177:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   1117a:	83 ec 0c             	sub    $0xc,%esp
   1117d:	68 49 1d 01 00       	push   $0x11d49
   11182:	e8 ff 07 00 00       	call   11986 <log_prinf>
   11187:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   1118a:	83 ec 08             	sub    $0x8,%esp
   1118d:	68 57 1d 01 00       	push   $0x11d57
   11192:	68 5d 1d 01 00       	push   $0x11d5d
   11197:	e8 ea 07 00 00       	call   11986 <log_prinf>
   1119c:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   1119f:	83 ec 0c             	sub    $0xc,%esp
   111a2:	6a 63                	push   $0x63
   111a4:	6a 30                	push   $0x30
   111a6:	6a 14                	push   $0x14
   111a8:	6a f6                	push   $0xfffffff6
   111aa:	68 68 1d 01 00       	push   $0x11d68
   111af:	e8 d2 07 00 00       	call   11986 <log_prinf>
   111b4:	83 c4 20             	add    $0x20,%esp
    irq_enable_global(); // 暂时先关掉定时中断
   111b7:	e8 4f fe ff ff       	call   1100b <irq_enable_global>

    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   111bc:	ba e0 3a 01 00       	mov    $0x13ae0,%edx
   111c1:	b8 4b 11 01 00       	mov    $0x1114b,%eax
   111c6:	52                   	push   %edx
   111c7:	50                   	push   %eax
   111c8:	68 74 1d 01 00       	push   $0x11d74
   111cd:	68 e0 3a 01 00       	push   $0x13ae0
   111d2:	e8 31 f2 ff ff       	call   10408 <task_init>
   111d7:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   111da:	e8 39 f3 ff ff       	call   10518 <task_first_init>
    int count = 0;
   111df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_main: %d", count++);
   111e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111e9:	8d 50 01             	lea    0x1(%eax),%edx
   111ec:	89 55 f4             	mov    %edx,-0xc(%ebp)
   111ef:	83 ec 08             	sub    $0x8,%esp
   111f2:	50                   	push   %eax
   111f3:	68 7e 1d 01 00       	push   $0x11d7e
   111f8:	e8 89 07 00 00       	call   11986 <log_prinf>
   111fd:	83 c4 10             	add    $0x10,%esp
   11200:	eb e4                	jmp    111e6 <init_main+0x72>

00011202 <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   11202:	55                   	push   %ebp
   11203:	89 e5                	mov    %esp,%ebp
}
   11205:	f4                   	hlt

   11206:	90                   	nop
   11207:	5d                   	pop    %ebp
   11208:	c3                   	ret

00011209 <kernel_strcpy>:
{
   11209:	55                   	push   %ebp
   1120a:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   1120c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11210:	74 3b                	je     1124d <kernel_strcpy+0x44>
   11212:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11216:	74 35                	je     1124d <kernel_strcpy+0x44>
    while (*dest && *src)
   11218:	eb 17                	jmp    11231 <kernel_strcpy+0x28>
        *dest++ = *src++;
   1121a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1121d:	8d 42 01             	lea    0x1(%edx),%eax
   11220:	89 45 0c             	mov    %eax,0xc(%ebp)
   11223:	8b 45 08             	mov    0x8(%ebp),%eax
   11226:	8d 48 01             	lea    0x1(%eax),%ecx
   11229:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1122c:	0f b6 12             	movzbl (%edx),%edx
   1122f:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   11231:	8b 45 08             	mov    0x8(%ebp),%eax
   11234:	0f b6 00             	movzbl (%eax),%eax
   11237:	84 c0                	test   %al,%al
   11239:	74 0a                	je     11245 <kernel_strcpy+0x3c>
   1123b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1123e:	0f b6 00             	movzbl (%eax),%eax
   11241:	84 c0                	test   %al,%al
   11243:	75 d5                	jne    1121a <kernel_strcpy+0x11>
    *dest = '\0';
   11245:	8b 45 08             	mov    0x8(%ebp),%eax
   11248:	c6 00 00             	movb   $0x0,(%eax)
   1124b:	eb 01                	jmp    1124e <kernel_strcpy+0x45>
        return;
   1124d:	90                   	nop
}
   1124e:	5d                   	pop    %ebp
   1124f:	c3                   	ret

00011250 <kernel_strncpy>:
{
   11250:	55                   	push   %ebp
   11251:	89 e5                	mov    %esp,%ebp
   11253:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11256:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1125a:	74 61                	je     112bd <kernel_strncpy+0x6d>
   1125c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11260:	74 5b                	je     112bd <kernel_strncpy+0x6d>
   11262:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11266:	74 55                	je     112bd <kernel_strncpy+0x6d>
    char *d = dest;
   11268:	8b 45 08             	mov    0x8(%ebp),%eax
   1126b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   1126e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11271:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   11274:	eb 17                	jmp    1128d <kernel_strncpy+0x3d>
        *d++ = *s++;
   11276:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11279:	8d 42 01             	lea    0x1(%edx),%eax
   1127c:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1127f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11282:	8d 48 01             	lea    0x1(%eax),%ecx
   11285:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11288:	0f b6 12             	movzbl (%edx),%edx
   1128b:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   1128d:	8b 45 10             	mov    0x10(%ebp),%eax
   11290:	8d 50 ff             	lea    -0x1(%eax),%edx
   11293:	89 55 10             	mov    %edx,0x10(%ebp)
   11296:	85 c0                	test   %eax,%eax
   11298:	7e 0a                	jle    112a4 <kernel_strncpy+0x54>
   1129a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1129d:	0f b6 00             	movzbl (%eax),%eax
   112a0:	84 c0                	test   %al,%al
   112a2:	75 d2                	jne    11276 <kernel_strncpy+0x26>
    if (size == 0)
   112a4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112a8:	75 0b                	jne    112b5 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   112aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112ad:	83 e8 01             	sub    $0x1,%eax
   112b0:	c6 00 00             	movb   $0x0,(%eax)
   112b3:	eb 09                	jmp    112be <kernel_strncpy+0x6e>
        *d = '\0';
   112b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112b8:	c6 00 00             	movb   $0x0,(%eax)
   112bb:	eb 01                	jmp    112be <kernel_strncpy+0x6e>
        return;
   112bd:	90                   	nop
}
   112be:	c9                   	leave
   112bf:	c3                   	ret

000112c0 <kernel_strncmp>:
{
   112c0:	55                   	push   %ebp
   112c1:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   112c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112c7:	74 0c                	je     112d5 <kernel_strncmp+0x15>
   112c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112cd:	74 06                	je     112d5 <kernel_strncmp+0x15>
   112cf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112d3:	75 0f                	jne    112e4 <kernel_strncmp+0x24>
        return -1;
   112d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   112da:	eb 62                	jmp    1133e <kernel_strncmp+0x7e>
        s1++;
   112dc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   112e0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   112e4:	8b 45 08             	mov    0x8(%ebp),%eax
   112e7:	0f b6 00             	movzbl (%eax),%eax
   112ea:	84 c0                	test   %al,%al
   112ec:	74 20                	je     1130e <kernel_strncmp+0x4e>
   112ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   112f1:	0f b6 00             	movzbl (%eax),%eax
   112f4:	84 c0                	test   %al,%al
   112f6:	74 16                	je     1130e <kernel_strncmp+0x4e>
   112f8:	8b 45 08             	mov    0x8(%ebp),%eax
   112fb:	0f b6 10             	movzbl (%eax),%edx
   112fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   11301:	0f b6 00             	movzbl (%eax),%eax
   11304:	38 c2                	cmp    %al,%dl
   11306:	75 06                	jne    1130e <kernel_strncmp+0x4e>
   11308:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1130c:	75 ce                	jne    112dc <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1130e:	8b 45 08             	mov    0x8(%ebp),%eax
   11311:	0f b6 00             	movzbl (%eax),%eax
   11314:	84 c0                	test   %al,%al
   11316:	74 21                	je     11339 <kernel_strncmp+0x79>
   11318:	8b 45 0c             	mov    0xc(%ebp),%eax
   1131b:	0f b6 00             	movzbl (%eax),%eax
   1131e:	84 c0                	test   %al,%al
   11320:	74 17                	je     11339 <kernel_strncmp+0x79>
   11322:	8b 45 08             	mov    0x8(%ebp),%eax
   11325:	0f b6 10             	movzbl (%eax),%edx
   11328:	8b 45 0c             	mov    0xc(%ebp),%eax
   1132b:	0f b6 00             	movzbl (%eax),%eax
   1132e:	38 c2                	cmp    %al,%dl
   11330:	74 07                	je     11339 <kernel_strncmp+0x79>
   11332:	b8 01 00 00 00       	mov    $0x1,%eax
   11337:	eb 05                	jmp    1133e <kernel_strncmp+0x7e>
   11339:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1133e:	5d                   	pop    %ebp
   1133f:	c3                   	ret

00011340 <kernel_strlen>:
{
   11340:	55                   	push   %ebp
   11341:	89 e5                	mov    %esp,%ebp
   11343:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   11346:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1134a:	75 07                	jne    11353 <kernel_strlen+0x13>
        return 0;
   1134c:	b8 00 00 00 00       	mov    $0x0,%eax
   11351:	eb 26                	jmp    11379 <kernel_strlen+0x39>
    const char *c = str;
   11353:	8b 45 08             	mov    0x8(%ebp),%eax
   11356:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11359:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   11360:	eb 04                	jmp    11366 <kernel_strlen+0x26>
        len++;
   11362:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   11366:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11369:	8d 50 01             	lea    0x1(%eax),%edx
   1136c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1136f:	0f b6 00             	movzbl (%eax),%eax
   11372:	84 c0                	test   %al,%al
   11374:	75 ec                	jne    11362 <kernel_strlen+0x22>
    return len;
   11376:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11379:	c9                   	leave
   1137a:	c3                   	ret

0001137b <kernel_memcpy>:
{
   1137b:	55                   	push   %ebp
   1137c:	89 e5                	mov    %esp,%ebp
   1137e:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11381:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11385:	74 40                	je     113c7 <kernel_memcpy+0x4c>
   11387:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1138b:	74 3a                	je     113c7 <kernel_memcpy+0x4c>
   1138d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11391:	74 34                	je     113c7 <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   11393:	8b 45 0c             	mov    0xc(%ebp),%eax
   11396:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   11399:	8b 45 08             	mov    0x8(%ebp),%eax
   1139c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   1139f:	eb 17                	jmp    113b8 <kernel_memcpy+0x3d>
        *d++ = *s++;
   113a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
   113a4:	8d 42 01             	lea    0x1(%edx),%eax
   113a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
   113aa:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113ad:	8d 48 01             	lea    0x1(%eax),%ecx
   113b0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113b3:	0f b6 12             	movzbl (%edx),%edx
   113b6:	88 10                	mov    %dl,(%eax)
    while (size--)
   113b8:	8b 45 10             	mov    0x10(%ebp),%eax
   113bb:	8d 50 ff             	lea    -0x1(%eax),%edx
   113be:	89 55 10             	mov    %edx,0x10(%ebp)
   113c1:	85 c0                	test   %eax,%eax
   113c3:	75 dc                	jne    113a1 <kernel_memcpy+0x26>
   113c5:	eb 01                	jmp    113c8 <kernel_memcpy+0x4d>
        return;
   113c7:	90                   	nop
}
   113c8:	c9                   	leave
   113c9:	c3                   	ret

000113ca <kernel_memset>:
{
   113ca:	55                   	push   %ebp
   113cb:	89 e5                	mov    %esp,%ebp
   113cd:	83 ec 14             	sub    $0x14,%esp
   113d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   113d3:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   113d6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113da:	74 2c                	je     11408 <kernel_memset+0x3e>
   113dc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   113e0:	74 26                	je     11408 <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   113e2:	8b 45 08             	mov    0x8(%ebp),%eax
   113e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   113e8:	eb 0f                	jmp    113f9 <kernel_memset+0x2f>
        *d++ = v;
   113ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113ed:	8d 50 01             	lea    0x1(%eax),%edx
   113f0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   113f3:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   113f7:	88 10                	mov    %dl,(%eax)
    while (size--)
   113f9:	8b 45 10             	mov    0x10(%ebp),%eax
   113fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   113ff:	89 55 10             	mov    %edx,0x10(%ebp)
   11402:	85 c0                	test   %eax,%eax
   11404:	75 e4                	jne    113ea <kernel_memset+0x20>
   11406:	eb 01                	jmp    11409 <kernel_memset+0x3f>
        return;
   11408:	90                   	nop
}
   11409:	c9                   	leave
   1140a:	c3                   	ret

0001140b <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   1140b:	55                   	push   %ebp
   1140c:	89 e5                	mov    %esp,%ebp
   1140e:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   11411:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11415:	74 06                	je     1141d <kernel_memcmp+0x12>
   11417:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1141b:	75 07                	jne    11424 <kernel_memcmp+0x19>
    {
        return 1;
   1141d:	b8 01 00 00 00       	mov    $0x1,%eax
   11422:	eb 43                	jmp    11467 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   11424:	8b 45 08             	mov    0x8(%ebp),%eax
   11427:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   1142a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1142d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11430:	eb 23                	jmp    11455 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   11432:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11435:	8d 50 01             	lea    0x1(%eax),%edx
   11438:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1143b:	0f b6 08             	movzbl (%eax),%ecx
   1143e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11441:	8d 50 01             	lea    0x1(%eax),%edx
   11444:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11447:	0f b6 00             	movzbl (%eax),%eax
   1144a:	38 c1                	cmp    %al,%cl
   1144c:	74 07                	je     11455 <kernel_memcmp+0x4a>
        {
            return 1;
   1144e:	b8 01 00 00 00       	mov    $0x1,%eax
   11453:	eb 12                	jmp    11467 <kernel_memcmp+0x5c>
    while (size--)
   11455:	8b 45 10             	mov    0x10(%ebp),%eax
   11458:	8d 50 ff             	lea    -0x1(%eax),%edx
   1145b:	89 55 10             	mov    %edx,0x10(%ebp)
   1145e:	85 c0                	test   %eax,%eax
   11460:	75 d0                	jne    11432 <kernel_memcmp+0x27>
        }
    }
    return 0;
   11462:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11467:	c9                   	leave
   11468:	c3                   	ret

00011469 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   11469:	55                   	push   %ebp
   1146a:	89 e5                	mov    %esp,%ebp
   1146c:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   1146f:	8d 45 10             	lea    0x10(%ebp),%eax
   11472:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   11475:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11478:	83 ec 04             	sub    $0x4,%esp
   1147b:	50                   	push   %eax
   1147c:	ff 75 0c             	push   0xc(%ebp)
   1147f:	ff 75 08             	push   0x8(%ebp)
   11482:	e8 dd 00 00 00       	call   11564 <kernel_vsprintf>
   11487:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1148a:	90                   	nop
   1148b:	c9                   	leave
   1148c:	c3                   	ret

0001148d <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   1148d:	55                   	push   %ebp
   1148e:	89 e5                	mov    %esp,%ebp
   11490:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11493:	8b 45 08             	mov    0x8(%ebp),%eax
   11496:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   11499:	8b 45 0c             	mov    0xc(%ebp),%eax
   1149c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   1149f:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   114a3:	74 1d                	je     114c2 <kernel_itoa+0x35>
   114a5:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   114a9:	74 17                	je     114c2 <kernel_itoa+0x35>
   114ab:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   114af:	74 11                	je     114c2 <kernel_itoa+0x35>
   114b1:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   114b5:	74 0b                	je     114c2 <kernel_itoa+0x35>
    {
        *p = '\0';
   114b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114ba:	c6 00 00             	movb   $0x0,(%eax)
        return;
   114bd:	e9 a0 00 00 00       	jmp    11562 <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   114c2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114c6:	79 12                	jns    114da <kernel_itoa+0x4d>
   114c8:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   114cc:	75 0c                	jne    114da <kernel_itoa+0x4d>
    {
        *p++ = '-';
   114ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114d1:	8d 50 01             	lea    0x1(%eax),%edx
   114d4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114d7:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   114da:	8b 0d d8 1d 01 00    	mov    0x11dd8,%ecx
   114e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   114e3:	99                   	cltd
   114e4:	f7 7d 10             	idivl  0x10(%ebp)
   114e7:	89 d0                	mov    %edx,%eax
   114e9:	83 c0 0f             	add    $0xf,%eax
   114ec:	01 c8                	add    %ecx,%eax
   114ee:	0f b6 00             	movzbl (%eax),%eax
   114f1:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   114f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114f7:	8d 50 01             	lea    0x1(%eax),%edx
   114fa:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114fd:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   11501:	88 10                	mov    %dl,(%eax)
        num /= base;
   11503:	8b 45 0c             	mov    0xc(%ebp),%eax
   11506:	99                   	cltd
   11507:	f7 7d 10             	idivl  0x10(%ebp)
   1150a:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   1150d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11511:	75 c7                	jne    114da <kernel_itoa+0x4d>
    *p-- = '\0';
   11513:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11516:	8d 50 ff             	lea    -0x1(%eax),%edx
   11519:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1151c:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   1151f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11523:	7f 08                	jg     1152d <kernel_itoa+0xa0>
   11525:	8b 45 08             	mov    0x8(%ebp),%eax
   11528:	83 c0 01             	add    $0x1,%eax
   1152b:	eb 03                	jmp    11530 <kernel_itoa+0xa3>
   1152d:	8b 45 08             	mov    0x8(%ebp),%eax
   11530:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   11533:	eb 25                	jmp    1155a <kernel_itoa+0xcd>
    {
        char ch = *start;
   11535:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11538:	0f b6 00             	movzbl (%eax),%eax
   1153b:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1153e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11541:	0f b6 10             	movzbl (%eax),%edx
   11544:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11547:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11549:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1154c:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   11550:	88 10                	mov    %dl,(%eax)

        p--;
   11552:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11556:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   1155a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1155d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   11560:	72 d3                	jb     11535 <kernel_itoa+0xa8>
    }
}
   11562:	c9                   	leave
   11563:	c3                   	ret

00011564 <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   11564:	55                   	push   %ebp
   11565:	89 e5                	mov    %esp,%ebp
   11567:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   1156a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   11571:	8b 45 08             	mov    0x8(%ebp),%eax
   11574:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   11577:	e9 11 01 00 00       	jmp    1168d <kernel_vsprintf+0x129>
    {
        switch (state)
   1157c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11580:	74 0b                	je     1158d <kernel_vsprintf+0x29>
   11582:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   11586:	74 2b                	je     115b3 <kernel_vsprintf+0x4f>
   11588:	e9 00 01 00 00       	jmp    1168d <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   1158d:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11591:	75 0c                	jne    1159f <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   11593:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1159a:	e9 ee 00 00 00       	jmp    1168d <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   1159f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115a2:	8d 50 01             	lea    0x1(%eax),%edx
   115a5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   115a8:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   115ac:	88 10                	mov    %dl,(%eax)
            }
            break;
   115ae:	e9 da 00 00 00       	jmp    1168d <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   115b3:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   115b7:	75 31                	jne    115ea <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   115b9:	8b 45 10             	mov    0x10(%ebp),%eax
   115bc:	8d 50 04             	lea    0x4(%eax),%edx
   115bf:	89 55 10             	mov    %edx,0x10(%ebp)
   115c2:	8b 00                	mov    (%eax),%eax
   115c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   115c7:	6a 0a                	push   $0xa
   115c9:	ff 75 e4             	push   -0x1c(%ebp)
   115cc:	ff 75 f8             	push   -0x8(%ebp)
   115cf:	e8 b9 fe ff ff       	call   1148d <kernel_itoa>
   115d4:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   115d7:	ff 75 f8             	push   -0x8(%ebp)
   115da:	e8 61 fd ff ff       	call   11340 <kernel_strlen>
   115df:	83 c4 04             	add    $0x4,%esp
   115e2:	01 45 f8             	add    %eax,-0x8(%ebp)
   115e5:	e9 9b 00 00 00       	jmp    11685 <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   115ea:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   115ee:	75 2e                	jne    1161e <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   115f0:	8b 45 10             	mov    0x10(%ebp),%eax
   115f3:	8d 50 04             	lea    0x4(%eax),%edx
   115f6:	89 55 10             	mov    %edx,0x10(%ebp)
   115f9:	8b 00                	mov    (%eax),%eax
   115fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   115fe:	6a 10                	push   $0x10
   11600:	ff 75 e8             	push   -0x18(%ebp)
   11603:	ff 75 f8             	push   -0x8(%ebp)
   11606:	e8 82 fe ff ff       	call   1148d <kernel_itoa>
   1160b:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   1160e:	ff 75 f8             	push   -0x8(%ebp)
   11611:	e8 2a fd ff ff       	call   11340 <kernel_strlen>
   11616:	83 c4 04             	add    $0x4,%esp
   11619:	01 45 f8             	add    %eax,-0x8(%ebp)
   1161c:	eb 67                	jmp    11685 <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   1161e:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11622:	75 19                	jne    1163d <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   11624:	8b 45 10             	mov    0x10(%ebp),%eax
   11627:	8d 50 04             	lea    0x4(%eax),%edx
   1162a:	89 55 10             	mov    %edx,0x10(%ebp)
   1162d:	8b 00                	mov    (%eax),%eax
   1162f:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   11632:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11635:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11639:	88 10                	mov    %dl,(%eax)
   1163b:	eb 48                	jmp    11685 <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   1163d:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11641:	75 42                	jne    11685 <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   11643:	8b 45 10             	mov    0x10(%ebp),%eax
   11646:	8d 50 04             	lea    0x4(%eax),%edx
   11649:	89 55 10             	mov    %edx,0x10(%ebp)
   1164c:	8b 00                	mov    (%eax),%eax
   1164e:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   11651:	ff 75 f4             	push   -0xc(%ebp)
   11654:	e8 e7 fc ff ff       	call   11340 <kernel_strlen>
   11659:	83 c4 04             	add    $0x4,%esp
   1165c:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   1165f:	eb 17                	jmp    11678 <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   11661:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11664:	8d 42 01             	lea    0x1(%edx),%eax
   11667:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1166a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1166d:	8d 48 01             	lea    0x1(%eax),%ecx
   11670:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11673:	0f b6 12             	movzbl (%edx),%edx
   11676:	88 10                	mov    %dl,(%eax)
                while (len--)
   11678:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1167b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1167e:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11681:	85 c0                	test   %eax,%eax
   11683:	75 dc                	jne    11661 <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   11685:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   1168c:	90                   	nop
    while ((ch = *fmt++))
   1168d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11690:	8d 50 01             	lea    0x1(%eax),%edx
   11693:	89 55 0c             	mov    %edx,0xc(%ebp)
   11696:	0f b6 00             	movzbl (%eax),%eax
   11699:	88 45 ef             	mov    %al,-0x11(%ebp)
   1169c:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   116a0:	0f 85 d6 fe ff ff    	jne    1157c <kernel_vsprintf+0x18>
        }
    }
}
   116a6:	90                   	nop
   116a7:	90                   	nop
   116a8:	c9                   	leave
   116a9:	c3                   	ret

000116aa <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   116aa:	55                   	push   %ebp
   116ab:	89 e5                	mov    %esp,%ebp
   116ad:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   116b0:	83 ec 08             	sub    $0x8,%esp
   116b3:	ff 75 14             	push   0x14(%ebp)
   116b6:	68 8c 1d 01 00       	push   $0x11d8c
   116bb:	e8 c6 02 00 00       	call   11986 <log_prinf>
   116c0:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   116c3:	ff 75 10             	push   0x10(%ebp)
   116c6:	ff 75 0c             	push   0xc(%ebp)
   116c9:	ff 75 08             	push   0x8(%ebp)
   116cc:	68 9e 1d 01 00       	push   $0x11d9e
   116d1:	e8 b0 02 00 00       	call   11986 <log_prinf>
   116d6:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   116d9:	e8 24 fb ff ff       	call   11202 <hlt>
   116de:	eb f9                	jmp    116d9 <pannic+0x2f>

000116e0 <list_is_empty>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
    // 表项为空，返回空
   116e0:	55                   	push   %ebp
   116e1:	89 e5                	mov    %esp,%ebp
    if (list_is_empty(list)) {
   116e3:	8b 45 08             	mov    0x8(%ebp),%eax
   116e6:	8b 40 08             	mov    0x8(%eax),%eax
   116e9:	85 c0                	test   %eax,%eax
   116eb:	0f 94 c0             	sete   %al
   116ee:	0f b6 c0             	movzbl %al,%eax
        return (list_node_t*)0;
   116f1:	5d                   	pop    %ebp
   116f2:	c3                   	ret

000116f3 <list_init>:
void list_init(list_t *list) {
   116f3:	55                   	push   %ebp
   116f4:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   116f6:	8b 45 08             	mov    0x8(%ebp),%eax
   116f9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11700:	8b 45 08             	mov    0x8(%ebp),%eax
   11703:	8b 50 04             	mov    0x4(%eax),%edx
   11706:	8b 45 08             	mov    0x8(%ebp),%eax
   11709:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   1170b:	8b 45 08             	mov    0x8(%ebp),%eax
   1170e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11715:	90                   	nop
   11716:	5d                   	pop    %ebp
   11717:	c3                   	ret

00011718 <list_insert_first>:
void list_insert_first(list_t *list, list_node_t *node) {
   11718:	55                   	push   %ebp
   11719:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   1171b:	8b 45 08             	mov    0x8(%ebp),%eax
   1171e:	8b 10                	mov    (%eax),%edx
   11720:	8b 45 0c             	mov    0xc(%ebp),%eax
   11723:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   11726:	8b 45 0c             	mov    0xc(%ebp),%eax
   11729:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if (list_is_empty(list)) {
   1172f:	ff 75 08             	push   0x8(%ebp)
   11732:	e8 a9 ff ff ff       	call   116e0 <list_is_empty>
   11737:	83 c4 04             	add    $0x4,%esp
   1173a:	85 c0                	test   %eax,%eax
   1173c:	74 15                	je     11753 <list_insert_first+0x3b>
        list->last = list->first = node;
   1173e:	8b 45 08             	mov    0x8(%ebp),%eax
   11741:	8b 55 0c             	mov    0xc(%ebp),%edx
   11744:	89 10                	mov    %edx,(%eax)
   11746:	8b 45 08             	mov    0x8(%ebp),%eax
   11749:	8b 10                	mov    (%eax),%edx
   1174b:	8b 45 08             	mov    0x8(%ebp),%eax
   1174e:	89 50 04             	mov    %edx,0x4(%eax)
   11751:	eb 12                	jmp    11765 <list_insert_first+0x4d>
        list->first->pre = node;
   11753:	8b 45 08             	mov    0x8(%ebp),%eax
   11756:	8b 00                	mov    (%eax),%eax
   11758:	8b 55 0c             	mov    0xc(%ebp),%edx
   1175b:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1175d:	8b 45 08             	mov    0x8(%ebp),%eax
   11760:	8b 55 0c             	mov    0xc(%ebp),%edx
   11763:	89 10                	mov    %edx,(%eax)
    list->count++;
   11765:	8b 45 08             	mov    0x8(%ebp),%eax
   11768:	8b 40 08             	mov    0x8(%eax),%eax
   1176b:	8d 50 01             	lea    0x1(%eax),%edx
   1176e:	8b 45 08             	mov    0x8(%ebp),%eax
   11771:	89 50 08             	mov    %edx,0x8(%eax)
}
   11774:	90                   	nop
   11775:	c9                   	leave
   11776:	c3                   	ret

00011777 <list_insert_last>:
void list_insert_last(list_t *list, list_node_t *node) {
   11777:	55                   	push   %ebp
   11778:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1177a:	8b 45 08             	mov    0x8(%ebp),%eax
   1177d:	8b 50 04             	mov    0x4(%eax),%edx
   11780:	8b 45 0c             	mov    0xc(%ebp),%eax
   11783:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11785:	8b 45 0c             	mov    0xc(%ebp),%eax
   11788:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if (list_is_empty(list)) {
   1178f:	ff 75 08             	push   0x8(%ebp)
   11792:	e8 49 ff ff ff       	call   116e0 <list_is_empty>
   11797:	83 c4 04             	add    $0x4,%esp
   1179a:	85 c0                	test   %eax,%eax
   1179c:	74 16                	je     117b4 <list_insert_last+0x3d>
        list->first = list->last = node;
   1179e:	8b 45 08             	mov    0x8(%ebp),%eax
   117a1:	8b 55 0c             	mov    0xc(%ebp),%edx
   117a4:	89 50 04             	mov    %edx,0x4(%eax)
   117a7:	8b 45 08             	mov    0x8(%ebp),%eax
   117aa:	8b 50 04             	mov    0x4(%eax),%edx
   117ad:	8b 45 08             	mov    0x8(%ebp),%eax
   117b0:	89 10                	mov    %edx,(%eax)
   117b2:	eb 15                	jmp    117c9 <list_insert_last+0x52>
        list->last->next = node;
   117b4:	8b 45 08             	mov    0x8(%ebp),%eax
   117b7:	8b 40 04             	mov    0x4(%eax),%eax
   117ba:	8b 55 0c             	mov    0xc(%ebp),%edx
   117bd:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   117c0:	8b 45 08             	mov    0x8(%ebp),%eax
   117c3:	8b 55 0c             	mov    0xc(%ebp),%edx
   117c6:	89 50 04             	mov    %edx,0x4(%eax)
    list->count++;
   117c9:	8b 45 08             	mov    0x8(%ebp),%eax
   117cc:	8b 40 08             	mov    0x8(%eax),%eax
   117cf:	8d 50 01             	lea    0x1(%eax),%edx
   117d2:	8b 45 08             	mov    0x8(%ebp),%eax
   117d5:	89 50 08             	mov    %edx,0x8(%eax)
}
   117d8:	90                   	nop
   117d9:	c9                   	leave
   117da:	c3                   	ret

000117db <list_remove_first>:
list_node_t* list_remove_first(list_t *list) {
   117db:	55                   	push   %ebp
   117dc:	89 e5                	mov    %esp,%ebp
   117de:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   117e1:	ff 75 08             	push   0x8(%ebp)
   117e4:	e8 f7 fe ff ff       	call   116e0 <list_is_empty>
   117e9:	83 c4 04             	add    $0x4,%esp
   117ec:	85 c0                	test   %eax,%eax
   117ee:	74 07                	je     117f7 <list_remove_first+0x1c>
        return (list_node_t*)0;
   117f0:	b8 00 00 00 00       	mov    $0x0,%eax
   117f5:	eb 5a                	jmp    11851 <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   117f7:	8b 45 08             	mov    0x8(%ebp),%eax
   117fa:	8b 00                	mov    (%eax),%eax
   117fc:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   117ff:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11802:	8b 50 04             	mov    0x4(%eax),%edx
   11805:	8b 45 08             	mov    0x8(%ebp),%eax
   11808:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   1180a:	8b 45 08             	mov    0x8(%ebp),%eax
   1180d:	8b 00                	mov    (%eax),%eax
   1180f:	85 c0                	test   %eax,%eax
   11811:	75 0c                	jne    1181f <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   11813:	8b 45 08             	mov    0x8(%ebp),%eax
   11816:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1181d:	eb 0c                	jmp    1182b <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   1181f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11822:	8b 40 04             	mov    0x4(%eax),%eax
   11825:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   1182b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1182e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   11834:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11837:	8b 10                	mov    (%eax),%edx
   11839:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1183c:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   1183f:	8b 45 08             	mov    0x8(%ebp),%eax
   11842:	8b 40 08             	mov    0x8(%eax),%eax
   11845:	8d 50 ff             	lea    -0x1(%eax),%edx
   11848:	8b 45 08             	mov    0x8(%ebp),%eax
   1184b:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1184e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11851:	c9                   	leave
   11852:	c3                   	ret

00011853 <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   11853:	55                   	push   %ebp
   11854:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   11856:	8b 45 08             	mov    0x8(%ebp),%eax
   11859:	8b 00                	mov    (%eax),%eax
   1185b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1185e:	75 0b                	jne    1186b <list_remove+0x18>
        list->first = remove_node->next;
   11860:	8b 45 0c             	mov    0xc(%ebp),%eax
   11863:	8b 50 04             	mov    0x4(%eax),%edx
   11866:	8b 45 08             	mov    0x8(%ebp),%eax
   11869:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   1186b:	8b 45 08             	mov    0x8(%ebp),%eax
   1186e:	8b 40 04             	mov    0x4(%eax),%eax
   11871:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11874:	75 0b                	jne    11881 <list_remove+0x2e>
        list->last = remove_node->pre;
   11876:	8b 45 0c             	mov    0xc(%ebp),%eax
   11879:	8b 10                	mov    (%eax),%edx
   1187b:	8b 45 08             	mov    0x8(%ebp),%eax
   1187e:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   11881:	8b 45 0c             	mov    0xc(%ebp),%eax
   11884:	8b 00                	mov    (%eax),%eax
   11886:	85 c0                	test   %eax,%eax
   11888:	74 0e                	je     11898 <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   1188a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1188d:	8b 00                	mov    (%eax),%eax
   1188f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11892:	8b 52 04             	mov    0x4(%edx),%edx
   11895:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   11898:	8b 45 0c             	mov    0xc(%ebp),%eax
   1189b:	8b 40 04             	mov    0x4(%eax),%eax
   1189e:	85 c0                	test   %eax,%eax
   118a0:	74 0d                	je     118af <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   118a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   118a5:	8b 40 04             	mov    0x4(%eax),%eax
   118a8:	8b 55 0c             	mov    0xc(%ebp),%edx
   118ab:	8b 12                	mov    (%edx),%edx
   118ad:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   118af:	8b 45 0c             	mov    0xc(%ebp),%eax
   118b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   118b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   118bc:	8b 50 04             	mov    0x4(%eax),%edx
   118bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   118c2:	89 10                	mov    %edx,(%eax)
    --list->count;
   118c4:	8b 45 08             	mov    0x8(%ebp),%eax
   118c7:	8b 40 08             	mov    0x8(%eax),%eax
   118ca:	8d 50 ff             	lea    -0x1(%eax),%edx
   118cd:	8b 45 08             	mov    0x8(%ebp),%eax
   118d0:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   118d3:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   118d6:	5d                   	pop    %ebp
   118d7:	c3                   	ret

000118d8 <inb>:
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x80);
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
   118d8:	55                   	push   %ebp
   118d9:	89 e5                	mov    %esp,%ebp
   118db:	83 ec 14             	sub    $0x14,%esp
   118de:	8b 45 08             	mov    0x8(%ebp),%eax
   118e1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    outb(COM1_PORT + 4, 0x0F);
}
   118e5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   118e9:	89 c2                	mov    %eax,%edx
   118eb:	ec                   	in     (%dx),%al
   118ec:	88 45 ff             	mov    %al,-0x1(%ebp)

void log_prinf(const char *fmt, ...)
{
   118ef:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    char str_buf[128];
   118f3:	c9                   	leave
   118f4:	c3                   	ret

000118f5 <outb>:
    va_end(args);

    irq_state_t state = irq_enter_protection();
    const char *p = str_buf;
    while (*p != '\0')
    {
   118f5:	55                   	push   %ebp
   118f6:	89 e5                	mov    %esp,%ebp
   118f8:	83 ec 08             	sub    $0x8,%esp
   118fb:	8b 55 08             	mov    0x8(%ebp),%edx
   118fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   11901:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11905:	88 45 f8             	mov    %al,-0x8(%ebp)
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   11908:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1190c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11910:	ee                   	out    %al,(%dx)
            ;
   11911:	90                   	nop
   11912:	c9                   	leave
   11913:	c3                   	ret

00011914 <init_log>:
{
   11914:	55                   	push   %ebp
   11915:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11917:	6a 00                	push   $0x0
   11919:	68 f9 03 00 00       	push   $0x3f9
   1191e:	e8 d2 ff ff ff       	call   118f5 <outb>
   11923:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11926:	68 80 00 00 00       	push   $0x80
   1192b:	68 fb 03 00 00       	push   $0x3fb
   11930:	e8 c0 ff ff ff       	call   118f5 <outb>
   11935:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11938:	6a 03                	push   $0x3
   1193a:	68 f8 03 00 00       	push   $0x3f8
   1193f:	e8 b1 ff ff ff       	call   118f5 <outb>
   11944:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11947:	6a 00                	push   $0x0
   11949:	68 f9 03 00 00       	push   $0x3f9
   1194e:	e8 a2 ff ff ff       	call   118f5 <outb>
   11953:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11956:	6a 03                	push   $0x3
   11958:	68 fb 03 00 00       	push   $0x3fb
   1195d:	e8 93 ff ff ff       	call   118f5 <outb>
   11962:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x07);
   11965:	6a 07                	push   $0x7
   11967:	68 fa 03 00 00       	push   $0x3fa
   1196c:	e8 84 ff ff ff       	call   118f5 <outb>
   11971:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   11974:	6a 0f                	push   $0xf
   11976:	68 fc 03 00 00       	push   $0x3fc
   1197b:	e8 75 ff ff ff       	call   118f5 <outb>
   11980:	83 c4 08             	add    $0x8,%esp
}
   11983:	90                   	nop
   11984:	c9                   	leave
   11985:	c3                   	ret

00011986 <log_prinf>:
{
   11986:	55                   	push   %ebp
   11987:	89 e5                	mov    %esp,%ebp
   11989:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1198f:	83 ec 04             	sub    $0x4,%esp
   11992:	68 80 00 00 00       	push   $0x80
   11997:	6a 00                	push   $0x0
   11999:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   1199f:	50                   	push   %eax
   119a0:	e8 25 fa ff ff       	call   113ca <kernel_memset>
   119a5:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   119a8:	8d 45 0c             	lea    0xc(%ebp),%eax
   119ab:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   119b1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   119b7:	83 ec 04             	sub    $0x4,%esp
   119ba:	50                   	push   %eax
   119bb:	ff 75 08             	push   0x8(%ebp)
   119be:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   119c4:	50                   	push   %eax
   119c5:	e8 9a fb ff ff       	call   11564 <kernel_vsprintf>
   119ca:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   119cd:	e8 6f f6 ff ff       	call   11041 <irq_enter_protection>
   119d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char *p = str_buf;
   119d5:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   119db:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   119de:	eb 3b                	jmp    11a1b <log_prinf+0x95>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   119e0:	90                   	nop
   119e1:	83 ec 0c             	sub    $0xc,%esp
   119e4:	68 fd 03 00 00       	push   $0x3fd
   119e9:	e8 ea fe ff ff       	call   118d8 <inb>
   119ee:	83 c4 10             	add    $0x10,%esp
   119f1:	0f b6 c0             	movzbl %al,%eax
   119f4:	83 e0 40             	and    $0x40,%eax
   119f7:	85 c0                	test   %eax,%eax
   119f9:	74 e6                	je     119e1 <log_prinf+0x5b>
        outb(COM1_PORT, *p++);
   119fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119fe:	8d 50 01             	lea    0x1(%eax),%edx
   11a01:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11a04:	0f b6 00             	movzbl (%eax),%eax
   11a07:	0f b6 c0             	movzbl %al,%eax
   11a0a:	83 ec 08             	sub    $0x8,%esp
   11a0d:	50                   	push   %eax
   11a0e:	68 f8 03 00 00       	push   $0x3f8
   11a13:	e8 dd fe ff ff       	call   118f5 <outb>
   11a18:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   11a1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a1e:	0f b6 00             	movzbl (%eax),%eax
   11a21:	84 c0                	test   %al,%al
   11a23:	75 bb                	jne    119e0 <log_prinf+0x5a>
    }

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   11a25:	83 ec 08             	sub    $0x8,%esp
   11a28:	6a 0d                	push   $0xd
   11a2a:	68 f8 03 00 00       	push   $0x3f8
   11a2f:	e8 c1 fe ff ff       	call   118f5 <outb>
   11a34:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   11a37:	83 ec 08             	sub    $0x8,%esp
   11a3a:	6a 0a                	push   $0xa
   11a3c:	68 f8 03 00 00       	push   $0x3f8
   11a41:	e8 af fe ff ff       	call   118f5 <outb>
   11a46:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11a49:	83 ec 0c             	sub    $0xc,%esp
   11a4c:	ff 75 f0             	push   -0x10(%ebp)
   11a4f:	e8 05 f6 ff ff       	call   11059 <irq_leave_protection>
   11a54:	83 c4 10             	add    $0x10,%esp
}
   11a57:	90                   	nop
   11a58:	c9                   	leave
   11a59:	c3                   	ret
