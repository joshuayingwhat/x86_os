
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001658 memsz 0x00004270 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000132a  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000328  0001132c  0001132c  0000232c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011654  00011654  00002654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002c10  00011660  00011660  00002658  2**5
                  ALLOC
  4 .debug_line   00000980  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000498  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001595  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000008aa  00000000  00000000  00004a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000000e0  00000000  00000000  000052b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    0000094c  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  00005cdc  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000854  00000000  00000000  00005cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
000102a8 l     F .text	00000028 lgdt
00011660 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010412 l     F .text	0000001d inb
0001042f l     F .text	0000001f outb
0001044e l     F .text	00000007 cli
00010455 l     F .text	00000007 sti
0001045c l     F .text	00000028 lidt
00010484 l     F .text	00000007 hlt
00011e60 l     O .bss	00000400 idt_table
0001048b l     F .text	000000d9 dump_core_regs
00010564 l     F .text	0000003e do_default_handler
000107d2 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010b9b l     F .text	0000001f outb
00012260 l     O .bss	00000004 sys_tick
00010bdd l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
000115fc l     O .rodata	0000000c __func__.0
00000000 l    df *ABS*	00000000 klib.c
00010ce0 l     F .text	00000007 hlt
00011654 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 log.c
000111be l     F .text	0000001d inb
000111db l     F .text	0000001f outb
00010e59 g     F .text	0000004f kernel_memcpy
00010b65 g     F .text	0000000b irq_enable_global
000106d6 g     F .text	0000001c do_handler_segment_not_present
00010ea8 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010407 g     F .text	0000000b cpu_init
00010c8b g     F .text	00000055 init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00010ce7 g     F .text	00000047 kernel_strcpy
00010a48 g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
0001062e g     F .text	0000001c do_handler_overflow
00010762 g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
0001070e g     F .text	0000001c do_handler_general_protection
000105be g     F .text	0000001c do_handler_divider
0001069e g     F .text	0000001c do_handler_double_fault
0001072a g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010b70 g     F .text	0000002b pic_send_eoi
000111fa g     F .text	00000072 init_log
000105a2 g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
000107b6 g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
00010289 g       .text	00000000 exception_handler_time
00012270 g     O .bss	00002000 stack
000100e5 g       .text	00000000 exception_handler_bound_range
00010666 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010746 g     F .text	0000001c do_handler_fpu_error
0001077e g     F .text	0000001c do_handler_machine_check
000105da g     F .text	0000001c do_handler_Debug
000105f6 g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00010d2e g     F .text	00000070 kernel_strncpy
00010b5a g     F .text	0000000b irq_disable_global
00010c55 g     F .text	00000036 kernel_init
00010000 g       .text	00000000 _start
00011042 g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
000106ba g     F .text	0000001c do_handler_invalid_tss
00010a13 g     F .text	00000035 irq_install
0001126c g     F .text	000000be log_prinf
00010353 g     F .text	0000006d init_gdt
00010ad3 g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00010682 g     F .text	0000001c do_handler_device_unavailable
00010ee9 g     F .text	0000005e kernel_memcmp
0001002b g       .text	00000000 exception_handler_unknow
0001079a g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
000101f0 g       .text	00000000 exception_handler_fpu_error
00010865 g     F .text	000001ae irq_init
00010e1e g     F .text	0000003b kernel_strlen
000102d0 g     F .text	00000083 segment_desc_set
0001064a g     F .text	0000001c do_handler_bound_range
00010d9e g     F .text	00000080 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
00010c3d g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
00010069 g       .text	00000000 exception_handler_Debug
00011188 g     F .text	00000036 pannic
000106f2 g     F .text	0000001c do_handler_stack_segment_fault
00010612 g     F .text	0000001c do_handler_breakpoint
00010f47 g     F .text	00000024 kernel_sprintf
00010f6b g     F .text	000000d7 kernel_itoa
000103c0 g     F .text	00000047 gate_desc_set
00010bba g     F .text	00000023 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 49 0c 00 00       	call   10c55 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc 70 42 01 00       	mov    $0x14270,%esp
    jmp init_main
   10026:	e9 60 0c 00 00       	jmp    10c8b <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 66 05 00 00       	call   105a2 <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 63 05 00 00       	call   105be <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 60 05 00 00       	call   105da <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 5d 05 00 00       	call   105f6 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 5a 05 00 00       	call   10612 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 57 05 00 00       	call   1062e <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 54 05 00 00       	call   1064a <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 51 05 00 00       	call   10666 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 4e 05 00 00       	call   10682 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 4d 05 00 00       	call   1069e <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 4c 05 00 00       	call   106ba <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 4b 05 00 00       	call   106d6 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 4a 05 00 00       	call   106f2 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 49 05 00 00       	call   1070e <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 48 05 00 00       	call   1072a <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 45 05 00 00       	call   10746 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 44 05 00 00       	call   10762 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 41 05 00 00       	call   1077e <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 3e 05 00 00       	call   1079a <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 3b 05 00 00       	call   107b6 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 20 09 00 00       	call   10bba <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <lgdt>:
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}
void cpu_init(void)
{
    // 初始化gdt表
    init_gdt();
   102a8:	55                   	push   %ebp
   102a9:	89 e5                	mov    %esp,%ebp
   102ab:	83 ec 10             	sub    $0x10,%esp
   102ae:	8b 45 08             	mov    0x8(%ebp),%eax
   102b1:	c1 e8 10             	shr    $0x10,%eax
   102b4:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   102b8:	8b 45 08             	mov    0x8(%ebp),%eax
   102bb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   102bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   102c2:	83 e8 01             	sub    $0x1,%eax
   102c5:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   102c9:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
   102cd:	90                   	nop
   102ce:	c9                   	leave
   102cf:	c3                   	ret

000102d0 <segment_desc_set>:
{
   102d0:	55                   	push   %ebp
   102d1:	89 e5                	mov    %esp,%ebp
   102d3:	83 ec 14             	sub    $0x14,%esp
   102d6:	8b 45 14             	mov    0x14(%ebp),%eax
   102d9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   102dd:	8b 45 08             	mov    0x8(%ebp),%eax
   102e0:	83 e0 f8             	and    $0xfffffff8,%eax
   102e3:	05 60 16 01 00       	add    $0x11660,%eax
   102e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   102eb:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   102f2:	76 0f                	jbe    10303 <segment_desc_set+0x33>
        attr |= SEG_G;
   102f4:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   102fa:	8b 45 10             	mov    0x10(%ebp),%eax
   102fd:	c1 e8 0c             	shr    $0xc,%eax
   10300:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   10303:	8b 45 10             	mov    0x10(%ebp),%eax
   10306:	89 c2                	mov    %eax,%edx
   10308:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1030b:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   1030e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10311:	89 c2                	mov    %eax,%edx
   10313:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10316:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   1031a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031d:	c1 e8 10             	shr    $0x10,%eax
   10320:	89 c2                	mov    %eax,%edx
   10322:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10325:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   10328:	8b 45 10             	mov    0x10(%ebp),%eax
   1032b:	c1 e8 10             	shr    $0x10,%eax
   1032e:	c1 e0 08             	shl    $0x8,%eax
   10331:	66 25 00 0f          	and    $0xf00,%ax
   10335:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10339:	89 c2                	mov    %eax,%edx
   1033b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1033e:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   10342:	8b 45 0c             	mov    0xc(%ebp),%eax
   10345:	c1 e8 18             	shr    $0x18,%eax
   10348:	89 c2                	mov    %eax,%edx
   1034a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1034d:	88 50 07             	mov    %dl,0x7(%eax)
}
   10350:	90                   	nop
   10351:	c9                   	leave
   10352:	c3                   	ret

00010353 <init_gdt>:
{
   10353:	55                   	push   %ebp
   10354:	89 e5                	mov    %esp,%ebp
   10356:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10359:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10360:	eb 19                	jmp    1037b <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10362:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10365:	c1 e0 03             	shl    $0x3,%eax
   10368:	6a 00                	push   $0x0
   1036a:	6a 00                	push   $0x0
   1036c:	6a 00                	push   $0x0
   1036e:	50                   	push   %eax
   1036f:	e8 5c ff ff ff       	call   102d0 <segment_desc_set>
   10374:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10377:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1037b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10382:	7e de                	jle    10362 <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   10384:	68 92 40 00 00       	push   $0x4092
   10389:	6a ff                	push   $0xffffffff
   1038b:	6a 00                	push   $0x0
   1038d:	6a 10                	push   $0x10
   1038f:	e8 3c ff ff ff       	call   102d0 <segment_desc_set>
   10394:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   10397:	68 9a 40 00 00       	push   $0x409a
   1039c:	6a ff                	push   $0xffffffff
   1039e:	6a 00                	push   $0x0
   103a0:	6a 08                	push   $0x8
   103a2:	e8 29 ff ff ff       	call   102d0 <segment_desc_set>
   103a7:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   103aa:	b8 60 16 01 00       	mov    $0x11660,%eax
   103af:	68 00 08 00 00       	push   $0x800
   103b4:	50                   	push   %eax
   103b5:	e8 ee fe ff ff       	call   102a8 <lgdt>
   103ba:	83 c4 08             	add    $0x8,%esp
}
   103bd:	90                   	nop
   103be:	c9                   	leave
   103bf:	c3                   	ret

000103c0 <gate_desc_set>:
{
   103c0:	55                   	push   %ebp
   103c1:	89 e5                	mov    %esp,%ebp
   103c3:	83 ec 08             	sub    $0x8,%esp
   103c6:	8b 55 0c             	mov    0xc(%ebp),%edx
   103c9:	8b 45 14             	mov    0x14(%ebp),%eax
   103cc:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   103d0:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   103d4:	8b 45 10             	mov    0x10(%ebp),%eax
   103d7:	89 c2                	mov    %eax,%edx
   103d9:	8b 45 08             	mov    0x8(%ebp),%eax
   103dc:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   103df:	8b 45 08             	mov    0x8(%ebp),%eax
   103e2:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   103e6:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   103f1:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   103f5:	8b 45 10             	mov    0x10(%ebp),%eax
   103f8:	c1 e8 10             	shr    $0x10,%eax
   103fb:	89 c2                	mov    %eax,%edx
   103fd:	8b 45 08             	mov    0x8(%ebp),%eax
   10400:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10404:	90                   	nop
   10405:	c9                   	leave
   10406:	c3                   	ret

00010407 <cpu_init>:
{
   10407:	55                   	push   %ebp
   10408:	89 e5                	mov    %esp,%ebp
    init_gdt();
   1040a:	e8 44 ff ff ff       	call   10353 <init_gdt>
   1040f:	90                   	nop
   10410:	5d                   	pop    %ebp
   10411:	c3                   	ret

00010412 <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   10412:	55                   	push   %ebp
   10413:	89 e5                	mov    %esp,%ebp
   10415:	83 ec 14             	sub    $0x14,%esp
   10418:	8b 45 08             	mov    0x8(%ebp),%eax
   1041b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   1041f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10423:	89 c2                	mov    %eax,%edx
   10425:	ec                   	in     (%dx),%al
   10426:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   10429:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   1042d:	c9                   	leave
   1042e:	c3                   	ret

0001042f <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   1042f:	55                   	push   %ebp
   10430:	89 e5                	mov    %esp,%ebp
   10432:	83 ec 08             	sub    $0x8,%esp
   10435:	8b 55 08             	mov    0x8(%ebp),%edx
   10438:	8b 45 0c             	mov    0xc(%ebp),%eax
   1043b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1043f:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   10442:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10446:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1044a:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   1044b:	90                   	nop
   1044c:	c9                   	leave
   1044d:	c3                   	ret

0001044e <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   1044e:	55                   	push   %ebp
   1044f:	89 e5                	mov    %esp,%ebp
        hlt();
   10451:	fa                   	cli
    }
   10452:	90                   	nop
   10453:	5d                   	pop    %ebp
   10454:	c3                   	ret

00010455 <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   10455:	55                   	push   %ebp
   10456:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   10458:	fb                   	sti
}
   10459:	90                   	nop
   1045a:	5d                   	pop    %ebp
   1045b:	c3                   	ret

0001045c <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   1045c:	55                   	push   %ebp
   1045d:	89 e5                	mov    %esp,%ebp
   1045f:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   10462:	8b 45 08             	mov    0x8(%ebp),%eax
   10465:	c1 e8 10             	shr    $0x10,%eax
   10468:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   1046c:	8b 45 08             	mov    0x8(%ebp),%eax
   1046f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   10473:	8b 45 0c             	mov    0xc(%ebp),%eax
   10476:	83 e8 01             	sub    $0x1,%eax
   10479:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   1047d:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   10481:	90                   	nop
   10482:	c9                   	leave
   10483:	c3                   	ret

00010484 <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   10484:	55                   	push   %ebp
   10485:	89 e5                	mov    %esp,%ebp
}
   10487:	f4                   	hlt

   10488:	90                   	nop
   10489:	5d                   	pop    %ebp
   1048a:	c3                   	ret

0001048b <dump_core_regs>:
{
   1048b:	55                   	push   %ebp
   1048c:	89 e5                	mov    %esp,%ebp
   1048e:	57                   	push   %edi
   1048f:	56                   	push   %esi
   10490:	53                   	push   %ebx
   10491:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   10494:	8b 45 08             	mov    0x8(%ebp),%eax
   10497:	8b 50 34             	mov    0x34(%eax),%edx
   1049a:	8b 45 08             	mov    0x8(%ebp),%eax
   1049d:	8b 40 30             	mov    0x30(%eax),%eax
   104a0:	83 ec 04             	sub    $0x4,%esp
   104a3:	52                   	push   %edx
   104a4:	50                   	push   %eax
   104a5:	68 2c 13 01 00       	push   $0x1132c
   104aa:	e8 bd 0d 00 00       	call   1126c <log_prinf>
   104af:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   104b2:	8b 45 08             	mov    0x8(%ebp),%eax
   104b5:	8b 38                	mov    (%eax),%edi
   104b7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ba:	8b 70 04             	mov    0x4(%eax),%esi
   104bd:	8b 45 08             	mov    0x8(%ebp),%eax
   104c0:	8b 58 0c             	mov    0xc(%eax),%ebx
   104c3:	8b 45 08             	mov    0x8(%ebp),%eax
   104c6:	8b 48 08             	mov    0x8(%eax),%ecx
   104c9:	8b 45 08             	mov    0x8(%ebp),%eax
   104cc:	8b 50 0c             	mov    0xc(%eax),%edx
   104cf:	8b 45 08             	mov    0x8(%ebp),%eax
   104d2:	8b 40 3c             	mov    0x3c(%eax),%eax
   104d5:	83 ec 04             	sub    $0x4,%esp
   104d8:	57                   	push   %edi
   104d9:	56                   	push   %esi
   104da:	53                   	push   %ebx
   104db:	51                   	push   %ecx
   104dc:	52                   	push   %edx
   104dd:	50                   	push   %eax
   104de:	68 44 13 01 00       	push   $0x11344
   104e3:	e8 84 0d 00 00       	call   1126c <log_prinf>
   104e8:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   104eb:	8b 45 08             	mov    0x8(%ebp),%eax
   104ee:	8b 48 1c             	mov    0x1c(%eax),%ecx
   104f1:	8b 45 08             	mov    0x8(%ebp),%eax
   104f4:	8b 40 18             	mov    0x18(%eax),%eax
   104f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   104fa:	8b 45 08             	mov    0x8(%ebp),%eax
   104fd:	8b 58 14             	mov    0x14(%eax),%ebx
   10500:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10503:	8b 45 08             	mov    0x8(%ebp),%eax
   10506:	8b 78 10             	mov    0x10(%eax),%edi
   10509:	8b 45 08             	mov    0x8(%ebp),%eax
   1050c:	8b 70 24             	mov    0x24(%eax),%esi
   1050f:	8b 45 08             	mov    0x8(%ebp),%eax
   10512:	8b 58 28             	mov    0x28(%eax),%ebx
   10515:	8b 45 08             	mov    0x8(%ebp),%eax
   10518:	8b 50 20             	mov    0x20(%eax),%edx
   1051b:	8b 45 08             	mov    0x8(%ebp),%eax
   1051e:	8b 40 2c             	mov    0x2c(%eax),%eax
   10521:	83 ec 0c             	sub    $0xc,%esp
   10524:	51                   	push   %ecx
   10525:	ff 75 e4             	push   -0x1c(%ebp)
   10528:	ff 75 e0             	push   -0x20(%ebp)
   1052b:	57                   	push   %edi
   1052c:	56                   	push   %esi
   1052d:	53                   	push   %ebx
   1052e:	52                   	push   %edx
   1052f:	50                   	push   %eax
   10530:	68 6c 13 01 00       	push   $0x1136c
   10535:	e8 32 0d 00 00       	call   1126c <log_prinf>
   1053a:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   1053d:	8b 45 08             	mov    0x8(%ebp),%eax
   10540:	8b 50 40             	mov    0x40(%eax),%edx
   10543:	8b 45 08             	mov    0x8(%ebp),%eax
   10546:	8b 40 38             	mov    0x38(%eax),%eax
   10549:	83 ec 04             	sub    $0x4,%esp
   1054c:	52                   	push   %edx
   1054d:	50                   	push   %eax
   1054e:	68 bd 13 01 00       	push   $0x113bd
   10553:	e8 14 0d 00 00       	call   1126c <log_prinf>
   10558:	83 c4 10             	add    $0x10,%esp
}
   1055b:	90                   	nop
   1055c:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1055f:	5b                   	pop    %ebx
   10560:	5e                   	pop    %esi
   10561:	5f                   	pop    %edi
   10562:	5d                   	pop    %ebp
   10563:	c3                   	ret

00010564 <do_default_handler>:
{
   10564:	55                   	push   %ebp
   10565:	89 e5                	mov    %esp,%ebp
   10567:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   1056a:	83 ec 0c             	sub    $0xc,%esp
   1056d:	68 d6 13 01 00       	push   $0x113d6
   10572:	e8 f5 0c 00 00       	call   1126c <log_prinf>
   10577:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   1057a:	83 ec 08             	sub    $0x8,%esp
   1057d:	ff 75 0c             	push   0xc(%ebp)
   10580:	68 f3 13 01 00       	push   $0x113f3
   10585:	e8 e2 0c 00 00       	call   1126c <log_prinf>
   1058a:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   1058d:	83 ec 0c             	sub    $0xc,%esp
   10590:	ff 75 08             	push   0x8(%ebp)
   10593:	e8 f3 fe ff ff       	call   1048b <dump_core_regs>
   10598:	83 c4 10             	add    $0x10,%esp
        hlt();
   1059b:	e8 e4 fe ff ff       	call   10484 <hlt>
   105a0:	eb f9                	jmp    1059b <do_default_handler+0x37>

000105a2 <do_handler_unknow>:
{
   105a2:	55                   	push   %ebp
   105a3:	89 e5                	mov    %esp,%ebp
   105a5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   105a8:	83 ec 08             	sub    $0x8,%esp
   105ab:	68 04 14 01 00       	push   $0x11404
   105b0:	ff 75 08             	push   0x8(%ebp)
   105b3:	e8 ac ff ff ff       	call   10564 <do_default_handler>
   105b8:	83 c4 10             	add    $0x10,%esp
}
   105bb:	90                   	nop
   105bc:	c9                   	leave
   105bd:	c3                   	ret

000105be <do_handler_divider>:
{
   105be:	55                   	push   %ebp
   105bf:	89 e5                	mov    %esp,%ebp
   105c1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   105c4:	83 ec 08             	sub    $0x8,%esp
   105c7:	68 18 14 01 00       	push   $0x11418
   105cc:	ff 75 08             	push   0x8(%ebp)
   105cf:	e8 90 ff ff ff       	call   10564 <do_default_handler>
   105d4:	83 c4 10             	add    $0x10,%esp
}
   105d7:	90                   	nop
   105d8:	c9                   	leave
   105d9:	c3                   	ret

000105da <do_handler_Debug>:
{
   105da:	55                   	push   %ebp
   105db:	89 e5                	mov    %esp,%ebp
   105dd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   105e0:	83 ec 08             	sub    $0x8,%esp
   105e3:	68 2d 14 01 00       	push   $0x1142d
   105e8:	ff 75 08             	push   0x8(%ebp)
   105eb:	e8 74 ff ff ff       	call   10564 <do_default_handler>
   105f0:	83 c4 10             	add    $0x10,%esp
}
   105f3:	90                   	nop
   105f4:	c9                   	leave
   105f5:	c3                   	ret

000105f6 <do_handler_NMI>:
{
   105f6:	55                   	push   %ebp
   105f7:	89 e5                	mov    %esp,%ebp
   105f9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   105fc:	83 ec 08             	sub    $0x8,%esp
   105ff:	68 3d 14 01 00       	push   $0x1143d
   10604:	ff 75 08             	push   0x8(%ebp)
   10607:	e8 58 ff ff ff       	call   10564 <do_default_handler>
   1060c:	83 c4 10             	add    $0x10,%esp
}
   1060f:	90                   	nop
   10610:	c9                   	leave
   10611:	c3                   	ret

00010612 <do_handler_breakpoint>:
{
   10612:	55                   	push   %ebp
   10613:	89 e5                	mov    %esp,%ebp
   10615:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10618:	83 ec 08             	sub    $0x8,%esp
   1061b:	68 4c 14 01 00       	push   $0x1144c
   10620:	ff 75 08             	push   0x8(%ebp)
   10623:	e8 3c ff ff ff       	call   10564 <do_default_handler>
   10628:	83 c4 10             	add    $0x10,%esp
}
   1062b:	90                   	nop
   1062c:	c9                   	leave
   1062d:	c3                   	ret

0001062e <do_handler_overflow>:
{
   1062e:	55                   	push   %ebp
   1062f:	89 e5                	mov    %esp,%ebp
   10631:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10634:	83 ec 08             	sub    $0x8,%esp
   10637:	68 58 14 01 00       	push   $0x11458
   1063c:	ff 75 08             	push   0x8(%ebp)
   1063f:	e8 20 ff ff ff       	call   10564 <do_default_handler>
   10644:	83 c4 10             	add    $0x10,%esp
}
   10647:	90                   	nop
   10648:	c9                   	leave
   10649:	c3                   	ret

0001064a <do_handler_bound_range>:
{
   1064a:	55                   	push   %ebp
   1064b:	89 e5                	mov    %esp,%ebp
   1064d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10650:	83 ec 08             	sub    $0x8,%esp
   10653:	68 62 14 01 00       	push   $0x11462
   10658:	ff 75 08             	push   0x8(%ebp)
   1065b:	e8 04 ff ff ff       	call   10564 <do_default_handler>
   10660:	83 c4 10             	add    $0x10,%esp
}
   10663:	90                   	nop
   10664:	c9                   	leave
   10665:	c3                   	ret

00010666 <do_handler_invalid_opcode>:
{
   10666:	55                   	push   %ebp
   10667:	89 e5                	mov    %esp,%ebp
   10669:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   1066c:	83 ec 08             	sub    $0x8,%esp
   1066f:	68 78 14 01 00       	push   $0x11478
   10674:	ff 75 08             	push   0x8(%ebp)
   10677:	e8 e8 fe ff ff       	call   10564 <do_default_handler>
   1067c:	83 c4 10             	add    $0x10,%esp
}
   1067f:	90                   	nop
   10680:	c9                   	leave
   10681:	c3                   	ret

00010682 <do_handler_device_unavailable>:
{
   10682:	55                   	push   %ebp
   10683:	89 e5                	mov    %esp,%ebp
   10685:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10688:	83 ec 08             	sub    $0x8,%esp
   1068b:	68 88 14 01 00       	push   $0x11488
   10690:	ff 75 08             	push   0x8(%ebp)
   10693:	e8 cc fe ff ff       	call   10564 <do_default_handler>
   10698:	83 c4 10             	add    $0x10,%esp
}
   1069b:	90                   	nop
   1069c:	c9                   	leave
   1069d:	c3                   	ret

0001069e <do_handler_double_fault>:
{
   1069e:	55                   	push   %ebp
   1069f:	89 e5                	mov    %esp,%ebp
   106a1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   106a4:	83 ec 08             	sub    $0x8,%esp
   106a7:	68 9e 14 01 00       	push   $0x1149e
   106ac:	ff 75 08             	push   0x8(%ebp)
   106af:	e8 b0 fe ff ff       	call   10564 <do_default_handler>
   106b4:	83 c4 10             	add    $0x10,%esp
}
   106b7:	90                   	nop
   106b8:	c9                   	leave
   106b9:	c3                   	ret

000106ba <do_handler_invalid_tss>:
{
   106ba:	55                   	push   %ebp
   106bb:	89 e5                	mov    %esp,%ebp
   106bd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   106c0:	83 ec 08             	sub    $0x8,%esp
   106c3:	68 ac 14 01 00       	push   $0x114ac
   106c8:	ff 75 08             	push   0x8(%ebp)
   106cb:	e8 94 fe ff ff       	call   10564 <do_default_handler>
   106d0:	83 c4 10             	add    $0x10,%esp
}
   106d3:	90                   	nop
   106d4:	c9                   	leave
   106d5:	c3                   	ret

000106d6 <do_handler_segment_not_present>:
{
   106d6:	55                   	push   %ebp
   106d7:	89 e5                	mov    %esp,%ebp
   106d9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   106dc:	83 ec 08             	sub    $0x8,%esp
   106df:	68 b8 14 01 00       	push   $0x114b8
   106e4:	ff 75 08             	push   0x8(%ebp)
   106e7:	e8 78 fe ff ff       	call   10564 <do_default_handler>
   106ec:	83 c4 10             	add    $0x10,%esp
}
   106ef:	90                   	nop
   106f0:	c9                   	leave
   106f1:	c3                   	ret

000106f2 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   106f2:	55                   	push   %ebp
   106f3:	89 e5                	mov    %esp,%ebp
   106f5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   106f8:	83 ec 08             	sub    $0x8,%esp
   106fb:	68 cd 14 01 00       	push   $0x114cd
   10700:	ff 75 08             	push   0x8(%ebp)
   10703:	e8 5c fe ff ff       	call   10564 <do_default_handler>
   10708:	83 c4 10             	add    $0x10,%esp
}
   1070b:	90                   	nop
   1070c:	c9                   	leave
   1070d:	c3                   	ret

0001070e <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   1070e:	55                   	push   %ebp
   1070f:	89 e5                	mov    %esp,%ebp
   10711:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   10714:	83 ec 08             	sub    $0x8,%esp
   10717:	68 e2 14 01 00       	push   $0x114e2
   1071c:	ff 75 08             	push   0x8(%ebp)
   1071f:	e8 40 fe ff ff       	call   10564 <do_default_handler>
   10724:	83 c4 10             	add    $0x10,%esp
}
   10727:	90                   	nop
   10728:	c9                   	leave
   10729:	c3                   	ret

0001072a <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t *frame)
{
   1072a:	55                   	push   %ebp
   1072b:	89 e5                	mov    %esp,%ebp
   1072d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10730:	83 ec 08             	sub    $0x8,%esp
   10733:	68 f6 14 01 00       	push   $0x114f6
   10738:	ff 75 08             	push   0x8(%ebp)
   1073b:	e8 24 fe ff ff       	call   10564 <do_default_handler>
   10740:	83 c4 10             	add    $0x10,%esp
}
   10743:	90                   	nop
   10744:	c9                   	leave
   10745:	c3                   	ret

00010746 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   10746:	55                   	push   %ebp
   10747:	89 e5                	mov    %esp,%ebp
   10749:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   1074c:	83 ec 08             	sub    $0x8,%esp
   1074f:	68 02 15 01 00       	push   $0x11502
   10754:	ff 75 08             	push   0x8(%ebp)
   10757:	e8 08 fe ff ff       	call   10564 <do_default_handler>
   1075c:	83 c4 10             	add    $0x10,%esp
}
   1075f:	90                   	nop
   10760:	c9                   	leave
   10761:	c3                   	ret

00010762 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   10762:	55                   	push   %ebp
   10763:	89 e5                	mov    %esp,%ebp
   10765:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10768:	83 ec 08             	sub    $0x8,%esp
   1076b:	68 20 15 01 00       	push   $0x11520
   10770:	ff 75 08             	push   0x8(%ebp)
   10773:	e8 ec fd ff ff       	call   10564 <do_default_handler>
   10778:	83 c4 10             	add    $0x10,%esp
}
   1077b:	90                   	nop
   1077c:	c9                   	leave
   1077d:	c3                   	ret

0001077e <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   1077e:	55                   	push   %ebp
   1077f:	89 e5                	mov    %esp,%ebp
   10781:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   10784:	83 ec 08             	sub    $0x8,%esp
   10787:	68 31 15 01 00       	push   $0x11531
   1078c:	ff 75 08             	push   0x8(%ebp)
   1078f:	e8 d0 fd ff ff       	call   10564 <do_default_handler>
   10794:	83 c4 10             	add    $0x10,%esp
}
   10797:	90                   	nop
   10798:	c9                   	leave
   10799:	c3                   	ret

0001079a <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   1079a:	55                   	push   %ebp
   1079b:	89 e5                	mov    %esp,%ebp
   1079d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   107a0:	83 ec 08             	sub    $0x8,%esp
   107a3:	68 40 15 01 00       	push   $0x11540
   107a8:	ff 75 08             	push   0x8(%ebp)
   107ab:	e8 b4 fd ff ff       	call   10564 <do_default_handler>
   107b0:	83 c4 10             	add    $0x10,%esp
}
   107b3:	90                   	nop
   107b4:	c9                   	leave
   107b5:	c3                   	ret

000107b6 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   107b6:	55                   	push   %ebp
   107b7:	89 e5                	mov    %esp,%ebp
   107b9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   107bc:	83 ec 08             	sub    $0x8,%esp
   107bf:	68 5f 15 01 00       	push   $0x1155f
   107c4:	ff 75 08             	push   0x8(%ebp)
   107c7:	e8 98 fd ff ff       	call   10564 <do_default_handler>
   107cc:	83 c4 10             	add    $0x10,%esp
}
   107cf:	90                   	nop
   107d0:	c9                   	leave
   107d1:	c3                   	ret

000107d2 <init_pic>:

static void init_pic(void)
{
   107d2:	55                   	push   %ebp
   107d3:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   107d5:	6a 11                	push   $0x11
   107d7:	6a 20                	push   $0x20
   107d9:	e8 51 fc ff ff       	call   1042f <outb>
   107de:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   107e1:	6a 20                	push   $0x20
   107e3:	6a 21                	push   $0x21
   107e5:	e8 45 fc ff ff       	call   1042f <outb>
   107ea:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   107ed:	6a 04                	push   $0x4
   107ef:	6a 21                	push   $0x21
   107f1:	e8 39 fc ff ff       	call   1042f <outb>
   107f6:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   107f9:	6a 01                	push   $0x1
   107fb:	6a 21                	push   $0x21
   107fd:	e8 2d fc ff ff       	call   1042f <outb>
   10802:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10805:	6a 11                	push   $0x11
   10807:	68 a0 00 00 00       	push   $0xa0
   1080c:	e8 1e fc ff ff       	call   1042f <outb>
   10811:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10814:	6a 28                	push   $0x28
   10816:	68 a1 00 00 00       	push   $0xa1
   1081b:	e8 0f fc ff ff       	call   1042f <outb>
   10820:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10823:	6a 02                	push   $0x2
   10825:	68 a1 00 00 00       	push   $0xa1
   1082a:	e8 00 fc ff ff       	call   1042f <outb>
   1082f:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10832:	6a 01                	push   $0x1
   10834:	68 a1 00 00 00       	push   $0xa1
   10839:	e8 f1 fb ff ff       	call   1042f <outb>
   1083e:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10841:	68 fb 00 00 00       	push   $0xfb
   10846:	6a 21                	push   $0x21
   10848:	e8 e2 fb ff ff       	call   1042f <outb>
   1084d:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   10850:	68 ff 00 00 00       	push   $0xff
   10855:	68 a1 00 00 00       	push   $0xa1
   1085a:	e8 d0 fb ff ff       	call   1042f <outb>
   1085f:	83 c4 08             	add    $0x8,%esp
}
   10862:	90                   	nop
   10863:	c9                   	leave
   10864:	c3                   	ret

00010865 <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   10865:	55                   	push   %ebp
   10866:	89 e5                	mov    %esp,%ebp
   10868:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   1086b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10872:	eb 25                	jmp    10899 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10874:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10879:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1087c:	c1 e0 03             	shl    $0x3,%eax
   1087f:	05 60 1e 01 00       	add    $0x11e60,%eax
   10884:	68 00 8e 00 00       	push   $0x8e00
   10889:	52                   	push   %edx
   1088a:	6a 08                	push   $0x8
   1088c:	50                   	push   %eax
   1088d:	e8 2e fb ff ff       	call   103c0 <gate_desc_set>
   10892:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10895:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10899:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1089d:	7e d5                	jle    10874 <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   1089f:	83 ec 08             	sub    $0x8,%esp
   108a2:	68 4a 00 01 00       	push   $0x1004a
   108a7:	6a 00                	push   $0x0
   108a9:	e8 65 01 00 00       	call   10a13 <irq_install>
   108ae:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   108b1:	83 ec 08             	sub    $0x8,%esp
   108b4:	68 69 00 01 00       	push   $0x10069
   108b9:	6a 01                	push   $0x1
   108bb:	e8 53 01 00 00       	call   10a13 <irq_install>
   108c0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   108c3:	83 ec 08             	sub    $0x8,%esp
   108c6:	68 88 00 01 00       	push   $0x10088
   108cb:	6a 02                	push   $0x2
   108cd:	e8 41 01 00 00       	call   10a13 <irq_install>
   108d2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   108d5:	83 ec 08             	sub    $0x8,%esp
   108d8:	68 a7 00 01 00       	push   $0x100a7
   108dd:	6a 03                	push   $0x3
   108df:	e8 2f 01 00 00       	call   10a13 <irq_install>
   108e4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   108e7:	83 ec 08             	sub    $0x8,%esp
   108ea:	68 c6 00 01 00       	push   $0x100c6
   108ef:	6a 04                	push   $0x4
   108f1:	e8 1d 01 00 00       	call   10a13 <irq_install>
   108f6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   108f9:	83 ec 08             	sub    $0x8,%esp
   108fc:	68 e5 00 01 00       	push   $0x100e5
   10901:	6a 05                	push   $0x5
   10903:	e8 0b 01 00 00       	call   10a13 <irq_install>
   10908:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   1090b:	83 ec 08             	sub    $0x8,%esp
   1090e:	68 04 01 01 00       	push   $0x10104
   10913:	6a 06                	push   $0x6
   10915:	e8 f9 00 00 00       	call   10a13 <irq_install>
   1091a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   1091d:	83 ec 08             	sub    $0x8,%esp
   10920:	68 23 01 01 00       	push   $0x10123
   10925:	6a 07                	push   $0x7
   10927:	e8 e7 00 00 00       	call   10a13 <irq_install>
   1092c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   1092f:	83 ec 08             	sub    $0x8,%esp
   10932:	68 42 01 01 00       	push   $0x10142
   10937:	6a 08                	push   $0x8
   10939:	e8 d5 00 00 00       	call   10a13 <irq_install>
   1093e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   10941:	83 ec 08             	sub    $0x8,%esp
   10944:	68 5f 01 01 00       	push   $0x1015f
   10949:	6a 0a                	push   $0xa
   1094b:	e8 c3 00 00 00       	call   10a13 <irq_install>
   10950:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   10953:	83 ec 08             	sub    $0x8,%esp
   10956:	68 7c 01 01 00       	push   $0x1017c
   1095b:	6a 0b                	push   $0xb
   1095d:	e8 b1 00 00 00       	call   10a13 <irq_install>
   10962:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   10965:	83 ec 08             	sub    $0x8,%esp
   10968:	68 99 01 01 00       	push   $0x10199
   1096d:	6a 0c                	push   $0xc
   1096f:	e8 9f 00 00 00       	call   10a13 <irq_install>
   10974:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   10977:	83 ec 08             	sub    $0x8,%esp
   1097a:	68 b6 01 01 00       	push   $0x101b6
   1097f:	6a 0d                	push   $0xd
   10981:	e8 8d 00 00 00       	call   10a13 <irq_install>
   10986:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   10989:	83 ec 08             	sub    $0x8,%esp
   1098c:	68 d3 01 01 00       	push   $0x101d3
   10991:	6a 0e                	push   $0xe
   10993:	e8 7b 00 00 00       	call   10a13 <irq_install>
   10998:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   1099b:	83 ec 08             	sub    $0x8,%esp
   1099e:	68 f0 01 01 00       	push   $0x101f0
   109a3:	6a 10                	push   $0x10
   109a5:	e8 69 00 00 00       	call   10a13 <irq_install>
   109aa:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   109ad:	83 ec 08             	sub    $0x8,%esp
   109b0:	68 0f 02 01 00       	push   $0x1020f
   109b5:	6a 11                	push   $0x11
   109b7:	e8 57 00 00 00       	call   10a13 <irq_install>
   109bc:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   109bf:	83 ec 08             	sub    $0x8,%esp
   109c2:	68 2c 02 01 00       	push   $0x1022c
   109c7:	6a 12                	push   $0x12
   109c9:	e8 45 00 00 00       	call   10a13 <irq_install>
   109ce:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   109d1:	83 ec 08             	sub    $0x8,%esp
   109d4:	68 4b 02 01 00       	push   $0x1024b
   109d9:	6a 13                	push   $0x13
   109db:	e8 33 00 00 00       	call   10a13 <irq_install>
   109e0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   109e3:	83 ec 08             	sub    $0x8,%esp
   109e6:	68 6a 02 01 00       	push   $0x1026a
   109eb:	6a 14                	push   $0x14
   109ed:	e8 21 00 00 00       	call   10a13 <irq_install>
   109f2:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   109f5:	b8 60 1e 01 00       	mov    $0x11e60,%eax
   109fa:	83 ec 08             	sub    $0x8,%esp
   109fd:	68 00 04 00 00       	push   $0x400
   10a02:	50                   	push   %eax
   10a03:	e8 54 fa ff ff       	call   1045c <lidt>
   10a08:	83 c4 10             	add    $0x10,%esp

    init_pic();
   10a0b:	e8 c2 fd ff ff       	call   107d2 <init_pic>
}
   10a10:	90                   	nop
   10a11:	c9                   	leave
   10a12:	c3                   	ret

00010a13 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   10a13:	55                   	push   %ebp
   10a14:	89 e5                	mov    %esp,%ebp
   10a16:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   10a19:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10a1d:	7e 07                	jle    10a26 <irq_install+0x13>
    {
        return -1;
   10a1f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10a24:	eb 20                	jmp    10a46 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10a26:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a29:	8b 55 08             	mov    0x8(%ebp),%edx
   10a2c:	c1 e2 03             	shl    $0x3,%edx
   10a2f:	81 c2 60 1e 01 00    	add    $0x11e60,%edx
   10a35:	68 00 8e 00 00       	push   $0x8e00
   10a3a:	50                   	push   %eax
   10a3b:	6a 08                	push   $0x8
   10a3d:	52                   	push   %edx
   10a3e:	e8 7d f9 ff ff       	call   103c0 <gate_desc_set>
   10a43:	83 c4 10             	add    $0x10,%esp
}
   10a46:	c9                   	leave
   10a47:	c3                   	ret

00010a48 <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   10a48:	55                   	push   %ebp
   10a49:	89 e5                	mov    %esp,%ebp
   10a4b:	53                   	push   %ebx
   10a4c:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10a4f:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10a53:	7e 78                	jle    10acd <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10a55:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10a59:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10a5d:	7f 32                	jg     10a91 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10a5f:	6a 21                	push   $0x21
   10a61:	e8 ac f9 ff ff       	call   10412 <inb>
   10a66:	83 c4 04             	add    $0x4,%esp
   10a69:	89 c3                	mov    %eax,%ebx
   10a6b:	8b 45 08             	mov    0x8(%ebp),%eax
   10a6e:	ba 01 00 00 00       	mov    $0x1,%edx
   10a73:	89 c1                	mov    %eax,%ecx
   10a75:	d3 e2                	shl    %cl,%edx
   10a77:	89 d0                	mov    %edx,%eax
   10a79:	f7 d0                	not    %eax
   10a7b:	21 d8                	and    %ebx,%eax
   10a7d:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10a80:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10a84:	50                   	push   %eax
   10a85:	6a 21                	push   $0x21
   10a87:	e8 a3 f9 ff ff       	call   1042f <outb>
   10a8c:	83 c4 08             	add    $0x8,%esp
   10a8f:	eb 3d                	jmp    10ace <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   10a91:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10a95:	68 a1 00 00 00       	push   $0xa1
   10a9a:	e8 73 f9 ff ff       	call   10412 <inb>
   10a9f:	83 c4 04             	add    $0x4,%esp
   10aa2:	89 c3                	mov    %eax,%ebx
   10aa4:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa7:	ba 01 00 00 00       	mov    $0x1,%edx
   10aac:	89 c1                	mov    %eax,%ecx
   10aae:	d3 e2                	shl    %cl,%edx
   10ab0:	89 d0                	mov    %edx,%eax
   10ab2:	f7 d0                	not    %eax
   10ab4:	21 d8                	and    %ebx,%eax
   10ab6:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10ab9:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10abd:	50                   	push   %eax
   10abe:	68 a1 00 00 00       	push   $0xa1
   10ac3:	e8 67 f9 ff ff       	call   1042f <outb>
   10ac8:	83 c4 08             	add    $0x8,%esp
   10acb:	eb 01                	jmp    10ace <irq_enable+0x86>
        return;
   10acd:	90                   	nop
    }
}
   10ace:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ad1:	c9                   	leave
   10ad2:	c3                   	ret

00010ad3 <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   10ad3:	55                   	push   %ebp
   10ad4:	89 e5                	mov    %esp,%ebp
   10ad6:	53                   	push   %ebx
   10ad7:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10ada:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ade:	7e 74                	jle    10b54 <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10ae0:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10ae4:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ae8:	7f 30                	jg     10b1a <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10aea:	6a 21                	push   $0x21
   10aec:	e8 21 f9 ff ff       	call   10412 <inb>
   10af1:	83 c4 04             	add    $0x4,%esp
   10af4:	89 c3                	mov    %eax,%ebx
   10af6:	8b 45 08             	mov    0x8(%ebp),%eax
   10af9:	ba 01 00 00 00       	mov    $0x1,%edx
   10afe:	89 c1                	mov    %eax,%ecx
   10b00:	d3 e2                	shl    %cl,%edx
   10b02:	89 d0                	mov    %edx,%eax
   10b04:	09 d8                	or     %ebx,%eax
   10b06:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10b09:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10b0d:	50                   	push   %eax
   10b0e:	6a 21                	push   $0x21
   10b10:	e8 1a f9 ff ff       	call   1042f <outb>
   10b15:	83 c4 08             	add    $0x8,%esp
   10b18:	eb 3b                	jmp    10b55 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   10b1a:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10b1e:	68 a1 00 00 00       	push   $0xa1
   10b23:	e8 ea f8 ff ff       	call   10412 <inb>
   10b28:	83 c4 04             	add    $0x4,%esp
   10b2b:	89 c3                	mov    %eax,%ebx
   10b2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b30:	ba 01 00 00 00       	mov    $0x1,%edx
   10b35:	89 c1                	mov    %eax,%ecx
   10b37:	d3 e2                	shl    %cl,%edx
   10b39:	89 d0                	mov    %edx,%eax
   10b3b:	09 d8                	or     %ebx,%eax
   10b3d:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10b40:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10b44:	50                   	push   %eax
   10b45:	68 a1 00 00 00       	push   $0xa1
   10b4a:	e8 e0 f8 ff ff       	call   1042f <outb>
   10b4f:	83 c4 08             	add    $0x8,%esp
   10b52:	eb 01                	jmp    10b55 <irq_disable+0x82>
        return;
   10b54:	90                   	nop
    }
}
   10b55:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10b58:	c9                   	leave
   10b59:	c3                   	ret

00010b5a <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   10b5a:	55                   	push   %ebp
   10b5b:	89 e5                	mov    %esp,%ebp
    cli();
   10b5d:	e8 ec f8 ff ff       	call   1044e <cli>
}
   10b62:	90                   	nop
   10b63:	5d                   	pop    %ebp
   10b64:	c3                   	ret

00010b65 <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   10b65:	55                   	push   %ebp
   10b66:	89 e5                	mov    %esp,%ebp
    sti();
   10b68:	e8 e8 f8 ff ff       	call   10455 <sti>
}
   10b6d:	90                   	nop
   10b6e:	5d                   	pop    %ebp
   10b6f:	c3                   	ret

00010b70 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   10b70:	55                   	push   %ebp
   10b71:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10b73:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   10b77:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10b7b:	7e 0f                	jle    10b8c <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10b7d:	6a 20                	push   $0x20
   10b7f:	68 a0 00 00 00       	push   $0xa0
   10b84:	e8 a6 f8 ff ff       	call   1042f <outb>
   10b89:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10b8c:	6a 20                	push   $0x20
   10b8e:	6a 20                	push   $0x20
   10b90:	e8 9a f8 ff ff       	call   1042f <outb>
   10b95:	83 c4 08             	add    $0x8,%esp
   10b98:	90                   	nop
   10b99:	c9                   	leave
   10b9a:	c3                   	ret

00010b9b <outb>:
{
    sys_tick = 0;
    init_pit();
   10b9b:	55                   	push   %ebp
   10b9c:	89 e5                	mov    %esp,%ebp
   10b9e:	83 ec 08             	sub    $0x8,%esp
   10ba1:	8b 55 08             	mov    0x8(%ebp),%edx
   10ba4:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ba7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10bab:	88 45 f8             	mov    %al,-0x8(%ebp)
   10bae:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10bb2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10bb6:	ee                   	out    %al,(%dx)
   10bb7:	90                   	nop
   10bb8:	c9                   	leave
   10bb9:	c3                   	ret

00010bba <do_handler_time>:
{
   10bba:	55                   	push   %ebp
   10bbb:	89 e5                	mov    %esp,%ebp
   10bbd:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   10bc0:	a1 60 22 01 00       	mov    0x12260,%eax
   10bc5:	83 c0 01             	add    $0x1,%eax
   10bc8:	a3 60 22 01 00       	mov    %eax,0x12260
    pic_send_eoi(IRQ0_TIMER);
   10bcd:	83 ec 0c             	sub    $0xc,%esp
   10bd0:	6a 20                	push   $0x20
   10bd2:	e8 99 ff ff ff       	call   10b70 <pic_send_eoi>
   10bd7:	83 c4 10             	add    $0x10,%esp
}
   10bda:	90                   	nop
   10bdb:	c9                   	leave
   10bdc:	c3                   	ret

00010bdd <init_pit>:
{
   10bdd:	55                   	push   %ebp
   10bde:	89 e5                	mov    %esp,%ebp
   10be0:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   10be3:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   10bea:	6a 36                	push   $0x36
   10bec:	6a 43                	push   $0x43
   10bee:	e8 a8 ff ff ff       	call   10b9b <outb>
   10bf3:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   10bf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10bf9:	0f b6 c0             	movzbl %al,%eax
   10bfc:	50                   	push   %eax
   10bfd:	6a 40                	push   $0x40
   10bff:	e8 97 ff ff ff       	call   10b9b <outb>
   10c04:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   10c07:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c0a:	c1 e8 08             	shr    $0x8,%eax
   10c0d:	0f b6 c0             	movzbl %al,%eax
   10c10:	50                   	push   %eax
   10c11:	6a 40                	push   $0x40
   10c13:	e8 83 ff ff ff       	call   10b9b <outb>
   10c18:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   10c1b:	83 ec 08             	sub    $0x8,%esp
   10c1e:	68 89 02 01 00       	push   $0x10289
   10c23:	6a 20                	push   $0x20
   10c25:	e8 e9 fd ff ff       	call   10a13 <irq_install>
   10c2a:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   10c2d:	83 ec 0c             	sub    $0xc,%esp
   10c30:	6a 20                	push   $0x20
   10c32:	e8 11 fe ff ff       	call   10a48 <irq_enable>
   10c37:	83 c4 10             	add    $0x10,%esp
}
   10c3a:	90                   	nop
   10c3b:	c9                   	leave
   10c3c:	c3                   	ret

00010c3d <init_time>:
{
   10c3d:	55                   	push   %ebp
   10c3e:	89 e5                	mov    %esp,%ebp
   10c40:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10c43:	c7 05 60 22 01 00 00 	movl   $0x0,0x12260
   10c4a:	00 00 00 
    init_pit();
   10c4d:	e8 8b ff ff ff       	call   10bdd <init_pit>
   10c52:	90                   	nop
   10c53:	c9                   	leave
   10c54:	c3                   	ret

00010c55 <kernel_init>:

/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   10c55:	55                   	push   %ebp
   10c56:	89 e5                	mov    %esp,%ebp
   10c58:	83 ec 08             	sub    $0x8,%esp
    ASSERT(3 < 2);
   10c5b:	68 7c 15 01 00       	push   $0x1157c
   10c60:	68 fc 15 01 00       	push   $0x115fc
   10c65:	6a 0f                	push   $0xf
   10c67:	68 84 15 01 00       	push   $0x11584
   10c6c:	e8 17 05 00 00       	call   11188 <pannic>
   10c71:	83 c4 10             	add    $0x10,%esp
    cpu_init();
   10c74:	e8 8e f7 ff ff       	call   10407 <cpu_init>

    init_log(); // 初始化打印函数
   10c79:	e8 7c 05 00 00       	call   111fa <init_log>
    irq_init();
   10c7e:	e8 e2 fb ff ff       	call   10865 <irq_init>
    // 初始化定时器
    init_time();
   10c83:	e8 b5 ff ff ff       	call   10c3d <init_time>
}
   10c88:	90                   	nop
   10c89:	c9                   	leave
   10c8a:	c3                   	ret

00010c8b <init_main>:

void init_main()
{
   10c8b:	55                   	push   %ebp
   10c8c:	89 e5                	mov    %esp,%ebp
   10c8e:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   10c91:	83 ec 0c             	sub    $0xc,%esp
   10c94:	68 d1 15 01 00       	push   $0x115d1
   10c99:	e8 ce 05 00 00       	call   1126c <log_prinf>
   10c9e:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   10ca1:	83 ec 08             	sub    $0x8,%esp
   10ca4:	68 df 15 01 00       	push   $0x115df
   10ca9:	68 e5 15 01 00       	push   $0x115e5
   10cae:	e8 b9 05 00 00       	call   1126c <log_prinf>
   10cb3:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   10cb6:	83 ec 0c             	sub    $0xc,%esp
   10cb9:	6a 63                	push   $0x63
   10cbb:	6a 30                	push   $0x30
   10cbd:	6a 14                	push   $0x14
   10cbf:	6a f6                	push   $0xfffffff6
   10cc1:	68 f0 15 01 00       	push   $0x115f0
   10cc6:	e8 a1 05 00 00       	call   1126c <log_prinf>
   10ccb:	83 c4 20             	add    $0x20,%esp
    int a = 3 / 0;
   10cce:	b8 03 00 00 00       	mov    $0x3,%eax
   10cd3:	b9 00 00 00 00       	mov    $0x0,%ecx
   10cd8:	99                   	cltd
   10cd9:	f7 f9                	idiv   %ecx
   10cdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // irq_enable_global();//暂时先关掉定时中断
    for (;;)
   10cde:	eb fe                	jmp    10cde <init_main+0x53>

00010ce0 <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   10ce0:	55                   	push   %ebp
   10ce1:	89 e5                	mov    %esp,%ebp
}
   10ce3:	f4                   	hlt

   10ce4:	90                   	nop
   10ce5:	5d                   	pop    %ebp
   10ce6:	c3                   	ret

00010ce7 <kernel_strcpy>:
{
   10ce7:	55                   	push   %ebp
   10ce8:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   10cea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10cee:	74 3b                	je     10d2b <kernel_strcpy+0x44>
   10cf0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10cf4:	74 35                	je     10d2b <kernel_strcpy+0x44>
    while (*dest && *src)
   10cf6:	eb 17                	jmp    10d0f <kernel_strcpy+0x28>
        *dest++ = *src++;
   10cf8:	8b 55 0c             	mov    0xc(%ebp),%edx
   10cfb:	8d 42 01             	lea    0x1(%edx),%eax
   10cfe:	89 45 0c             	mov    %eax,0xc(%ebp)
   10d01:	8b 45 08             	mov    0x8(%ebp),%eax
   10d04:	8d 48 01             	lea    0x1(%eax),%ecx
   10d07:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10d0a:	0f b6 12             	movzbl (%edx),%edx
   10d0d:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   10d0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d12:	0f b6 00             	movzbl (%eax),%eax
   10d15:	84 c0                	test   %al,%al
   10d17:	74 0a                	je     10d23 <kernel_strcpy+0x3c>
   10d19:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d1c:	0f b6 00             	movzbl (%eax),%eax
   10d1f:	84 c0                	test   %al,%al
   10d21:	75 d5                	jne    10cf8 <kernel_strcpy+0x11>
    *dest = '\0';
   10d23:	8b 45 08             	mov    0x8(%ebp),%eax
   10d26:	c6 00 00             	movb   $0x0,(%eax)
   10d29:	eb 01                	jmp    10d2c <kernel_strcpy+0x45>
        return;
   10d2b:	90                   	nop
}
   10d2c:	5d                   	pop    %ebp
   10d2d:	c3                   	ret

00010d2e <kernel_strncpy>:
{
   10d2e:	55                   	push   %ebp
   10d2f:	89 e5                	mov    %esp,%ebp
   10d31:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   10d34:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d38:	74 61                	je     10d9b <kernel_strncpy+0x6d>
   10d3a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10d3e:	74 5b                	je     10d9b <kernel_strncpy+0x6d>
   10d40:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10d44:	74 55                	je     10d9b <kernel_strncpy+0x6d>
    char *d = dest;
   10d46:	8b 45 08             	mov    0x8(%ebp),%eax
   10d49:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   10d4c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d4f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   10d52:	eb 17                	jmp    10d6b <kernel_strncpy+0x3d>
        *d++ = *s++;
   10d54:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10d57:	8d 42 01             	lea    0x1(%edx),%eax
   10d5a:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10d5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d60:	8d 48 01             	lea    0x1(%eax),%ecx
   10d63:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10d66:	0f b6 12             	movzbl (%edx),%edx
   10d69:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   10d6b:	8b 45 10             	mov    0x10(%ebp),%eax
   10d6e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10d71:	89 55 10             	mov    %edx,0x10(%ebp)
   10d74:	85 c0                	test   %eax,%eax
   10d76:	7e 0a                	jle    10d82 <kernel_strncpy+0x54>
   10d78:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10d7b:	0f b6 00             	movzbl (%eax),%eax
   10d7e:	84 c0                	test   %al,%al
   10d80:	75 d2                	jne    10d54 <kernel_strncpy+0x26>
    if (size == 0)
   10d82:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10d86:	75 0b                	jne    10d93 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   10d88:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d8b:	83 e8 01             	sub    $0x1,%eax
   10d8e:	c6 00 00             	movb   $0x0,(%eax)
   10d91:	eb 09                	jmp    10d9c <kernel_strncpy+0x6e>
        *d = '\0';
   10d93:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10d96:	c6 00 00             	movb   $0x0,(%eax)
   10d99:	eb 01                	jmp    10d9c <kernel_strncpy+0x6e>
        return;
   10d9b:	90                   	nop
}
   10d9c:	c9                   	leave
   10d9d:	c3                   	ret

00010d9e <kernel_strncmp>:
{
   10d9e:	55                   	push   %ebp
   10d9f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   10da1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10da5:	74 0c                	je     10db3 <kernel_strncmp+0x15>
   10da7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10dab:	74 06                	je     10db3 <kernel_strncmp+0x15>
   10dad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10db1:	75 0f                	jne    10dc2 <kernel_strncmp+0x24>
        return -1;
   10db3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10db8:	eb 62                	jmp    10e1c <kernel_strncmp+0x7e>
        s1++;
   10dba:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   10dbe:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   10dc2:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc5:	0f b6 00             	movzbl (%eax),%eax
   10dc8:	84 c0                	test   %al,%al
   10dca:	74 20                	je     10dec <kernel_strncmp+0x4e>
   10dcc:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dcf:	0f b6 00             	movzbl (%eax),%eax
   10dd2:	84 c0                	test   %al,%al
   10dd4:	74 16                	je     10dec <kernel_strncmp+0x4e>
   10dd6:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd9:	0f b6 10             	movzbl (%eax),%edx
   10ddc:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ddf:	0f b6 00             	movzbl (%eax),%eax
   10de2:	38 c2                	cmp    %al,%dl
   10de4:	75 06                	jne    10dec <kernel_strncmp+0x4e>
   10de6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10dea:	75 ce                	jne    10dba <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   10dec:	8b 45 08             	mov    0x8(%ebp),%eax
   10def:	0f b6 00             	movzbl (%eax),%eax
   10df2:	84 c0                	test   %al,%al
   10df4:	74 21                	je     10e17 <kernel_strncmp+0x79>
   10df6:	8b 45 0c             	mov    0xc(%ebp),%eax
   10df9:	0f b6 00             	movzbl (%eax),%eax
   10dfc:	84 c0                	test   %al,%al
   10dfe:	74 17                	je     10e17 <kernel_strncmp+0x79>
   10e00:	8b 45 08             	mov    0x8(%ebp),%eax
   10e03:	0f b6 10             	movzbl (%eax),%edx
   10e06:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e09:	0f b6 00             	movzbl (%eax),%eax
   10e0c:	38 c2                	cmp    %al,%dl
   10e0e:	74 07                	je     10e17 <kernel_strncmp+0x79>
   10e10:	b8 01 00 00 00       	mov    $0x1,%eax
   10e15:	eb 05                	jmp    10e1c <kernel_strncmp+0x7e>
   10e17:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10e1c:	5d                   	pop    %ebp
   10e1d:	c3                   	ret

00010e1e <kernel_strlen>:
{
   10e1e:	55                   	push   %ebp
   10e1f:	89 e5                	mov    %esp,%ebp
   10e21:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   10e24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e28:	75 07                	jne    10e31 <kernel_strlen+0x13>
        return 0;
   10e2a:	b8 00 00 00 00       	mov    $0x0,%eax
   10e2f:	eb 26                	jmp    10e57 <kernel_strlen+0x39>
    const char *c = str;
   10e31:	8b 45 08             	mov    0x8(%ebp),%eax
   10e34:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   10e37:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   10e3e:	eb 04                	jmp    10e44 <kernel_strlen+0x26>
        len++;
   10e40:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   10e44:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10e47:	8d 50 01             	lea    0x1(%eax),%edx
   10e4a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10e4d:	0f b6 00             	movzbl (%eax),%eax
   10e50:	84 c0                	test   %al,%al
   10e52:	75 ec                	jne    10e40 <kernel_strlen+0x22>
    return len;
   10e54:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   10e57:	c9                   	leave
   10e58:	c3                   	ret

00010e59 <kernel_memcpy>:
{
   10e59:	55                   	push   %ebp
   10e5a:	89 e5                	mov    %esp,%ebp
   10e5c:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   10e5f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e63:	74 40                	je     10ea5 <kernel_memcpy+0x4c>
   10e65:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e69:	74 3a                	je     10ea5 <kernel_memcpy+0x4c>
   10e6b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10e6f:	74 34                	je     10ea5 <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   10e71:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e74:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   10e77:	8b 45 08             	mov    0x8(%ebp),%eax
   10e7a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   10e7d:	eb 17                	jmp    10e96 <kernel_memcpy+0x3d>
        *d++ = *s++;
   10e7f:	8b 55 fc             	mov    -0x4(%ebp),%edx
   10e82:	8d 42 01             	lea    0x1(%edx),%eax
   10e85:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10e88:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10e8b:	8d 48 01             	lea    0x1(%eax),%ecx
   10e8e:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   10e91:	0f b6 12             	movzbl (%edx),%edx
   10e94:	88 10                	mov    %dl,(%eax)
    while (size--)
   10e96:	8b 45 10             	mov    0x10(%ebp),%eax
   10e99:	8d 50 ff             	lea    -0x1(%eax),%edx
   10e9c:	89 55 10             	mov    %edx,0x10(%ebp)
   10e9f:	85 c0                	test   %eax,%eax
   10ea1:	75 dc                	jne    10e7f <kernel_memcpy+0x26>
   10ea3:	eb 01                	jmp    10ea6 <kernel_memcpy+0x4d>
        return;
   10ea5:	90                   	nop
}
   10ea6:	c9                   	leave
   10ea7:	c3                   	ret

00010ea8 <kernel_memset>:
{
   10ea8:	55                   	push   %ebp
   10ea9:	89 e5                	mov    %esp,%ebp
   10eab:	83 ec 14             	sub    $0x14,%esp
   10eae:	8b 45 0c             	mov    0xc(%ebp),%eax
   10eb1:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   10eb4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10eb8:	74 2c                	je     10ee6 <kernel_memset+0x3e>
   10eba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10ebe:	74 26                	je     10ee6 <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   10ec0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   10ec6:	eb 0f                	jmp    10ed7 <kernel_memset+0x2f>
        *d++ = v;
   10ec8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ecb:	8d 50 01             	lea    0x1(%eax),%edx
   10ece:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10ed1:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   10ed5:	88 10                	mov    %dl,(%eax)
    while (size--)
   10ed7:	8b 45 10             	mov    0x10(%ebp),%eax
   10eda:	8d 50 ff             	lea    -0x1(%eax),%edx
   10edd:	89 55 10             	mov    %edx,0x10(%ebp)
   10ee0:	85 c0                	test   %eax,%eax
   10ee2:	75 e4                	jne    10ec8 <kernel_memset+0x20>
   10ee4:	eb 01                	jmp    10ee7 <kernel_memset+0x3f>
        return;
   10ee6:	90                   	nop
}
   10ee7:	c9                   	leave
   10ee8:	c3                   	ret

00010ee9 <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   10ee9:	55                   	push   %ebp
   10eea:	89 e5                	mov    %esp,%ebp
   10eec:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   10eef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ef3:	74 06                	je     10efb <kernel_memcmp+0x12>
   10ef5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10ef9:	75 07                	jne    10f02 <kernel_memcmp+0x19>
    {
        return 1;
   10efb:	b8 01 00 00 00       	mov    $0x1,%eax
   10f00:	eb 43                	jmp    10f45 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   10f02:	8b 45 08             	mov    0x8(%ebp),%eax
   10f05:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   10f08:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f0b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   10f0e:	eb 23                	jmp    10f33 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   10f10:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f13:	8d 50 01             	lea    0x1(%eax),%edx
   10f16:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10f19:	0f b6 08             	movzbl (%eax),%ecx
   10f1c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10f1f:	8d 50 01             	lea    0x1(%eax),%edx
   10f22:	89 55 f8             	mov    %edx,-0x8(%ebp)
   10f25:	0f b6 00             	movzbl (%eax),%eax
   10f28:	38 c1                	cmp    %al,%cl
   10f2a:	74 07                	je     10f33 <kernel_memcmp+0x4a>
        {
            return 1;
   10f2c:	b8 01 00 00 00       	mov    $0x1,%eax
   10f31:	eb 12                	jmp    10f45 <kernel_memcmp+0x5c>
    while (size--)
   10f33:	8b 45 10             	mov    0x10(%ebp),%eax
   10f36:	8d 50 ff             	lea    -0x1(%eax),%edx
   10f39:	89 55 10             	mov    %edx,0x10(%ebp)
   10f3c:	85 c0                	test   %eax,%eax
   10f3e:	75 d0                	jne    10f10 <kernel_memcmp+0x27>
        }
    }
    return 0;
   10f40:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10f45:	c9                   	leave
   10f46:	c3                   	ret

00010f47 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   10f47:	55                   	push   %ebp
   10f48:	89 e5                	mov    %esp,%ebp
   10f4a:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   10f4d:	8d 45 10             	lea    0x10(%ebp),%eax
   10f50:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   10f53:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f56:	83 ec 04             	sub    $0x4,%esp
   10f59:	50                   	push   %eax
   10f5a:	ff 75 0c             	push   0xc(%ebp)
   10f5d:	ff 75 08             	push   0x8(%ebp)
   10f60:	e8 dd 00 00 00       	call   11042 <kernel_vsprintf>
   10f65:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   10f68:	90                   	nop
   10f69:	c9                   	leave
   10f6a:	c3                   	ret

00010f6b <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   10f6b:	55                   	push   %ebp
   10f6c:	89 e5                	mov    %esp,%ebp
   10f6e:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   10f71:	8b 45 08             	mov    0x8(%ebp),%eax
   10f74:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   10f77:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   10f7d:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   10f81:	74 1d                	je     10fa0 <kernel_itoa+0x35>
   10f83:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   10f87:	74 17                	je     10fa0 <kernel_itoa+0x35>
   10f89:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   10f8d:	74 11                	je     10fa0 <kernel_itoa+0x35>
   10f8f:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   10f93:	74 0b                	je     10fa0 <kernel_itoa+0x35>
    {
        *p = '\0';
   10f95:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f98:	c6 00 00             	movb   $0x0,(%eax)
        return;
   10f9b:	e9 a0 00 00 00       	jmp    11040 <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   10fa0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fa4:	79 12                	jns    10fb8 <kernel_itoa+0x4d>
   10fa6:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   10faa:	75 0c                	jne    10fb8 <kernel_itoa+0x4d>
    {
        *p++ = '-';
   10fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10faf:	8d 50 01             	lea    0x1(%eax),%edx
   10fb2:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10fb5:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   10fb8:	8b 0d 54 16 01 00    	mov    0x11654,%ecx
   10fbe:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fc1:	99                   	cltd
   10fc2:	f7 7d 10             	idivl  0x10(%ebp)
   10fc5:	89 d0                	mov    %edx,%eax
   10fc7:	83 c0 0f             	add    $0xf,%eax
   10fca:	01 c8                	add    %ecx,%eax
   10fcc:	0f b6 00             	movzbl (%eax),%eax
   10fcf:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   10fd2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fd5:	8d 50 01             	lea    0x1(%eax),%edx
   10fd8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10fdb:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   10fdf:	88 10                	mov    %dl,(%eax)
        num /= base;
   10fe1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fe4:	99                   	cltd
   10fe5:	f7 7d 10             	idivl  0x10(%ebp)
   10fe8:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   10feb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fef:	75 c7                	jne    10fb8 <kernel_itoa+0x4d>
    *p-- = '\0';
   10ff1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ff4:	8d 50 ff             	lea    -0x1(%eax),%edx
   10ff7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   10ffa:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   10ffd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11001:	7f 08                	jg     1100b <kernel_itoa+0xa0>
   11003:	8b 45 08             	mov    0x8(%ebp),%eax
   11006:	83 c0 01             	add    $0x1,%eax
   11009:	eb 03                	jmp    1100e <kernel_itoa+0xa3>
   1100b:	8b 45 08             	mov    0x8(%ebp),%eax
   1100e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   11011:	eb 25                	jmp    11038 <kernel_itoa+0xcd>
    {
        char ch = *start;
   11013:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11016:	0f b6 00             	movzbl (%eax),%eax
   11019:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1101c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1101f:	0f b6 10             	movzbl (%eax),%edx
   11022:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11025:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11027:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1102a:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1102e:	88 10                	mov    %dl,(%eax)

        p--;
   11030:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11034:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   11038:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1103b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1103e:	72 d3                	jb     11013 <kernel_itoa+0xa8>
    }
}
   11040:	c9                   	leave
   11041:	c3                   	ret

00011042 <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   11042:	55                   	push   %ebp
   11043:	89 e5                	mov    %esp,%ebp
   11045:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   11048:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   1104f:	8b 45 08             	mov    0x8(%ebp),%eax
   11052:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   11055:	e9 11 01 00 00       	jmp    1116b <kernel_vsprintf+0x129>
    {
        switch (state)
   1105a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1105e:	74 0b                	je     1106b <kernel_vsprintf+0x29>
   11060:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   11064:	74 2b                	je     11091 <kernel_vsprintf+0x4f>
   11066:	e9 00 01 00 00       	jmp    1116b <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   1106b:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1106f:	75 0c                	jne    1107d <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   11071:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11078:	e9 ee 00 00 00       	jmp    1116b <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   1107d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11080:	8d 50 01             	lea    0x1(%eax),%edx
   11083:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11086:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1108a:	88 10                	mov    %dl,(%eax)
            }
            break;
   1108c:	e9 da 00 00 00       	jmp    1116b <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   11091:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11095:	75 31                	jne    110c8 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11097:	8b 45 10             	mov    0x10(%ebp),%eax
   1109a:	8d 50 04             	lea    0x4(%eax),%edx
   1109d:	89 55 10             	mov    %edx,0x10(%ebp)
   110a0:	8b 00                	mov    (%eax),%eax
   110a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   110a5:	6a 0a                	push   $0xa
   110a7:	ff 75 e4             	push   -0x1c(%ebp)
   110aa:	ff 75 f8             	push   -0x8(%ebp)
   110ad:	e8 b9 fe ff ff       	call   10f6b <kernel_itoa>
   110b2:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   110b5:	ff 75 f8             	push   -0x8(%ebp)
   110b8:	e8 61 fd ff ff       	call   10e1e <kernel_strlen>
   110bd:	83 c4 04             	add    $0x4,%esp
   110c0:	01 45 f8             	add    %eax,-0x8(%ebp)
   110c3:	e9 9b 00 00 00       	jmp    11163 <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   110c8:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   110cc:	75 2e                	jne    110fc <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   110ce:	8b 45 10             	mov    0x10(%ebp),%eax
   110d1:	8d 50 04             	lea    0x4(%eax),%edx
   110d4:	89 55 10             	mov    %edx,0x10(%ebp)
   110d7:	8b 00                	mov    (%eax),%eax
   110d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   110dc:	6a 10                	push   $0x10
   110de:	ff 75 e8             	push   -0x18(%ebp)
   110e1:	ff 75 f8             	push   -0x8(%ebp)
   110e4:	e8 82 fe ff ff       	call   10f6b <kernel_itoa>
   110e9:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   110ec:	ff 75 f8             	push   -0x8(%ebp)
   110ef:	e8 2a fd ff ff       	call   10e1e <kernel_strlen>
   110f4:	83 c4 04             	add    $0x4,%esp
   110f7:	01 45 f8             	add    %eax,-0x8(%ebp)
   110fa:	eb 67                	jmp    11163 <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   110fc:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11100:	75 19                	jne    1111b <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   11102:	8b 45 10             	mov    0x10(%ebp),%eax
   11105:	8d 50 04             	lea    0x4(%eax),%edx
   11108:	89 55 10             	mov    %edx,0x10(%ebp)
   1110b:	8b 00                	mov    (%eax),%eax
   1110d:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   11110:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11113:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11117:	88 10                	mov    %dl,(%eax)
   11119:	eb 48                	jmp    11163 <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   1111b:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1111f:	75 42                	jne    11163 <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   11121:	8b 45 10             	mov    0x10(%ebp),%eax
   11124:	8d 50 04             	lea    0x4(%eax),%edx
   11127:	89 55 10             	mov    %edx,0x10(%ebp)
   1112a:	8b 00                	mov    (%eax),%eax
   1112c:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   1112f:	ff 75 f4             	push   -0xc(%ebp)
   11132:	e8 e7 fc ff ff       	call   10e1e <kernel_strlen>
   11137:	83 c4 04             	add    $0x4,%esp
   1113a:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   1113d:	eb 17                	jmp    11156 <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   1113f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11142:	8d 42 01             	lea    0x1(%edx),%eax
   11145:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11148:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1114b:	8d 48 01             	lea    0x1(%eax),%ecx
   1114e:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11151:	0f b6 12             	movzbl (%edx),%edx
   11154:	88 10                	mov    %dl,(%eax)
                while (len--)
   11156:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11159:	8d 50 ff             	lea    -0x1(%eax),%edx
   1115c:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1115f:	85 c0                	test   %eax,%eax
   11161:	75 dc                	jne    1113f <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   11163:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   1116a:	90                   	nop
    while ((ch = *fmt++))
   1116b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1116e:	8d 50 01             	lea    0x1(%eax),%edx
   11171:	89 55 0c             	mov    %edx,0xc(%ebp)
   11174:	0f b6 00             	movzbl (%eax),%eax
   11177:	88 45 ef             	mov    %al,-0x11(%ebp)
   1117a:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1117e:	0f 85 d6 fe ff ff    	jne    1105a <kernel_vsprintf+0x18>
        }
    }
}
   11184:	90                   	nop
   11185:	90                   	nop
   11186:	c9                   	leave
   11187:	c3                   	ret

00011188 <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   11188:	55                   	push   %ebp
   11189:	89 e5                	mov    %esp,%ebp
   1118b:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   1118e:	83 ec 08             	sub    $0x8,%esp
   11191:	ff 75 14             	push   0x14(%ebp)
   11194:	68 08 16 01 00       	push   $0x11608
   11199:	e8 ce 00 00 00       	call   1126c <log_prinf>
   1119e:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   111a1:	ff 75 10             	push   0x10(%ebp)
   111a4:	ff 75 0c             	push   0xc(%ebp)
   111a7:	ff 75 08             	push   0x8(%ebp)
   111aa:	68 1a 16 01 00       	push   $0x1161a
   111af:	e8 b8 00 00 00       	call   1126c <log_prinf>
   111b4:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   111b7:	e8 24 fb ff ff       	call   10ce0 <hlt>
   111bc:	eb f9                	jmp    111b7 <pannic+0x2f>

000111be <inb>:
    outb(COM1_PORT + 3, 0x80);
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
    outb(COM1_PORT + 4, 0x0F);
   111be:	55                   	push   %ebp
   111bf:	89 e5                	mov    %esp,%ebp
   111c1:	83 ec 14             	sub    $0x14,%esp
   111c4:	8b 45 08             	mov    0x8(%ebp),%eax
   111c7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
}

   111cb:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   111cf:	89 c2                	mov    %eax,%edx
   111d1:	ec                   	in     (%dx),%al
   111d2:	88 45 ff             	mov    %al,-0x1(%ebp)
void log_prinf(const char *fmt, ...)
{
    char str_buf[128];
   111d5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    va_list args;
   111d9:	c9                   	leave
   111da:	c3                   	ret

000111db <outb>:

    const char *p = str_buf;
    while (*p != '\0')
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
            ;
   111db:	55                   	push   %ebp
   111dc:	89 e5                	mov    %esp,%ebp
   111de:	83 ec 08             	sub    $0x8,%esp
   111e1:	8b 55 08             	mov    0x8(%ebp),%edx
   111e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   111e7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   111eb:	88 45 f8             	mov    %al,-0x8(%ebp)
        outb(COM1_PORT, *p++);
   111ee:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   111f2:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   111f6:	ee                   	out    %al,(%dx)
    }
   111f7:	90                   	nop
   111f8:	c9                   	leave
   111f9:	c3                   	ret

000111fa <init_log>:
{
   111fa:	55                   	push   %ebp
   111fb:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   111fd:	6a 00                	push   $0x0
   111ff:	68 f9 03 00 00       	push   $0x3f9
   11204:	e8 d2 ff ff ff       	call   111db <outb>
   11209:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   1120c:	68 80 00 00 00       	push   $0x80
   11211:	68 fb 03 00 00       	push   $0x3fb
   11216:	e8 c0 ff ff ff       	call   111db <outb>
   1121b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   1121e:	6a 03                	push   $0x3
   11220:	68 f8 03 00 00       	push   $0x3f8
   11225:	e8 b1 ff ff ff       	call   111db <outb>
   1122a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   1122d:	6a 00                	push   $0x0
   1122f:	68 f9 03 00 00       	push   $0x3f9
   11234:	e8 a2 ff ff ff       	call   111db <outb>
   11239:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   1123c:	6a 03                	push   $0x3
   1123e:	68 fb 03 00 00       	push   $0x3fb
   11243:	e8 93 ff ff ff       	call   111db <outb>
   11248:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x07);
   1124b:	6a 07                	push   $0x7
   1124d:	68 fa 03 00 00       	push   $0x3fa
   11252:	e8 84 ff ff ff       	call   111db <outb>
   11257:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   1125a:	6a 0f                	push   $0xf
   1125c:	68 fc 03 00 00       	push   $0x3fc
   11261:	e8 75 ff ff ff       	call   111db <outb>
   11266:	83 c4 08             	add    $0x8,%esp
}
   11269:	90                   	nop
   1126a:	c9                   	leave
   1126b:	c3                   	ret

0001126c <log_prinf>:
{
   1126c:	55                   	push   %ebp
   1126d:	89 e5                	mov    %esp,%ebp
   1126f:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   11275:	83 ec 04             	sub    $0x4,%esp
   11278:	68 80 00 00 00       	push   $0x80
   1127d:	6a 00                	push   $0x0
   1127f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11285:	50                   	push   %eax
   11286:	e8 1d fc ff ff       	call   10ea8 <kernel_memset>
   1128b:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   1128e:	8d 45 0c             	lea    0xc(%ebp),%eax
   11291:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   11297:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1129d:	83 ec 04             	sub    $0x4,%esp
   112a0:	50                   	push   %eax
   112a1:	ff 75 08             	push   0x8(%ebp)
   112a4:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   112aa:	50                   	push   %eax
   112ab:	e8 92 fd ff ff       	call   11042 <kernel_vsprintf>
   112b0:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   112b3:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   112b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   112bc:	eb 3b                	jmp    112f9 <log_prinf+0x8d>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   112be:	90                   	nop
   112bf:	83 ec 0c             	sub    $0xc,%esp
   112c2:	68 fd 03 00 00       	push   $0x3fd
   112c7:	e8 f2 fe ff ff       	call   111be <inb>
   112cc:	83 c4 10             	add    $0x10,%esp
   112cf:	0f b6 c0             	movzbl %al,%eax
   112d2:	83 e0 40             	and    $0x40,%eax
   112d5:	85 c0                	test   %eax,%eax
   112d7:	74 e6                	je     112bf <log_prinf+0x53>
        outb(COM1_PORT, *p++);
   112d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112dc:	8d 50 01             	lea    0x1(%eax),%edx
   112df:	89 55 f4             	mov    %edx,-0xc(%ebp)
   112e2:	0f b6 00             	movzbl (%eax),%eax
   112e5:	0f b6 c0             	movzbl %al,%eax
   112e8:	83 ec 08             	sub    $0x8,%esp
   112eb:	50                   	push   %eax
   112ec:	68 f8 03 00 00       	push   $0x3f8
   112f1:	e8 e5 fe ff ff       	call   111db <outb>
   112f6:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   112f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112fc:	0f b6 00             	movzbl (%eax),%eax
   112ff:	84 c0                	test   %al,%al
   11301:	75 bb                	jne    112be <log_prinf+0x52>

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   11303:	83 ec 08             	sub    $0x8,%esp
   11306:	6a 0d                	push   $0xd
   11308:	68 f8 03 00 00       	push   $0x3f8
   1130d:	e8 c9 fe ff ff       	call   111db <outb>
   11312:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   11315:	83 ec 08             	sub    $0x8,%esp
   11318:	6a 0a                	push   $0xa
   1131a:	68 f8 03 00 00       	push   $0x3f8
   1131f:	e8 b7 fe ff ff       	call   111db <outb>
   11324:	83 c4 10             	add    $0x10,%esp
}
   11327:	90                   	nop
   11328:	c9                   	leave
   11329:	c3                   	ret
