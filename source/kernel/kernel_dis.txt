
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001d80 memsz 0x00005b30 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a00  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000037c  00011a00  00011a00  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011d7c  00011d7c  00002d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003db0  00011d80  00011d80  00002d80  2**5
                  ALLOC
  4 .debug_line   00000d2c  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000622  00000000  00000000  00003aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00002234  00000000  00000000  000040ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000c5f  00000000  00000000  00006302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000120  00000000  00000000  00006f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000c0b  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  00007c93  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000bd4  00000000  00000000  00007ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102bd l     F .text	0000001b list_node_init
000102d8 l     F .text	0000000b list_count
000102e3 l     F .text	0000000a list_first
000102ed l     F .text	00000017 write_tr
00011d80 l     O .bss	000000c4 task_manager
00010304 l     F .text	00000104 tss_init
00011a80 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 cpu.c
000106c1 l     F .text	00000028 lgdt
000106e9 l     F .text	0000001a far_jump
00011e60 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
0001089d l     F .text	0000001d inb
000108ba l     F .text	0000001f outb
000108d9 l     F .text	00000007 cli
000108e0 l     F .text	00000007 sti
000108e7 l     F .text	00000028 lidt
0001090f l     F .text	00000007 hlt
00012660 l     O .bss	00000400 idt_table
00010916 l     F .text	000000d9 dump_core_regs
000109ef l     F .text	0000003e do_default_handler
00010c5d l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011026 l     F .text	0000001f outb
00012a60 l     O .bss	00000004 sys_tick
0001106d l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012a80 l     O .bss	00001000 init_task_stack
00013a80 l     O .bss	000000a8 init_task
00000000 l    df *ABS*	00000000 klib.c
000111be l     F .text	00000007 hlt
00011d7c l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 list.c
0001169c l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011894 l     F .text	0000001d inb
000118b1 l     F .text	0000001f outb
00011337 g     F .text	0000004f kernel_memcpy
000105a8 g     F .text	0000000a task_current
00010ff0 g     F .text	0000000b irq_enable_global
00011733 g     F .text	00000064 list_insert_last
00010b61 g     F .text	0000001c do_handler_segment_not_present
0001055f g     F .text	00000029 task_set_ready
00011386 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010892 g     F .text	0000000b cpu_init
00011130 g     F .text	0000008e init_main
0001020f g       .text	00000000 exception_handler_alignment_check
000111c5 g     F .text	00000047 kernel_strcpy
00010ed3 g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
00010ab9 g     F .text	0000001c do_handler_overflow
00010bed g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010b99 g     F .text	0000001c do_handler_general_protection
00010a49 g     F .text	0000001c do_handler_divider
00010b29 g     F .text	0000001c do_handler_double_fault
00011107 g     F .text	00000029 init_task_entry
00010bb5 g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010ffb g     F .text	0000002b pic_send_eoi
00010555 g     F .text	0000000a task_first_task
000118d0 g     F .text	00000072 init_log
00010a2d g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00010c41 g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
00013b30 g     O .bss	00002000 stack
000100e5 g       .text	00000000 exception_handler_bound_range
00010af1 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010bd1 g     F .text	0000001c do_handler_fpu_error
00010518 g     F .text	0000003d task_first_init
00010c09 g     F .text	0000001c do_handler_machine_check
00010a65 g     F .text	0000001c do_handler_Debug
000116d4 g     F .text	0000005f list_insert_first
00010a81 g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
0001120c g     F .text	00000070 kernel_strncpy
00010fe5 g     F .text	0000000b irq_disable_global
000105b2 g     F .text	00000048 sys_sched_yield
000110e5 g     F .text	00000022 kernel_init
00010000 g       .text	00000000 _start
00011520 g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
00010b45 g     F .text	0000001c do_handler_invalid_tss
00010e9e g     F .text	00000035 irq_install
00011942 g     F .text	000000be log_prinf
00010786 g     F .text	0000006d init_gdt
00010f5e g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00010b0d g     F .text	0000001c do_handler_device_unavailable
00010625 g     F .text	00000045 task_dispatch
0001087f g     F .text	00000013 switch_to_tss
000105fa g     F .text	0000002b task_next_run
000113c7 g     F .text	0000005e kernel_memcmp
000116af g     F .text	00000025 list_init
0001002b g       .text	00000000 exception_handler_unknow
00010c25 g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
00010588 g     F .text	00000020 task_set_block
000101f0 g       .text	00000000 exception_handler_fpu_error
000104c7 g     F .text	0000001e task_switch_from_to
0001083a g     F .text	00000045 gdt_alloc_des
00010cf0 g     F .text	000001ae irq_init
000112fc g     F .text	0000003b kernel_strlen
00010703 g     F .text	00000083 segment_desc_set
00010ad5 g     F .text	0000001c do_handler_bound_range
00011797 g     F .text	00000078 list_remove_first
0001127c g     F .text	00000080 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
000110cd g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
000104e5 g     F .text	00000033 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
0001066a g     F .text	00000057 task_time_tick
00011666 g     F .text	00000036 pannic
00010b7d g     F .text	0000001c do_handler_stack_segment_fault
00010a9d g     F .text	0000001c do_handler_breakpoint
00010408 g     F .text	000000bf task_init
00011425 g     F .text	00000024 kernel_sprintf
00011449 g     F .text	000000d7 kernel_itoa
0001180f g     F .text	00000085 list_remove
000107f3 g     F .text	00000047 gate_desc_set
00011045 g     F .text	00000028 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 d9 10 00 00       	call   110e5 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc 30 5b 01 00       	mov    $0x15b30,%esp
    jmp init_main
   10026:	e9 05 11 00 00       	jmp    11130 <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 f1 09 00 00       	call   10a2d <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 ee 09 00 00       	call   10a49 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 eb 09 00 00       	call   10a65 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 e8 09 00 00       	call   10a81 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 e5 09 00 00       	call   10a9d <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 e2 09 00 00       	call   10ab9 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 df 09 00 00       	call   10ad5 <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 dc 09 00 00       	call   10af1 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 d9 09 00 00       	call   10b0d <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 d8 09 00 00       	call   10b29 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 d7 09 00 00       	call   10b45 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 d6 09 00 00       	call   10b61 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 d5 09 00 00       	call   10b7d <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 d4 09 00 00       	call   10b99 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 d3 09 00 00       	call   10bb5 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 d0 09 00 00       	call   10bd1 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 cf 09 00 00       	call   10bed <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 cc 09 00 00       	call   10c09 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 c9 09 00 00       	call   10c25 <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 c6 09 00 00       	call   10c41 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 ab 0d 00 00       	call   11045 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <simple_switch>:
    //simple_switch(&from,&to)
     .text
     .global simple_switch
simple_switch:
    //取出from
    mov 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    //取出to
    mov 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp

    ret
   102bc:	c3                   	ret

000102bd <list_node_init>:
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
                     SEG_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t));
   102bd:	55                   	push   %ebp
   102be:	89 e5                	mov    %esp,%ebp

   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102ca:	8b 45 08             	mov    0x8(%ebp),%eax
   102cd:	8b 50 04             	mov    0x4(%eax),%edx
   102d0:	8b 45 08             	mov    0x8(%ebp),%eax
   102d3:	89 10                	mov    %edx,(%eax)
    task->tss.eip = entry;
   102d5:	90                   	nop
   102d6:	5d                   	pop    %ebp
   102d7:	c3                   	ret

000102d8 <list_count>:
    write_tr(task_manager.first_task.tss_sel);
    task_manager.currt_task = &task_manager.first_task;
}

task_t *task_first_task(void)
{
   102d8:	55                   	push   %ebp
   102d9:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   102db:	8b 45 08             	mov    0x8(%ebp),%eax
   102de:	8b 40 08             	mov    0x8(%eax),%eax
}
   102e1:	5d                   	pop    %ebp
   102e2:	c3                   	ret

000102e3 <list_first>:
{
    list_insert_last(&task_manager.ready_list, &task->run_node);
    task->state = TASK_READY;
}
// 将任务从就绪队列中移除 此时任务的状态不确定 有可能是等待 有可能是睡眠因此不设置状态置
void task_set_block(task_t *task)
   102e3:	55                   	push   %ebp
   102e4:	89 e5                	mov    %esp,%ebp
{
   102e6:	8b 45 08             	mov    0x8(%ebp),%eax
   102e9:	8b 00                	mov    (%eax),%eax
    list_remove(&task_manager.ready_list, &task->run_node);
   102eb:	5d                   	pop    %ebp
   102ec:	c3                   	ret

000102ed <write_tr>:
{
    __asm__ __volatile__("hlt");
}

static inline void write_tr(uint16_t tss_sel)
{
   102ed:	55                   	push   %ebp
   102ee:	89 e5                	mov    %esp,%ebp
   102f0:	83 ec 04             	sub    $0x4,%esp
   102f3:	8b 45 08             	mov    0x8(%ebp),%eax
   102f6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_sel));
   102fa:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102fe:	0f 00 d8             	ltr    %ax
}
   10301:	90                   	nop
   10302:	c9                   	leave
   10303:	c3                   	ret

00010304 <tss_init>:
{
   10304:	55                   	push   %ebp
   10305:	89 e5                	mov    %esp,%ebp
   10307:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_des();
   1030a:	e8 2b 05 00 00       	call   1083a <gdt_alloc_des>
   1030f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   10312:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10316:	79 1a                	jns    10332 <tss_init+0x2e>
        log_prinf("alloc tss failed");
   10318:	83 ec 0c             	sub    $0xc,%esp
   1031b:	68 00 1a 01 00       	push   $0x11a00
   10320:	e8 1d 16 00 00       	call   11942 <log_prinf>
   10325:	83 c4 10             	add    $0x10,%esp
        return -1;
   10328:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1032d:	e9 d4 00 00 00       	jmp    10406 <tss_init+0x102>
    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	83 c0 3c             	add    $0x3c,%eax
   10338:	68 89 00 00 00       	push   $0x89
   1033d:	68 a8 00 00 00       	push   $0xa8
   10342:	50                   	push   %eax
   10343:	ff 75 f4             	push   -0xc(%ebp)
   10346:	e8 b8 03 00 00       	call   10703 <segment_desc_set>
   1034b:	83 c4 10             	add    $0x10,%esp
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   1034e:	8b 45 08             	mov    0x8(%ebp),%eax
   10351:	83 c0 3c             	add    $0x3c,%eax
   10354:	83 ec 04             	sub    $0x4,%esp
   10357:	6a 68                	push   $0x68
   10359:	6a 00                	push   $0x0
   1035b:	50                   	push   %eax
   1035c:	e8 25 10 00 00       	call   11386 <kernel_memset>
   10361:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10364:	8b 45 08             	mov    0x8(%ebp),%eax
   10367:	8b 55 0c             	mov    0xc(%ebp),%edx
   1036a:	89 50 5c             	mov    %edx,0x5c(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1036d:	8b 45 08             	mov    0x8(%ebp),%eax
   10370:	8b 55 10             	mov    0x10(%ebp),%edx
   10373:	89 50 40             	mov    %edx,0x40(%eax)
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	8b 50 40             	mov    0x40(%eax),%edx
   1037c:	8b 45 08             	mov    0x8(%ebp),%eax
   1037f:	89 50 74             	mov    %edx,0x74(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	c7 40 44 10 00 00 00 	movl   $0x10,0x44(%eax)
   1038c:	8b 45 08             	mov    0x8(%ebp),%eax
   1038f:	8b 50 44             	mov    0x44(%eax),%edx
   10392:	8b 45 08             	mov    0x8(%ebp),%eax
   10395:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   1039b:	8b 45 08             	mov    0x8(%ebp),%eax
   1039e:	c7 80 98 00 00 00 10 	movl   $0x10,0x98(%eax)
   103a5:	00 00 00 
   103a8:	8b 45 08             	mov    0x8(%ebp),%eax
   103ab:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   103b1:	8b 45 08             	mov    0x8(%ebp),%eax
   103b4:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
   103ba:	8b 45 08             	mov    0x8(%ebp),%eax
   103bd:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
   103c3:	8b 45 08             	mov    0x8(%ebp),%eax
   103c6:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
   103cc:	8b 45 08             	mov    0x8(%ebp),%eax
   103cf:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   103d5:	8b 45 08             	mov    0x8(%ebp),%eax
   103d8:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   103de:	8b 45 08             	mov    0x8(%ebp),%eax
   103e1:	c7 80 88 00 00 00 08 	movl   $0x8,0x88(%eax)
   103e8:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFALUT;
   103eb:	8b 45 08             	mov    0x8(%ebp),%eax
   103ee:	c7 40 60 02 02 00 00 	movl   $0x202,0x60(%eax)
    task->tss_sel = tss_sel; // 将tss选择子保存到tss_sel中
   103f5:	8b 45 08             	mov    0x8(%ebp),%eax
   103f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103fb:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
    return 0;
   10401:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10406:	c9                   	leave
   10407:	c3                   	ret

00010408 <task_init>:
{
   10408:	55                   	push   %ebp
   10409:	89 e5                	mov    %esp,%ebp
   1040b:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t *)0);
   1040e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10412:	75 19                	jne    1042d <task_init+0x25>
   10414:	68 11 1a 01 00       	push   $0x11a11
   10419:	68 80 1a 01 00       	push   $0x11a80
   1041e:	6a 26                	push   $0x26
   10420:	68 28 1a 01 00       	push   $0x11a28
   10425:	e8 3c 12 00 00       	call   11666 <pannic>
   1042a:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1042d:	8b 45 08             	mov    0x8(%ebp),%eax
   10430:	83 c0 0c             	add    $0xc,%eax
   10433:	83 ec 04             	sub    $0x4,%esp
   10436:	6a 20                	push   $0x20
   10438:	ff 75 0c             	push   0xc(%ebp)
   1043b:	50                   	push   %eax
   1043c:	e8 cb 0d 00 00       	call   1120c <kernel_strncpy>
   10441:	83 c4 10             	add    $0x10,%esp
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10444:	8b 45 08             	mov    0x8(%ebp),%eax
   10447:	c7 40 04 0a 00 00 00 	movl   $0xa,0x4(%eax)
    task->slice_ticks = task->time_ticks;
   1044e:	8b 45 08             	mov    0x8(%ebp),%eax
   10451:	8b 50 04             	mov    0x4(%eax),%edx
   10454:	8b 45 08             	mov    0x8(%ebp),%eax
   10457:	89 50 08             	mov    %edx,0x8(%eax)
    task->state = TASK_CREATED; // 将开始创建的进程状态设置成task_created
   1045a:	8b 45 08             	mov    0x8(%ebp),%eax
   1045d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tss_init(task, entry, esp);
   10463:	83 ec 04             	sub    $0x4,%esp
   10466:	ff 75 14             	push   0x14(%ebp)
   10469:	ff 75 10             	push   0x10(%ebp)
   1046c:	ff 75 08             	push   0x8(%ebp)
   1046f:	e8 90 fe ff ff       	call   10304 <tss_init>
   10474:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   10477:	8b 45 08             	mov    0x8(%ebp),%eax
   1047a:	83 c0 34             	add    $0x34,%eax
   1047d:	83 ec 0c             	sub    $0xc,%esp
   10480:	50                   	push   %eax
   10481:	e8 37 fe ff ff       	call   102bd <list_node_init>
   10486:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10489:	8b 45 08             	mov    0x8(%ebp),%eax
   1048c:	83 c0 2c             	add    $0x2c,%eax
   1048f:	83 ec 0c             	sub    $0xc,%esp
   10492:	50                   	push   %eax
   10493:	e8 25 fe ff ff       	call   102bd <list_node_init>
   10498:	83 c4 10             	add    $0x10,%esp
    task_set_ready(task);
   1049b:	83 ec 0c             	sub    $0xc,%esp
   1049e:	ff 75 08             	push   0x8(%ebp)
   104a1:	e8 b9 00 00 00       	call   1055f <task_set_ready>
   104a6:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node);
   104a9:	8b 45 08             	mov    0x8(%ebp),%eax
   104ac:	83 c0 34             	add    $0x34,%eax
   104af:	83 ec 08             	sub    $0x8,%esp
   104b2:	50                   	push   %eax
   104b3:	68 90 1d 01 00       	push   $0x11d90
   104b8:	e8 76 12 00 00       	call   11733 <list_insert_last>
   104bd:	83 c4 10             	add    $0x10,%esp
    return 0;
   104c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   104c5:	c9                   	leave
   104c6:	c3                   	ret

000104c7 <task_switch_from_to>:
{
   104c7:	55                   	push   %ebp
   104c8:	89 e5                	mov    %esp,%ebp
   104ca:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   104cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   104d0:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
   104d6:	83 ec 0c             	sub    $0xc,%esp
   104d9:	50                   	push   %eax
   104da:	e8 a0 03 00 00       	call   1087f <switch_to_tss>
   104df:	83 c4 10             	add    $0x10,%esp
}
   104e2:	90                   	nop
   104e3:	c9                   	leave
   104e4:	c3                   	ret

000104e5 <task_manager_init>:
{
   104e5:	55                   	push   %ebp
   104e6:	89 e5                	mov    %esp,%ebp
   104e8:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   104eb:	83 ec 0c             	sub    $0xc,%esp
   104ee:	68 84 1d 01 00       	push   $0x11d84
   104f3:	e8 b7 11 00 00       	call   116af <list_init>
   104f8:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   104fb:	83 ec 0c             	sub    $0xc,%esp
   104fe:	68 90 1d 01 00       	push   $0x11d90
   10503:	e8 a7 11 00 00       	call   116af <list_init>
   10508:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = (task_t *)0;
   1050b:	c7 05 80 1d 01 00 00 	movl   $0x0,0x11d80
   10512:	00 00 00 
}
   10515:	90                   	nop
   10516:	c9                   	leave
   10517:	c3                   	ret

00010518 <task_first_init>:
{
   10518:	55                   	push   %ebp
   10519:	89 e5                	mov    %esp,%ebp
   1051b:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 0, 0); //??为什么入口设置为0，堆栈也设置为0
   1051e:	6a 00                	push   $0x0
   10520:	6a 00                	push   $0x0
   10522:	68 75 1a 01 00       	push   $0x11a75
   10527:	68 9c 1d 01 00       	push   $0x11d9c
   1052c:	e8 d7 fe ff ff       	call   10408 <task_init>
   10531:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10534:	a1 40 1e 01 00       	mov    0x11e40,%eax
   10539:	0f b7 c0             	movzwl %ax,%eax
   1053c:	83 ec 0c             	sub    $0xc,%esp
   1053f:	50                   	push   %eax
   10540:	e8 a8 fd ff ff       	call   102ed <write_tr>
   10545:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = &task_manager.first_task;
   10548:	c7 05 80 1d 01 00 9c 	movl   $0x11d9c,0x11d80
   1054f:	1d 01 00 
}
   10552:	90                   	nop
   10553:	c9                   	leave
   10554:	c3                   	ret

00010555 <task_first_task>:
{
   10555:	55                   	push   %ebp
   10556:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10558:	b8 9c 1d 01 00       	mov    $0x11d9c,%eax
}
   1055d:	5d                   	pop    %ebp
   1055e:	c3                   	ret

0001055f <task_set_ready>:
{
   1055f:	55                   	push   %ebp
   10560:	89 e5                	mov    %esp,%ebp
   10562:	83 ec 08             	sub    $0x8,%esp
    list_insert_last(&task_manager.ready_list, &task->run_node);
   10565:	8b 45 08             	mov    0x8(%ebp),%eax
   10568:	83 c0 2c             	add    $0x2c,%eax
   1056b:	83 ec 08             	sub    $0x8,%esp
   1056e:	50                   	push   %eax
   1056f:	68 84 1d 01 00       	push   $0x11d84
   10574:	e8 ba 11 00 00       	call   11733 <list_insert_last>
   10579:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1057c:	8b 45 08             	mov    0x8(%ebp),%eax
   1057f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   10585:	90                   	nop
   10586:	c9                   	leave
   10587:	c3                   	ret

00010588 <task_set_block>:
{
   10588:	55                   	push   %ebp
   10589:	89 e5                	mov    %esp,%ebp
   1058b:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list, &task->run_node);
   1058e:	8b 45 08             	mov    0x8(%ebp),%eax
   10591:	83 c0 2c             	add    $0x2c,%eax
   10594:	83 ec 08             	sub    $0x8,%esp
   10597:	50                   	push   %eax
   10598:	68 84 1d 01 00       	push   $0x11d84
   1059d:	e8 6d 12 00 00       	call   1180f <list_remove>
   105a2:	83 c4 10             	add    $0x10,%esp
}
   105a5:	90                   	nop
   105a6:	c9                   	leave
   105a7:	c3                   	ret

000105a8 <task_current>:

task_t *task_current(void)
{
   105a8:	55                   	push   %ebp
   105a9:	89 e5                	mov    %esp,%ebp
    return task_manager.currt_task;
   105ab:	a1 80 1d 01 00       	mov    0x11d80,%eax
}
   105b0:	5d                   	pop    %ebp
   105b1:	c3                   	ret

000105b2 <sys_sched_yield>:

int sys_sched_yield()
{
   105b2:	55                   	push   %ebp
   105b3:	89 e5                	mov    %esp,%ebp
   105b5:	83 ec 18             	sub    $0x18,%esp
    if (list_count(&task_manager.ready_list) > 1)
   105b8:	68 84 1d 01 00       	push   $0x11d84
   105bd:	e8 16 fd ff ff       	call   102d8 <list_count>
   105c2:	83 c4 04             	add    $0x4,%esp
   105c5:	83 f8 01             	cmp    $0x1,%eax
   105c8:	7e 29                	jle    105f3 <sys_sched_yield+0x41>
    {
        // 如果就绪队列中有其他的任务则将头部任务移到尾部
        task_t *current_task = task_current();
   105ca:	e8 d9 ff ff ff       	call   105a8 <task_current>
   105cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // 从队列头部取出当前任务
        task_set_block(current_task);
   105d2:	83 ec 0c             	sub    $0xc,%esp
   105d5:	ff 75 f4             	push   -0xc(%ebp)
   105d8:	e8 ab ff ff ff       	call   10588 <task_set_block>
   105dd:	83 c4 10             	add    $0x10,%esp
        // 将当前任务添加到队列尾部
        task_set_ready(current_task);
   105e0:	83 ec 0c             	sub    $0xc,%esp
   105e3:	ff 75 f4             	push   -0xc(%ebp)
   105e6:	e8 74 ff ff ff       	call   1055f <task_set_ready>
   105eb:	83 c4 10             	add    $0x10,%esp
        // 将cpu的使用权让给下一个任务
        task_dispatch();
   105ee:	e8 32 00 00 00       	call   10625 <task_dispatch>
    }
    // 没有其他的任务了就直接返回
    return 0;
   105f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   105f8:	c9                   	leave
   105f9:	c3                   	ret

000105fa <task_next_run>:

task_t *task_next_run(void)
{
   105fa:	55                   	push   %ebp
   105fb:	89 e5                	mov    %esp,%ebp
   105fd:	83 ec 10             	sub    $0x10,%esp
    list_node_t *task_node = list_first(&task_manager.ready_list);
   10600:	68 84 1d 01 00       	push   $0x11d84
   10605:	e8 d9 fc ff ff       	call   102e3 <list_first>
   1060a:	83 c4 04             	add    $0x4,%esp
   1060d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   10610:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10614:	74 08                	je     1061e <task_next_run+0x24>
   10616:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10619:	83 e8 2c             	sub    $0x2c,%eax
   1061c:	eb 05                	jmp    10623 <task_next_run+0x29>
   1061e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10623:	c9                   	leave
   10624:	c3                   	ret

00010625 <task_dispatch>:

void task_dispatch(void)
{
   10625:	55                   	push   %ebp
   10626:	89 e5                	mov    %esp,%ebp
   10628:	83 ec 18             	sub    $0x18,%esp
    task_t *to = task_next_run();
   1062b:	e8 ca ff ff ff       	call   105fa <task_next_run>
   10630:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.currt_task)
   10633:	a1 80 1d 01 00       	mov    0x11d80,%eax
   10638:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1063b:	74 2a                	je     10667 <task_dispatch+0x42>
    {
        task_t *from = task_current();
   1063d:	e8 66 ff ff ff       	call   105a8 <task_current>
   10642:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_manager.currt_task = to;
   10645:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10648:	a3 80 1d 01 00       	mov    %eax,0x11d80
        to->state = TASK_RUNNING;
   1064d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10650:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   10656:	83 ec 08             	sub    $0x8,%esp
   10659:	ff 75 f4             	push   -0xc(%ebp)
   1065c:	ff 75 f0             	push   -0x10(%ebp)
   1065f:	e8 63 fe ff ff       	call   104c7 <task_switch_from_to>
   10664:	83 c4 10             	add    $0x10,%esp
    }
}
   10667:	90                   	nop
   10668:	c9                   	leave
   10669:	c3                   	ret

0001066a <task_time_tick>:
// 当时间片到了之后将运行中队列中当前的任务移到队列尾部
// 并取出运行队列中的下一个任务
void task_time_tick()
{
   1066a:	55                   	push   %ebp
   1066b:	89 e5                	mov    %esp,%ebp
   1066d:	83 ec 18             	sub    $0x18,%esp
    task_t *current_task = task_current();
   10670:	e8 33 ff ff ff       	call   105a8 <task_current>
   10675:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 当前任务的运行时间片已经为0了
    if (--current_task->slice_ticks == 0)
   10678:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1067b:	8b 40 08             	mov    0x8(%eax),%eax
   1067e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10681:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10684:	89 50 08             	mov    %edx,0x8(%eax)
   10687:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1068a:	8b 40 08             	mov    0x8(%eax),%eax
   1068d:	85 c0                	test   %eax,%eax
   1068f:	75 2d                	jne    106be <task_time_tick+0x54>
    {
        // 将这次的任务重新设置计数
        current_task->slice_ticks = current_task->time_ticks;
   10691:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10694:	8b 50 04             	mov    0x4(%eax),%edx
   10697:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1069a:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_block(current_task);
   1069d:	83 ec 0c             	sub    $0xc,%esp
   106a0:	ff 75 f4             	push   -0xc(%ebp)
   106a3:	e8 e0 fe ff ff       	call   10588 <task_set_block>
   106a8:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   106ab:	83 ec 0c             	sub    $0xc,%esp
   106ae:	ff 75 f4             	push   -0xc(%ebp)
   106b1:	e8 a9 fe ff ff       	call   1055f <task_set_ready>
   106b6:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   106b9:	e8 67 ff ff ff       	call   10625 <task_dispatch>
    }
}
   106be:	90                   	nop
   106bf:	c9                   	leave
   106c0:	c3                   	ret

000106c1 <lgdt>:
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}

// 从gdt表中找到一个空闲的项设置给tss
int gdt_alloc_des(void)
{
   106c1:	55                   	push   %ebp
   106c2:	89 e5                	mov    %esp,%ebp
   106c4:	83 ec 10             	sub    $0x10,%esp
    {
        segment_desc_t *desc = gdt_table + i;
        if (desc->attr == 0)
        {
            return i * sizeof(segment_desc_t);
        }
   106c7:	8b 45 08             	mov    0x8(%ebp),%eax
   106ca:	c1 e8 10             	shr    $0x10,%eax
   106cd:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    }
   106d1:	8b 45 08             	mov    0x8(%ebp),%eax
   106d4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return -1;
   106d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   106db:	83 e8 01             	sub    $0x1,%eax
   106de:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   106e2:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

   106e6:	90                   	nop
   106e7:	c9                   	leave
   106e8:	c3                   	ret

000106e9 <far_jump>:
   106e9:	55                   	push   %ebp
   106ea:	89 e5                	mov    %esp,%ebp
   106ec:	83 ec 10             	sub    $0x10,%esp
   106ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   106f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
   106f5:	8b 45 08             	mov    0x8(%ebp),%eax
   106f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
   106fb:	8d 45 f8             	lea    -0x8(%ebp),%eax
   106fe:	ff 28                	ljmp   *(%eax)
   10700:	90                   	nop
   10701:	c9                   	leave
   10702:	c3                   	ret

00010703 <segment_desc_set>:
{
   10703:	55                   	push   %ebp
   10704:	89 e5                	mov    %esp,%ebp
   10706:	83 ec 14             	sub    $0x14,%esp
   10709:	8b 45 14             	mov    0x14(%ebp),%eax
   1070c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   10710:	8b 45 08             	mov    0x8(%ebp),%eax
   10713:	83 e0 f8             	and    $0xfffffff8,%eax
   10716:	05 60 1e 01 00       	add    $0x11e60,%eax
   1071b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   1071e:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10725:	76 0f                	jbe    10736 <segment_desc_set+0x33>
        attr |= SEG_G;
   10727:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   1072d:	8b 45 10             	mov    0x10(%ebp),%eax
   10730:	c1 e8 0c             	shr    $0xc,%eax
   10733:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   10736:	8b 45 10             	mov    0x10(%ebp),%eax
   10739:	89 c2                	mov    %eax,%edx
   1073b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1073e:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   10741:	8b 45 0c             	mov    0xc(%ebp),%eax
   10744:	89 c2                	mov    %eax,%edx
   10746:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10749:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   1074d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10750:	c1 e8 10             	shr    $0x10,%eax
   10753:	89 c2                	mov    %eax,%edx
   10755:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10758:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   1075b:	8b 45 10             	mov    0x10(%ebp),%eax
   1075e:	c1 e8 10             	shr    $0x10,%eax
   10761:	c1 e0 08             	shl    $0x8,%eax
   10764:	66 25 00 0f          	and    $0xf00,%ax
   10768:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1076c:	89 c2                	mov    %eax,%edx
   1076e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10771:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   10775:	8b 45 0c             	mov    0xc(%ebp),%eax
   10778:	c1 e8 18             	shr    $0x18,%eax
   1077b:	89 c2                	mov    %eax,%edx
   1077d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10780:	88 50 07             	mov    %dl,0x7(%eax)
}
   10783:	90                   	nop
   10784:	c9                   	leave
   10785:	c3                   	ret

00010786 <init_gdt>:
{
   10786:	55                   	push   %ebp
   10787:	89 e5                	mov    %esp,%ebp
   10789:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1078c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10793:	eb 19                	jmp    107ae <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10795:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10798:	c1 e0 03             	shl    $0x3,%eax
   1079b:	6a 00                	push   $0x0
   1079d:	6a 00                	push   $0x0
   1079f:	6a 00                	push   $0x0
   107a1:	50                   	push   %eax
   107a2:	e8 5c ff ff ff       	call   10703 <segment_desc_set>
   107a7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   107aa:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   107ae:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   107b5:	7e de                	jle    10795 <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   107b7:	68 92 40 00 00       	push   $0x4092
   107bc:	6a ff                	push   $0xffffffff
   107be:	6a 00                	push   $0x0
   107c0:	6a 10                	push   $0x10
   107c2:	e8 3c ff ff ff       	call   10703 <segment_desc_set>
   107c7:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   107ca:	68 9a 40 00 00       	push   $0x409a
   107cf:	6a ff                	push   $0xffffffff
   107d1:	6a 00                	push   $0x0
   107d3:	6a 08                	push   $0x8
   107d5:	e8 29 ff ff ff       	call   10703 <segment_desc_set>
   107da:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   107dd:	b8 60 1e 01 00       	mov    $0x11e60,%eax
   107e2:	68 00 08 00 00       	push   $0x800
   107e7:	50                   	push   %eax
   107e8:	e8 d4 fe ff ff       	call   106c1 <lgdt>
   107ed:	83 c4 08             	add    $0x8,%esp
}
   107f0:	90                   	nop
   107f1:	c9                   	leave
   107f2:	c3                   	ret

000107f3 <gate_desc_set>:
{
   107f3:	55                   	push   %ebp
   107f4:	89 e5                	mov    %esp,%ebp
   107f6:	83 ec 08             	sub    $0x8,%esp
   107f9:	8b 55 0c             	mov    0xc(%ebp),%edx
   107fc:	8b 45 14             	mov    0x14(%ebp),%eax
   107ff:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10803:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10807:	8b 45 10             	mov    0x10(%ebp),%eax
   1080a:	89 c2                	mov    %eax,%edx
   1080c:	8b 45 08             	mov    0x8(%ebp),%eax
   1080f:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10812:	8b 45 08             	mov    0x8(%ebp),%eax
   10815:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10819:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1081d:	8b 45 08             	mov    0x8(%ebp),%eax
   10820:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10824:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10828:	8b 45 10             	mov    0x10(%ebp),%eax
   1082b:	c1 e8 10             	shr    $0x10,%eax
   1082e:	89 c2                	mov    %eax,%edx
   10830:	8b 45 08             	mov    0x8(%ebp),%eax
   10833:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10837:	90                   	nop
   10838:	c9                   	leave
   10839:	c3                   	ret

0001083a <gdt_alloc_des>:
{
   1083a:	55                   	push   %ebp
   1083b:	89 e5                	mov    %esp,%ebp
   1083d:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10840:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10847:	eb 26                	jmp    1086f <gdt_alloc_des+0x35>
        segment_desc_t *desc = gdt_table + i;
   10849:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1084c:	c1 e0 03             	shl    $0x3,%eax
   1084f:	05 60 1e 01 00       	add    $0x11e60,%eax
   10854:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->attr == 0)
   10857:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1085a:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1085e:	66 85 c0             	test   %ax,%ax
   10861:	75 08                	jne    1086b <gdt_alloc_des+0x31>
            return i * sizeof(segment_desc_t);
   10863:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10866:	c1 e0 03             	shl    $0x3,%eax
   10869:	eb 12                	jmp    1087d <gdt_alloc_des+0x43>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1086b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1086f:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10876:	7e d1                	jle    10849 <gdt_alloc_des+0xf>
    return -1;
   10878:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1087d:	c9                   	leave
   1087e:	c3                   	ret

0001087f <switch_to_tss>:
{
   1087f:	55                   	push   %ebp
   10880:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   10882:	6a 00                	push   $0x0
   10884:	ff 75 08             	push   0x8(%ebp)
   10887:	e8 5d fe ff ff       	call   106e9 <far_jump>
   1088c:	83 c4 08             	add    $0x8,%esp
}
   1088f:	90                   	nop
   10890:	c9                   	leave
   10891:	c3                   	ret

00010892 <cpu_init>:
{
   10892:	55                   	push   %ebp
   10893:	89 e5                	mov    %esp,%ebp
    init_gdt();
   10895:	e8 ec fe ff ff       	call   10786 <init_gdt>
   1089a:	90                   	nop
   1089b:	5d                   	pop    %ebp
   1089c:	c3                   	ret

0001089d <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   1089d:	55                   	push   %ebp
   1089e:	89 e5                	mov    %esp,%ebp
   108a0:	83 ec 14             	sub    $0x14,%esp
   108a3:	8b 45 08             	mov    0x8(%ebp),%eax
   108a6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   108aa:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   108ae:	89 c2                	mov    %eax,%edx
   108b0:	ec                   	in     (%dx),%al
   108b1:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   108b4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   108b8:	c9                   	leave
   108b9:	c3                   	ret

000108ba <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   108ba:	55                   	push   %ebp
   108bb:	89 e5                	mov    %esp,%ebp
   108bd:	83 ec 08             	sub    $0x8,%esp
   108c0:	8b 55 08             	mov    0x8(%ebp),%edx
   108c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   108c6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   108ca:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   108cd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   108d1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   108d5:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   108d6:	90                   	nop
   108d7:	c9                   	leave
   108d8:	c3                   	ret

000108d9 <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   108d9:	55                   	push   %ebp
   108da:	89 e5                	mov    %esp,%ebp
        hlt();
   108dc:	fa                   	cli
    }
   108dd:	90                   	nop
   108de:	5d                   	pop    %ebp
   108df:	c3                   	ret

000108e0 <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   108e0:	55                   	push   %ebp
   108e1:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   108e3:	fb                   	sti
}
   108e4:	90                   	nop
   108e5:	5d                   	pop    %ebp
   108e6:	c3                   	ret

000108e7 <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   108e7:	55                   	push   %ebp
   108e8:	89 e5                	mov    %esp,%ebp
   108ea:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   108ed:	8b 45 08             	mov    0x8(%ebp),%eax
   108f0:	c1 e8 10             	shr    $0x10,%eax
   108f3:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   108f7:	8b 45 08             	mov    0x8(%ebp),%eax
   108fa:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   108fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   10901:	83 e8 01             	sub    $0x1,%eax
   10904:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10908:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   1090c:	90                   	nop
   1090d:	c9                   	leave
   1090e:	c3                   	ret

0001090f <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   1090f:	55                   	push   %ebp
   10910:	89 e5                	mov    %esp,%ebp
}
   10912:	f4                   	hlt

   10913:	90                   	nop
   10914:	5d                   	pop    %ebp
   10915:	c3                   	ret

00010916 <dump_core_regs>:
{
   10916:	55                   	push   %ebp
   10917:	89 e5                	mov    %esp,%ebp
   10919:	57                   	push   %edi
   1091a:	56                   	push   %esi
   1091b:	53                   	push   %ebx
   1091c:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   1091f:	8b 45 08             	mov    0x8(%ebp),%eax
   10922:	8b 50 34             	mov    0x34(%eax),%edx
   10925:	8b 45 08             	mov    0x8(%ebp),%eax
   10928:	8b 40 30             	mov    0x30(%eax),%eax
   1092b:	83 ec 04             	sub    $0x4,%esp
   1092e:	52                   	push   %edx
   1092f:	50                   	push   %eax
   10930:	68 8c 1a 01 00       	push   $0x11a8c
   10935:	e8 08 10 00 00       	call   11942 <log_prinf>
   1093a:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   1093d:	8b 45 08             	mov    0x8(%ebp),%eax
   10940:	8b 38                	mov    (%eax),%edi
   10942:	8b 45 08             	mov    0x8(%ebp),%eax
   10945:	8b 70 04             	mov    0x4(%eax),%esi
   10948:	8b 45 08             	mov    0x8(%ebp),%eax
   1094b:	8b 58 0c             	mov    0xc(%eax),%ebx
   1094e:	8b 45 08             	mov    0x8(%ebp),%eax
   10951:	8b 48 08             	mov    0x8(%eax),%ecx
   10954:	8b 45 08             	mov    0x8(%ebp),%eax
   10957:	8b 50 0c             	mov    0xc(%eax),%edx
   1095a:	8b 45 08             	mov    0x8(%ebp),%eax
   1095d:	8b 40 3c             	mov    0x3c(%eax),%eax
   10960:	83 ec 04             	sub    $0x4,%esp
   10963:	57                   	push   %edi
   10964:	56                   	push   %esi
   10965:	53                   	push   %ebx
   10966:	51                   	push   %ecx
   10967:	52                   	push   %edx
   10968:	50                   	push   %eax
   10969:	68 a4 1a 01 00       	push   $0x11aa4
   1096e:	e8 cf 0f 00 00       	call   11942 <log_prinf>
   10973:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   10976:	8b 45 08             	mov    0x8(%ebp),%eax
   10979:	8b 48 1c             	mov    0x1c(%eax),%ecx
   1097c:	8b 45 08             	mov    0x8(%ebp),%eax
   1097f:	8b 40 18             	mov    0x18(%eax),%eax
   10982:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10985:	8b 45 08             	mov    0x8(%ebp),%eax
   10988:	8b 58 14             	mov    0x14(%eax),%ebx
   1098b:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   1098e:	8b 45 08             	mov    0x8(%ebp),%eax
   10991:	8b 78 10             	mov    0x10(%eax),%edi
   10994:	8b 45 08             	mov    0x8(%ebp),%eax
   10997:	8b 70 24             	mov    0x24(%eax),%esi
   1099a:	8b 45 08             	mov    0x8(%ebp),%eax
   1099d:	8b 58 28             	mov    0x28(%eax),%ebx
   109a0:	8b 45 08             	mov    0x8(%ebp),%eax
   109a3:	8b 50 20             	mov    0x20(%eax),%edx
   109a6:	8b 45 08             	mov    0x8(%ebp),%eax
   109a9:	8b 40 2c             	mov    0x2c(%eax),%eax
   109ac:	83 ec 0c             	sub    $0xc,%esp
   109af:	51                   	push   %ecx
   109b0:	ff 75 e4             	push   -0x1c(%ebp)
   109b3:	ff 75 e0             	push   -0x20(%ebp)
   109b6:	57                   	push   %edi
   109b7:	56                   	push   %esi
   109b8:	53                   	push   %ebx
   109b9:	52                   	push   %edx
   109ba:	50                   	push   %eax
   109bb:	68 cc 1a 01 00       	push   $0x11acc
   109c0:	e8 7d 0f 00 00       	call   11942 <log_prinf>
   109c5:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   109c8:	8b 45 08             	mov    0x8(%ebp),%eax
   109cb:	8b 50 40             	mov    0x40(%eax),%edx
   109ce:	8b 45 08             	mov    0x8(%ebp),%eax
   109d1:	8b 40 38             	mov    0x38(%eax),%eax
   109d4:	83 ec 04             	sub    $0x4,%esp
   109d7:	52                   	push   %edx
   109d8:	50                   	push   %eax
   109d9:	68 1d 1b 01 00       	push   $0x11b1d
   109de:	e8 5f 0f 00 00       	call   11942 <log_prinf>
   109e3:	83 c4 10             	add    $0x10,%esp
}
   109e6:	90                   	nop
   109e7:	8d 65 f4             	lea    -0xc(%ebp),%esp
   109ea:	5b                   	pop    %ebx
   109eb:	5e                   	pop    %esi
   109ec:	5f                   	pop    %edi
   109ed:	5d                   	pop    %ebp
   109ee:	c3                   	ret

000109ef <do_default_handler>:
{
   109ef:	55                   	push   %ebp
   109f0:	89 e5                	mov    %esp,%ebp
   109f2:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   109f5:	83 ec 0c             	sub    $0xc,%esp
   109f8:	68 36 1b 01 00       	push   $0x11b36
   109fd:	e8 40 0f 00 00       	call   11942 <log_prinf>
   10a02:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   10a05:	83 ec 08             	sub    $0x8,%esp
   10a08:	ff 75 0c             	push   0xc(%ebp)
   10a0b:	68 53 1b 01 00       	push   $0x11b53
   10a10:	e8 2d 0f 00 00       	call   11942 <log_prinf>
   10a15:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10a18:	83 ec 0c             	sub    $0xc,%esp
   10a1b:	ff 75 08             	push   0x8(%ebp)
   10a1e:	e8 f3 fe ff ff       	call   10916 <dump_core_regs>
   10a23:	83 c4 10             	add    $0x10,%esp
        hlt();
   10a26:	e8 e4 fe ff ff       	call   1090f <hlt>
   10a2b:	eb f9                	jmp    10a26 <do_default_handler+0x37>

00010a2d <do_handler_unknow>:
{
   10a2d:	55                   	push   %ebp
   10a2e:	89 e5                	mov    %esp,%ebp
   10a30:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   10a33:	83 ec 08             	sub    $0x8,%esp
   10a36:	68 64 1b 01 00       	push   $0x11b64
   10a3b:	ff 75 08             	push   0x8(%ebp)
   10a3e:	e8 ac ff ff ff       	call   109ef <do_default_handler>
   10a43:	83 c4 10             	add    $0x10,%esp
}
   10a46:	90                   	nop
   10a47:	c9                   	leave
   10a48:	c3                   	ret

00010a49 <do_handler_divider>:
{
   10a49:	55                   	push   %ebp
   10a4a:	89 e5                	mov    %esp,%ebp
   10a4c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   10a4f:	83 ec 08             	sub    $0x8,%esp
   10a52:	68 78 1b 01 00       	push   $0x11b78
   10a57:	ff 75 08             	push   0x8(%ebp)
   10a5a:	e8 90 ff ff ff       	call   109ef <do_default_handler>
   10a5f:	83 c4 10             	add    $0x10,%esp
}
   10a62:	90                   	nop
   10a63:	c9                   	leave
   10a64:	c3                   	ret

00010a65 <do_handler_Debug>:
{
   10a65:	55                   	push   %ebp
   10a66:	89 e5                	mov    %esp,%ebp
   10a68:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   10a6b:	83 ec 08             	sub    $0x8,%esp
   10a6e:	68 8d 1b 01 00       	push   $0x11b8d
   10a73:	ff 75 08             	push   0x8(%ebp)
   10a76:	e8 74 ff ff ff       	call   109ef <do_default_handler>
   10a7b:	83 c4 10             	add    $0x10,%esp
}
   10a7e:	90                   	nop
   10a7f:	c9                   	leave
   10a80:	c3                   	ret

00010a81 <do_handler_NMI>:
{
   10a81:	55                   	push   %ebp
   10a82:	89 e5                	mov    %esp,%ebp
   10a84:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10a87:	83 ec 08             	sub    $0x8,%esp
   10a8a:	68 9d 1b 01 00       	push   $0x11b9d
   10a8f:	ff 75 08             	push   0x8(%ebp)
   10a92:	e8 58 ff ff ff       	call   109ef <do_default_handler>
   10a97:	83 c4 10             	add    $0x10,%esp
}
   10a9a:	90                   	nop
   10a9b:	c9                   	leave
   10a9c:	c3                   	ret

00010a9d <do_handler_breakpoint>:
{
   10a9d:	55                   	push   %ebp
   10a9e:	89 e5                	mov    %esp,%ebp
   10aa0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10aa3:	83 ec 08             	sub    $0x8,%esp
   10aa6:	68 ac 1b 01 00       	push   $0x11bac
   10aab:	ff 75 08             	push   0x8(%ebp)
   10aae:	e8 3c ff ff ff       	call   109ef <do_default_handler>
   10ab3:	83 c4 10             	add    $0x10,%esp
}
   10ab6:	90                   	nop
   10ab7:	c9                   	leave
   10ab8:	c3                   	ret

00010ab9 <do_handler_overflow>:
{
   10ab9:	55                   	push   %ebp
   10aba:	89 e5                	mov    %esp,%ebp
   10abc:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10abf:	83 ec 08             	sub    $0x8,%esp
   10ac2:	68 b8 1b 01 00       	push   $0x11bb8
   10ac7:	ff 75 08             	push   0x8(%ebp)
   10aca:	e8 20 ff ff ff       	call   109ef <do_default_handler>
   10acf:	83 c4 10             	add    $0x10,%esp
}
   10ad2:	90                   	nop
   10ad3:	c9                   	leave
   10ad4:	c3                   	ret

00010ad5 <do_handler_bound_range>:
{
   10ad5:	55                   	push   %ebp
   10ad6:	89 e5                	mov    %esp,%ebp
   10ad8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10adb:	83 ec 08             	sub    $0x8,%esp
   10ade:	68 c2 1b 01 00       	push   $0x11bc2
   10ae3:	ff 75 08             	push   0x8(%ebp)
   10ae6:	e8 04 ff ff ff       	call   109ef <do_default_handler>
   10aeb:	83 c4 10             	add    $0x10,%esp
}
   10aee:	90                   	nop
   10aef:	c9                   	leave
   10af0:	c3                   	ret

00010af1 <do_handler_invalid_opcode>:
{
   10af1:	55                   	push   %ebp
   10af2:	89 e5                	mov    %esp,%ebp
   10af4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10af7:	83 ec 08             	sub    $0x8,%esp
   10afa:	68 d8 1b 01 00       	push   $0x11bd8
   10aff:	ff 75 08             	push   0x8(%ebp)
   10b02:	e8 e8 fe ff ff       	call   109ef <do_default_handler>
   10b07:	83 c4 10             	add    $0x10,%esp
}
   10b0a:	90                   	nop
   10b0b:	c9                   	leave
   10b0c:	c3                   	ret

00010b0d <do_handler_device_unavailable>:
{
   10b0d:	55                   	push   %ebp
   10b0e:	89 e5                	mov    %esp,%ebp
   10b10:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10b13:	83 ec 08             	sub    $0x8,%esp
   10b16:	68 e8 1b 01 00       	push   $0x11be8
   10b1b:	ff 75 08             	push   0x8(%ebp)
   10b1e:	e8 cc fe ff ff       	call   109ef <do_default_handler>
   10b23:	83 c4 10             	add    $0x10,%esp
}
   10b26:	90                   	nop
   10b27:	c9                   	leave
   10b28:	c3                   	ret

00010b29 <do_handler_double_fault>:
{
   10b29:	55                   	push   %ebp
   10b2a:	89 e5                	mov    %esp,%ebp
   10b2c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   10b2f:	83 ec 08             	sub    $0x8,%esp
   10b32:	68 fe 1b 01 00       	push   $0x11bfe
   10b37:	ff 75 08             	push   0x8(%ebp)
   10b3a:	e8 b0 fe ff ff       	call   109ef <do_default_handler>
   10b3f:	83 c4 10             	add    $0x10,%esp
}
   10b42:	90                   	nop
   10b43:	c9                   	leave
   10b44:	c3                   	ret

00010b45 <do_handler_invalid_tss>:
{
   10b45:	55                   	push   %ebp
   10b46:	89 e5                	mov    %esp,%ebp
   10b48:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   10b4b:	83 ec 08             	sub    $0x8,%esp
   10b4e:	68 0c 1c 01 00       	push   $0x11c0c
   10b53:	ff 75 08             	push   0x8(%ebp)
   10b56:	e8 94 fe ff ff       	call   109ef <do_default_handler>
   10b5b:	83 c4 10             	add    $0x10,%esp
}
   10b5e:	90                   	nop
   10b5f:	c9                   	leave
   10b60:	c3                   	ret

00010b61 <do_handler_segment_not_present>:
{
   10b61:	55                   	push   %ebp
   10b62:	89 e5                	mov    %esp,%ebp
   10b64:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10b67:	83 ec 08             	sub    $0x8,%esp
   10b6a:	68 18 1c 01 00       	push   $0x11c18
   10b6f:	ff 75 08             	push   0x8(%ebp)
   10b72:	e8 78 fe ff ff       	call   109ef <do_default_handler>
   10b77:	83 c4 10             	add    $0x10,%esp
}
   10b7a:	90                   	nop
   10b7b:	c9                   	leave
   10b7c:	c3                   	ret

00010b7d <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   10b7d:	55                   	push   %ebp
   10b7e:	89 e5                	mov    %esp,%ebp
   10b80:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10b83:	83 ec 08             	sub    $0x8,%esp
   10b86:	68 2d 1c 01 00       	push   $0x11c2d
   10b8b:	ff 75 08             	push   0x8(%ebp)
   10b8e:	e8 5c fe ff ff       	call   109ef <do_default_handler>
   10b93:	83 c4 10             	add    $0x10,%esp
}
   10b96:	90                   	nop
   10b97:	c9                   	leave
   10b98:	c3                   	ret

00010b99 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   10b99:	55                   	push   %ebp
   10b9a:	89 e5                	mov    %esp,%ebp
   10b9c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   10b9f:	83 ec 08             	sub    $0x8,%esp
   10ba2:	68 42 1c 01 00       	push   $0x11c42
   10ba7:	ff 75 08             	push   0x8(%ebp)
   10baa:	e8 40 fe ff ff       	call   109ef <do_default_handler>
   10baf:	83 c4 10             	add    $0x10,%esp
}
   10bb2:	90                   	nop
   10bb3:	c9                   	leave
   10bb4:	c3                   	ret

00010bb5 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t *frame)
{
   10bb5:	55                   	push   %ebp
   10bb6:	89 e5                	mov    %esp,%ebp
   10bb8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10bbb:	83 ec 08             	sub    $0x8,%esp
   10bbe:	68 56 1c 01 00       	push   $0x11c56
   10bc3:	ff 75 08             	push   0x8(%ebp)
   10bc6:	e8 24 fe ff ff       	call   109ef <do_default_handler>
   10bcb:	83 c4 10             	add    $0x10,%esp
}
   10bce:	90                   	nop
   10bcf:	c9                   	leave
   10bd0:	c3                   	ret

00010bd1 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   10bd1:	55                   	push   %ebp
   10bd2:	89 e5                	mov    %esp,%ebp
   10bd4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10bd7:	83 ec 08             	sub    $0x8,%esp
   10bda:	68 62 1c 01 00       	push   $0x11c62
   10bdf:	ff 75 08             	push   0x8(%ebp)
   10be2:	e8 08 fe ff ff       	call   109ef <do_default_handler>
   10be7:	83 c4 10             	add    $0x10,%esp
}
   10bea:	90                   	nop
   10beb:	c9                   	leave
   10bec:	c3                   	ret

00010bed <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   10bed:	55                   	push   %ebp
   10bee:	89 e5                	mov    %esp,%ebp
   10bf0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10bf3:	83 ec 08             	sub    $0x8,%esp
   10bf6:	68 80 1c 01 00       	push   $0x11c80
   10bfb:	ff 75 08             	push   0x8(%ebp)
   10bfe:	e8 ec fd ff ff       	call   109ef <do_default_handler>
   10c03:	83 c4 10             	add    $0x10,%esp
}
   10c06:	90                   	nop
   10c07:	c9                   	leave
   10c08:	c3                   	ret

00010c09 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   10c09:	55                   	push   %ebp
   10c0a:	89 e5                	mov    %esp,%ebp
   10c0c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   10c0f:	83 ec 08             	sub    $0x8,%esp
   10c12:	68 91 1c 01 00       	push   $0x11c91
   10c17:	ff 75 08             	push   0x8(%ebp)
   10c1a:	e8 d0 fd ff ff       	call   109ef <do_default_handler>
   10c1f:	83 c4 10             	add    $0x10,%esp
}
   10c22:	90                   	nop
   10c23:	c9                   	leave
   10c24:	c3                   	ret

00010c25 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   10c25:	55                   	push   %ebp
   10c26:	89 e5                	mov    %esp,%ebp
   10c28:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   10c2b:	83 ec 08             	sub    $0x8,%esp
   10c2e:	68 a0 1c 01 00       	push   $0x11ca0
   10c33:	ff 75 08             	push   0x8(%ebp)
   10c36:	e8 b4 fd ff ff       	call   109ef <do_default_handler>
   10c3b:	83 c4 10             	add    $0x10,%esp
}
   10c3e:	90                   	nop
   10c3f:	c9                   	leave
   10c40:	c3                   	ret

00010c41 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   10c41:	55                   	push   %ebp
   10c42:	89 e5                	mov    %esp,%ebp
   10c44:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   10c47:	83 ec 08             	sub    $0x8,%esp
   10c4a:	68 bf 1c 01 00       	push   $0x11cbf
   10c4f:	ff 75 08             	push   0x8(%ebp)
   10c52:	e8 98 fd ff ff       	call   109ef <do_default_handler>
   10c57:	83 c4 10             	add    $0x10,%esp
}
   10c5a:	90                   	nop
   10c5b:	c9                   	leave
   10c5c:	c3                   	ret

00010c5d <init_pic>:

static void init_pic(void)
{
   10c5d:	55                   	push   %ebp
   10c5e:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10c60:	6a 11                	push   $0x11
   10c62:	6a 20                	push   $0x20
   10c64:	e8 51 fc ff ff       	call   108ba <outb>
   10c69:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10c6c:	6a 20                	push   $0x20
   10c6e:	6a 21                	push   $0x21
   10c70:	e8 45 fc ff ff       	call   108ba <outb>
   10c75:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10c78:	6a 04                	push   $0x4
   10c7a:	6a 21                	push   $0x21
   10c7c:	e8 39 fc ff ff       	call   108ba <outb>
   10c81:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10c84:	6a 01                	push   $0x1
   10c86:	6a 21                	push   $0x21
   10c88:	e8 2d fc ff ff       	call   108ba <outb>
   10c8d:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10c90:	6a 11                	push   $0x11
   10c92:	68 a0 00 00 00       	push   $0xa0
   10c97:	e8 1e fc ff ff       	call   108ba <outb>
   10c9c:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10c9f:	6a 28                	push   $0x28
   10ca1:	68 a1 00 00 00       	push   $0xa1
   10ca6:	e8 0f fc ff ff       	call   108ba <outb>
   10cab:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10cae:	6a 02                	push   $0x2
   10cb0:	68 a1 00 00 00       	push   $0xa1
   10cb5:	e8 00 fc ff ff       	call   108ba <outb>
   10cba:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10cbd:	6a 01                	push   $0x1
   10cbf:	68 a1 00 00 00       	push   $0xa1
   10cc4:	e8 f1 fb ff ff       	call   108ba <outb>
   10cc9:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10ccc:	68 fb 00 00 00       	push   $0xfb
   10cd1:	6a 21                	push   $0x21
   10cd3:	e8 e2 fb ff ff       	call   108ba <outb>
   10cd8:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   10cdb:	68 ff 00 00 00       	push   $0xff
   10ce0:	68 a1 00 00 00       	push   $0xa1
   10ce5:	e8 d0 fb ff ff       	call   108ba <outb>
   10cea:	83 c4 08             	add    $0x8,%esp
}
   10ced:	90                   	nop
   10cee:	c9                   	leave
   10cef:	c3                   	ret

00010cf0 <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   10cf0:	55                   	push   %ebp
   10cf1:	89 e5                	mov    %esp,%ebp
   10cf3:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10cf6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10cfd:	eb 25                	jmp    10d24 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10cff:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10d04:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d07:	c1 e0 03             	shl    $0x3,%eax
   10d0a:	05 60 26 01 00       	add    $0x12660,%eax
   10d0f:	68 00 8e 00 00       	push   $0x8e00
   10d14:	52                   	push   %edx
   10d15:	6a 08                	push   $0x8
   10d17:	50                   	push   %eax
   10d18:	e8 d6 fa ff ff       	call   107f3 <gate_desc_set>
   10d1d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10d20:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10d24:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10d28:	7e d5                	jle    10cff <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10d2a:	83 ec 08             	sub    $0x8,%esp
   10d2d:	68 4a 00 01 00       	push   $0x1004a
   10d32:	6a 00                	push   $0x0
   10d34:	e8 65 01 00 00       	call   10e9e <irq_install>
   10d39:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10d3c:	83 ec 08             	sub    $0x8,%esp
   10d3f:	68 69 00 01 00       	push   $0x10069
   10d44:	6a 01                	push   $0x1
   10d46:	e8 53 01 00 00       	call   10e9e <irq_install>
   10d4b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10d4e:	83 ec 08             	sub    $0x8,%esp
   10d51:	68 88 00 01 00       	push   $0x10088
   10d56:	6a 02                	push   $0x2
   10d58:	e8 41 01 00 00       	call   10e9e <irq_install>
   10d5d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10d60:	83 ec 08             	sub    $0x8,%esp
   10d63:	68 a7 00 01 00       	push   $0x100a7
   10d68:	6a 03                	push   $0x3
   10d6a:	e8 2f 01 00 00       	call   10e9e <irq_install>
   10d6f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10d72:	83 ec 08             	sub    $0x8,%esp
   10d75:	68 c6 00 01 00       	push   $0x100c6
   10d7a:	6a 04                	push   $0x4
   10d7c:	e8 1d 01 00 00       	call   10e9e <irq_install>
   10d81:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10d84:	83 ec 08             	sub    $0x8,%esp
   10d87:	68 e5 00 01 00       	push   $0x100e5
   10d8c:	6a 05                	push   $0x5
   10d8e:	e8 0b 01 00 00       	call   10e9e <irq_install>
   10d93:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10d96:	83 ec 08             	sub    $0x8,%esp
   10d99:	68 04 01 01 00       	push   $0x10104
   10d9e:	6a 06                	push   $0x6
   10da0:	e8 f9 00 00 00       	call   10e9e <irq_install>
   10da5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10da8:	83 ec 08             	sub    $0x8,%esp
   10dab:	68 23 01 01 00       	push   $0x10123
   10db0:	6a 07                	push   $0x7
   10db2:	e8 e7 00 00 00       	call   10e9e <irq_install>
   10db7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10dba:	83 ec 08             	sub    $0x8,%esp
   10dbd:	68 42 01 01 00       	push   $0x10142
   10dc2:	6a 08                	push   $0x8
   10dc4:	e8 d5 00 00 00       	call   10e9e <irq_install>
   10dc9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   10dcc:	83 ec 08             	sub    $0x8,%esp
   10dcf:	68 5f 01 01 00       	push   $0x1015f
   10dd4:	6a 0a                	push   $0xa
   10dd6:	e8 c3 00 00 00       	call   10e9e <irq_install>
   10ddb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   10dde:	83 ec 08             	sub    $0x8,%esp
   10de1:	68 7c 01 01 00       	push   $0x1017c
   10de6:	6a 0b                	push   $0xb
   10de8:	e8 b1 00 00 00       	call   10e9e <irq_install>
   10ded:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   10df0:	83 ec 08             	sub    $0x8,%esp
   10df3:	68 99 01 01 00       	push   $0x10199
   10df8:	6a 0c                	push   $0xc
   10dfa:	e8 9f 00 00 00       	call   10e9e <irq_install>
   10dff:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   10e02:	83 ec 08             	sub    $0x8,%esp
   10e05:	68 b6 01 01 00       	push   $0x101b6
   10e0a:	6a 0d                	push   $0xd
   10e0c:	e8 8d 00 00 00       	call   10e9e <irq_install>
   10e11:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   10e14:	83 ec 08             	sub    $0x8,%esp
   10e17:	68 d3 01 01 00       	push   $0x101d3
   10e1c:	6a 0e                	push   $0xe
   10e1e:	e8 7b 00 00 00       	call   10e9e <irq_install>
   10e23:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   10e26:	83 ec 08             	sub    $0x8,%esp
   10e29:	68 f0 01 01 00       	push   $0x101f0
   10e2e:	6a 10                	push   $0x10
   10e30:	e8 69 00 00 00       	call   10e9e <irq_install>
   10e35:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   10e38:	83 ec 08             	sub    $0x8,%esp
   10e3b:	68 0f 02 01 00       	push   $0x1020f
   10e40:	6a 11                	push   $0x11
   10e42:	e8 57 00 00 00       	call   10e9e <irq_install>
   10e47:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   10e4a:	83 ec 08             	sub    $0x8,%esp
   10e4d:	68 2c 02 01 00       	push   $0x1022c
   10e52:	6a 12                	push   $0x12
   10e54:	e8 45 00 00 00       	call   10e9e <irq_install>
   10e59:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   10e5c:	83 ec 08             	sub    $0x8,%esp
   10e5f:	68 4b 02 01 00       	push   $0x1024b
   10e64:	6a 13                	push   $0x13
   10e66:	e8 33 00 00 00       	call   10e9e <irq_install>
   10e6b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   10e6e:	83 ec 08             	sub    $0x8,%esp
   10e71:	68 6a 02 01 00       	push   $0x1026a
   10e76:	6a 14                	push   $0x14
   10e78:	e8 21 00 00 00       	call   10e9e <irq_install>
   10e7d:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10e80:	b8 60 26 01 00       	mov    $0x12660,%eax
   10e85:	83 ec 08             	sub    $0x8,%esp
   10e88:	68 00 04 00 00       	push   $0x400
   10e8d:	50                   	push   %eax
   10e8e:	e8 54 fa ff ff       	call   108e7 <lidt>
   10e93:	83 c4 10             	add    $0x10,%esp

    init_pic();
   10e96:	e8 c2 fd ff ff       	call   10c5d <init_pic>
}
   10e9b:	90                   	nop
   10e9c:	c9                   	leave
   10e9d:	c3                   	ret

00010e9e <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   10e9e:	55                   	push   %ebp
   10e9f:	89 e5                	mov    %esp,%ebp
   10ea1:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   10ea4:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10ea8:	7e 07                	jle    10eb1 <irq_install+0x13>
    {
        return -1;
   10eaa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10eaf:	eb 20                	jmp    10ed1 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10eb1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10eb4:	8b 55 08             	mov    0x8(%ebp),%edx
   10eb7:	c1 e2 03             	shl    $0x3,%edx
   10eba:	81 c2 60 26 01 00    	add    $0x12660,%edx
   10ec0:	68 00 8e 00 00       	push   $0x8e00
   10ec5:	50                   	push   %eax
   10ec6:	6a 08                	push   $0x8
   10ec8:	52                   	push   %edx
   10ec9:	e8 25 f9 ff ff       	call   107f3 <gate_desc_set>
   10ece:	83 c4 10             	add    $0x10,%esp
}
   10ed1:	c9                   	leave
   10ed2:	c3                   	ret

00010ed3 <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   10ed3:	55                   	push   %ebp
   10ed4:	89 e5                	mov    %esp,%ebp
   10ed6:	53                   	push   %ebx
   10ed7:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10eda:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ede:	7e 78                	jle    10f58 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10ee0:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10ee4:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ee8:	7f 32                	jg     10f1c <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10eea:	6a 21                	push   $0x21
   10eec:	e8 ac f9 ff ff       	call   1089d <inb>
   10ef1:	83 c4 04             	add    $0x4,%esp
   10ef4:	89 c3                	mov    %eax,%ebx
   10ef6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ef9:	ba 01 00 00 00       	mov    $0x1,%edx
   10efe:	89 c1                	mov    %eax,%ecx
   10f00:	d3 e2                	shl    %cl,%edx
   10f02:	89 d0                	mov    %edx,%eax
   10f04:	f7 d0                	not    %eax
   10f06:	21 d8                	and    %ebx,%eax
   10f08:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10f0b:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10f0f:	50                   	push   %eax
   10f10:	6a 21                	push   $0x21
   10f12:	e8 a3 f9 ff ff       	call   108ba <outb>
   10f17:	83 c4 08             	add    $0x8,%esp
   10f1a:	eb 3d                	jmp    10f59 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   10f1c:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10f20:	68 a1 00 00 00       	push   $0xa1
   10f25:	e8 73 f9 ff ff       	call   1089d <inb>
   10f2a:	83 c4 04             	add    $0x4,%esp
   10f2d:	89 c3                	mov    %eax,%ebx
   10f2f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f32:	ba 01 00 00 00       	mov    $0x1,%edx
   10f37:	89 c1                	mov    %eax,%ecx
   10f39:	d3 e2                	shl    %cl,%edx
   10f3b:	89 d0                	mov    %edx,%eax
   10f3d:	f7 d0                	not    %eax
   10f3f:	21 d8                	and    %ebx,%eax
   10f41:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10f44:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10f48:	50                   	push   %eax
   10f49:	68 a1 00 00 00       	push   $0xa1
   10f4e:	e8 67 f9 ff ff       	call   108ba <outb>
   10f53:	83 c4 08             	add    $0x8,%esp
   10f56:	eb 01                	jmp    10f59 <irq_enable+0x86>
        return;
   10f58:	90                   	nop
    }
}
   10f59:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f5c:	c9                   	leave
   10f5d:	c3                   	ret

00010f5e <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   10f5e:	55                   	push   %ebp
   10f5f:	89 e5                	mov    %esp,%ebp
   10f61:	53                   	push   %ebx
   10f62:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10f65:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10f69:	7e 74                	jle    10fdf <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10f6b:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10f6f:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f73:	7f 30                	jg     10fa5 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10f75:	6a 21                	push   $0x21
   10f77:	e8 21 f9 ff ff       	call   1089d <inb>
   10f7c:	83 c4 04             	add    $0x4,%esp
   10f7f:	89 c3                	mov    %eax,%ebx
   10f81:	8b 45 08             	mov    0x8(%ebp),%eax
   10f84:	ba 01 00 00 00       	mov    $0x1,%edx
   10f89:	89 c1                	mov    %eax,%ecx
   10f8b:	d3 e2                	shl    %cl,%edx
   10f8d:	89 d0                	mov    %edx,%eax
   10f8f:	09 d8                	or     %ebx,%eax
   10f91:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10f94:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10f98:	50                   	push   %eax
   10f99:	6a 21                	push   $0x21
   10f9b:	e8 1a f9 ff ff       	call   108ba <outb>
   10fa0:	83 c4 08             	add    $0x8,%esp
   10fa3:	eb 3b                	jmp    10fe0 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   10fa5:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10fa9:	68 a1 00 00 00       	push   $0xa1
   10fae:	e8 ea f8 ff ff       	call   1089d <inb>
   10fb3:	83 c4 04             	add    $0x4,%esp
   10fb6:	89 c3                	mov    %eax,%ebx
   10fb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fbb:	ba 01 00 00 00       	mov    $0x1,%edx
   10fc0:	89 c1                	mov    %eax,%ecx
   10fc2:	d3 e2                	shl    %cl,%edx
   10fc4:	89 d0                	mov    %edx,%eax
   10fc6:	09 d8                	or     %ebx,%eax
   10fc8:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10fcb:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10fcf:	50                   	push   %eax
   10fd0:	68 a1 00 00 00       	push   $0xa1
   10fd5:	e8 e0 f8 ff ff       	call   108ba <outb>
   10fda:	83 c4 08             	add    $0x8,%esp
   10fdd:	eb 01                	jmp    10fe0 <irq_disable+0x82>
        return;
   10fdf:	90                   	nop
    }
}
   10fe0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10fe3:	c9                   	leave
   10fe4:	c3                   	ret

00010fe5 <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   10fe5:	55                   	push   %ebp
   10fe6:	89 e5                	mov    %esp,%ebp
    cli();
   10fe8:	e8 ec f8 ff ff       	call   108d9 <cli>
}
   10fed:	90                   	nop
   10fee:	5d                   	pop    %ebp
   10fef:	c3                   	ret

00010ff0 <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   10ff0:	55                   	push   %ebp
   10ff1:	89 e5                	mov    %esp,%ebp
    sti();
   10ff3:	e8 e8 f8 ff ff       	call   108e0 <sti>
}
   10ff8:	90                   	nop
   10ff9:	5d                   	pop    %ebp
   10ffa:	c3                   	ret

00010ffb <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   10ffb:	55                   	push   %ebp
   10ffc:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10ffe:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   11002:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11006:	7e 0f                	jle    11017 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11008:	6a 20                	push   $0x20
   1100a:	68 a0 00 00 00       	push   $0xa0
   1100f:	e8 a6 f8 ff ff       	call   108ba <outb>
   11014:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11017:	6a 20                	push   $0x20
   11019:	6a 20                	push   $0x20
   1101b:	e8 9a f8 ff ff       	call   108ba <outb>
   11020:	83 c4 08             	add    $0x8,%esp
   11023:	90                   	nop
   11024:	c9                   	leave
   11025:	c3                   	ret

00011026 <outb>:
}

void init_time(void)
{
    sys_tick = 0;
    init_pit();
   11026:	55                   	push   %ebp
   11027:	89 e5                	mov    %esp,%ebp
   11029:	83 ec 08             	sub    $0x8,%esp
   1102c:	8b 55 08             	mov    0x8(%ebp),%edx
   1102f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11032:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11036:	88 45 f8             	mov    %al,-0x8(%ebp)
   11039:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1103d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11041:	ee                   	out    %al,(%dx)
   11042:	90                   	nop
   11043:	c9                   	leave
   11044:	c3                   	ret

00011045 <do_handler_time>:
{
   11045:	55                   	push   %ebp
   11046:	89 e5                	mov    %esp,%ebp
   11048:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   1104b:	a1 60 2a 01 00       	mov    0x12a60,%eax
   11050:	83 c0 01             	add    $0x1,%eax
   11053:	a3 60 2a 01 00       	mov    %eax,0x12a60
    pic_send_eoi(IRQ0_TIMER);
   11058:	83 ec 0c             	sub    $0xc,%esp
   1105b:	6a 20                	push   $0x20
   1105d:	e8 99 ff ff ff       	call   10ffb <pic_send_eoi>
   11062:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   11065:	e8 00 f6 ff ff       	call   1066a <task_time_tick>
}
   1106a:	90                   	nop
   1106b:	c9                   	leave
   1106c:	c3                   	ret

0001106d <init_pit>:
{
   1106d:	55                   	push   %ebp
   1106e:	89 e5                	mov    %esp,%ebp
   11070:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11073:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   1107a:	6a 36                	push   $0x36
   1107c:	6a 43                	push   $0x43
   1107e:	e8 a3 ff ff ff       	call   11026 <outb>
   11083:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   11086:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11089:	0f b6 c0             	movzbl %al,%eax
   1108c:	50                   	push   %eax
   1108d:	6a 40                	push   $0x40
   1108f:	e8 92 ff ff ff       	call   11026 <outb>
   11094:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   11097:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1109a:	c1 e8 08             	shr    $0x8,%eax
   1109d:	0f b6 c0             	movzbl %al,%eax
   110a0:	50                   	push   %eax
   110a1:	6a 40                	push   $0x40
   110a3:	e8 7e ff ff ff       	call   11026 <outb>
   110a8:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   110ab:	83 ec 08             	sub    $0x8,%esp
   110ae:	68 89 02 01 00       	push   $0x10289
   110b3:	6a 20                	push   $0x20
   110b5:	e8 e4 fd ff ff       	call   10e9e <irq_install>
   110ba:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   110bd:	83 ec 0c             	sub    $0xc,%esp
   110c0:	6a 20                	push   $0x20
   110c2:	e8 0c fe ff ff       	call   10ed3 <irq_enable>
   110c7:	83 c4 10             	add    $0x10,%esp
}
   110ca:	90                   	nop
   110cb:	c9                   	leave
   110cc:	c3                   	ret

000110cd <init_time>:
{
   110cd:	55                   	push   %ebp
   110ce:	89 e5                	mov    %esp,%ebp
   110d0:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   110d3:	c7 05 60 2a 01 00 00 	movl   $0x0,0x12a60
   110da:	00 00 00 
    init_pit();
   110dd:	e8 8b ff ff ff       	call   1106d <init_pit>
   110e2:	90                   	nop
   110e3:	c9                   	leave
   110e4:	c3                   	ret

000110e5 <kernel_init>:

/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   110e5:	55                   	push   %ebp
   110e6:	89 e5                	mov    %esp,%ebp
   110e8:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   110eb:	e8 a2 f7 ff ff       	call   10892 <cpu_init>

    init_log(); // 初始化打印函数
   110f0:	e8 db 07 00 00       	call   118d0 <init_log>
    irq_init();
   110f5:	e8 f6 fb ff ff       	call   10cf0 <irq_init>
    // 初始化定时器
    init_time();
   110fa:	e8 ce ff ff ff       	call   110cd <init_time>

    // 初始化任务管理
    task_manager_init();
   110ff:	e8 e1 f3 ff ff       	call   104e5 <task_manager_init>
}
   11104:	90                   	nop
   11105:	c9                   	leave
   11106:	c3                   	ret

00011107 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;
void init_task_entry(void)
{
   11107:	55                   	push   %ebp
   11108:	89 e5                	mov    %esp,%ebp
   1110a:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   1110d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_task_entry: %d", count++);
   11114:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11117:	8d 50 01             	lea    0x1(%eax),%edx
   1111a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1111d:	83 ec 08             	sub    $0x8,%esp
   11120:	50                   	push   %eax
   11121:	68 d9 1c 01 00       	push   $0x11cd9
   11126:	e8 17 08 00 00       	call   11942 <log_prinf>
   1112b:	83 c4 10             	add    $0x10,%esp
   1112e:	eb e4                	jmp    11114 <init_task_entry+0xd>

00011130 <init_main>:
    }
}

void init_main(void)
{
   11130:	55                   	push   %ebp
   11131:	89 e5                	mov    %esp,%ebp
   11133:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   11136:	83 ec 0c             	sub    $0xc,%esp
   11139:	68 ed 1c 01 00       	push   $0x11ced
   1113e:	e8 ff 07 00 00       	call   11942 <log_prinf>
   11143:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   11146:	83 ec 08             	sub    $0x8,%esp
   11149:	68 fb 1c 01 00       	push   $0x11cfb
   1114e:	68 01 1d 01 00       	push   $0x11d01
   11153:	e8 ea 07 00 00       	call   11942 <log_prinf>
   11158:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   1115b:	83 ec 0c             	sub    $0xc,%esp
   1115e:	6a 63                	push   $0x63
   11160:	6a 30                	push   $0x30
   11162:	6a 14                	push   $0x14
   11164:	6a f6                	push   $0xfffffff6
   11166:	68 0c 1d 01 00       	push   $0x11d0c
   1116b:	e8 d2 07 00 00       	call   11942 <log_prinf>
   11170:	83 c4 20             	add    $0x20,%esp
    irq_enable_global(); // 暂时先关掉定时中断
   11173:	e8 78 fe ff ff       	call   10ff0 <irq_enable_global>

    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   11178:	ba 80 3a 01 00       	mov    $0x13a80,%edx
   1117d:	b8 07 11 01 00       	mov    $0x11107,%eax
   11182:	52                   	push   %edx
   11183:	50                   	push   %eax
   11184:	68 18 1d 01 00       	push   $0x11d18
   11189:	68 80 3a 01 00       	push   $0x13a80
   1118e:	e8 75 f2 ff ff       	call   10408 <task_init>
   11193:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11196:	e8 7d f3 ff ff       	call   10518 <task_first_init>
    int count = 0;
   1119b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_main: %d", count++);
   111a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111a5:	8d 50 01             	lea    0x1(%eax),%edx
   111a8:	89 55 f4             	mov    %edx,-0xc(%ebp)
   111ab:	83 ec 08             	sub    $0x8,%esp
   111ae:	50                   	push   %eax
   111af:	68 22 1d 01 00       	push   $0x11d22
   111b4:	e8 89 07 00 00       	call   11942 <log_prinf>
   111b9:	83 c4 10             	add    $0x10,%esp
   111bc:	eb e4                	jmp    111a2 <init_main+0x72>

000111be <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   111be:	55                   	push   %ebp
   111bf:	89 e5                	mov    %esp,%ebp
}
   111c1:	f4                   	hlt

   111c2:	90                   	nop
   111c3:	5d                   	pop    %ebp
   111c4:	c3                   	ret

000111c5 <kernel_strcpy>:
{
   111c5:	55                   	push   %ebp
   111c6:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   111c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111cc:	74 3b                	je     11209 <kernel_strcpy+0x44>
   111ce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111d2:	74 35                	je     11209 <kernel_strcpy+0x44>
    while (*dest && *src)
   111d4:	eb 17                	jmp    111ed <kernel_strcpy+0x28>
        *dest++ = *src++;
   111d6:	8b 55 0c             	mov    0xc(%ebp),%edx
   111d9:	8d 42 01             	lea    0x1(%edx),%eax
   111dc:	89 45 0c             	mov    %eax,0xc(%ebp)
   111df:	8b 45 08             	mov    0x8(%ebp),%eax
   111e2:	8d 48 01             	lea    0x1(%eax),%ecx
   111e5:	89 4d 08             	mov    %ecx,0x8(%ebp)
   111e8:	0f b6 12             	movzbl (%edx),%edx
   111eb:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   111ed:	8b 45 08             	mov    0x8(%ebp),%eax
   111f0:	0f b6 00             	movzbl (%eax),%eax
   111f3:	84 c0                	test   %al,%al
   111f5:	74 0a                	je     11201 <kernel_strcpy+0x3c>
   111f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   111fa:	0f b6 00             	movzbl (%eax),%eax
   111fd:	84 c0                	test   %al,%al
   111ff:	75 d5                	jne    111d6 <kernel_strcpy+0x11>
    *dest = '\0';
   11201:	8b 45 08             	mov    0x8(%ebp),%eax
   11204:	c6 00 00             	movb   $0x0,(%eax)
   11207:	eb 01                	jmp    1120a <kernel_strcpy+0x45>
        return;
   11209:	90                   	nop
}
   1120a:	5d                   	pop    %ebp
   1120b:	c3                   	ret

0001120c <kernel_strncpy>:
{
   1120c:	55                   	push   %ebp
   1120d:	89 e5                	mov    %esp,%ebp
   1120f:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11212:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11216:	74 61                	je     11279 <kernel_strncpy+0x6d>
   11218:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1121c:	74 5b                	je     11279 <kernel_strncpy+0x6d>
   1121e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11222:	74 55                	je     11279 <kernel_strncpy+0x6d>
    char *d = dest;
   11224:	8b 45 08             	mov    0x8(%ebp),%eax
   11227:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   1122a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1122d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   11230:	eb 17                	jmp    11249 <kernel_strncpy+0x3d>
        *d++ = *s++;
   11232:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11235:	8d 42 01             	lea    0x1(%edx),%eax
   11238:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1123b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1123e:	8d 48 01             	lea    0x1(%eax),%ecx
   11241:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11244:	0f b6 12             	movzbl (%edx),%edx
   11247:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   11249:	8b 45 10             	mov    0x10(%ebp),%eax
   1124c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1124f:	89 55 10             	mov    %edx,0x10(%ebp)
   11252:	85 c0                	test   %eax,%eax
   11254:	7e 0a                	jle    11260 <kernel_strncpy+0x54>
   11256:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11259:	0f b6 00             	movzbl (%eax),%eax
   1125c:	84 c0                	test   %al,%al
   1125e:	75 d2                	jne    11232 <kernel_strncpy+0x26>
    if (size == 0)
   11260:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11264:	75 0b                	jne    11271 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11266:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11269:	83 e8 01             	sub    $0x1,%eax
   1126c:	c6 00 00             	movb   $0x0,(%eax)
   1126f:	eb 09                	jmp    1127a <kernel_strncpy+0x6e>
        *d = '\0';
   11271:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11274:	c6 00 00             	movb   $0x0,(%eax)
   11277:	eb 01                	jmp    1127a <kernel_strncpy+0x6e>
        return;
   11279:	90                   	nop
}
   1127a:	c9                   	leave
   1127b:	c3                   	ret

0001127c <kernel_strncmp>:
{
   1127c:	55                   	push   %ebp
   1127d:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   1127f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11283:	74 0c                	je     11291 <kernel_strncmp+0x15>
   11285:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11289:	74 06                	je     11291 <kernel_strncmp+0x15>
   1128b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1128f:	75 0f                	jne    112a0 <kernel_strncmp+0x24>
        return -1;
   11291:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11296:	eb 62                	jmp    112fa <kernel_strncmp+0x7e>
        s1++;
   11298:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   1129c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   112a0:	8b 45 08             	mov    0x8(%ebp),%eax
   112a3:	0f b6 00             	movzbl (%eax),%eax
   112a6:	84 c0                	test   %al,%al
   112a8:	74 20                	je     112ca <kernel_strncmp+0x4e>
   112aa:	8b 45 0c             	mov    0xc(%ebp),%eax
   112ad:	0f b6 00             	movzbl (%eax),%eax
   112b0:	84 c0                	test   %al,%al
   112b2:	74 16                	je     112ca <kernel_strncmp+0x4e>
   112b4:	8b 45 08             	mov    0x8(%ebp),%eax
   112b7:	0f b6 10             	movzbl (%eax),%edx
   112ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   112bd:	0f b6 00             	movzbl (%eax),%eax
   112c0:	38 c2                	cmp    %al,%dl
   112c2:	75 06                	jne    112ca <kernel_strncmp+0x4e>
   112c4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112c8:	75 ce                	jne    11298 <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   112ca:	8b 45 08             	mov    0x8(%ebp),%eax
   112cd:	0f b6 00             	movzbl (%eax),%eax
   112d0:	84 c0                	test   %al,%al
   112d2:	74 21                	je     112f5 <kernel_strncmp+0x79>
   112d4:	8b 45 0c             	mov    0xc(%ebp),%eax
   112d7:	0f b6 00             	movzbl (%eax),%eax
   112da:	84 c0                	test   %al,%al
   112dc:	74 17                	je     112f5 <kernel_strncmp+0x79>
   112de:	8b 45 08             	mov    0x8(%ebp),%eax
   112e1:	0f b6 10             	movzbl (%eax),%edx
   112e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   112e7:	0f b6 00             	movzbl (%eax),%eax
   112ea:	38 c2                	cmp    %al,%dl
   112ec:	74 07                	je     112f5 <kernel_strncmp+0x79>
   112ee:	b8 01 00 00 00       	mov    $0x1,%eax
   112f3:	eb 05                	jmp    112fa <kernel_strncmp+0x7e>
   112f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   112fa:	5d                   	pop    %ebp
   112fb:	c3                   	ret

000112fc <kernel_strlen>:
{
   112fc:	55                   	push   %ebp
   112fd:	89 e5                	mov    %esp,%ebp
   112ff:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   11302:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11306:	75 07                	jne    1130f <kernel_strlen+0x13>
        return 0;
   11308:	b8 00 00 00 00       	mov    $0x0,%eax
   1130d:	eb 26                	jmp    11335 <kernel_strlen+0x39>
    const char *c = str;
   1130f:	8b 45 08             	mov    0x8(%ebp),%eax
   11312:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11315:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   1131c:	eb 04                	jmp    11322 <kernel_strlen+0x26>
        len++;
   1131e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   11322:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11325:	8d 50 01             	lea    0x1(%eax),%edx
   11328:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1132b:	0f b6 00             	movzbl (%eax),%eax
   1132e:	84 c0                	test   %al,%al
   11330:	75 ec                	jne    1131e <kernel_strlen+0x22>
    return len;
   11332:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11335:	c9                   	leave
   11336:	c3                   	ret

00011337 <kernel_memcpy>:
{
   11337:	55                   	push   %ebp
   11338:	89 e5                	mov    %esp,%ebp
   1133a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   1133d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11341:	74 40                	je     11383 <kernel_memcpy+0x4c>
   11343:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11347:	74 3a                	je     11383 <kernel_memcpy+0x4c>
   11349:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1134d:	74 34                	je     11383 <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   1134f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11352:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   11355:	8b 45 08             	mov    0x8(%ebp),%eax
   11358:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   1135b:	eb 17                	jmp    11374 <kernel_memcpy+0x3d>
        *d++ = *s++;
   1135d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11360:	8d 42 01             	lea    0x1(%edx),%eax
   11363:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11366:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11369:	8d 48 01             	lea    0x1(%eax),%ecx
   1136c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1136f:	0f b6 12             	movzbl (%edx),%edx
   11372:	88 10                	mov    %dl,(%eax)
    while (size--)
   11374:	8b 45 10             	mov    0x10(%ebp),%eax
   11377:	8d 50 ff             	lea    -0x1(%eax),%edx
   1137a:	89 55 10             	mov    %edx,0x10(%ebp)
   1137d:	85 c0                	test   %eax,%eax
   1137f:	75 dc                	jne    1135d <kernel_memcpy+0x26>
   11381:	eb 01                	jmp    11384 <kernel_memcpy+0x4d>
        return;
   11383:	90                   	nop
}
   11384:	c9                   	leave
   11385:	c3                   	ret

00011386 <kernel_memset>:
{
   11386:	55                   	push   %ebp
   11387:	89 e5                	mov    %esp,%ebp
   11389:	83 ec 14             	sub    $0x14,%esp
   1138c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1138f:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   11392:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11396:	74 2c                	je     113c4 <kernel_memset+0x3e>
   11398:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1139c:	74 26                	je     113c4 <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   1139e:	8b 45 08             	mov    0x8(%ebp),%eax
   113a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   113a4:	eb 0f                	jmp    113b5 <kernel_memset+0x2f>
        *d++ = v;
   113a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113a9:	8d 50 01             	lea    0x1(%eax),%edx
   113ac:	89 55 fc             	mov    %edx,-0x4(%ebp)
   113af:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   113b3:	88 10                	mov    %dl,(%eax)
    while (size--)
   113b5:	8b 45 10             	mov    0x10(%ebp),%eax
   113b8:	8d 50 ff             	lea    -0x1(%eax),%edx
   113bb:	89 55 10             	mov    %edx,0x10(%ebp)
   113be:	85 c0                	test   %eax,%eax
   113c0:	75 e4                	jne    113a6 <kernel_memset+0x20>
   113c2:	eb 01                	jmp    113c5 <kernel_memset+0x3f>
        return;
   113c4:	90                   	nop
}
   113c5:	c9                   	leave
   113c6:	c3                   	ret

000113c7 <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   113c7:	55                   	push   %ebp
   113c8:	89 e5                	mov    %esp,%ebp
   113ca:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   113cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   113d1:	74 06                	je     113d9 <kernel_memcmp+0x12>
   113d3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   113d7:	75 07                	jne    113e0 <kernel_memcmp+0x19>
    {
        return 1;
   113d9:	b8 01 00 00 00       	mov    $0x1,%eax
   113de:	eb 43                	jmp    11423 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   113e0:	8b 45 08             	mov    0x8(%ebp),%eax
   113e3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   113e6:	8b 45 0c             	mov    0xc(%ebp),%eax
   113e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   113ec:	eb 23                	jmp    11411 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   113ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113f1:	8d 50 01             	lea    0x1(%eax),%edx
   113f4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   113f7:	0f b6 08             	movzbl (%eax),%ecx
   113fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113fd:	8d 50 01             	lea    0x1(%eax),%edx
   11400:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11403:	0f b6 00             	movzbl (%eax),%eax
   11406:	38 c1                	cmp    %al,%cl
   11408:	74 07                	je     11411 <kernel_memcmp+0x4a>
        {
            return 1;
   1140a:	b8 01 00 00 00       	mov    $0x1,%eax
   1140f:	eb 12                	jmp    11423 <kernel_memcmp+0x5c>
    while (size--)
   11411:	8b 45 10             	mov    0x10(%ebp),%eax
   11414:	8d 50 ff             	lea    -0x1(%eax),%edx
   11417:	89 55 10             	mov    %edx,0x10(%ebp)
   1141a:	85 c0                	test   %eax,%eax
   1141c:	75 d0                	jne    113ee <kernel_memcmp+0x27>
        }
    }
    return 0;
   1141e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11423:	c9                   	leave
   11424:	c3                   	ret

00011425 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   11425:	55                   	push   %ebp
   11426:	89 e5                	mov    %esp,%ebp
   11428:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   1142b:	8d 45 10             	lea    0x10(%ebp),%eax
   1142e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   11431:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11434:	83 ec 04             	sub    $0x4,%esp
   11437:	50                   	push   %eax
   11438:	ff 75 0c             	push   0xc(%ebp)
   1143b:	ff 75 08             	push   0x8(%ebp)
   1143e:	e8 dd 00 00 00       	call   11520 <kernel_vsprintf>
   11443:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11446:	90                   	nop
   11447:	c9                   	leave
   11448:	c3                   	ret

00011449 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   11449:	55                   	push   %ebp
   1144a:	89 e5                	mov    %esp,%ebp
   1144c:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   1144f:	8b 45 08             	mov    0x8(%ebp),%eax
   11452:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   11455:	8b 45 0c             	mov    0xc(%ebp),%eax
   11458:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   1145b:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1145f:	74 1d                	je     1147e <kernel_itoa+0x35>
   11461:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11465:	74 17                	je     1147e <kernel_itoa+0x35>
   11467:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1146b:	74 11                	je     1147e <kernel_itoa+0x35>
   1146d:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11471:	74 0b                	je     1147e <kernel_itoa+0x35>
    {
        *p = '\0';
   11473:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11476:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11479:	e9 a0 00 00 00       	jmp    1151e <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   1147e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11482:	79 12                	jns    11496 <kernel_itoa+0x4d>
   11484:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11488:	75 0c                	jne    11496 <kernel_itoa+0x4d>
    {
        *p++ = '-';
   1148a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1148d:	8d 50 01             	lea    0x1(%eax),%edx
   11490:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11493:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   11496:	8b 0d 7c 1d 01 00    	mov    0x11d7c,%ecx
   1149c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1149f:	99                   	cltd
   114a0:	f7 7d 10             	idivl  0x10(%ebp)
   114a3:	89 d0                	mov    %edx,%eax
   114a5:	83 c0 0f             	add    $0xf,%eax
   114a8:	01 c8                	add    %ecx,%eax
   114aa:	0f b6 00             	movzbl (%eax),%eax
   114ad:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   114b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114b3:	8d 50 01             	lea    0x1(%eax),%edx
   114b6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114b9:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   114bd:	88 10                	mov    %dl,(%eax)
        num /= base;
   114bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   114c2:	99                   	cltd
   114c3:	f7 7d 10             	idivl  0x10(%ebp)
   114c6:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   114c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114cd:	75 c7                	jne    11496 <kernel_itoa+0x4d>
    *p-- = '\0';
   114cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114d2:	8d 50 ff             	lea    -0x1(%eax),%edx
   114d5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   114d8:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   114db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   114df:	7f 08                	jg     114e9 <kernel_itoa+0xa0>
   114e1:	8b 45 08             	mov    0x8(%ebp),%eax
   114e4:	83 c0 01             	add    $0x1,%eax
   114e7:	eb 03                	jmp    114ec <kernel_itoa+0xa3>
   114e9:	8b 45 08             	mov    0x8(%ebp),%eax
   114ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   114ef:	eb 25                	jmp    11516 <kernel_itoa+0xcd>
    {
        char ch = *start;
   114f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114f4:	0f b6 00             	movzbl (%eax),%eax
   114f7:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   114fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114fd:	0f b6 10             	movzbl (%eax),%edx
   11500:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11503:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11505:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11508:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1150c:	88 10                	mov    %dl,(%eax)

        p--;
   1150e:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11512:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   11516:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11519:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1151c:	72 d3                	jb     114f1 <kernel_itoa+0xa8>
    }
}
   1151e:	c9                   	leave
   1151f:	c3                   	ret

00011520 <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   11520:	55                   	push   %ebp
   11521:	89 e5                	mov    %esp,%ebp
   11523:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   11526:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   1152d:	8b 45 08             	mov    0x8(%ebp),%eax
   11530:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   11533:	e9 11 01 00 00       	jmp    11649 <kernel_vsprintf+0x129>
    {
        switch (state)
   11538:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1153c:	74 0b                	je     11549 <kernel_vsprintf+0x29>
   1153e:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   11542:	74 2b                	je     1156f <kernel_vsprintf+0x4f>
   11544:	e9 00 01 00 00       	jmp    11649 <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   11549:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1154d:	75 0c                	jne    1155b <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   1154f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11556:	e9 ee 00 00 00       	jmp    11649 <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   1155b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1155e:	8d 50 01             	lea    0x1(%eax),%edx
   11561:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11564:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11568:	88 10                	mov    %dl,(%eax)
            }
            break;
   1156a:	e9 da 00 00 00       	jmp    11649 <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   1156f:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11573:	75 31                	jne    115a6 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11575:	8b 45 10             	mov    0x10(%ebp),%eax
   11578:	8d 50 04             	lea    0x4(%eax),%edx
   1157b:	89 55 10             	mov    %edx,0x10(%ebp)
   1157e:	8b 00                	mov    (%eax),%eax
   11580:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   11583:	6a 0a                	push   $0xa
   11585:	ff 75 e4             	push   -0x1c(%ebp)
   11588:	ff 75 f8             	push   -0x8(%ebp)
   1158b:	e8 b9 fe ff ff       	call   11449 <kernel_itoa>
   11590:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11593:	ff 75 f8             	push   -0x8(%ebp)
   11596:	e8 61 fd ff ff       	call   112fc <kernel_strlen>
   1159b:	83 c4 04             	add    $0x4,%esp
   1159e:	01 45 f8             	add    %eax,-0x8(%ebp)
   115a1:	e9 9b 00 00 00       	jmp    11641 <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   115a6:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   115aa:	75 2e                	jne    115da <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   115ac:	8b 45 10             	mov    0x10(%ebp),%eax
   115af:	8d 50 04             	lea    0x4(%eax),%edx
   115b2:	89 55 10             	mov    %edx,0x10(%ebp)
   115b5:	8b 00                	mov    (%eax),%eax
   115b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   115ba:	6a 10                	push   $0x10
   115bc:	ff 75 e8             	push   -0x18(%ebp)
   115bf:	ff 75 f8             	push   -0x8(%ebp)
   115c2:	e8 82 fe ff ff       	call   11449 <kernel_itoa>
   115c7:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   115ca:	ff 75 f8             	push   -0x8(%ebp)
   115cd:	e8 2a fd ff ff       	call   112fc <kernel_strlen>
   115d2:	83 c4 04             	add    $0x4,%esp
   115d5:	01 45 f8             	add    %eax,-0x8(%ebp)
   115d8:	eb 67                	jmp    11641 <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   115da:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   115de:	75 19                	jne    115f9 <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   115e0:	8b 45 10             	mov    0x10(%ebp),%eax
   115e3:	8d 50 04             	lea    0x4(%eax),%edx
   115e6:	89 55 10             	mov    %edx,0x10(%ebp)
   115e9:	8b 00                	mov    (%eax),%eax
   115eb:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   115ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115f1:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   115f5:	88 10                	mov    %dl,(%eax)
   115f7:	eb 48                	jmp    11641 <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   115f9:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   115fd:	75 42                	jne    11641 <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   115ff:	8b 45 10             	mov    0x10(%ebp),%eax
   11602:	8d 50 04             	lea    0x4(%eax),%edx
   11605:	89 55 10             	mov    %edx,0x10(%ebp)
   11608:	8b 00                	mov    (%eax),%eax
   1160a:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   1160d:	ff 75 f4             	push   -0xc(%ebp)
   11610:	e8 e7 fc ff ff       	call   112fc <kernel_strlen>
   11615:	83 c4 04             	add    $0x4,%esp
   11618:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   1161b:	eb 17                	jmp    11634 <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   1161d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11620:	8d 42 01             	lea    0x1(%edx),%eax
   11623:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11626:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11629:	8d 48 01             	lea    0x1(%eax),%ecx
   1162c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1162f:	0f b6 12             	movzbl (%edx),%edx
   11632:	88 10                	mov    %dl,(%eax)
                while (len--)
   11634:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11637:	8d 50 ff             	lea    -0x1(%eax),%edx
   1163a:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1163d:	85 c0                	test   %eax,%eax
   1163f:	75 dc                	jne    1161d <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   11641:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11648:	90                   	nop
    while ((ch = *fmt++))
   11649:	8b 45 0c             	mov    0xc(%ebp),%eax
   1164c:	8d 50 01             	lea    0x1(%eax),%edx
   1164f:	89 55 0c             	mov    %edx,0xc(%ebp)
   11652:	0f b6 00             	movzbl (%eax),%eax
   11655:	88 45 ef             	mov    %al,-0x11(%ebp)
   11658:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1165c:	0f 85 d6 fe ff ff    	jne    11538 <kernel_vsprintf+0x18>
        }
    }
}
   11662:	90                   	nop
   11663:	90                   	nop
   11664:	c9                   	leave
   11665:	c3                   	ret

00011666 <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   11666:	55                   	push   %ebp
   11667:	89 e5                	mov    %esp,%ebp
   11669:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   1166c:	83 ec 08             	sub    $0x8,%esp
   1166f:	ff 75 14             	push   0x14(%ebp)
   11672:	68 30 1d 01 00       	push   $0x11d30
   11677:	e8 c6 02 00 00       	call   11942 <log_prinf>
   1167c:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   1167f:	ff 75 10             	push   0x10(%ebp)
   11682:	ff 75 0c             	push   0xc(%ebp)
   11685:	ff 75 08             	push   0x8(%ebp)
   11688:	68 42 1d 01 00       	push   $0x11d42
   1168d:	e8 b0 02 00 00       	call   11942 <log_prinf>
   11692:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   11695:	e8 24 fb ff ff       	call   111be <hlt>
   1169a:	eb f9                	jmp    11695 <pannic+0x2f>

0001169c <list_is_empty>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
    // 表项为空，返回空
   1169c:	55                   	push   %ebp
   1169d:	89 e5                	mov    %esp,%ebp
    if (list_is_empty(list)) {
   1169f:	8b 45 08             	mov    0x8(%ebp),%eax
   116a2:	8b 40 08             	mov    0x8(%eax),%eax
   116a5:	85 c0                	test   %eax,%eax
   116a7:	0f 94 c0             	sete   %al
   116aa:	0f b6 c0             	movzbl %al,%eax
        return (list_node_t*)0;
   116ad:	5d                   	pop    %ebp
   116ae:	c3                   	ret

000116af <list_init>:
void list_init(list_t *list) {
   116af:	55                   	push   %ebp
   116b0:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   116b2:	8b 45 08             	mov    0x8(%ebp),%eax
   116b5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   116bc:	8b 45 08             	mov    0x8(%ebp),%eax
   116bf:	8b 50 04             	mov    0x4(%eax),%edx
   116c2:	8b 45 08             	mov    0x8(%ebp),%eax
   116c5:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   116c7:	8b 45 08             	mov    0x8(%ebp),%eax
   116ca:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   116d1:	90                   	nop
   116d2:	5d                   	pop    %ebp
   116d3:	c3                   	ret

000116d4 <list_insert_first>:
void list_insert_first(list_t *list, list_node_t *node) {
   116d4:	55                   	push   %ebp
   116d5:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   116d7:	8b 45 08             	mov    0x8(%ebp),%eax
   116da:	8b 10                	mov    (%eax),%edx
   116dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   116df:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   116e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   116e5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if (list_is_empty(list)) {
   116eb:	ff 75 08             	push   0x8(%ebp)
   116ee:	e8 a9 ff ff ff       	call   1169c <list_is_empty>
   116f3:	83 c4 04             	add    $0x4,%esp
   116f6:	85 c0                	test   %eax,%eax
   116f8:	74 15                	je     1170f <list_insert_first+0x3b>
        list->last = list->first = node;
   116fa:	8b 45 08             	mov    0x8(%ebp),%eax
   116fd:	8b 55 0c             	mov    0xc(%ebp),%edx
   11700:	89 10                	mov    %edx,(%eax)
   11702:	8b 45 08             	mov    0x8(%ebp),%eax
   11705:	8b 10                	mov    (%eax),%edx
   11707:	8b 45 08             	mov    0x8(%ebp),%eax
   1170a:	89 50 04             	mov    %edx,0x4(%eax)
   1170d:	eb 12                	jmp    11721 <list_insert_first+0x4d>
        list->first->pre = node;
   1170f:	8b 45 08             	mov    0x8(%ebp),%eax
   11712:	8b 00                	mov    (%eax),%eax
   11714:	8b 55 0c             	mov    0xc(%ebp),%edx
   11717:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11719:	8b 45 08             	mov    0x8(%ebp),%eax
   1171c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1171f:	89 10                	mov    %edx,(%eax)
    list->count++;
   11721:	8b 45 08             	mov    0x8(%ebp),%eax
   11724:	8b 40 08             	mov    0x8(%eax),%eax
   11727:	8d 50 01             	lea    0x1(%eax),%edx
   1172a:	8b 45 08             	mov    0x8(%ebp),%eax
   1172d:	89 50 08             	mov    %edx,0x8(%eax)
}
   11730:	90                   	nop
   11731:	c9                   	leave
   11732:	c3                   	ret

00011733 <list_insert_last>:
void list_insert_last(list_t *list, list_node_t *node) {
   11733:	55                   	push   %ebp
   11734:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11736:	8b 45 08             	mov    0x8(%ebp),%eax
   11739:	8b 50 04             	mov    0x4(%eax),%edx
   1173c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1173f:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   11741:	8b 45 0c             	mov    0xc(%ebp),%eax
   11744:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if (list_is_empty(list)) {
   1174b:	ff 75 08             	push   0x8(%ebp)
   1174e:	e8 49 ff ff ff       	call   1169c <list_is_empty>
   11753:	83 c4 04             	add    $0x4,%esp
   11756:	85 c0                	test   %eax,%eax
   11758:	74 16                	je     11770 <list_insert_last+0x3d>
        list->first = list->last = node;
   1175a:	8b 45 08             	mov    0x8(%ebp),%eax
   1175d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11760:	89 50 04             	mov    %edx,0x4(%eax)
   11763:	8b 45 08             	mov    0x8(%ebp),%eax
   11766:	8b 50 04             	mov    0x4(%eax),%edx
   11769:	8b 45 08             	mov    0x8(%ebp),%eax
   1176c:	89 10                	mov    %edx,(%eax)
   1176e:	eb 15                	jmp    11785 <list_insert_last+0x52>
        list->last->next = node;
   11770:	8b 45 08             	mov    0x8(%ebp),%eax
   11773:	8b 40 04             	mov    0x4(%eax),%eax
   11776:	8b 55 0c             	mov    0xc(%ebp),%edx
   11779:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   1177c:	8b 45 08             	mov    0x8(%ebp),%eax
   1177f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11782:	89 50 04             	mov    %edx,0x4(%eax)
    list->count++;
   11785:	8b 45 08             	mov    0x8(%ebp),%eax
   11788:	8b 40 08             	mov    0x8(%eax),%eax
   1178b:	8d 50 01             	lea    0x1(%eax),%edx
   1178e:	8b 45 08             	mov    0x8(%ebp),%eax
   11791:	89 50 08             	mov    %edx,0x8(%eax)
}
   11794:	90                   	nop
   11795:	c9                   	leave
   11796:	c3                   	ret

00011797 <list_remove_first>:
list_node_t* list_remove_first(list_t *list) {
   11797:	55                   	push   %ebp
   11798:	89 e5                	mov    %esp,%ebp
   1179a:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   1179d:	ff 75 08             	push   0x8(%ebp)
   117a0:	e8 f7 fe ff ff       	call   1169c <list_is_empty>
   117a5:	83 c4 04             	add    $0x4,%esp
   117a8:	85 c0                	test   %eax,%eax
   117aa:	74 07                	je     117b3 <list_remove_first+0x1c>
        return (list_node_t*)0;
   117ac:	b8 00 00 00 00       	mov    $0x0,%eax
   117b1:	eb 5a                	jmp    1180d <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   117b3:	8b 45 08             	mov    0x8(%ebp),%eax
   117b6:	8b 00                	mov    (%eax),%eax
   117b8:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   117bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117be:	8b 50 04             	mov    0x4(%eax),%edx
   117c1:	8b 45 08             	mov    0x8(%ebp),%eax
   117c4:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   117c6:	8b 45 08             	mov    0x8(%ebp),%eax
   117c9:	8b 00                	mov    (%eax),%eax
   117cb:	85 c0                	test   %eax,%eax
   117cd:	75 0c                	jne    117db <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   117cf:	8b 45 08             	mov    0x8(%ebp),%eax
   117d2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   117d9:	eb 0c                	jmp    117e7 <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   117db:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117de:	8b 40 04             	mov    0x4(%eax),%eax
   117e1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   117e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   117f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117f3:	8b 10                	mov    (%eax),%edx
   117f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   117f8:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   117fb:	8b 45 08             	mov    0x8(%ebp),%eax
   117fe:	8b 40 08             	mov    0x8(%eax),%eax
   11801:	8d 50 ff             	lea    -0x1(%eax),%edx
   11804:	8b 45 08             	mov    0x8(%ebp),%eax
   11807:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1180a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1180d:	c9                   	leave
   1180e:	c3                   	ret

0001180f <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   1180f:	55                   	push   %ebp
   11810:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   11812:	8b 45 08             	mov    0x8(%ebp),%eax
   11815:	8b 00                	mov    (%eax),%eax
   11817:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1181a:	75 0b                	jne    11827 <list_remove+0x18>
        list->first = remove_node->next;
   1181c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1181f:	8b 50 04             	mov    0x4(%eax),%edx
   11822:	8b 45 08             	mov    0x8(%ebp),%eax
   11825:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   11827:	8b 45 08             	mov    0x8(%ebp),%eax
   1182a:	8b 40 04             	mov    0x4(%eax),%eax
   1182d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11830:	75 0b                	jne    1183d <list_remove+0x2e>
        list->last = remove_node->pre;
   11832:	8b 45 0c             	mov    0xc(%ebp),%eax
   11835:	8b 10                	mov    (%eax),%edx
   11837:	8b 45 08             	mov    0x8(%ebp),%eax
   1183a:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   1183d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11840:	8b 00                	mov    (%eax),%eax
   11842:	85 c0                	test   %eax,%eax
   11844:	74 0e                	je     11854 <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   11846:	8b 45 0c             	mov    0xc(%ebp),%eax
   11849:	8b 00                	mov    (%eax),%eax
   1184b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1184e:	8b 52 04             	mov    0x4(%edx),%edx
   11851:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   11854:	8b 45 0c             	mov    0xc(%ebp),%eax
   11857:	8b 40 04             	mov    0x4(%eax),%eax
   1185a:	85 c0                	test   %eax,%eax
   1185c:	74 0d                	je     1186b <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   1185e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11861:	8b 40 04             	mov    0x4(%eax),%eax
   11864:	8b 55 0c             	mov    0xc(%ebp),%edx
   11867:	8b 12                	mov    (%edx),%edx
   11869:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   1186b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1186e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11875:	8b 45 0c             	mov    0xc(%ebp),%eax
   11878:	8b 50 04             	mov    0x4(%eax),%edx
   1187b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1187e:	89 10                	mov    %edx,(%eax)
    --list->count;
   11880:	8b 45 08             	mov    0x8(%ebp),%eax
   11883:	8b 40 08             	mov    0x8(%eax),%eax
   11886:	8d 50 ff             	lea    -0x1(%eax),%edx
   11889:	8b 45 08             	mov    0x8(%ebp),%eax
   1188c:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1188f:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11892:	5d                   	pop    %ebp
   11893:	c3                   	ret

00011894 <inb>:
    outb(COM1_PORT + 3, 0x80);
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
    outb(COM1_PORT + 4, 0x0F);
   11894:	55                   	push   %ebp
   11895:	89 e5                	mov    %esp,%ebp
   11897:	83 ec 14             	sub    $0x14,%esp
   1189a:	8b 45 08             	mov    0x8(%ebp),%eax
   1189d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
}

   118a1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   118a5:	89 c2                	mov    %eax,%edx
   118a7:	ec                   	in     (%dx),%al
   118a8:	88 45 ff             	mov    %al,-0x1(%ebp)
void log_prinf(const char *fmt, ...)
{
    char str_buf[128];
   118ab:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    va_list args;
   118af:	c9                   	leave
   118b0:	c3                   	ret

000118b1 <outb>:

    const char *p = str_buf;
    while (*p != '\0')
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
            ;
   118b1:	55                   	push   %ebp
   118b2:	89 e5                	mov    %esp,%ebp
   118b4:	83 ec 08             	sub    $0x8,%esp
   118b7:	8b 55 08             	mov    0x8(%ebp),%edx
   118ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   118bd:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   118c1:	88 45 f8             	mov    %al,-0x8(%ebp)
        outb(COM1_PORT, *p++);
   118c4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   118c8:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   118cc:	ee                   	out    %al,(%dx)
    }
   118cd:	90                   	nop
   118ce:	c9                   	leave
   118cf:	c3                   	ret

000118d0 <init_log>:
{
   118d0:	55                   	push   %ebp
   118d1:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   118d3:	6a 00                	push   $0x0
   118d5:	68 f9 03 00 00       	push   $0x3f9
   118da:	e8 d2 ff ff ff       	call   118b1 <outb>
   118df:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   118e2:	68 80 00 00 00       	push   $0x80
   118e7:	68 fb 03 00 00       	push   $0x3fb
   118ec:	e8 c0 ff ff ff       	call   118b1 <outb>
   118f1:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   118f4:	6a 03                	push   $0x3
   118f6:	68 f8 03 00 00       	push   $0x3f8
   118fb:	e8 b1 ff ff ff       	call   118b1 <outb>
   11900:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11903:	6a 00                	push   $0x0
   11905:	68 f9 03 00 00       	push   $0x3f9
   1190a:	e8 a2 ff ff ff       	call   118b1 <outb>
   1190f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11912:	6a 03                	push   $0x3
   11914:	68 fb 03 00 00       	push   $0x3fb
   11919:	e8 93 ff ff ff       	call   118b1 <outb>
   1191e:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x07);
   11921:	6a 07                	push   $0x7
   11923:	68 fa 03 00 00       	push   $0x3fa
   11928:	e8 84 ff ff ff       	call   118b1 <outb>
   1192d:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   11930:	6a 0f                	push   $0xf
   11932:	68 fc 03 00 00       	push   $0x3fc
   11937:	e8 75 ff ff ff       	call   118b1 <outb>
   1193c:	83 c4 08             	add    $0x8,%esp
}
   1193f:	90                   	nop
   11940:	c9                   	leave
   11941:	c3                   	ret

00011942 <log_prinf>:
{
   11942:	55                   	push   %ebp
   11943:	89 e5                	mov    %esp,%ebp
   11945:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1194b:	83 ec 04             	sub    $0x4,%esp
   1194e:	68 80 00 00 00       	push   $0x80
   11953:	6a 00                	push   $0x0
   11955:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1195b:	50                   	push   %eax
   1195c:	e8 25 fa ff ff       	call   11386 <kernel_memset>
   11961:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   11964:	8d 45 0c             	lea    0xc(%ebp),%eax
   11967:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   1196d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11973:	83 ec 04             	sub    $0x4,%esp
   11976:	50                   	push   %eax
   11977:	ff 75 08             	push   0x8(%ebp)
   1197a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11980:	50                   	push   %eax
   11981:	e8 9a fb ff ff       	call   11520 <kernel_vsprintf>
   11986:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   11989:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1198f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   11992:	eb 3b                	jmp    119cf <log_prinf+0x8d>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   11994:	90                   	nop
   11995:	83 ec 0c             	sub    $0xc,%esp
   11998:	68 fd 03 00 00       	push   $0x3fd
   1199d:	e8 f2 fe ff ff       	call   11894 <inb>
   119a2:	83 c4 10             	add    $0x10,%esp
   119a5:	0f b6 c0             	movzbl %al,%eax
   119a8:	83 e0 40             	and    $0x40,%eax
   119ab:	85 c0                	test   %eax,%eax
   119ad:	74 e6                	je     11995 <log_prinf+0x53>
        outb(COM1_PORT, *p++);
   119af:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119b2:	8d 50 01             	lea    0x1(%eax),%edx
   119b5:	89 55 f4             	mov    %edx,-0xc(%ebp)
   119b8:	0f b6 00             	movzbl (%eax),%eax
   119bb:	0f b6 c0             	movzbl %al,%eax
   119be:	83 ec 08             	sub    $0x8,%esp
   119c1:	50                   	push   %eax
   119c2:	68 f8 03 00 00       	push   $0x3f8
   119c7:	e8 e5 fe ff ff       	call   118b1 <outb>
   119cc:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   119cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119d2:	0f b6 00             	movzbl (%eax),%eax
   119d5:	84 c0                	test   %al,%al
   119d7:	75 bb                	jne    11994 <log_prinf+0x52>

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   119d9:	83 ec 08             	sub    $0x8,%esp
   119dc:	6a 0d                	push   $0xd
   119de:	68 f8 03 00 00       	push   $0x3f8
   119e3:	e8 c9 fe ff ff       	call   118b1 <outb>
   119e8:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   119eb:	83 ec 08             	sub    $0x8,%esp
   119ee:	6a 0a                	push   $0xa
   119f0:	68 f8 03 00 00       	push   $0x3f8
   119f5:	e8 b7 fe ff ff       	call   118b1 <outb>
   119fa:	83 c4 10             	add    $0x10,%esp
}
   119fd:	90                   	nop
   119fe:	c9                   	leave
   119ff:	c3                   	ret
