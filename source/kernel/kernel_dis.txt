
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001948 memsz 0x00005670 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015d8  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000036c  000115d8  000115d8  000025d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011944  00011944  00002944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d10  00011960  00011960  00002948  2**5
                  ALLOC
  4 .debug_line   00000ae7  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000580  00000000  00000000  0000342f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001c4a  00000000  00000000  000039af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000a68  00000000  00000000  000055f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000100  00000000  00000000  00006068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000a2d  00000000  00000000  00006168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  00006b95  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000960  00000000  00000000  00006ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102bd l     F .text	000000e3 tss_init
00011650 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 cpu.c
0001043e l     F .text	00000028 lgdt
00010466 l     F .text	0000001a far_jump
00011960 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
0001061a l     F .text	0000001d inb
00010637 l     F .text	0000001f outb
00010656 l     F .text	00000007 cli
0001065d l     F .text	00000007 sti
00010664 l     F .text	00000028 lidt
0001068c l     F .text	00000007 hlt
00012160 l     O .bss	00000400 idt_table
00010693 l     F .text	000000d9 dump_core_regs
0001076c l     F .text	0000003e do_default_handler
000109da l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010da3 l     F .text	0000001f outb
00012560 l     O .bss	00000004 sys_tick
00010de5 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00010e5d l     F .text	00000017 write_tr
00012580 l     O .bss	00000070 first_task
00012600 l     O .bss	00001000 init_task_stack
00013600 l     O .bss	00000070 init_task
00000000 l    df *ABS*	00000000 klib.c
00010f8e l     F .text	00000007 hlt
00011944 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 log.c
0001146c l     F .text	0000001d inb
00011489 l     F .text	0000001f outb
00011107 g     F .text	0000004f kernel_memcpy
00010d6d g     F .text	0000000b irq_enable_global
000108de g     F .text	0000001c do_handler_segment_not_present
00011156 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
0001060f g     F .text	0000000b cpu_init
00010ecf g     F .text	000000bf init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00010f95 g     F .text	00000047 kernel_strcpy
00010c50 g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
00010836 g     F .text	0000001c do_handler_overflow
0001096a g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010916 g     F .text	0000001c do_handler_general_protection
000107c6 g     F .text	0000001c do_handler_divider
000108a6 g     F .text	0000001c do_handler_double_fault
00010e91 g     F .text	0000003e init_task_entry
00010932 g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010d78 g     F .text	0000002b pic_send_eoi
000114a8 g     F .text	00000072 init_log
000107aa g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
000109be g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
00013670 g     O .bss	00002000 stack
000100e5 g       .text	00000000 exception_handler_bound_range
0001086e g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
0001094e g     F .text	0000001c do_handler_fpu_error
00010986 g     F .text	0000001c do_handler_machine_check
000107e2 g     F .text	0000001c do_handler_Debug
000107fe g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00010fdc g     F .text	00000070 kernel_strncpy
00010d62 g     F .text	0000000b irq_disable_global
00010e74 g     F .text	0000001d kernel_init
00010000 g       .text	00000000 _start
000112f0 g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
000108c2 g     F .text	0000001c do_handler_invalid_tss
00010c1b g     F .text	00000035 irq_install
0001151a g     F .text	000000be log_prinf
00010503 g     F .text	0000006d init_gdt
00010cdb g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
0001088a g     F .text	0000001c do_handler_device_unavailable
000105fc g     F .text	00000013 switch_to_tss
00011197 g     F .text	0000005e kernel_memcmp
0001002b g       .text	00000000 exception_handler_unknow
000109a2 g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
000101f0 g       .text	00000000 exception_handler_fpu_error
00010420 g     F .text	0000001e task_switch_from_to
000105b7 g     F .text	00000045 gdt_alloc_des
00010a6d g     F .text	000001ae irq_init
000110cc g     F .text	0000003b kernel_strlen
00010480 g     F .text	00000083 segment_desc_set
00010852 g     F .text	0000001c do_handler_bound_range
0001104c g     F .text	00000080 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
00010e45 g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
00010069 g       .text	00000000 exception_handler_Debug
00011436 g     F .text	00000036 pannic
000108fa g     F .text	0000001c do_handler_stack_segment_fault
0001081a g     F .text	0000001c do_handler_breakpoint
000103a0 g     F .text	00000080 task_init
000111f5 g     F .text	00000024 kernel_sprintf
00011219 g     F .text	000000d7 kernel_itoa
00010570 g     F .text	00000047 gate_desc_set
00010dc2 g     F .text	00000023 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 68 0e 00 00       	call   10e74 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc 70 56 01 00       	mov    $0x15670,%esp
    jmp init_main
   10026:	e9 a4 0e 00 00       	jmp    10ecf <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 6e 07 00 00       	call   107aa <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 6b 07 00 00       	call   107c6 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 68 07 00 00       	call   107e2 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 65 07 00 00       	call   107fe <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 62 07 00 00       	call   1081a <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 5f 07 00 00       	call   10836 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 5c 07 00 00       	call   10852 <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 59 07 00 00       	call   1086e <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 56 07 00 00       	call   1088a <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 55 07 00 00       	call   108a6 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 54 07 00 00       	call   108c2 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 53 07 00 00       	call   108de <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 52 07 00 00       	call   108fa <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 51 07 00 00       	call   10916 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 50 07 00 00       	call   10932 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 4d 07 00 00       	call   1094e <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 4c 07 00 00       	call   1096a <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 49 07 00 00       	call   10986 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 46 07 00 00       	call   109a2 <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 43 07 00 00       	call   109be <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 28 0b 00 00       	call   10dc2 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <simple_switch>:
    //simple_switch(&from,&to)
     .text
     .global simple_switch
simple_switch:
    //取出from
    mov 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    //取出to
    mov 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp

    ret
   102bc:	c3                   	ret

000102bd <tss_init>:
#include "cpu/cpu.h"
#include "tools/log.h"

// 任务切换后设置另外一个程序的tss
static int tss_init(task_t *task, uint32_t entry, uint32_t esp)
{
   102bd:	55                   	push   %ebp
   102be:	89 e5                	mov    %esp,%ebp
   102c0:	83 ec 18             	sub    $0x18,%esp
    // 找到一个空闲的gdt描述副
    int tss_sel = gdt_alloc_des();
   102c3:	e8 ef 02 00 00       	call   105b7 <gdt_alloc_des>
   102c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   102cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102cf:	79 1a                	jns    102eb <tss_init+0x2e>
    {
        // gdt表已经满了无法添加tss描述副到gdt中
        log_prinf("alloc tss failed");
   102d1:	83 ec 0c             	sub    $0xc,%esp
   102d4:	68 d8 15 01 00       	push   $0x115d8
   102d9:	e8 3c 12 00 00       	call   1151a <log_prinf>
   102de:	83 c4 10             	add    $0x10,%esp
        return -1;
   102e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102e6:	e9 b3 00 00 00       	jmp    1039e <tss_init+0xe1>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   102eb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ee:	83 c0 04             	add    $0x4,%eax
   102f1:	68 89 00 00 00       	push   $0x89
   102f6:	6a 70                	push   $0x70
   102f8:	50                   	push   %eax
   102f9:	ff 75 f4             	push   -0xc(%ebp)
   102fc:	e8 7f 01 00 00       	call   10480 <segment_desc_set>
   10301:	83 c4 10             	add    $0x10,%esp
                     SEG_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10304:	8b 45 08             	mov    0x8(%ebp),%eax
   10307:	83 c0 04             	add    $0x4,%eax
   1030a:	83 ec 04             	sub    $0x4,%esp
   1030d:	6a 68                	push   $0x68
   1030f:	6a 00                	push   $0x0
   10311:	50                   	push   %eax
   10312:	e8 3f 0e 00 00       	call   11156 <kernel_memset>
   10317:	83 c4 10             	add    $0x10,%esp

    task->tss.eip = entry;
   1031a:	8b 45 08             	mov    0x8(%ebp),%eax
   1031d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10320:	89 50 24             	mov    %edx,0x24(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	8b 55 10             	mov    0x10(%ebp),%edx
   10329:	89 50 08             	mov    %edx,0x8(%eax)
   1032c:	8b 45 08             	mov    0x8(%ebp),%eax
   1032f:	8b 50 08             	mov    0x8(%eax),%edx
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	89 50 3c             	mov    %edx,0x3c(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10338:	8b 45 08             	mov    0x8(%ebp),%eax
   1033b:	c7 40 0c 10 00 00 00 	movl   $0x10,0xc(%eax)
   10342:	8b 45 08             	mov    0x8(%ebp),%eax
   10345:	8b 50 0c             	mov    0xc(%eax),%edx
   10348:	8b 45 08             	mov    0x8(%ebp),%eax
   1034b:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   1034e:	8b 45 08             	mov    0x8(%ebp),%eax
   10351:	c7 40 60 10 00 00 00 	movl   $0x10,0x60(%eax)
   10358:	8b 45 08             	mov    0x8(%ebp),%eax
   1035b:	8b 50 60             	mov    0x60(%eax),%edx
   1035e:	8b 45 08             	mov    0x8(%ebp),%eax
   10361:	89 50 5c             	mov    %edx,0x5c(%eax)
   10364:	8b 45 08             	mov    0x8(%ebp),%eax
   10367:	8b 50 5c             	mov    0x5c(%eax),%edx
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	89 50 58             	mov    %edx,0x58(%eax)
   10370:	8b 45 08             	mov    0x8(%ebp),%eax
   10373:	8b 50 58             	mov    0x58(%eax),%edx
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   1037c:	8b 45 08             	mov    0x8(%ebp),%eax
   1037f:	c7 40 50 08 00 00 00 	movl   $0x8,0x50(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFALUT;
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	c7 40 28 02 02 00 00 	movl   $0x202,0x28(%eax)
    task->tss_sel = tss_sel; // 将tss选择子保存到tss_sel中
   10390:	8b 45 08             	mov    0x8(%ebp),%eax
   10393:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10396:	89 50 6c             	mov    %edx,0x6c(%eax)
    return 0;
   10399:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1039e:	c9                   	leave
   1039f:	c3                   	ret

000103a0 <task_init>:

int task_init(task_t *task, uint32_t entry, uint32_t esp)
{
   103a0:	55                   	push   %ebp
   103a1:	89 e5                	mov    %esp,%ebp
   103a3:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   103a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103aa:	75 19                	jne    103c5 <task_init+0x25>
   103ac:	68 e9 15 01 00       	push   $0x115e9
   103b1:	68 50 16 01 00       	push   $0x11650
   103b6:	6a 24                	push   $0x24
   103b8:	68 00 16 01 00       	push   $0x11600
   103bd:	e8 74 10 00 00       	call   11436 <pannic>
   103c2:	83 c4 10             	add    $0x10,%esp

    // tss_init(task, entry, esp);
    uint32_t *pesp = (uint32_t *)esp;
   103c5:	8b 45 10             	mov    0x10(%ebp),%eax
   103c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pesp)
   103cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   103cf:	74 48                	je     10419 <task_init+0x79>
    {
        *(--pesp) = entry;
   103d1:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   103d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103d8:	8b 55 0c             	mov    0xc(%ebp),%edx
   103db:	89 10                	mov    %edx,(%eax)
        *(--pesp) = 0;
   103dd:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   103e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   103ea:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   103ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103f1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   103f7:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   103fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103fe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        *(--pesp) = 0;
   10404:	83 6d f4 04          	subl   $0x4,-0xc(%ebp)
   10408:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1040b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        task->stack = pesp;
   10411:	8b 45 08             	mov    0x8(%ebp),%eax
   10414:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10417:	89 10                	mov    %edx,(%eax)
    }
    return 0;
   10419:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1041e:	c9                   	leave
   1041f:	c3                   	ret

00010420 <task_switch_from_to>:

void simple_switch(uint32_t **from, uint32_t *to);

void task_switch_from_to(task_t *from, task_t *to)
{
   10420:	55                   	push   %ebp
   10421:	89 e5                	mov    %esp,%ebp
   10423:	83 ec 08             	sub    $0x8,%esp
    // switch_to_tss(to->tss_sel);
    simple_switch(&from->stack, to->stack);
   10426:	8b 45 0c             	mov    0xc(%ebp),%eax
   10429:	8b 10                	mov    (%eax),%edx
   1042b:	8b 45 08             	mov    0x8(%ebp),%eax
   1042e:	83 ec 08             	sub    $0x8,%esp
   10431:	52                   	push   %edx
   10432:	50                   	push   %eax
   10433:	e8 70 fe ff ff       	call   102a8 <simple_switch>
   10438:	83 c4 10             	add    $0x10,%esp
}
   1043b:	90                   	nop
   1043c:	c9                   	leave
   1043d:	c3                   	ret

0001043e <lgdt>:
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}

// 从gdt表中找到一个空闲的项设置给tss
int gdt_alloc_des(void)
{
   1043e:	55                   	push   %ebp
   1043f:	89 e5                	mov    %esp,%ebp
   10441:	83 ec 10             	sub    $0x10,%esp
    {
        segment_desc_t *desc = gdt_table + i;
        if (desc->attr == 0)
        {
            return i * sizeof(segment_desc_t);
        }
   10444:	8b 45 08             	mov    0x8(%ebp),%eax
   10447:	c1 e8 10             	shr    $0x10,%eax
   1044a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    }
   1044e:	8b 45 08             	mov    0x8(%ebp),%eax
   10451:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return -1;
   10455:	8b 45 0c             	mov    0xc(%ebp),%eax
   10458:	83 e8 01             	sub    $0x1,%eax
   1045b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   1045f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

   10463:	90                   	nop
   10464:	c9                   	leave
   10465:	c3                   	ret

00010466 <far_jump>:
   10466:	55                   	push   %ebp
   10467:	89 e5                	mov    %esp,%ebp
   10469:	83 ec 10             	sub    $0x10,%esp
   1046c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1046f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10472:	8b 45 08             	mov    0x8(%ebp),%eax
   10475:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10478:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1047b:	ff 28                	ljmp   *(%eax)
   1047d:	90                   	nop
   1047e:	c9                   	leave
   1047f:	c3                   	ret

00010480 <segment_desc_set>:
{
   10480:	55                   	push   %ebp
   10481:	89 e5                	mov    %esp,%ebp
   10483:	83 ec 14             	sub    $0x14,%esp
   10486:	8b 45 14             	mov    0x14(%ebp),%eax
   10489:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   1048d:	8b 45 08             	mov    0x8(%ebp),%eax
   10490:	83 e0 f8             	and    $0xfffffff8,%eax
   10493:	05 60 19 01 00       	add    $0x11960,%eax
   10498:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   1049b:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   104a2:	76 0f                	jbe    104b3 <segment_desc_set+0x33>
        attr |= SEG_G;
   104a4:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   104aa:	8b 45 10             	mov    0x10(%ebp),%eax
   104ad:	c1 e8 0c             	shr    $0xc,%eax
   104b0:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   104b3:	8b 45 10             	mov    0x10(%ebp),%eax
   104b6:	89 c2                	mov    %eax,%edx
   104b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104bb:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   104be:	8b 45 0c             	mov    0xc(%ebp),%eax
   104c1:	89 c2                	mov    %eax,%edx
   104c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104c6:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   104ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   104cd:	c1 e8 10             	shr    $0x10,%eax
   104d0:	89 c2                	mov    %eax,%edx
   104d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104d5:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   104d8:	8b 45 10             	mov    0x10(%ebp),%eax
   104db:	c1 e8 10             	shr    $0x10,%eax
   104de:	c1 e0 08             	shl    $0x8,%eax
   104e1:	66 25 00 0f          	and    $0xf00,%ax
   104e5:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   104e9:	89 c2                	mov    %eax,%edx
   104eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104ee:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   104f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   104f5:	c1 e8 18             	shr    $0x18,%eax
   104f8:	89 c2                	mov    %eax,%edx
   104fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104fd:	88 50 07             	mov    %dl,0x7(%eax)
}
   10500:	90                   	nop
   10501:	c9                   	leave
   10502:	c3                   	ret

00010503 <init_gdt>:
{
   10503:	55                   	push   %ebp
   10504:	89 e5                	mov    %esp,%ebp
   10506:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10509:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10510:	eb 19                	jmp    1052b <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10512:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10515:	c1 e0 03             	shl    $0x3,%eax
   10518:	6a 00                	push   $0x0
   1051a:	6a 00                	push   $0x0
   1051c:	6a 00                	push   $0x0
   1051e:	50                   	push   %eax
   1051f:	e8 5c ff ff ff       	call   10480 <segment_desc_set>
   10524:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10527:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1052b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10532:	7e de                	jle    10512 <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   10534:	68 92 40 00 00       	push   $0x4092
   10539:	6a ff                	push   $0xffffffff
   1053b:	6a 00                	push   $0x0
   1053d:	6a 10                	push   $0x10
   1053f:	e8 3c ff ff ff       	call   10480 <segment_desc_set>
   10544:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   10547:	68 9a 40 00 00       	push   $0x409a
   1054c:	6a ff                	push   $0xffffffff
   1054e:	6a 00                	push   $0x0
   10550:	6a 08                	push   $0x8
   10552:	e8 29 ff ff ff       	call   10480 <segment_desc_set>
   10557:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1055a:	b8 60 19 01 00       	mov    $0x11960,%eax
   1055f:	68 00 08 00 00       	push   $0x800
   10564:	50                   	push   %eax
   10565:	e8 d4 fe ff ff       	call   1043e <lgdt>
   1056a:	83 c4 08             	add    $0x8,%esp
}
   1056d:	90                   	nop
   1056e:	c9                   	leave
   1056f:	c3                   	ret

00010570 <gate_desc_set>:
{
   10570:	55                   	push   %ebp
   10571:	89 e5                	mov    %esp,%ebp
   10573:	83 ec 08             	sub    $0x8,%esp
   10576:	8b 55 0c             	mov    0xc(%ebp),%edx
   10579:	8b 45 14             	mov    0x14(%ebp),%eax
   1057c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10580:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10584:	8b 45 10             	mov    0x10(%ebp),%eax
   10587:	89 c2                	mov    %eax,%edx
   10589:	8b 45 08             	mov    0x8(%ebp),%eax
   1058c:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   1058f:	8b 45 08             	mov    0x8(%ebp),%eax
   10592:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10596:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1059a:	8b 45 08             	mov    0x8(%ebp),%eax
   1059d:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   105a1:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   105a5:	8b 45 10             	mov    0x10(%ebp),%eax
   105a8:	c1 e8 10             	shr    $0x10,%eax
   105ab:	89 c2                	mov    %eax,%edx
   105ad:	8b 45 08             	mov    0x8(%ebp),%eax
   105b0:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   105b4:	90                   	nop
   105b5:	c9                   	leave
   105b6:	c3                   	ret

000105b7 <gdt_alloc_des>:
{
   105b7:	55                   	push   %ebp
   105b8:	89 e5                	mov    %esp,%ebp
   105ba:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   105bd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   105c4:	eb 26                	jmp    105ec <gdt_alloc_des+0x35>
        segment_desc_t *desc = gdt_table + i;
   105c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105c9:	c1 e0 03             	shl    $0x3,%eax
   105cc:	05 60 19 01 00       	add    $0x11960,%eax
   105d1:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->attr == 0)
   105d4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   105d7:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   105db:	66 85 c0             	test   %ax,%ax
   105de:	75 08                	jne    105e8 <gdt_alloc_des+0x31>
            return i * sizeof(segment_desc_t);
   105e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105e3:	c1 e0 03             	shl    $0x3,%eax
   105e6:	eb 12                	jmp    105fa <gdt_alloc_des+0x43>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   105e8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   105ec:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   105f3:	7e d1                	jle    105c6 <gdt_alloc_des+0xf>
    return -1;
   105f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   105fa:	c9                   	leave
   105fb:	c3                   	ret

000105fc <switch_to_tss>:
{
   105fc:	55                   	push   %ebp
   105fd:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   105ff:	6a 00                	push   $0x0
   10601:	ff 75 08             	push   0x8(%ebp)
   10604:	e8 5d fe ff ff       	call   10466 <far_jump>
   10609:	83 c4 08             	add    $0x8,%esp
}
   1060c:	90                   	nop
   1060d:	c9                   	leave
   1060e:	c3                   	ret

0001060f <cpu_init>:
{
   1060f:	55                   	push   %ebp
   10610:	89 e5                	mov    %esp,%ebp
    init_gdt();
   10612:	e8 ec fe ff ff       	call   10503 <init_gdt>
   10617:	90                   	nop
   10618:	5d                   	pop    %ebp
   10619:	c3                   	ret

0001061a <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   1061a:	55                   	push   %ebp
   1061b:	89 e5                	mov    %esp,%ebp
   1061d:	83 ec 14             	sub    $0x14,%esp
   10620:	8b 45 08             	mov    0x8(%ebp),%eax
   10623:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   10627:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1062b:	89 c2                	mov    %eax,%edx
   1062d:	ec                   	in     (%dx),%al
   1062e:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   10631:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   10635:	c9                   	leave
   10636:	c3                   	ret

00010637 <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   10637:	55                   	push   %ebp
   10638:	89 e5                	mov    %esp,%ebp
   1063a:	83 ec 08             	sub    $0x8,%esp
   1063d:	8b 55 08             	mov    0x8(%ebp),%edx
   10640:	8b 45 0c             	mov    0xc(%ebp),%eax
   10643:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10647:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   1064a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1064e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10652:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   10653:	90                   	nop
   10654:	c9                   	leave
   10655:	c3                   	ret

00010656 <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   10656:	55                   	push   %ebp
   10657:	89 e5                	mov    %esp,%ebp
        hlt();
   10659:	fa                   	cli
    }
   1065a:	90                   	nop
   1065b:	5d                   	pop    %ebp
   1065c:	c3                   	ret

0001065d <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   1065d:	55                   	push   %ebp
   1065e:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   10660:	fb                   	sti
}
   10661:	90                   	nop
   10662:	5d                   	pop    %ebp
   10663:	c3                   	ret

00010664 <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   10664:	55                   	push   %ebp
   10665:	89 e5                	mov    %esp,%ebp
   10667:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   1066a:	8b 45 08             	mov    0x8(%ebp),%eax
   1066d:	c1 e8 10             	shr    $0x10,%eax
   10670:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   10674:	8b 45 08             	mov    0x8(%ebp),%eax
   10677:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   1067b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1067e:	83 e8 01             	sub    $0x1,%eax
   10681:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10685:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   10689:	90                   	nop
   1068a:	c9                   	leave
   1068b:	c3                   	ret

0001068c <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   1068c:	55                   	push   %ebp
   1068d:	89 e5                	mov    %esp,%ebp
}
   1068f:	f4                   	hlt

   10690:	90                   	nop
   10691:	5d                   	pop    %ebp
   10692:	c3                   	ret

00010693 <dump_core_regs>:
{
   10693:	55                   	push   %ebp
   10694:	89 e5                	mov    %esp,%ebp
   10696:	57                   	push   %edi
   10697:	56                   	push   %esi
   10698:	53                   	push   %ebx
   10699:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   1069c:	8b 45 08             	mov    0x8(%ebp),%eax
   1069f:	8b 50 34             	mov    0x34(%eax),%edx
   106a2:	8b 45 08             	mov    0x8(%ebp),%eax
   106a5:	8b 40 30             	mov    0x30(%eax),%eax
   106a8:	83 ec 04             	sub    $0x4,%esp
   106ab:	52                   	push   %edx
   106ac:	50                   	push   %eax
   106ad:	68 5c 16 01 00       	push   $0x1165c
   106b2:	e8 63 0e 00 00       	call   1151a <log_prinf>
   106b7:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   106ba:	8b 45 08             	mov    0x8(%ebp),%eax
   106bd:	8b 38                	mov    (%eax),%edi
   106bf:	8b 45 08             	mov    0x8(%ebp),%eax
   106c2:	8b 70 04             	mov    0x4(%eax),%esi
   106c5:	8b 45 08             	mov    0x8(%ebp),%eax
   106c8:	8b 58 0c             	mov    0xc(%eax),%ebx
   106cb:	8b 45 08             	mov    0x8(%ebp),%eax
   106ce:	8b 48 08             	mov    0x8(%eax),%ecx
   106d1:	8b 45 08             	mov    0x8(%ebp),%eax
   106d4:	8b 50 0c             	mov    0xc(%eax),%edx
   106d7:	8b 45 08             	mov    0x8(%ebp),%eax
   106da:	8b 40 3c             	mov    0x3c(%eax),%eax
   106dd:	83 ec 04             	sub    $0x4,%esp
   106e0:	57                   	push   %edi
   106e1:	56                   	push   %esi
   106e2:	53                   	push   %ebx
   106e3:	51                   	push   %ecx
   106e4:	52                   	push   %edx
   106e5:	50                   	push   %eax
   106e6:	68 74 16 01 00       	push   $0x11674
   106eb:	e8 2a 0e 00 00       	call   1151a <log_prinf>
   106f0:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   106f3:	8b 45 08             	mov    0x8(%ebp),%eax
   106f6:	8b 48 1c             	mov    0x1c(%eax),%ecx
   106f9:	8b 45 08             	mov    0x8(%ebp),%eax
   106fc:	8b 40 18             	mov    0x18(%eax),%eax
   106ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10702:	8b 45 08             	mov    0x8(%ebp),%eax
   10705:	8b 58 14             	mov    0x14(%eax),%ebx
   10708:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   1070b:	8b 45 08             	mov    0x8(%ebp),%eax
   1070e:	8b 78 10             	mov    0x10(%eax),%edi
   10711:	8b 45 08             	mov    0x8(%ebp),%eax
   10714:	8b 70 24             	mov    0x24(%eax),%esi
   10717:	8b 45 08             	mov    0x8(%ebp),%eax
   1071a:	8b 58 28             	mov    0x28(%eax),%ebx
   1071d:	8b 45 08             	mov    0x8(%ebp),%eax
   10720:	8b 50 20             	mov    0x20(%eax),%edx
   10723:	8b 45 08             	mov    0x8(%ebp),%eax
   10726:	8b 40 2c             	mov    0x2c(%eax),%eax
   10729:	83 ec 0c             	sub    $0xc,%esp
   1072c:	51                   	push   %ecx
   1072d:	ff 75 e4             	push   -0x1c(%ebp)
   10730:	ff 75 e0             	push   -0x20(%ebp)
   10733:	57                   	push   %edi
   10734:	56                   	push   %esi
   10735:	53                   	push   %ebx
   10736:	52                   	push   %edx
   10737:	50                   	push   %eax
   10738:	68 9c 16 01 00       	push   $0x1169c
   1073d:	e8 d8 0d 00 00       	call   1151a <log_prinf>
   10742:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   10745:	8b 45 08             	mov    0x8(%ebp),%eax
   10748:	8b 50 40             	mov    0x40(%eax),%edx
   1074b:	8b 45 08             	mov    0x8(%ebp),%eax
   1074e:	8b 40 38             	mov    0x38(%eax),%eax
   10751:	83 ec 04             	sub    $0x4,%esp
   10754:	52                   	push   %edx
   10755:	50                   	push   %eax
   10756:	68 ed 16 01 00       	push   $0x116ed
   1075b:	e8 ba 0d 00 00       	call   1151a <log_prinf>
   10760:	83 c4 10             	add    $0x10,%esp
}
   10763:	90                   	nop
   10764:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10767:	5b                   	pop    %ebx
   10768:	5e                   	pop    %esi
   10769:	5f                   	pop    %edi
   1076a:	5d                   	pop    %ebp
   1076b:	c3                   	ret

0001076c <do_default_handler>:
{
   1076c:	55                   	push   %ebp
   1076d:	89 e5                	mov    %esp,%ebp
   1076f:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   10772:	83 ec 0c             	sub    $0xc,%esp
   10775:	68 06 17 01 00       	push   $0x11706
   1077a:	e8 9b 0d 00 00       	call   1151a <log_prinf>
   1077f:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   10782:	83 ec 08             	sub    $0x8,%esp
   10785:	ff 75 0c             	push   0xc(%ebp)
   10788:	68 23 17 01 00       	push   $0x11723
   1078d:	e8 88 0d 00 00       	call   1151a <log_prinf>
   10792:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10795:	83 ec 0c             	sub    $0xc,%esp
   10798:	ff 75 08             	push   0x8(%ebp)
   1079b:	e8 f3 fe ff ff       	call   10693 <dump_core_regs>
   107a0:	83 c4 10             	add    $0x10,%esp
        hlt();
   107a3:	e8 e4 fe ff ff       	call   1068c <hlt>
   107a8:	eb f9                	jmp    107a3 <do_default_handler+0x37>

000107aa <do_handler_unknow>:
{
   107aa:	55                   	push   %ebp
   107ab:	89 e5                	mov    %esp,%ebp
   107ad:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   107b0:	83 ec 08             	sub    $0x8,%esp
   107b3:	68 34 17 01 00       	push   $0x11734
   107b8:	ff 75 08             	push   0x8(%ebp)
   107bb:	e8 ac ff ff ff       	call   1076c <do_default_handler>
   107c0:	83 c4 10             	add    $0x10,%esp
}
   107c3:	90                   	nop
   107c4:	c9                   	leave
   107c5:	c3                   	ret

000107c6 <do_handler_divider>:
{
   107c6:	55                   	push   %ebp
   107c7:	89 e5                	mov    %esp,%ebp
   107c9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   107cc:	83 ec 08             	sub    $0x8,%esp
   107cf:	68 48 17 01 00       	push   $0x11748
   107d4:	ff 75 08             	push   0x8(%ebp)
   107d7:	e8 90 ff ff ff       	call   1076c <do_default_handler>
   107dc:	83 c4 10             	add    $0x10,%esp
}
   107df:	90                   	nop
   107e0:	c9                   	leave
   107e1:	c3                   	ret

000107e2 <do_handler_Debug>:
{
   107e2:	55                   	push   %ebp
   107e3:	89 e5                	mov    %esp,%ebp
   107e5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   107e8:	83 ec 08             	sub    $0x8,%esp
   107eb:	68 5d 17 01 00       	push   $0x1175d
   107f0:	ff 75 08             	push   0x8(%ebp)
   107f3:	e8 74 ff ff ff       	call   1076c <do_default_handler>
   107f8:	83 c4 10             	add    $0x10,%esp
}
   107fb:	90                   	nop
   107fc:	c9                   	leave
   107fd:	c3                   	ret

000107fe <do_handler_NMI>:
{
   107fe:	55                   	push   %ebp
   107ff:	89 e5                	mov    %esp,%ebp
   10801:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10804:	83 ec 08             	sub    $0x8,%esp
   10807:	68 6d 17 01 00       	push   $0x1176d
   1080c:	ff 75 08             	push   0x8(%ebp)
   1080f:	e8 58 ff ff ff       	call   1076c <do_default_handler>
   10814:	83 c4 10             	add    $0x10,%esp
}
   10817:	90                   	nop
   10818:	c9                   	leave
   10819:	c3                   	ret

0001081a <do_handler_breakpoint>:
{
   1081a:	55                   	push   %ebp
   1081b:	89 e5                	mov    %esp,%ebp
   1081d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10820:	83 ec 08             	sub    $0x8,%esp
   10823:	68 7c 17 01 00       	push   $0x1177c
   10828:	ff 75 08             	push   0x8(%ebp)
   1082b:	e8 3c ff ff ff       	call   1076c <do_default_handler>
   10830:	83 c4 10             	add    $0x10,%esp
}
   10833:	90                   	nop
   10834:	c9                   	leave
   10835:	c3                   	ret

00010836 <do_handler_overflow>:
{
   10836:	55                   	push   %ebp
   10837:	89 e5                	mov    %esp,%ebp
   10839:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   1083c:	83 ec 08             	sub    $0x8,%esp
   1083f:	68 88 17 01 00       	push   $0x11788
   10844:	ff 75 08             	push   0x8(%ebp)
   10847:	e8 20 ff ff ff       	call   1076c <do_default_handler>
   1084c:	83 c4 10             	add    $0x10,%esp
}
   1084f:	90                   	nop
   10850:	c9                   	leave
   10851:	c3                   	ret

00010852 <do_handler_bound_range>:
{
   10852:	55                   	push   %ebp
   10853:	89 e5                	mov    %esp,%ebp
   10855:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10858:	83 ec 08             	sub    $0x8,%esp
   1085b:	68 92 17 01 00       	push   $0x11792
   10860:	ff 75 08             	push   0x8(%ebp)
   10863:	e8 04 ff ff ff       	call   1076c <do_default_handler>
   10868:	83 c4 10             	add    $0x10,%esp
}
   1086b:	90                   	nop
   1086c:	c9                   	leave
   1086d:	c3                   	ret

0001086e <do_handler_invalid_opcode>:
{
   1086e:	55                   	push   %ebp
   1086f:	89 e5                	mov    %esp,%ebp
   10871:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10874:	83 ec 08             	sub    $0x8,%esp
   10877:	68 a8 17 01 00       	push   $0x117a8
   1087c:	ff 75 08             	push   0x8(%ebp)
   1087f:	e8 e8 fe ff ff       	call   1076c <do_default_handler>
   10884:	83 c4 10             	add    $0x10,%esp
}
   10887:	90                   	nop
   10888:	c9                   	leave
   10889:	c3                   	ret

0001088a <do_handler_device_unavailable>:
{
   1088a:	55                   	push   %ebp
   1088b:	89 e5                	mov    %esp,%ebp
   1088d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10890:	83 ec 08             	sub    $0x8,%esp
   10893:	68 b8 17 01 00       	push   $0x117b8
   10898:	ff 75 08             	push   0x8(%ebp)
   1089b:	e8 cc fe ff ff       	call   1076c <do_default_handler>
   108a0:	83 c4 10             	add    $0x10,%esp
}
   108a3:	90                   	nop
   108a4:	c9                   	leave
   108a5:	c3                   	ret

000108a6 <do_handler_double_fault>:
{
   108a6:	55                   	push   %ebp
   108a7:	89 e5                	mov    %esp,%ebp
   108a9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   108ac:	83 ec 08             	sub    $0x8,%esp
   108af:	68 ce 17 01 00       	push   $0x117ce
   108b4:	ff 75 08             	push   0x8(%ebp)
   108b7:	e8 b0 fe ff ff       	call   1076c <do_default_handler>
   108bc:	83 c4 10             	add    $0x10,%esp
}
   108bf:	90                   	nop
   108c0:	c9                   	leave
   108c1:	c3                   	ret

000108c2 <do_handler_invalid_tss>:
{
   108c2:	55                   	push   %ebp
   108c3:	89 e5                	mov    %esp,%ebp
   108c5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   108c8:	83 ec 08             	sub    $0x8,%esp
   108cb:	68 dc 17 01 00       	push   $0x117dc
   108d0:	ff 75 08             	push   0x8(%ebp)
   108d3:	e8 94 fe ff ff       	call   1076c <do_default_handler>
   108d8:	83 c4 10             	add    $0x10,%esp
}
   108db:	90                   	nop
   108dc:	c9                   	leave
   108dd:	c3                   	ret

000108de <do_handler_segment_not_present>:
{
   108de:	55                   	push   %ebp
   108df:	89 e5                	mov    %esp,%ebp
   108e1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   108e4:	83 ec 08             	sub    $0x8,%esp
   108e7:	68 e8 17 01 00       	push   $0x117e8
   108ec:	ff 75 08             	push   0x8(%ebp)
   108ef:	e8 78 fe ff ff       	call   1076c <do_default_handler>
   108f4:	83 c4 10             	add    $0x10,%esp
}
   108f7:	90                   	nop
   108f8:	c9                   	leave
   108f9:	c3                   	ret

000108fa <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   108fa:	55                   	push   %ebp
   108fb:	89 e5                	mov    %esp,%ebp
   108fd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10900:	83 ec 08             	sub    $0x8,%esp
   10903:	68 fd 17 01 00       	push   $0x117fd
   10908:	ff 75 08             	push   0x8(%ebp)
   1090b:	e8 5c fe ff ff       	call   1076c <do_default_handler>
   10910:	83 c4 10             	add    $0x10,%esp
}
   10913:	90                   	nop
   10914:	c9                   	leave
   10915:	c3                   	ret

00010916 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   10916:	55                   	push   %ebp
   10917:	89 e5                	mov    %esp,%ebp
   10919:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   1091c:	83 ec 08             	sub    $0x8,%esp
   1091f:	68 12 18 01 00       	push   $0x11812
   10924:	ff 75 08             	push   0x8(%ebp)
   10927:	e8 40 fe ff ff       	call   1076c <do_default_handler>
   1092c:	83 c4 10             	add    $0x10,%esp
}
   1092f:	90                   	nop
   10930:	c9                   	leave
   10931:	c3                   	ret

00010932 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t *frame)
{
   10932:	55                   	push   %ebp
   10933:	89 e5                	mov    %esp,%ebp
   10935:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10938:	83 ec 08             	sub    $0x8,%esp
   1093b:	68 26 18 01 00       	push   $0x11826
   10940:	ff 75 08             	push   0x8(%ebp)
   10943:	e8 24 fe ff ff       	call   1076c <do_default_handler>
   10948:	83 c4 10             	add    $0x10,%esp
}
   1094b:	90                   	nop
   1094c:	c9                   	leave
   1094d:	c3                   	ret

0001094e <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   1094e:	55                   	push   %ebp
   1094f:	89 e5                	mov    %esp,%ebp
   10951:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10954:	83 ec 08             	sub    $0x8,%esp
   10957:	68 32 18 01 00       	push   $0x11832
   1095c:	ff 75 08             	push   0x8(%ebp)
   1095f:	e8 08 fe ff ff       	call   1076c <do_default_handler>
   10964:	83 c4 10             	add    $0x10,%esp
}
   10967:	90                   	nop
   10968:	c9                   	leave
   10969:	c3                   	ret

0001096a <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   1096a:	55                   	push   %ebp
   1096b:	89 e5                	mov    %esp,%ebp
   1096d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10970:	83 ec 08             	sub    $0x8,%esp
   10973:	68 50 18 01 00       	push   $0x11850
   10978:	ff 75 08             	push   0x8(%ebp)
   1097b:	e8 ec fd ff ff       	call   1076c <do_default_handler>
   10980:	83 c4 10             	add    $0x10,%esp
}
   10983:	90                   	nop
   10984:	c9                   	leave
   10985:	c3                   	ret

00010986 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   10986:	55                   	push   %ebp
   10987:	89 e5                	mov    %esp,%ebp
   10989:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   1098c:	83 ec 08             	sub    $0x8,%esp
   1098f:	68 61 18 01 00       	push   $0x11861
   10994:	ff 75 08             	push   0x8(%ebp)
   10997:	e8 d0 fd ff ff       	call   1076c <do_default_handler>
   1099c:	83 c4 10             	add    $0x10,%esp
}
   1099f:	90                   	nop
   109a0:	c9                   	leave
   109a1:	c3                   	ret

000109a2 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   109a2:	55                   	push   %ebp
   109a3:	89 e5                	mov    %esp,%ebp
   109a5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   109a8:	83 ec 08             	sub    $0x8,%esp
   109ab:	68 70 18 01 00       	push   $0x11870
   109b0:	ff 75 08             	push   0x8(%ebp)
   109b3:	e8 b4 fd ff ff       	call   1076c <do_default_handler>
   109b8:	83 c4 10             	add    $0x10,%esp
}
   109bb:	90                   	nop
   109bc:	c9                   	leave
   109bd:	c3                   	ret

000109be <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   109be:	55                   	push   %ebp
   109bf:	89 e5                	mov    %esp,%ebp
   109c1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   109c4:	83 ec 08             	sub    $0x8,%esp
   109c7:	68 8f 18 01 00       	push   $0x1188f
   109cc:	ff 75 08             	push   0x8(%ebp)
   109cf:	e8 98 fd ff ff       	call   1076c <do_default_handler>
   109d4:	83 c4 10             	add    $0x10,%esp
}
   109d7:	90                   	nop
   109d8:	c9                   	leave
   109d9:	c3                   	ret

000109da <init_pic>:

static void init_pic(void)
{
   109da:	55                   	push   %ebp
   109db:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   109dd:	6a 11                	push   $0x11
   109df:	6a 20                	push   $0x20
   109e1:	e8 51 fc ff ff       	call   10637 <outb>
   109e6:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   109e9:	6a 20                	push   $0x20
   109eb:	6a 21                	push   $0x21
   109ed:	e8 45 fc ff ff       	call   10637 <outb>
   109f2:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   109f5:	6a 04                	push   $0x4
   109f7:	6a 21                	push   $0x21
   109f9:	e8 39 fc ff ff       	call   10637 <outb>
   109fe:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10a01:	6a 01                	push   $0x1
   10a03:	6a 21                	push   $0x21
   10a05:	e8 2d fc ff ff       	call   10637 <outb>
   10a0a:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10a0d:	6a 11                	push   $0x11
   10a0f:	68 a0 00 00 00       	push   $0xa0
   10a14:	e8 1e fc ff ff       	call   10637 <outb>
   10a19:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10a1c:	6a 28                	push   $0x28
   10a1e:	68 a1 00 00 00       	push   $0xa1
   10a23:	e8 0f fc ff ff       	call   10637 <outb>
   10a28:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10a2b:	6a 02                	push   $0x2
   10a2d:	68 a1 00 00 00       	push   $0xa1
   10a32:	e8 00 fc ff ff       	call   10637 <outb>
   10a37:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10a3a:	6a 01                	push   $0x1
   10a3c:	68 a1 00 00 00       	push   $0xa1
   10a41:	e8 f1 fb ff ff       	call   10637 <outb>
   10a46:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10a49:	68 fb 00 00 00       	push   $0xfb
   10a4e:	6a 21                	push   $0x21
   10a50:	e8 e2 fb ff ff       	call   10637 <outb>
   10a55:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   10a58:	68 ff 00 00 00       	push   $0xff
   10a5d:	68 a1 00 00 00       	push   $0xa1
   10a62:	e8 d0 fb ff ff       	call   10637 <outb>
   10a67:	83 c4 08             	add    $0x8,%esp
}
   10a6a:	90                   	nop
   10a6b:	c9                   	leave
   10a6c:	c3                   	ret

00010a6d <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   10a6d:	55                   	push   %ebp
   10a6e:	89 e5                	mov    %esp,%ebp
   10a70:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10a73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10a7a:	eb 25                	jmp    10aa1 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10a7c:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a84:	c1 e0 03             	shl    $0x3,%eax
   10a87:	05 60 21 01 00       	add    $0x12160,%eax
   10a8c:	68 00 8e 00 00       	push   $0x8e00
   10a91:	52                   	push   %edx
   10a92:	6a 08                	push   $0x8
   10a94:	50                   	push   %eax
   10a95:	e8 d6 fa ff ff       	call   10570 <gate_desc_set>
   10a9a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10a9d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10aa1:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10aa5:	7e d5                	jle    10a7c <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10aa7:	83 ec 08             	sub    $0x8,%esp
   10aaa:	68 4a 00 01 00       	push   $0x1004a
   10aaf:	6a 00                	push   $0x0
   10ab1:	e8 65 01 00 00       	call   10c1b <irq_install>
   10ab6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10ab9:	83 ec 08             	sub    $0x8,%esp
   10abc:	68 69 00 01 00       	push   $0x10069
   10ac1:	6a 01                	push   $0x1
   10ac3:	e8 53 01 00 00       	call   10c1b <irq_install>
   10ac8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10acb:	83 ec 08             	sub    $0x8,%esp
   10ace:	68 88 00 01 00       	push   $0x10088
   10ad3:	6a 02                	push   $0x2
   10ad5:	e8 41 01 00 00       	call   10c1b <irq_install>
   10ada:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10add:	83 ec 08             	sub    $0x8,%esp
   10ae0:	68 a7 00 01 00       	push   $0x100a7
   10ae5:	6a 03                	push   $0x3
   10ae7:	e8 2f 01 00 00       	call   10c1b <irq_install>
   10aec:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10aef:	83 ec 08             	sub    $0x8,%esp
   10af2:	68 c6 00 01 00       	push   $0x100c6
   10af7:	6a 04                	push   $0x4
   10af9:	e8 1d 01 00 00       	call   10c1b <irq_install>
   10afe:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10b01:	83 ec 08             	sub    $0x8,%esp
   10b04:	68 e5 00 01 00       	push   $0x100e5
   10b09:	6a 05                	push   $0x5
   10b0b:	e8 0b 01 00 00       	call   10c1b <irq_install>
   10b10:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10b13:	83 ec 08             	sub    $0x8,%esp
   10b16:	68 04 01 01 00       	push   $0x10104
   10b1b:	6a 06                	push   $0x6
   10b1d:	e8 f9 00 00 00       	call   10c1b <irq_install>
   10b22:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10b25:	83 ec 08             	sub    $0x8,%esp
   10b28:	68 23 01 01 00       	push   $0x10123
   10b2d:	6a 07                	push   $0x7
   10b2f:	e8 e7 00 00 00       	call   10c1b <irq_install>
   10b34:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10b37:	83 ec 08             	sub    $0x8,%esp
   10b3a:	68 42 01 01 00       	push   $0x10142
   10b3f:	6a 08                	push   $0x8
   10b41:	e8 d5 00 00 00       	call   10c1b <irq_install>
   10b46:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   10b49:	83 ec 08             	sub    $0x8,%esp
   10b4c:	68 5f 01 01 00       	push   $0x1015f
   10b51:	6a 0a                	push   $0xa
   10b53:	e8 c3 00 00 00       	call   10c1b <irq_install>
   10b58:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   10b5b:	83 ec 08             	sub    $0x8,%esp
   10b5e:	68 7c 01 01 00       	push   $0x1017c
   10b63:	6a 0b                	push   $0xb
   10b65:	e8 b1 00 00 00       	call   10c1b <irq_install>
   10b6a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   10b6d:	83 ec 08             	sub    $0x8,%esp
   10b70:	68 99 01 01 00       	push   $0x10199
   10b75:	6a 0c                	push   $0xc
   10b77:	e8 9f 00 00 00       	call   10c1b <irq_install>
   10b7c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   10b7f:	83 ec 08             	sub    $0x8,%esp
   10b82:	68 b6 01 01 00       	push   $0x101b6
   10b87:	6a 0d                	push   $0xd
   10b89:	e8 8d 00 00 00       	call   10c1b <irq_install>
   10b8e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   10b91:	83 ec 08             	sub    $0x8,%esp
   10b94:	68 d3 01 01 00       	push   $0x101d3
   10b99:	6a 0e                	push   $0xe
   10b9b:	e8 7b 00 00 00       	call   10c1b <irq_install>
   10ba0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   10ba3:	83 ec 08             	sub    $0x8,%esp
   10ba6:	68 f0 01 01 00       	push   $0x101f0
   10bab:	6a 10                	push   $0x10
   10bad:	e8 69 00 00 00       	call   10c1b <irq_install>
   10bb2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   10bb5:	83 ec 08             	sub    $0x8,%esp
   10bb8:	68 0f 02 01 00       	push   $0x1020f
   10bbd:	6a 11                	push   $0x11
   10bbf:	e8 57 00 00 00       	call   10c1b <irq_install>
   10bc4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   10bc7:	83 ec 08             	sub    $0x8,%esp
   10bca:	68 2c 02 01 00       	push   $0x1022c
   10bcf:	6a 12                	push   $0x12
   10bd1:	e8 45 00 00 00       	call   10c1b <irq_install>
   10bd6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   10bd9:	83 ec 08             	sub    $0x8,%esp
   10bdc:	68 4b 02 01 00       	push   $0x1024b
   10be1:	6a 13                	push   $0x13
   10be3:	e8 33 00 00 00       	call   10c1b <irq_install>
   10be8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   10beb:	83 ec 08             	sub    $0x8,%esp
   10bee:	68 6a 02 01 00       	push   $0x1026a
   10bf3:	6a 14                	push   $0x14
   10bf5:	e8 21 00 00 00       	call   10c1b <irq_install>
   10bfa:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10bfd:	b8 60 21 01 00       	mov    $0x12160,%eax
   10c02:	83 ec 08             	sub    $0x8,%esp
   10c05:	68 00 04 00 00       	push   $0x400
   10c0a:	50                   	push   %eax
   10c0b:	e8 54 fa ff ff       	call   10664 <lidt>
   10c10:	83 c4 10             	add    $0x10,%esp

    init_pic();
   10c13:	e8 c2 fd ff ff       	call   109da <init_pic>
}
   10c18:	90                   	nop
   10c19:	c9                   	leave
   10c1a:	c3                   	ret

00010c1b <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   10c1b:	55                   	push   %ebp
   10c1c:	89 e5                	mov    %esp,%ebp
   10c1e:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   10c21:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10c25:	7e 07                	jle    10c2e <irq_install+0x13>
    {
        return -1;
   10c27:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c2c:	eb 20                	jmp    10c4e <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c31:	8b 55 08             	mov    0x8(%ebp),%edx
   10c34:	c1 e2 03             	shl    $0x3,%edx
   10c37:	81 c2 60 21 01 00    	add    $0x12160,%edx
   10c3d:	68 00 8e 00 00       	push   $0x8e00
   10c42:	50                   	push   %eax
   10c43:	6a 08                	push   $0x8
   10c45:	52                   	push   %edx
   10c46:	e8 25 f9 ff ff       	call   10570 <gate_desc_set>
   10c4b:	83 c4 10             	add    $0x10,%esp
}
   10c4e:	c9                   	leave
   10c4f:	c3                   	ret

00010c50 <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   10c50:	55                   	push   %ebp
   10c51:	89 e5                	mov    %esp,%ebp
   10c53:	53                   	push   %ebx
   10c54:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10c57:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c5b:	7e 78                	jle    10cd5 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10c5d:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10c61:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10c65:	7f 32                	jg     10c99 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10c67:	6a 21                	push   $0x21
   10c69:	e8 ac f9 ff ff       	call   1061a <inb>
   10c6e:	83 c4 04             	add    $0x4,%esp
   10c71:	89 c3                	mov    %eax,%ebx
   10c73:	8b 45 08             	mov    0x8(%ebp),%eax
   10c76:	ba 01 00 00 00       	mov    $0x1,%edx
   10c7b:	89 c1                	mov    %eax,%ecx
   10c7d:	d3 e2                	shl    %cl,%edx
   10c7f:	89 d0                	mov    %edx,%eax
   10c81:	f7 d0                	not    %eax
   10c83:	21 d8                	and    %ebx,%eax
   10c85:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10c88:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10c8c:	50                   	push   %eax
   10c8d:	6a 21                	push   $0x21
   10c8f:	e8 a3 f9 ff ff       	call   10637 <outb>
   10c94:	83 c4 08             	add    $0x8,%esp
   10c97:	eb 3d                	jmp    10cd6 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   10c99:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10c9d:	68 a1 00 00 00       	push   $0xa1
   10ca2:	e8 73 f9 ff ff       	call   1061a <inb>
   10ca7:	83 c4 04             	add    $0x4,%esp
   10caa:	89 c3                	mov    %eax,%ebx
   10cac:	8b 45 08             	mov    0x8(%ebp),%eax
   10caf:	ba 01 00 00 00       	mov    $0x1,%edx
   10cb4:	89 c1                	mov    %eax,%ecx
   10cb6:	d3 e2                	shl    %cl,%edx
   10cb8:	89 d0                	mov    %edx,%eax
   10cba:	f7 d0                	not    %eax
   10cbc:	21 d8                	and    %ebx,%eax
   10cbe:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10cc1:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10cc5:	50                   	push   %eax
   10cc6:	68 a1 00 00 00       	push   $0xa1
   10ccb:	e8 67 f9 ff ff       	call   10637 <outb>
   10cd0:	83 c4 08             	add    $0x8,%esp
   10cd3:	eb 01                	jmp    10cd6 <irq_enable+0x86>
        return;
   10cd5:	90                   	nop
    }
}
   10cd6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10cd9:	c9                   	leave
   10cda:	c3                   	ret

00010cdb <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   10cdb:	55                   	push   %ebp
   10cdc:	89 e5                	mov    %esp,%ebp
   10cde:	53                   	push   %ebx
   10cdf:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10ce2:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ce6:	7e 74                	jle    10d5c <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10ce8:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10cec:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10cf0:	7f 30                	jg     10d22 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10cf2:	6a 21                	push   $0x21
   10cf4:	e8 21 f9 ff ff       	call   1061a <inb>
   10cf9:	83 c4 04             	add    $0x4,%esp
   10cfc:	89 c3                	mov    %eax,%ebx
   10cfe:	8b 45 08             	mov    0x8(%ebp),%eax
   10d01:	ba 01 00 00 00       	mov    $0x1,%edx
   10d06:	89 c1                	mov    %eax,%ecx
   10d08:	d3 e2                	shl    %cl,%edx
   10d0a:	89 d0                	mov    %edx,%eax
   10d0c:	09 d8                	or     %ebx,%eax
   10d0e:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10d11:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10d15:	50                   	push   %eax
   10d16:	6a 21                	push   $0x21
   10d18:	e8 1a f9 ff ff       	call   10637 <outb>
   10d1d:	83 c4 08             	add    $0x8,%esp
   10d20:	eb 3b                	jmp    10d5d <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   10d22:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10d26:	68 a1 00 00 00       	push   $0xa1
   10d2b:	e8 ea f8 ff ff       	call   1061a <inb>
   10d30:	83 c4 04             	add    $0x4,%esp
   10d33:	89 c3                	mov    %eax,%ebx
   10d35:	8b 45 08             	mov    0x8(%ebp),%eax
   10d38:	ba 01 00 00 00       	mov    $0x1,%edx
   10d3d:	89 c1                	mov    %eax,%ecx
   10d3f:	d3 e2                	shl    %cl,%edx
   10d41:	89 d0                	mov    %edx,%eax
   10d43:	09 d8                	or     %ebx,%eax
   10d45:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10d48:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d4c:	50                   	push   %eax
   10d4d:	68 a1 00 00 00       	push   $0xa1
   10d52:	e8 e0 f8 ff ff       	call   10637 <outb>
   10d57:	83 c4 08             	add    $0x8,%esp
   10d5a:	eb 01                	jmp    10d5d <irq_disable+0x82>
        return;
   10d5c:	90                   	nop
    }
}
   10d5d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d60:	c9                   	leave
   10d61:	c3                   	ret

00010d62 <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   10d62:	55                   	push   %ebp
   10d63:	89 e5                	mov    %esp,%ebp
    cli();
   10d65:	e8 ec f8 ff ff       	call   10656 <cli>
}
   10d6a:	90                   	nop
   10d6b:	5d                   	pop    %ebp
   10d6c:	c3                   	ret

00010d6d <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   10d6d:	55                   	push   %ebp
   10d6e:	89 e5                	mov    %esp,%ebp
    sti();
   10d70:	e8 e8 f8 ff ff       	call   1065d <sti>
}
   10d75:	90                   	nop
   10d76:	5d                   	pop    %ebp
   10d77:	c3                   	ret

00010d78 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   10d78:	55                   	push   %ebp
   10d79:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10d7b:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   10d7f:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d83:	7e 0f                	jle    10d94 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10d85:	6a 20                	push   $0x20
   10d87:	68 a0 00 00 00       	push   $0xa0
   10d8c:	e8 a6 f8 ff ff       	call   10637 <outb>
   10d91:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10d94:	6a 20                	push   $0x20
   10d96:	6a 20                	push   $0x20
   10d98:	e8 9a f8 ff ff       	call   10637 <outb>
   10d9d:	83 c4 08             	add    $0x8,%esp
   10da0:	90                   	nop
   10da1:	c9                   	leave
   10da2:	c3                   	ret

00010da3 <outb>:
{
    sys_tick = 0;
    init_pit();
   10da3:	55                   	push   %ebp
   10da4:	89 e5                	mov    %esp,%ebp
   10da6:	83 ec 08             	sub    $0x8,%esp
   10da9:	8b 55 08             	mov    0x8(%ebp),%edx
   10dac:	8b 45 0c             	mov    0xc(%ebp),%eax
   10daf:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10db3:	88 45 f8             	mov    %al,-0x8(%ebp)
   10db6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10dba:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10dbe:	ee                   	out    %al,(%dx)
   10dbf:	90                   	nop
   10dc0:	c9                   	leave
   10dc1:	c3                   	ret

00010dc2 <do_handler_time>:
{
   10dc2:	55                   	push   %ebp
   10dc3:	89 e5                	mov    %esp,%ebp
   10dc5:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   10dc8:	a1 60 25 01 00       	mov    0x12560,%eax
   10dcd:	83 c0 01             	add    $0x1,%eax
   10dd0:	a3 60 25 01 00       	mov    %eax,0x12560
    pic_send_eoi(IRQ0_TIMER);
   10dd5:	83 ec 0c             	sub    $0xc,%esp
   10dd8:	6a 20                	push   $0x20
   10dda:	e8 99 ff ff ff       	call   10d78 <pic_send_eoi>
   10ddf:	83 c4 10             	add    $0x10,%esp
}
   10de2:	90                   	nop
   10de3:	c9                   	leave
   10de4:	c3                   	ret

00010de5 <init_pit>:
{
   10de5:	55                   	push   %ebp
   10de6:	89 e5                	mov    %esp,%ebp
   10de8:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   10deb:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   10df2:	6a 36                	push   $0x36
   10df4:	6a 43                	push   $0x43
   10df6:	e8 a8 ff ff ff       	call   10da3 <outb>
   10dfb:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   10dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e01:	0f b6 c0             	movzbl %al,%eax
   10e04:	50                   	push   %eax
   10e05:	6a 40                	push   $0x40
   10e07:	e8 97 ff ff ff       	call   10da3 <outb>
   10e0c:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   10e0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e12:	c1 e8 08             	shr    $0x8,%eax
   10e15:	0f b6 c0             	movzbl %al,%eax
   10e18:	50                   	push   %eax
   10e19:	6a 40                	push   $0x40
   10e1b:	e8 83 ff ff ff       	call   10da3 <outb>
   10e20:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   10e23:	83 ec 08             	sub    $0x8,%esp
   10e26:	68 89 02 01 00       	push   $0x10289
   10e2b:	6a 20                	push   $0x20
   10e2d:	e8 e9 fd ff ff       	call   10c1b <irq_install>
   10e32:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   10e35:	83 ec 0c             	sub    $0xc,%esp
   10e38:	6a 20                	push   $0x20
   10e3a:	e8 11 fe ff ff       	call   10c50 <irq_enable>
   10e3f:	83 c4 10             	add    $0x10,%esp
}
   10e42:	90                   	nop
   10e43:	c9                   	leave
   10e44:	c3                   	ret

00010e45 <init_time>:
{
   10e45:	55                   	push   %ebp
   10e46:	89 e5                	mov    %esp,%ebp
   10e48:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10e4b:	c7 05 60 25 01 00 00 	movl   $0x0,0x12560
   10e52:	00 00 00 
    init_pit();
   10e55:	e8 8b ff ff ff       	call   10de5 <init_pit>
   10e5a:	90                   	nop
   10e5b:	c9                   	leave
   10e5c:	c3                   	ret

00010e5d <write_tr>:
   10e5d:	55                   	push   %ebp
   10e5e:	89 e5                	mov    %esp,%ebp
   10e60:	83 ec 04             	sub    $0x4,%esp
   10e63:	8b 45 08             	mov    0x8(%ebp),%eax
   10e66:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10e6a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10e6e:	0f 00 d8             	ltr    %ax
   10e71:	90                   	nop
   10e72:	c9                   	leave
   10e73:	c3                   	ret

00010e74 <kernel_init>:
{
   10e74:	55                   	push   %ebp
   10e75:	89 e5                	mov    %esp,%ebp
   10e77:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10e7a:	e8 90 f7 ff ff       	call   1060f <cpu_init>
    init_log(); // 初始化打印函数
   10e7f:	e8 24 06 00 00       	call   114a8 <init_log>
    irq_init();
   10e84:	e8 e4 fb ff ff       	call   10a6d <irq_init>
    init_time();
   10e89:	e8 b7 ff ff ff       	call   10e45 <init_time>
}
   10e8e:	90                   	nop
   10e8f:	c9                   	leave
   10e90:	c3                   	ret

00010e91 <init_task_entry>:
{
   10e91:	55                   	push   %ebp
   10e92:	89 e5                	mov    %esp,%ebp
   10e94:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10e97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        log_prinf("init_task_entry: %d", count++);
   10e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ea1:	8d 50 01             	lea    0x1(%eax),%edx
   10ea4:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10ea7:	83 ec 08             	sub    $0x8,%esp
   10eaa:	50                   	push   %eax
   10eab:	68 a9 18 01 00       	push   $0x118a9
   10eb0:	e8 65 06 00 00       	call   1151a <log_prinf>
   10eb5:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task, &first_task);
   10eb8:	83 ec 08             	sub    $0x8,%esp
   10ebb:	68 80 25 01 00       	push   $0x12580
   10ec0:	68 00 36 01 00       	push   $0x13600
   10ec5:	e8 56 f5 ff ff       	call   10420 <task_switch_from_to>
   10eca:	83 c4 10             	add    $0x10,%esp
        log_prinf("init_task_entry: %d", count++);
   10ecd:	eb cf                	jmp    10e9e <init_task_entry+0xd>

00010ecf <init_main>:
{
   10ecf:	55                   	push   %ebp
   10ed0:	89 e5                	mov    %esp,%ebp
   10ed2:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   10ed5:	83 ec 0c             	sub    $0xc,%esp
   10ed8:	68 bd 18 01 00       	push   $0x118bd
   10edd:	e8 38 06 00 00       	call   1151a <log_prinf>
   10ee2:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   10ee5:	83 ec 08             	sub    $0x8,%esp
   10ee8:	68 cb 18 01 00       	push   $0x118cb
   10eed:	68 d1 18 01 00       	push   $0x118d1
   10ef2:	e8 23 06 00 00       	call   1151a <log_prinf>
   10ef7:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   10efa:	83 ec 0c             	sub    $0xc,%esp
   10efd:	6a 63                	push   $0x63
   10eff:	6a 30                	push   $0x30
   10f01:	6a 14                	push   $0x14
   10f03:	6a f6                	push   $0xfffffff6
   10f05:	68 dc 18 01 00       	push   $0x118dc
   10f0a:	e8 0b 06 00 00       	call   1151a <log_prinf>
   10f0f:	83 c4 20             	add    $0x20,%esp
    task_init(&init_task, (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   10f12:	ba 00 36 01 00       	mov    $0x13600,%edx
   10f17:	b8 91 0e 01 00       	mov    $0x10e91,%eax
   10f1c:	83 ec 04             	sub    $0x4,%esp
   10f1f:	52                   	push   %edx
   10f20:	50                   	push   %eax
   10f21:	68 00 36 01 00       	push   $0x13600
   10f26:	e8 75 f4 ff ff       	call   103a0 <task_init>
   10f2b:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, 0, 0); //??为什么入口设置为0，堆栈也设置为0
   10f2e:	83 ec 04             	sub    $0x4,%esp
   10f31:	6a 00                	push   $0x0
   10f33:	6a 00                	push   $0x0
   10f35:	68 80 25 01 00       	push   $0x12580
   10f3a:	e8 61 f4 ff ff       	call   103a0 <task_init>
   10f3f:	83 c4 10             	add    $0x10,%esp
    write_tr(first_task.tss_sel);
   10f42:	a1 ec 25 01 00       	mov    0x125ec,%eax
   10f47:	0f b7 c0             	movzwl %ax,%eax
   10f4a:	83 ec 0c             	sub    $0xc,%esp
   10f4d:	50                   	push   %eax
   10f4e:	e8 0a ff ff ff       	call   10e5d <write_tr>
   10f53:	83 c4 10             	add    $0x10,%esp
    int count = 0;
   10f56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        log_prinf("init_main: %d", count++);
   10f5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f60:	8d 50 01             	lea    0x1(%eax),%edx
   10f63:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f66:	83 ec 08             	sub    $0x8,%esp
   10f69:	50                   	push   %eax
   10f6a:	68 e8 18 01 00       	push   $0x118e8
   10f6f:	e8 a6 05 00 00       	call   1151a <log_prinf>
   10f74:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&first_task, &init_task);
   10f77:	83 ec 08             	sub    $0x8,%esp
   10f7a:	68 00 36 01 00       	push   $0x13600
   10f7f:	68 80 25 01 00       	push   $0x12580
   10f84:	e8 97 f4 ff ff       	call   10420 <task_switch_from_to>
   10f89:	83 c4 10             	add    $0x10,%esp
        log_prinf("init_main: %d", count++);
   10f8c:	eb cf                	jmp    10f5d <init_main+0x8e>

00010f8e <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   10f8e:	55                   	push   %ebp
   10f8f:	89 e5                	mov    %esp,%ebp
}
   10f91:	f4                   	hlt

   10f92:	90                   	nop
   10f93:	5d                   	pop    %ebp
   10f94:	c3                   	ret

00010f95 <kernel_strcpy>:
{
   10f95:	55                   	push   %ebp
   10f96:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   10f98:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f9c:	74 3b                	je     10fd9 <kernel_strcpy+0x44>
   10f9e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fa2:	74 35                	je     10fd9 <kernel_strcpy+0x44>
    while (*dest && *src)
   10fa4:	eb 17                	jmp    10fbd <kernel_strcpy+0x28>
        *dest++ = *src++;
   10fa6:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fa9:	8d 42 01             	lea    0x1(%edx),%eax
   10fac:	89 45 0c             	mov    %eax,0xc(%ebp)
   10faf:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb2:	8d 48 01             	lea    0x1(%eax),%ecx
   10fb5:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10fb8:	0f b6 12             	movzbl (%edx),%edx
   10fbb:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   10fbd:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc0:	0f b6 00             	movzbl (%eax),%eax
   10fc3:	84 c0                	test   %al,%al
   10fc5:	74 0a                	je     10fd1 <kernel_strcpy+0x3c>
   10fc7:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fca:	0f b6 00             	movzbl (%eax),%eax
   10fcd:	84 c0                	test   %al,%al
   10fcf:	75 d5                	jne    10fa6 <kernel_strcpy+0x11>
    *dest = '\0';
   10fd1:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd4:	c6 00 00             	movb   $0x0,(%eax)
   10fd7:	eb 01                	jmp    10fda <kernel_strcpy+0x45>
        return;
   10fd9:	90                   	nop
}
   10fda:	5d                   	pop    %ebp
   10fdb:	c3                   	ret

00010fdc <kernel_strncpy>:
{
   10fdc:	55                   	push   %ebp
   10fdd:	89 e5                	mov    %esp,%ebp
   10fdf:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   10fe2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fe6:	74 61                	je     11049 <kernel_strncpy+0x6d>
   10fe8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fec:	74 5b                	je     11049 <kernel_strncpy+0x6d>
   10fee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10ff2:	74 55                	je     11049 <kernel_strncpy+0x6d>
    char *d = dest;
   10ff4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   10ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ffd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   11000:	eb 17                	jmp    11019 <kernel_strncpy+0x3d>
        *d++ = *s++;
   11002:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11005:	8d 42 01             	lea    0x1(%edx),%eax
   11008:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1100b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1100e:	8d 48 01             	lea    0x1(%eax),%ecx
   11011:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11014:	0f b6 12             	movzbl (%edx),%edx
   11017:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   11019:	8b 45 10             	mov    0x10(%ebp),%eax
   1101c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1101f:	89 55 10             	mov    %edx,0x10(%ebp)
   11022:	85 c0                	test   %eax,%eax
   11024:	7e 0a                	jle    11030 <kernel_strncpy+0x54>
   11026:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11029:	0f b6 00             	movzbl (%eax),%eax
   1102c:	84 c0                	test   %al,%al
   1102e:	75 d2                	jne    11002 <kernel_strncpy+0x26>
    if (size == 0)
   11030:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11034:	75 0b                	jne    11041 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11036:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11039:	83 e8 01             	sub    $0x1,%eax
   1103c:	c6 00 00             	movb   $0x0,(%eax)
   1103f:	eb 09                	jmp    1104a <kernel_strncpy+0x6e>
        *d = '\0';
   11041:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11044:	c6 00 00             	movb   $0x0,(%eax)
   11047:	eb 01                	jmp    1104a <kernel_strncpy+0x6e>
        return;
   11049:	90                   	nop
}
   1104a:	c9                   	leave
   1104b:	c3                   	ret

0001104c <kernel_strncmp>:
{
   1104c:	55                   	push   %ebp
   1104d:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   1104f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11053:	74 0c                	je     11061 <kernel_strncmp+0x15>
   11055:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11059:	74 06                	je     11061 <kernel_strncmp+0x15>
   1105b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1105f:	75 0f                	jne    11070 <kernel_strncmp+0x24>
        return -1;
   11061:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11066:	eb 62                	jmp    110ca <kernel_strncmp+0x7e>
        s1++;
   11068:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   1106c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   11070:	8b 45 08             	mov    0x8(%ebp),%eax
   11073:	0f b6 00             	movzbl (%eax),%eax
   11076:	84 c0                	test   %al,%al
   11078:	74 20                	je     1109a <kernel_strncmp+0x4e>
   1107a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1107d:	0f b6 00             	movzbl (%eax),%eax
   11080:	84 c0                	test   %al,%al
   11082:	74 16                	je     1109a <kernel_strncmp+0x4e>
   11084:	8b 45 08             	mov    0x8(%ebp),%eax
   11087:	0f b6 10             	movzbl (%eax),%edx
   1108a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1108d:	0f b6 00             	movzbl (%eax),%eax
   11090:	38 c2                	cmp    %al,%dl
   11092:	75 06                	jne    1109a <kernel_strncmp+0x4e>
   11094:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11098:	75 ce                	jne    11068 <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1109a:	8b 45 08             	mov    0x8(%ebp),%eax
   1109d:	0f b6 00             	movzbl (%eax),%eax
   110a0:	84 c0                	test   %al,%al
   110a2:	74 21                	je     110c5 <kernel_strncmp+0x79>
   110a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a7:	0f b6 00             	movzbl (%eax),%eax
   110aa:	84 c0                	test   %al,%al
   110ac:	74 17                	je     110c5 <kernel_strncmp+0x79>
   110ae:	8b 45 08             	mov    0x8(%ebp),%eax
   110b1:	0f b6 10             	movzbl (%eax),%edx
   110b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   110b7:	0f b6 00             	movzbl (%eax),%eax
   110ba:	38 c2                	cmp    %al,%dl
   110bc:	74 07                	je     110c5 <kernel_strncmp+0x79>
   110be:	b8 01 00 00 00       	mov    $0x1,%eax
   110c3:	eb 05                	jmp    110ca <kernel_strncmp+0x7e>
   110c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110ca:	5d                   	pop    %ebp
   110cb:	c3                   	ret

000110cc <kernel_strlen>:
{
   110cc:	55                   	push   %ebp
   110cd:	89 e5                	mov    %esp,%ebp
   110cf:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   110d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110d6:	75 07                	jne    110df <kernel_strlen+0x13>
        return 0;
   110d8:	b8 00 00 00 00       	mov    $0x0,%eax
   110dd:	eb 26                	jmp    11105 <kernel_strlen+0x39>
    const char *c = str;
   110df:	8b 45 08             	mov    0x8(%ebp),%eax
   110e2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   110e5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   110ec:	eb 04                	jmp    110f2 <kernel_strlen+0x26>
        len++;
   110ee:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   110f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110f5:	8d 50 01             	lea    0x1(%eax),%edx
   110f8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110fb:	0f b6 00             	movzbl (%eax),%eax
   110fe:	84 c0                	test   %al,%al
   11100:	75 ec                	jne    110ee <kernel_strlen+0x22>
    return len;
   11102:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11105:	c9                   	leave
   11106:	c3                   	ret

00011107 <kernel_memcpy>:
{
   11107:	55                   	push   %ebp
   11108:	89 e5                	mov    %esp,%ebp
   1110a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   1110d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11111:	74 40                	je     11153 <kernel_memcpy+0x4c>
   11113:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11117:	74 3a                	je     11153 <kernel_memcpy+0x4c>
   11119:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1111d:	74 34                	je     11153 <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   1111f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11122:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   11125:	8b 45 08             	mov    0x8(%ebp),%eax
   11128:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   1112b:	eb 17                	jmp    11144 <kernel_memcpy+0x3d>
        *d++ = *s++;
   1112d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11130:	8d 42 01             	lea    0x1(%edx),%eax
   11133:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11136:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11139:	8d 48 01             	lea    0x1(%eax),%ecx
   1113c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1113f:	0f b6 12             	movzbl (%edx),%edx
   11142:	88 10                	mov    %dl,(%eax)
    while (size--)
   11144:	8b 45 10             	mov    0x10(%ebp),%eax
   11147:	8d 50 ff             	lea    -0x1(%eax),%edx
   1114a:	89 55 10             	mov    %edx,0x10(%ebp)
   1114d:	85 c0                	test   %eax,%eax
   1114f:	75 dc                	jne    1112d <kernel_memcpy+0x26>
   11151:	eb 01                	jmp    11154 <kernel_memcpy+0x4d>
        return;
   11153:	90                   	nop
}
   11154:	c9                   	leave
   11155:	c3                   	ret

00011156 <kernel_memset>:
{
   11156:	55                   	push   %ebp
   11157:	89 e5                	mov    %esp,%ebp
   11159:	83 ec 14             	sub    $0x14,%esp
   1115c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1115f:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   11162:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11166:	74 2c                	je     11194 <kernel_memset+0x3e>
   11168:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1116c:	74 26                	je     11194 <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   1116e:	8b 45 08             	mov    0x8(%ebp),%eax
   11171:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   11174:	eb 0f                	jmp    11185 <kernel_memset+0x2f>
        *d++ = v;
   11176:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11179:	8d 50 01             	lea    0x1(%eax),%edx
   1117c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1117f:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11183:	88 10                	mov    %dl,(%eax)
    while (size--)
   11185:	8b 45 10             	mov    0x10(%ebp),%eax
   11188:	8d 50 ff             	lea    -0x1(%eax),%edx
   1118b:	89 55 10             	mov    %edx,0x10(%ebp)
   1118e:	85 c0                	test   %eax,%eax
   11190:	75 e4                	jne    11176 <kernel_memset+0x20>
   11192:	eb 01                	jmp    11195 <kernel_memset+0x3f>
        return;
   11194:	90                   	nop
}
   11195:	c9                   	leave
   11196:	c3                   	ret

00011197 <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   11197:	55                   	push   %ebp
   11198:	89 e5                	mov    %esp,%ebp
   1119a:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   1119d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111a1:	74 06                	je     111a9 <kernel_memcmp+0x12>
   111a3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111a7:	75 07                	jne    111b0 <kernel_memcmp+0x19>
    {
        return 1;
   111a9:	b8 01 00 00 00       	mov    $0x1,%eax
   111ae:	eb 43                	jmp    111f3 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   111b0:	8b 45 08             	mov    0x8(%ebp),%eax
   111b3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   111b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   111b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   111bc:	eb 23                	jmp    111e1 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   111be:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111c1:	8d 50 01             	lea    0x1(%eax),%edx
   111c4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111c7:	0f b6 08             	movzbl (%eax),%ecx
   111ca:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111cd:	8d 50 01             	lea    0x1(%eax),%edx
   111d0:	89 55 f8             	mov    %edx,-0x8(%ebp)
   111d3:	0f b6 00             	movzbl (%eax),%eax
   111d6:	38 c1                	cmp    %al,%cl
   111d8:	74 07                	je     111e1 <kernel_memcmp+0x4a>
        {
            return 1;
   111da:	b8 01 00 00 00       	mov    $0x1,%eax
   111df:	eb 12                	jmp    111f3 <kernel_memcmp+0x5c>
    while (size--)
   111e1:	8b 45 10             	mov    0x10(%ebp),%eax
   111e4:	8d 50 ff             	lea    -0x1(%eax),%edx
   111e7:	89 55 10             	mov    %edx,0x10(%ebp)
   111ea:	85 c0                	test   %eax,%eax
   111ec:	75 d0                	jne    111be <kernel_memcmp+0x27>
        }
    }
    return 0;
   111ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111f3:	c9                   	leave
   111f4:	c3                   	ret

000111f5 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   111f5:	55                   	push   %ebp
   111f6:	89 e5                	mov    %esp,%ebp
   111f8:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   111fb:	8d 45 10             	lea    0x10(%ebp),%eax
   111fe:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   11201:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11204:	83 ec 04             	sub    $0x4,%esp
   11207:	50                   	push   %eax
   11208:	ff 75 0c             	push   0xc(%ebp)
   1120b:	ff 75 08             	push   0x8(%ebp)
   1120e:	e8 dd 00 00 00       	call   112f0 <kernel_vsprintf>
   11213:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11216:	90                   	nop
   11217:	c9                   	leave
   11218:	c3                   	ret

00011219 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   11219:	55                   	push   %ebp
   1121a:	89 e5                	mov    %esp,%ebp
   1121c:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   1121f:	8b 45 08             	mov    0x8(%ebp),%eax
   11222:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   11225:	8b 45 0c             	mov    0xc(%ebp),%eax
   11228:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   1122b:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1122f:	74 1d                	je     1124e <kernel_itoa+0x35>
   11231:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11235:	74 17                	je     1124e <kernel_itoa+0x35>
   11237:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1123b:	74 11                	je     1124e <kernel_itoa+0x35>
   1123d:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11241:	74 0b                	je     1124e <kernel_itoa+0x35>
    {
        *p = '\0';
   11243:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11246:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11249:	e9 a0 00 00 00       	jmp    112ee <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   1124e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11252:	79 12                	jns    11266 <kernel_itoa+0x4d>
   11254:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11258:	75 0c                	jne    11266 <kernel_itoa+0x4d>
    {
        *p++ = '-';
   1125a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1125d:	8d 50 01             	lea    0x1(%eax),%edx
   11260:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11263:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   11266:	8b 0d 44 19 01 00    	mov    0x11944,%ecx
   1126c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1126f:	99                   	cltd
   11270:	f7 7d 10             	idivl  0x10(%ebp)
   11273:	89 d0                	mov    %edx,%eax
   11275:	83 c0 0f             	add    $0xf,%eax
   11278:	01 c8                	add    %ecx,%eax
   1127a:	0f b6 00             	movzbl (%eax),%eax
   1127d:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11280:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11283:	8d 50 01             	lea    0x1(%eax),%edx
   11286:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11289:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1128d:	88 10                	mov    %dl,(%eax)
        num /= base;
   1128f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11292:	99                   	cltd
   11293:	f7 7d 10             	idivl  0x10(%ebp)
   11296:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   11299:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1129d:	75 c7                	jne    11266 <kernel_itoa+0x4d>
    *p-- = '\0';
   1129f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112a2:	8d 50 ff             	lea    -0x1(%eax),%edx
   112a5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   112a8:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   112ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   112af:	7f 08                	jg     112b9 <kernel_itoa+0xa0>
   112b1:	8b 45 08             	mov    0x8(%ebp),%eax
   112b4:	83 c0 01             	add    $0x1,%eax
   112b7:	eb 03                	jmp    112bc <kernel_itoa+0xa3>
   112b9:	8b 45 08             	mov    0x8(%ebp),%eax
   112bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   112bf:	eb 25                	jmp    112e6 <kernel_itoa+0xcd>
    {
        char ch = *start;
   112c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112c4:	0f b6 00             	movzbl (%eax),%eax
   112c7:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   112ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112cd:	0f b6 10             	movzbl (%eax),%edx
   112d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112d3:	88 10                	mov    %dl,(%eax)
        *p = ch;
   112d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112d8:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   112dc:	88 10                	mov    %dl,(%eax)

        p--;
   112de:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   112e2:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   112e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112e9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   112ec:	72 d3                	jb     112c1 <kernel_itoa+0xa8>
    }
}
   112ee:	c9                   	leave
   112ef:	c3                   	ret

000112f0 <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   112f0:	55                   	push   %ebp
   112f1:	89 e5                	mov    %esp,%ebp
   112f3:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   112f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   112fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11300:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   11303:	e9 11 01 00 00       	jmp    11419 <kernel_vsprintf+0x129>
    {
        switch (state)
   11308:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1130c:	74 0b                	je     11319 <kernel_vsprintf+0x29>
   1130e:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   11312:	74 2b                	je     1133f <kernel_vsprintf+0x4f>
   11314:	e9 00 01 00 00       	jmp    11419 <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   11319:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1131d:	75 0c                	jne    1132b <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   1131f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11326:	e9 ee 00 00 00       	jmp    11419 <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   1132b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1132e:	8d 50 01             	lea    0x1(%eax),%edx
   11331:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11334:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11338:	88 10                	mov    %dl,(%eax)
            }
            break;
   1133a:	e9 da 00 00 00       	jmp    11419 <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   1133f:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11343:	75 31                	jne    11376 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11345:	8b 45 10             	mov    0x10(%ebp),%eax
   11348:	8d 50 04             	lea    0x4(%eax),%edx
   1134b:	89 55 10             	mov    %edx,0x10(%ebp)
   1134e:	8b 00                	mov    (%eax),%eax
   11350:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   11353:	6a 0a                	push   $0xa
   11355:	ff 75 e4             	push   -0x1c(%ebp)
   11358:	ff 75 f8             	push   -0x8(%ebp)
   1135b:	e8 b9 fe ff ff       	call   11219 <kernel_itoa>
   11360:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11363:	ff 75 f8             	push   -0x8(%ebp)
   11366:	e8 61 fd ff ff       	call   110cc <kernel_strlen>
   1136b:	83 c4 04             	add    $0x4,%esp
   1136e:	01 45 f8             	add    %eax,-0x8(%ebp)
   11371:	e9 9b 00 00 00       	jmp    11411 <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   11376:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1137a:	75 2e                	jne    113aa <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   1137c:	8b 45 10             	mov    0x10(%ebp),%eax
   1137f:	8d 50 04             	lea    0x4(%eax),%edx
   11382:	89 55 10             	mov    %edx,0x10(%ebp)
   11385:	8b 00                	mov    (%eax),%eax
   11387:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   1138a:	6a 10                	push   $0x10
   1138c:	ff 75 e8             	push   -0x18(%ebp)
   1138f:	ff 75 f8             	push   -0x8(%ebp)
   11392:	e8 82 fe ff ff       	call   11219 <kernel_itoa>
   11397:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   1139a:	ff 75 f8             	push   -0x8(%ebp)
   1139d:	e8 2a fd ff ff       	call   110cc <kernel_strlen>
   113a2:	83 c4 04             	add    $0x4,%esp
   113a5:	01 45 f8             	add    %eax,-0x8(%ebp)
   113a8:	eb 67                	jmp    11411 <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   113aa:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   113ae:	75 19                	jne    113c9 <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   113b0:	8b 45 10             	mov    0x10(%ebp),%eax
   113b3:	8d 50 04             	lea    0x4(%eax),%edx
   113b6:	89 55 10             	mov    %edx,0x10(%ebp)
   113b9:	8b 00                	mov    (%eax),%eax
   113bb:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   113be:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113c1:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   113c5:	88 10                	mov    %dl,(%eax)
   113c7:	eb 48                	jmp    11411 <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   113c9:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   113cd:	75 42                	jne    11411 <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   113cf:	8b 45 10             	mov    0x10(%ebp),%eax
   113d2:	8d 50 04             	lea    0x4(%eax),%edx
   113d5:	89 55 10             	mov    %edx,0x10(%ebp)
   113d8:	8b 00                	mov    (%eax),%eax
   113da:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   113dd:	ff 75 f4             	push   -0xc(%ebp)
   113e0:	e8 e7 fc ff ff       	call   110cc <kernel_strlen>
   113e5:	83 c4 04             	add    $0x4,%esp
   113e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   113eb:	eb 17                	jmp    11404 <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   113ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113f0:	8d 42 01             	lea    0x1(%edx),%eax
   113f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   113f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113f9:	8d 48 01             	lea    0x1(%eax),%ecx
   113fc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113ff:	0f b6 12             	movzbl (%edx),%edx
   11402:	88 10                	mov    %dl,(%eax)
                while (len--)
   11404:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11407:	8d 50 ff             	lea    -0x1(%eax),%edx
   1140a:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1140d:	85 c0                	test   %eax,%eax
   1140f:	75 dc                	jne    113ed <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   11411:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11418:	90                   	nop
    while ((ch = *fmt++))
   11419:	8b 45 0c             	mov    0xc(%ebp),%eax
   1141c:	8d 50 01             	lea    0x1(%eax),%edx
   1141f:	89 55 0c             	mov    %edx,0xc(%ebp)
   11422:	0f b6 00             	movzbl (%eax),%eax
   11425:	88 45 ef             	mov    %al,-0x11(%ebp)
   11428:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1142c:	0f 85 d6 fe ff ff    	jne    11308 <kernel_vsprintf+0x18>
        }
    }
}
   11432:	90                   	nop
   11433:	90                   	nop
   11434:	c9                   	leave
   11435:	c3                   	ret

00011436 <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   11436:	55                   	push   %ebp
   11437:	89 e5                	mov    %esp,%ebp
   11439:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   1143c:	83 ec 08             	sub    $0x8,%esp
   1143f:	ff 75 14             	push   0x14(%ebp)
   11442:	68 f8 18 01 00       	push   $0x118f8
   11447:	e8 ce 00 00 00       	call   1151a <log_prinf>
   1144c:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   1144f:	ff 75 10             	push   0x10(%ebp)
   11452:	ff 75 0c             	push   0xc(%ebp)
   11455:	ff 75 08             	push   0x8(%ebp)
   11458:	68 0a 19 01 00       	push   $0x1190a
   1145d:	e8 b8 00 00 00       	call   1151a <log_prinf>
   11462:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   11465:	e8 24 fb ff ff       	call   10f8e <hlt>
   1146a:	eb f9                	jmp    11465 <pannic+0x2f>

0001146c <inb>:
    outb(COM1_PORT + 3, 0x80);
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
    outb(COM1_PORT + 4, 0x0F);
   1146c:	55                   	push   %ebp
   1146d:	89 e5                	mov    %esp,%ebp
   1146f:	83 ec 14             	sub    $0x14,%esp
   11472:	8b 45 08             	mov    0x8(%ebp),%eax
   11475:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
}

   11479:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1147d:	89 c2                	mov    %eax,%edx
   1147f:	ec                   	in     (%dx),%al
   11480:	88 45 ff             	mov    %al,-0x1(%ebp)
void log_prinf(const char *fmt, ...)
{
    char str_buf[128];
   11483:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    va_list args;
   11487:	c9                   	leave
   11488:	c3                   	ret

00011489 <outb>:

    const char *p = str_buf;
    while (*p != '\0')
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
            ;
   11489:	55                   	push   %ebp
   1148a:	89 e5                	mov    %esp,%ebp
   1148c:	83 ec 08             	sub    $0x8,%esp
   1148f:	8b 55 08             	mov    0x8(%ebp),%edx
   11492:	8b 45 0c             	mov    0xc(%ebp),%eax
   11495:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11499:	88 45 f8             	mov    %al,-0x8(%ebp)
        outb(COM1_PORT, *p++);
   1149c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114a0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   114a4:	ee                   	out    %al,(%dx)
    }
   114a5:	90                   	nop
   114a6:	c9                   	leave
   114a7:	c3                   	ret

000114a8 <init_log>:
{
   114a8:	55                   	push   %ebp
   114a9:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   114ab:	6a 00                	push   $0x0
   114ad:	68 f9 03 00 00       	push   $0x3f9
   114b2:	e8 d2 ff ff ff       	call   11489 <outb>
   114b7:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   114ba:	68 80 00 00 00       	push   $0x80
   114bf:	68 fb 03 00 00       	push   $0x3fb
   114c4:	e8 c0 ff ff ff       	call   11489 <outb>
   114c9:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   114cc:	6a 03                	push   $0x3
   114ce:	68 f8 03 00 00       	push   $0x3f8
   114d3:	e8 b1 ff ff ff       	call   11489 <outb>
   114d8:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   114db:	6a 00                	push   $0x0
   114dd:	68 f9 03 00 00       	push   $0x3f9
   114e2:	e8 a2 ff ff ff       	call   11489 <outb>
   114e7:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   114ea:	6a 03                	push   $0x3
   114ec:	68 fb 03 00 00       	push   $0x3fb
   114f1:	e8 93 ff ff ff       	call   11489 <outb>
   114f6:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x07);
   114f9:	6a 07                	push   $0x7
   114fb:	68 fa 03 00 00       	push   $0x3fa
   11500:	e8 84 ff ff ff       	call   11489 <outb>
   11505:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   11508:	6a 0f                	push   $0xf
   1150a:	68 fc 03 00 00       	push   $0x3fc
   1150f:	e8 75 ff ff ff       	call   11489 <outb>
   11514:	83 c4 08             	add    $0x8,%esp
}
   11517:	90                   	nop
   11518:	c9                   	leave
   11519:	c3                   	ret

0001151a <log_prinf>:
{
   1151a:	55                   	push   %ebp
   1151b:	89 e5                	mov    %esp,%ebp
   1151d:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   11523:	83 ec 04             	sub    $0x4,%esp
   11526:	68 80 00 00 00       	push   $0x80
   1152b:	6a 00                	push   $0x0
   1152d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11533:	50                   	push   %eax
   11534:	e8 1d fc ff ff       	call   11156 <kernel_memset>
   11539:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   1153c:	8d 45 0c             	lea    0xc(%ebp),%eax
   1153f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   11545:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   1154b:	83 ec 04             	sub    $0x4,%esp
   1154e:	50                   	push   %eax
   1154f:	ff 75 08             	push   0x8(%ebp)
   11552:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11558:	50                   	push   %eax
   11559:	e8 92 fd ff ff       	call   112f0 <kernel_vsprintf>
   1155e:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   11561:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11567:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   1156a:	eb 3b                	jmp    115a7 <log_prinf+0x8d>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   1156c:	90                   	nop
   1156d:	83 ec 0c             	sub    $0xc,%esp
   11570:	68 fd 03 00 00       	push   $0x3fd
   11575:	e8 f2 fe ff ff       	call   1146c <inb>
   1157a:	83 c4 10             	add    $0x10,%esp
   1157d:	0f b6 c0             	movzbl %al,%eax
   11580:	83 e0 40             	and    $0x40,%eax
   11583:	85 c0                	test   %eax,%eax
   11585:	74 e6                	je     1156d <log_prinf+0x53>
        outb(COM1_PORT, *p++);
   11587:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1158a:	8d 50 01             	lea    0x1(%eax),%edx
   1158d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11590:	0f b6 00             	movzbl (%eax),%eax
   11593:	0f b6 c0             	movzbl %al,%eax
   11596:	83 ec 08             	sub    $0x8,%esp
   11599:	50                   	push   %eax
   1159a:	68 f8 03 00 00       	push   $0x3f8
   1159f:	e8 e5 fe ff ff       	call   11489 <outb>
   115a4:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   115a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115aa:	0f b6 00             	movzbl (%eax),%eax
   115ad:	84 c0                	test   %al,%al
   115af:	75 bb                	jne    1156c <log_prinf+0x52>

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   115b1:	83 ec 08             	sub    $0x8,%esp
   115b4:	6a 0d                	push   $0xd
   115b6:	68 f8 03 00 00       	push   $0x3f8
   115bb:	e8 c9 fe ff ff       	call   11489 <outb>
   115c0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   115c3:	83 ec 08             	sub    $0x8,%esp
   115c6:	6a 0a                	push   $0xa
   115c8:	68 f8 03 00 00       	push   $0x3f8
   115cd:	e8 b7 fe ff ff       	call   11489 <outb>
   115d2:	83 c4 10             	add    $0x10,%esp
}
   115d5:	90                   	nop
   115d6:	c9                   	leave
   115d7:	c3                   	ret
