
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000200c memsz 0x00006e70 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c84  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000384  00011c84  00011c84  00002c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00012008  00012008  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004e50  00012020  00012020  0000300c  2**5
                  ALLOC
  4 .debug_line   00000e32  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000622  00000000  00000000  00003e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00002514  00000000  00000000  00004460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000d38  00000000  00000000  00006974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000120  00000000  00000000  000076b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000cc7  00000000  00000000  000077d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  00008497  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000d0c  00000000  00000000  000084ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102bd l     F .text	0000001b list_node_init
000102d8 l     F .text	0000000b list_node_next
000102e3 l     F .text	0000000b list_count
000102ee l     F .text	0000000a list_first
000102f8 l     F .text	00000007 hlt
000102ff l     F .text	00000017 write_tr
00012020 l     O .bss	00001000 idle_task_stack
00013020 l     O .bss	00000180 task_manager
00010316 l     F .text	00000104 tss_init
00011d10 l     O .rodata	0000000a __func__.0
00010517 l     F .text	0000000a idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
000108a7 l     F .text	00000028 lgdt
000108cf l     F .text	0000001a far_jump
000131a0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010aa7 l     F .text	0000001d inb
00010ac4 l     F .text	0000001f outb
00010ae3 l     F .text	00000007 cli
00010aea l     F .text	00000007 sti
00010af1 l     F .text	00000028 lidt
00010b19 l     F .text	00000007 hlt
00010b20 l     F .text	00000010 read_eflags
00010b30 l     F .text	0000000b write_eflags
000139a0 l     O .bss	00000400 idt_table
00010b3b l     F .text	000000d9 dump_core_regs
00010c14 l     F .text	0000003e do_default_handler
00010e82 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011274 l     F .text	0000001f outb
00013da0 l     O .bss	00000004 sys_tick
000112bb l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00013dc0 l     O .bss	00001000 init_task_stack
00014dc0 l     O .bss	000000ac init_task
00000000 l    df *ABS*	00000000 klib.c
0001142c l     F .text	00000007 hlt
00012008 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 list.c
0001190a l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011b02 l     F .text	0000001d inb
00011b1f l     F .text	0000001f outb
000115a5 g     F .text	0000004f kernel_memcpy
0001062a g     F .text	0000000a task_current
00011215 g     F .text	0000000b irq_enable_global
000119a1 g     F .text	00000064 list_insert_last
00010d86 g     F .text	0000001c do_handler_segment_not_present
000105cb g     F .text	00000034 task_set_ready
000115f4 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010a9c g     F .text	0000000b cpu_init
0001138e g     F .text	0000009e init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00011433 g     F .text	00000047 kernel_strcpy
000110f8 g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
00010cde g     F .text	0000001c do_handler_overflow
00010e12 g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010dbe g     F .text	0000001c do_handler_general_protection
00010c6e g     F .text	0000001c do_handler_divider
00010d4e g     F .text	0000001c do_handler_double_fault
00011355 g     F .text	00000039 init_task_entry
00010dda g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00011220 g     F .text	0000002b pic_send_eoi
000105c1 g     F .text	0000000a task_first_task
00011b3e g     F .text	00000072 init_log
00010c52 g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00010e66 g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
00014e70 g     O .bss	00002000 stack
00010850 g     F .text	00000057 sys_sleep
000100e5 g       .text	00000000 exception_handler_bound_range
00010d16 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010df6 g     F .text	0000001c do_handler_fpu_error
00010584 g     F .text	0000003d task_first_init
00010e2e g     F .text	0000001c do_handler_machine_check
00010c8a g     F .text	0000001c do_handler_Debug
00011942 g     F .text	0000005f list_insert_first
00010830 g     F .text	00000020 task_set_wakeup
00010ca6 g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
0001147a g     F .text	00000070 kernel_strncpy
0001120a g     F .text	0000000b irq_disable_global
00010634 g     F .text	00000061 sys_sched_yield
00011333 g     F .text	00000022 kernel_init
00010000 g       .text	00000000 _start
0001178e g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
00010d6a g     F .text	0000001c do_handler_invalid_tss
000107f6 g     F .text	0000003a task_set_sleep
000110c3 g     F .text	00000035 irq_install
00011bb0 g     F .text	000000d4 log_prinf
0001096c g     F .text	0000006d init_gdt
0001124b g     F .text	00000018 irq_enter_protection
00011183 g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00010d32 g     F .text	0000001c do_handler_device_unavailable
000106d8 g     F .text	00000045 task_dispatch
00010a89 g     F .text	00000013 switch_to_tss
00010695 g     F .text	00000043 task_next_run
00011635 g     F .text	0000005e kernel_memcmp
0001191d g     F .text	00000025 list_init
0001002b g       .text	00000000 exception_handler_unknow
00010e4a g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
000105ff g     F .text	0000002b task_set_block
000101f0 g       .text	00000000 exception_handler_fpu_error
000104f9 g     F .text	0000001e task_switch_from_to
00010a20 g     F .text	00000069 gdt_alloc_des
00010f15 g     F .text	000001ae irq_init
00011263 g     F .text	00000011 irq_leave_protection
0001156a g     F .text	0000003b kernel_strlen
000108e9 g     F .text	00000083 segment_desc_set
00010cfa g     F .text	0000001c do_handler_bound_range
00011a05 g     F .text	00000078 list_remove_first
000114ea g     F .text	00000080 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
0001131b g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
00010521 g     F .text	00000063 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
0001071d g     F .text	000000d9 task_time_tick
000118d4 g     F .text	00000036 pannic
00010da2 g     F .text	0000001c do_handler_stack_segment_fault
00010cc2 g     F .text	0000001c do_handler_breakpoint
0001041a g     F .text	000000df task_init
00011693 g     F .text	00000024 kernel_sprintf
000116b7 g     F .text	000000d7 kernel_itoa
00011a7d g     F .text	00000085 list_remove
000109d9 g     F .text	00000047 gate_desc_set
00011293 g     F .text	00000028 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 27 13 00 00       	call   11333 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc 70 6e 01 00       	mov    $0x16e70,%esp
    jmp init_main
   10026:	e9 63 13 00 00       	jmp    1138e <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 16 0c 00 00       	call   10c52 <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 13 0c 00 00       	call   10c6e <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 10 0c 00 00       	call   10c8a <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 0d 0c 00 00       	call   10ca6 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 0a 0c 00 00       	call   10cc2 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 07 0c 00 00       	call   10cde <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 04 0c 00 00       	call   10cfa <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 01 0c 00 00       	call   10d16 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 fe 0b 00 00       	call   10d32 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 fd 0b 00 00       	call   10d4e <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 fc 0b 00 00       	call   10d6a <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 fb 0b 00 00       	call   10d86 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 fa 0b 00 00       	call   10da2 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 f9 0b 00 00       	call   10dbe <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 f8 0b 00 00       	call   10dda <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 f5 0b 00 00       	call   10df6 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 f4 0b 00 00       	call   10e12 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 f1 0b 00 00       	call   10e2e <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 ee 0b 00 00       	call   10e4a <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 eb 0b 00 00       	call   10e66 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 f9 0f 00 00       	call   11293 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <simple_switch>:
    //simple_switch(&from,&to)
     .text
     .global simple_switch
simple_switch:
    //取出from
    mov 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    //取出to
    mov 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp

    ret
   102bc:	c3                   	ret

000102bd <list_node_init>:
        // gdt表已经满了无法添加tss描述副到gdt中
        log_prinf("alloc tss failed");
        return -1;
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   102bd:	55                   	push   %ebp
   102be:	89 e5                	mov    %esp,%ebp
                     SEG_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102ca:	8b 45 08             	mov    0x8(%ebp),%eax
   102cd:	8b 50 04             	mov    0x4(%eax),%edx
   102d0:	8b 45 08             	mov    0x8(%ebp),%eax
   102d3:	89 10                	mov    %edx,(%eax)

   102d5:	90                   	nop
   102d6:	5d                   	pop    %ebp
   102d7:	c3                   	ret

000102d8 <list_node_next>:
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp)
{
    ASSERT(task != (task_t *)0);
    tss_init(task, entry, esp);
    // 复制进程名到task.name中
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   102d8:	55                   	push   %ebp
   102d9:	89 e5                	mov    %esp,%ebp
    task->state = TASK_CREATED; // 将开始创建的进程状态设置成task_created
   102db:	8b 45 08             	mov    0x8(%ebp),%eax
   102de:	8b 40 04             	mov    0x4(%eax),%eax
    task->sleep_ticks = 0;      // 初始化任务延迟时间
   102e1:	5d                   	pop    %ebp
   102e2:	c3                   	ret

000102e3 <list_count>:
    for (;;)
    {
        hlt(); // 执行低功耗指令
    }
}

   102e3:	55                   	push   %ebp
   102e4:	89 e5                	mov    %esp,%ebp
void task_manager_init(void)
   102e6:	8b 45 08             	mov    0x8(%ebp),%eax
   102e9:	8b 40 08             	mov    0x8(%eax),%eax
{
   102ec:	5d                   	pop    %ebp
   102ed:	c3                   	ret

000102ee <list_first>:
    list_init(&task_manager.sleep_list);
    task_manager.currt_task = (task_t *)0;

    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)(idle_task_stack + IDLE_TASK_SIZE));
}

   102ee:	55                   	push   %ebp
   102ef:	89 e5                	mov    %esp,%ebp
void task_first_init(void)
   102f1:	8b 45 08             	mov    0x8(%ebp),%eax
   102f4:	8b 00                	mov    (%eax),%eax
{
   102f6:	5d                   	pop    %ebp
   102f7:	c3                   	ret

000102f8 <hlt>:
    uint32_t addr[] = {offset, selector};
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
}

static inline void hlt(void)
{
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   102fb:	f4                   	hlt
}
   102fc:	90                   	nop
   102fd:	5d                   	pop    %ebp
   102fe:	c3                   	ret

000102ff <write_tr>:

static inline void write_tr(uint16_t tss_sel)
{
   102ff:	55                   	push   %ebp
   10300:	89 e5                	mov    %esp,%ebp
   10302:	83 ec 04             	sub    $0x4,%esp
   10305:	8b 45 08             	mov    0x8(%ebp),%eax
   10308:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_sel));
   1030c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10310:	0f 00 d8             	ltr    %ax
}
   10313:	90                   	nop
   10314:	c9                   	leave
   10315:	c3                   	ret

00010316 <tss_init>:
{
   10316:	55                   	push   %ebp
   10317:	89 e5                	mov    %esp,%ebp
   10319:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_des();
   1031c:	e8 ff 06 00 00       	call   10a20 <gdt_alloc_des>
   10321:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   10324:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10328:	79 1a                	jns    10344 <tss_init+0x2e>
        log_prinf("alloc tss failed");
   1032a:	83 ec 0c             	sub    $0xc,%esp
   1032d:	68 84 1c 01 00       	push   $0x11c84
   10332:	e8 79 18 00 00       	call   11bb0 <log_prinf>
   10337:	83 c4 10             	add    $0x10,%esp
        return -1;
   1033a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1033f:	e9 d4 00 00 00       	jmp    10418 <tss_init+0x102>
    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   10344:	8b 45 08             	mov    0x8(%ebp),%eax
   10347:	83 c0 40             	add    $0x40,%eax
   1034a:	68 89 00 00 00       	push   $0x89
   1034f:	68 ac 00 00 00       	push   $0xac
   10354:	50                   	push   %eax
   10355:	ff 75 f4             	push   -0xc(%ebp)
   10358:	e8 8c 05 00 00       	call   108e9 <segment_desc_set>
   1035d:	83 c4 10             	add    $0x10,%esp
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10360:	8b 45 08             	mov    0x8(%ebp),%eax
   10363:	83 c0 40             	add    $0x40,%eax
   10366:	83 ec 04             	sub    $0x4,%esp
   10369:	6a 68                	push   $0x68
   1036b:	6a 00                	push   $0x0
   1036d:	50                   	push   %eax
   1036e:	e8 81 12 00 00       	call   115f4 <kernel_memset>
   10373:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	8b 55 0c             	mov    0xc(%ebp),%edx
   1037c:	89 50 60             	mov    %edx,0x60(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1037f:	8b 45 08             	mov    0x8(%ebp),%eax
   10382:	8b 55 10             	mov    0x10(%ebp),%edx
   10385:	89 50 44             	mov    %edx,0x44(%eax)
   10388:	8b 45 08             	mov    0x8(%ebp),%eax
   1038b:	8b 50 44             	mov    0x44(%eax),%edx
   1038e:	8b 45 08             	mov    0x8(%ebp),%eax
   10391:	89 50 78             	mov    %edx,0x78(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	c7 40 48 10 00 00 00 	movl   $0x10,0x48(%eax)
   1039e:	8b 45 08             	mov    0x8(%ebp),%eax
   103a1:	8b 50 48             	mov    0x48(%eax),%edx
   103a4:	8b 45 08             	mov    0x8(%ebp),%eax
   103a7:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   103ad:	8b 45 08             	mov    0x8(%ebp),%eax
   103b0:	c7 80 9c 00 00 00 10 	movl   $0x10,0x9c(%eax)
   103b7:	00 00 00 
   103ba:	8b 45 08             	mov    0x8(%ebp),%eax
   103bd:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   103c3:	8b 45 08             	mov    0x8(%ebp),%eax
   103c6:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
   103cc:	8b 45 08             	mov    0x8(%ebp),%eax
   103cf:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
   103d5:	8b 45 08             	mov    0x8(%ebp),%eax
   103d8:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
   103de:	8b 45 08             	mov    0x8(%ebp),%eax
   103e1:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
   103e7:	8b 45 08             	mov    0x8(%ebp),%eax
   103ea:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   103f0:	8b 45 08             	mov    0x8(%ebp),%eax
   103f3:	c7 80 8c 00 00 00 08 	movl   $0x8,0x8c(%eax)
   103fa:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFALUT;
   103fd:	8b 45 08             	mov    0x8(%ebp),%eax
   10400:	c7 40 64 02 02 00 00 	movl   $0x202,0x64(%eax)
    task->tss_sel = tss_sel; // 将tss选择子保存到tss_sel中
   10407:	8b 45 08             	mov    0x8(%ebp),%eax
   1040a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1040d:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    return 0;
   10413:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10418:	c9                   	leave
   10419:	c3                   	ret

0001041a <task_init>:
{
   1041a:	55                   	push   %ebp
   1041b:	89 e5                	mov    %esp,%ebp
   1041d:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   10420:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10424:	75 19                	jne    1043f <task_init+0x25>
   10426:	68 95 1c 01 00       	push   $0x11c95
   1042b:	68 10 1d 01 00       	push   $0x11d10
   10430:	6a 29                	push   $0x29
   10432:	68 ac 1c 01 00       	push   $0x11cac
   10437:	e8 98 14 00 00       	call   118d4 <pannic>
   1043c:	83 c4 10             	add    $0x10,%esp
    tss_init(task, entry, esp);
   1043f:	83 ec 04             	sub    $0x4,%esp
   10442:	ff 75 14             	push   0x14(%ebp)
   10445:	ff 75 10             	push   0x10(%ebp)
   10448:	ff 75 08             	push   0x8(%ebp)
   1044b:	e8 c6 fe ff ff       	call   10316 <tss_init>
   10450:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10453:	8b 45 08             	mov    0x8(%ebp),%eax
   10456:	83 c0 10             	add    $0x10,%eax
   10459:	83 ec 04             	sub    $0x4,%esp
   1045c:	6a 20                	push   $0x20
   1045e:	ff 75 0c             	push   0xc(%ebp)
   10461:	50                   	push   %eax
   10462:	e8 13 10 00 00       	call   1147a <kernel_strncpy>
   10467:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED; // 将开始创建的进程状态设置成task_created
   1046a:	8b 45 08             	mov    0x8(%ebp),%eax
   1046d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;      // 初始化任务延迟时间
   10473:	8b 45 08             	mov    0x8(%ebp),%eax
   10476:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   1047d:	8b 45 08             	mov    0x8(%ebp),%eax
   10480:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   10487:	8b 45 08             	mov    0x8(%ebp),%eax
   1048a:	8b 50 08             	mov    0x8(%eax),%edx
   1048d:	8b 45 08             	mov    0x8(%ebp),%eax
   10490:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   10493:	8b 45 08             	mov    0x8(%ebp),%eax
   10496:	83 c0 38             	add    $0x38,%eax
   10499:	83 ec 0c             	sub    $0xc,%esp
   1049c:	50                   	push   %eax
   1049d:	e8 1b fe ff ff       	call   102bd <list_node_init>
   104a2:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   104a5:	8b 45 08             	mov    0x8(%ebp),%eax
   104a8:	83 c0 30             	add    $0x30,%eax
   104ab:	83 ec 0c             	sub    $0xc,%esp
   104ae:	50                   	push   %eax
   104af:	e8 09 fe ff ff       	call   102bd <list_node_init>
   104b4:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   104b7:	e8 8f 0d 00 00       	call   1124b <irq_enter_protection>
   104bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   104bf:	83 ec 0c             	sub    $0xc,%esp
   104c2:	ff 75 08             	push   0x8(%ebp)
   104c5:	e8 01 01 00 00       	call   105cb <task_set_ready>
   104ca:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node);
   104cd:	8b 45 08             	mov    0x8(%ebp),%eax
   104d0:	83 c0 38             	add    $0x38,%eax
   104d3:	83 ec 08             	sub    $0x8,%esp
   104d6:	50                   	push   %eax
   104d7:	68 30 30 01 00       	push   $0x13030
   104dc:	e8 c0 14 00 00       	call   119a1 <list_insert_last>
   104e1:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   104e4:	83 ec 0c             	sub    $0xc,%esp
   104e7:	ff 75 f4             	push   -0xc(%ebp)
   104ea:	e8 74 0d 00 00       	call   11263 <irq_leave_protection>
   104ef:	83 c4 10             	add    $0x10,%esp
    return 0;
   104f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   104f7:	c9                   	leave
   104f8:	c3                   	ret

000104f9 <task_switch_from_to>:
{
   104f9:	55                   	push   %ebp
   104fa:	89 e5                	mov    %esp,%ebp
   104fc:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   104ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   10502:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
   10508:	83 ec 0c             	sub    $0xc,%esp
   1050b:	50                   	push   %eax
   1050c:	e8 78 05 00 00       	call   10a89 <switch_to_tss>
   10511:	83 c4 10             	add    $0x10,%esp
}
   10514:	90                   	nop
   10515:	c9                   	leave
   10516:	c3                   	ret

00010517 <idle_task_entry>:
{
   10517:	55                   	push   %ebp
   10518:	89 e5                	mov    %esp,%ebp
        hlt(); // 执行低功耗指令
   1051a:	e8 d9 fd ff ff       	call   102f8 <hlt>
   1051f:	eb f9                	jmp    1051a <idle_task_entry+0x3>

00010521 <task_manager_init>:
{
   10521:	55                   	push   %ebp
   10522:	89 e5                	mov    %esp,%ebp
   10524:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   10527:	83 ec 0c             	sub    $0xc,%esp
   1052a:	68 24 30 01 00       	push   $0x13024
   1052f:	e8 e9 13 00 00       	call   1191d <list_init>
   10534:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10537:	83 ec 0c             	sub    $0xc,%esp
   1053a:	68 30 30 01 00       	push   $0x13030
   1053f:	e8 d9 13 00 00       	call   1191d <list_init>
   10544:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10547:	83 ec 0c             	sub    $0xc,%esp
   1054a:	68 3c 30 01 00       	push   $0x1303c
   1054f:	e8 c9 13 00 00       	call   1191d <list_init>
   10554:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = (task_t *)0;
   10557:	c7 05 20 30 01 00 00 	movl   $0x0,0x13020
   1055e:	00 00 00 
    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)(idle_task_stack + IDLE_TASK_SIZE));
   10561:	b8 20 30 01 00       	mov    $0x13020,%eax
   10566:	89 c2                	mov    %eax,%edx
   10568:	b8 17 05 01 00       	mov    $0x10517,%eax
   1056d:	52                   	push   %edx
   1056e:	50                   	push   %eax
   1056f:	68 f9 1c 01 00       	push   $0x11cf9
   10574:	68 f4 30 01 00       	push   $0x130f4
   10579:	e8 9c fe ff ff       	call   1041a <task_init>
   1057e:	83 c4 10             	add    $0x10,%esp
}
   10581:	90                   	nop
   10582:	c9                   	leave
   10583:	c3                   	ret

00010584 <task_first_init>:
{
   10584:	55                   	push   %ebp
   10585:	89 e5                	mov    %esp,%ebp
   10587:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 0, 0); //??为什么入口设置为0，堆栈也设置为0
   1058a:	6a 00                	push   $0x0
   1058c:	6a 00                	push   $0x0
   1058e:	68 03 1d 01 00       	push   $0x11d03
   10593:	68 48 30 01 00       	push   $0x13048
   10598:	e8 7d fe ff ff       	call   1041a <task_init>
   1059d:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   105a0:	a1 f0 30 01 00       	mov    0x130f0,%eax
   105a5:	0f b7 c0             	movzwl %ax,%eax
   105a8:	83 ec 0c             	sub    $0xc,%esp
   105ab:	50                   	push   %eax
   105ac:	e8 4e fd ff ff       	call   102ff <write_tr>
   105b1:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = &task_manager.first_task;
   105b4:	c7 05 20 30 01 00 48 	movl   $0x13048,0x13020
   105bb:	30 01 00 
}
   105be:	90                   	nop
   105bf:	c9                   	leave
   105c0:	c3                   	ret

000105c1 <task_first_task>:

task_t *task_first_task(void)
{
   105c1:	55                   	push   %ebp
   105c2:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   105c4:	b8 48 30 01 00       	mov    $0x13048,%eax
}
   105c9:	5d                   	pop    %ebp
   105ca:	c3                   	ret

000105cb <task_set_ready>:

void task_set_ready(task_t *task)
{
   105cb:	55                   	push   %ebp
   105cc:	89 e5                	mov    %esp,%ebp
   105ce:	83 ec 08             	sub    $0x8,%esp
    // 如果是空闲进程就直接返回不插入到就绪队列不然空闲进程也会运行
    if (task == &task_manager.idle_task)
   105d1:	81 7d 08 f4 30 01 00 	cmpl   $0x130f4,0x8(%ebp)
   105d8:	74 22                	je     105fc <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   105da:	8b 45 08             	mov    0x8(%ebp),%eax
   105dd:	83 c0 30             	add    $0x30,%eax
   105e0:	83 ec 08             	sub    $0x8,%esp
   105e3:	50                   	push   %eax
   105e4:	68 24 30 01 00       	push   $0x13024
   105e9:	e8 b3 13 00 00       	call   119a1 <list_insert_last>
   105ee:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   105f1:	8b 45 08             	mov    0x8(%ebp),%eax
   105f4:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   105fa:	eb 01                	jmp    105fd <task_set_ready+0x32>
        return;
   105fc:	90                   	nop
}
   105fd:	c9                   	leave
   105fe:	c3                   	ret

000105ff <task_set_block>:
// 将任务从就绪队列中移除 此时任务的状态不确定 有可能是等待 有可能是睡眠因此不设置状态置
void task_set_block(task_t *task)
{
   105ff:	55                   	push   %ebp
   10600:	89 e5                	mov    %esp,%ebp
   10602:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   10605:	81 7d 08 f4 30 01 00 	cmpl   $0x130f4,0x8(%ebp)
   1060c:	74 19                	je     10627 <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   1060e:	8b 45 08             	mov    0x8(%ebp),%eax
   10611:	83 c0 30             	add    $0x30,%eax
   10614:	83 ec 08             	sub    $0x8,%esp
   10617:	50                   	push   %eax
   10618:	68 24 30 01 00       	push   $0x13024
   1061d:	e8 5b 14 00 00       	call   11a7d <list_remove>
   10622:	83 c4 10             	add    $0x10,%esp
   10625:	eb 01                	jmp    10628 <task_set_block+0x29>
        return;
   10627:	90                   	nop
}
   10628:	c9                   	leave
   10629:	c3                   	ret

0001062a <task_current>:

task_t *task_current(void)
{
   1062a:	55                   	push   %ebp
   1062b:	89 e5                	mov    %esp,%ebp
    return task_manager.currt_task;
   1062d:	a1 20 30 01 00       	mov    0x13020,%eax
}
   10632:	5d                   	pop    %ebp
   10633:	c3                   	ret

00010634 <sys_sched_yield>:

int sys_sched_yield()
{
   10634:	55                   	push   %ebp
   10635:	89 e5                	mov    %esp,%ebp
   10637:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1063a:	e8 0c 0c 00 00       	call   1124b <irq_enter_protection>
   1063f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1)
   10642:	83 ec 0c             	sub    $0xc,%esp
   10645:	68 24 30 01 00       	push   $0x13024
   1064a:	e8 94 fc ff ff       	call   102e3 <list_count>
   1064f:	83 c4 10             	add    $0x10,%esp
   10652:	83 f8 01             	cmp    $0x1,%eax
   10655:	7e 29                	jle    10680 <sys_sched_yield+0x4c>
    {
        // 如果就绪队列中有其他的任务则将头部任务移到尾部
        task_t *current_task = task_current();
   10657:	e8 ce ff ff ff       	call   1062a <task_current>
   1065c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // 从队列头部取出当前任务
        task_set_block(current_task);
   1065f:	83 ec 0c             	sub    $0xc,%esp
   10662:	ff 75 f0             	push   -0x10(%ebp)
   10665:	e8 95 ff ff ff       	call   105ff <task_set_block>
   1066a:	83 c4 10             	add    $0x10,%esp
        // 将当前任务添加到队列尾部
        task_set_ready(current_task);
   1066d:	83 ec 0c             	sub    $0xc,%esp
   10670:	ff 75 f0             	push   -0x10(%ebp)
   10673:	e8 53 ff ff ff       	call   105cb <task_set_ready>
   10678:	83 c4 10             	add    $0x10,%esp
        // 将cpu的使用权让给下一个任务
        task_dispatch();
   1067b:	e8 58 00 00 00       	call   106d8 <task_dispatch>
    }
    irq_leave_protection(state);
   10680:	83 ec 0c             	sub    $0xc,%esp
   10683:	ff 75 f4             	push   -0xc(%ebp)
   10686:	e8 d8 0b 00 00       	call   11263 <irq_leave_protection>
   1068b:	83 c4 10             	add    $0x10,%esp
    // 没有其他的任务了就直接返回
    return 0;
   1068e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10693:	c9                   	leave
   10694:	c3                   	ret

00010695 <task_next_run>:

task_t *task_next_run(void)
{
   10695:	55                   	push   %ebp
   10696:	89 e5                	mov    %esp,%ebp
   10698:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   1069b:	68 24 30 01 00       	push   $0x13024
   106a0:	e8 3e fc ff ff       	call   102e3 <list_count>
   106a5:	83 c4 04             	add    $0x4,%esp
   106a8:	85 c0                	test   %eax,%eax
   106aa:	75 07                	jne    106b3 <task_next_run+0x1e>
    {
        // 将空闲进程放入接下来要执行的任务队列
        return &task_manager.idle_task;
   106ac:	b8 f4 30 01 00       	mov    $0x130f4,%eax
   106b1:	eb 23                	jmp    106d6 <task_next_run+0x41>
    }
    list_node_t *task_node = list_first(&task_manager.ready_list);
   106b3:	68 24 30 01 00       	push   $0x13024
   106b8:	e8 31 fc ff ff       	call   102ee <list_first>
   106bd:	83 c4 04             	add    $0x4,%esp
   106c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   106c3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   106c7:	74 08                	je     106d1 <task_next_run+0x3c>
   106c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   106cc:	83 e8 30             	sub    $0x30,%eax
   106cf:	eb 05                	jmp    106d6 <task_next_run+0x41>
   106d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106d6:	c9                   	leave
   106d7:	c3                   	ret

000106d8 <task_dispatch>:

void task_dispatch(void)
{
   106d8:	55                   	push   %ebp
   106d9:	89 e5                	mov    %esp,%ebp
   106db:	83 ec 18             	sub    $0x18,%esp
    // irq_state_t state = irq_enter_protection();
    task_t *to = task_next_run();
   106de:	e8 b2 ff ff ff       	call   10695 <task_next_run>
   106e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.currt_task)
   106e6:	a1 20 30 01 00       	mov    0x13020,%eax
   106eb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   106ee:	74 2a                	je     1071a <task_dispatch+0x42>
    {
        task_t *from = task_current();
   106f0:	e8 35 ff ff ff       	call   1062a <task_current>
   106f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_manager.currt_task = to;
   106f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106fb:	a3 20 30 01 00       	mov    %eax,0x13020
        to->state = TASK_RUNNING;
   10700:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10703:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   10709:	83 ec 08             	sub    $0x8,%esp
   1070c:	ff 75 f4             	push   -0xc(%ebp)
   1070f:	ff 75 f0             	push   -0x10(%ebp)
   10712:	e8 e2 fd ff ff       	call   104f9 <task_switch_from_to>
   10717:	83 c4 10             	add    $0x10,%esp
    }
    // irq_leave_protection(state);
}
   1071a:	90                   	nop
   1071b:	c9                   	leave
   1071c:	c3                   	ret

0001071d <task_time_tick>:
// 当时间片到了之后将运行中队列中当前的任务移到队列尾部
// 并取出运行队列中的下一个任务
void task_time_tick(void)
{
   1071d:	55                   	push   %ebp
   1071e:	89 e5                	mov    %esp,%ebp
   10720:	83 ec 18             	sub    $0x18,%esp
    task_t *current_task = task_current();
   10723:	e8 02 ff ff ff       	call   1062a <task_current>
   10728:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // irq_state_t state = irq_enter_protection();
    // 当前任务的运行时间片已经为0了
    if (--current_task->slice_ticks == 0)
   1072b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1072e:	8b 40 0c             	mov    0xc(%eax),%eax
   10731:	8d 50 ff             	lea    -0x1(%eax),%edx
   10734:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10737:	89 50 0c             	mov    %edx,0xc(%eax)
   1073a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1073d:	8b 40 0c             	mov    0xc(%eax),%eax
   10740:	85 c0                	test   %eax,%eax
   10742:	75 2d                	jne    10771 <task_time_tick+0x54>
    {
        // 将这次的任务重新设置计数
        current_task->slice_ticks = current_task->time_ticks;
   10744:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10747:	8b 50 08             	mov    0x8(%eax),%edx
   1074a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074d:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(current_task);
   10750:	83 ec 0c             	sub    $0xc,%esp
   10753:	ff 75 f0             	push   -0x10(%ebp)
   10756:	e8 a4 fe ff ff       	call   105ff <task_set_block>
   1075b:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   1075e:	83 ec 0c             	sub    $0xc,%esp
   10761:	ff 75 f0             	push   -0x10(%ebp)
   10764:	e8 62 fe ff ff       	call   105cb <task_set_ready>
   10769:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1076c:	e8 67 ff ff ff       	call   106d8 <task_dispatch>
    }
    list_node_t *curr = list_first(&task_manager.sleep_list);
   10771:	83 ec 0c             	sub    $0xc,%esp
   10774:	68 3c 30 01 00       	push   $0x1303c
   10779:	e8 70 fb ff ff       	call   102ee <list_first>
   1077e:	83 c4 10             	add    $0x10,%esp
   10781:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 如果当前节点有效不为空
    while (curr)
   10784:	eb 62                	jmp    107e8 <task_time_tick+0xcb>
    {
        list_node_t *next = list_node_next(curr);
   10786:	83 ec 0c             	sub    $0xc,%esp
   10789:	ff 75 f4             	push   -0xc(%ebp)
   1078c:	e8 47 fb ff ff       	call   102d8 <list_node_next>
   10791:	83 c4 10             	add    $0x10,%esp
   10794:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task = list_node_parent(curr, task_t, run_node);
   10797:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1079b:	74 08                	je     107a5 <task_time_tick+0x88>
   1079d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107a0:	83 e8 30             	sub    $0x30,%eax
   107a3:	eb 05                	jmp    107aa <task_time_tick+0x8d>
   107a5:	b8 00 00 00 00       	mov    $0x0,%eax
   107aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0)
   107ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107b0:	8b 40 04             	mov    0x4(%eax),%eax
   107b3:	8d 50 ff             	lea    -0x1(%eax),%edx
   107b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107b9:	89 50 04             	mov    %edx,0x4(%eax)
   107bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   107bf:	8b 40 04             	mov    0x4(%eax),%eax
   107c2:	85 c0                	test   %eax,%eax
   107c4:	75 1c                	jne    107e2 <task_time_tick+0xc5>
        {
            task_set_wakeup(task);
   107c6:	83 ec 0c             	sub    $0xc,%esp
   107c9:	ff 75 e8             	push   -0x18(%ebp)
   107cc:	e8 5f 00 00 00       	call   10830 <task_set_wakeup>
   107d1:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   107d4:	83 ec 0c             	sub    $0xc,%esp
   107d7:	ff 75 e8             	push   -0x18(%ebp)
   107da:	e8 ec fd ff ff       	call   105cb <task_set_ready>
   107df:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   107e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   107e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   107e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107ec:	75 98                	jne    10786 <task_time_tick+0x69>
    }
    task_dispatch();
   107ee:	e8 e5 fe ff ff       	call   106d8 <task_dispatch>
    // irq_leave_protection(state);
}
   107f3:	90                   	nop
   107f4:	c9                   	leave
   107f5:	c3                   	ret

000107f6 <task_set_sleep>:

// 将任务插入睡眠队列
void task_set_sleep(task_t *task, uint32_t ticks)
{
   107f6:	55                   	push   %ebp
   107f7:	89 e5                	mov    %esp,%ebp
   107f9:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0)
   107fc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10800:	74 2b                	je     1082d <task_set_sleep+0x37>
    {
        return; // 如果当前任务不需要睡眠则直接返回
    }
    task->sleep_ticks = ticks;
   10802:	8b 55 0c             	mov    0xc(%ebp),%edx
   10805:	8b 45 08             	mov    0x8(%ebp),%eax
   10808:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   1080b:	8b 45 08             	mov    0x8(%ebp),%eax
   1080e:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   10814:	8b 45 08             	mov    0x8(%ebp),%eax
   10817:	83 c0 30             	add    $0x30,%eax
   1081a:	83 ec 08             	sub    $0x8,%esp
   1081d:	50                   	push   %eax
   1081e:	68 3c 30 01 00       	push   $0x1303c
   10823:	e8 79 11 00 00       	call   119a1 <list_insert_last>
   10828:	83 c4 10             	add    $0x10,%esp
   1082b:	eb 01                	jmp    1082e <task_set_sleep+0x38>
        return; // 如果当前任务不需要睡眠则直接返回
   1082d:	90                   	nop
}
   1082e:	c9                   	leave
   1082f:	c3                   	ret

00010830 <task_set_wakeup>:

// 将任务从睡眠队列移除出去(到就绪对垒)
void task_set_wakeup(task_t *task)
{
   10830:	55                   	push   %ebp
   10831:	89 e5                	mov    %esp,%ebp
   10833:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   10836:	8b 45 08             	mov    0x8(%ebp),%eax
   10839:	83 c0 30             	add    $0x30,%eax
   1083c:	83 ec 08             	sub    $0x8,%esp
   1083f:	50                   	push   %eax
   10840:	68 3c 30 01 00       	push   $0x1303c
   10845:	e8 33 12 00 00       	call   11a7d <list_remove>
   1084a:	83 c4 10             	add    $0x10,%esp
}
   1084d:	90                   	nop
   1084e:	c9                   	leave
   1084f:	c3                   	ret

00010850 <sys_sleep>:
void sys_sleep(uint32_t ms)
{
   10850:	55                   	push   %ebp
   10851:	89 e5                	mov    %esp,%ebp
   10853:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10856:	e8 f0 09 00 00       	call   1124b <irq_enter_protection>
   1085b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_block(task_manager.currt_task); // 将当前进程从队列中移除
   1085e:	a1 20 30 01 00       	mov    0x13020,%eax
   10863:	83 ec 0c             	sub    $0xc,%esp
   10866:	50                   	push   %eax
   10867:	e8 93 fd ff ff       	call   105ff <task_set_block>
   1086c:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.currt_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS);
   1086f:	8b 45 08             	mov    0x8(%ebp),%eax
   10872:	83 c0 09             	add    $0x9,%eax
   10875:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   1087a:	f7 e2                	mul    %edx
   1087c:	c1 ea 03             	shr    $0x3,%edx
   1087f:	a1 20 30 01 00       	mov    0x13020,%eax
   10884:	83 ec 08             	sub    $0x8,%esp
   10887:	52                   	push   %edx
   10888:	50                   	push   %eax
   10889:	e8 68 ff ff ff       	call   107f6 <task_set_sleep>
   1088e:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   10891:	e8 42 fe ff ff       	call   106d8 <task_dispatch>
    irq_leave_protection(state);
   10896:	83 ec 0c             	sub    $0xc,%esp
   10899:	ff 75 f4             	push   -0xc(%ebp)
   1089c:	e8 c2 09 00 00       	call   11263 <irq_leave_protection>
   108a1:	83 c4 10             	add    $0x10,%esp
}
   108a4:	90                   	nop
   108a5:	c9                   	leave
   108a6:	c3                   	ret

000108a7 <lgdt>:
    desc->attr = attr;
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}

// 从gdt表中找到一个空闲的项设置给tss
int gdt_alloc_des(void)
   108a7:	55                   	push   %ebp
   108a8:	89 e5                	mov    %esp,%ebp
   108aa:	83 ec 10             	sub    $0x10,%esp
    // 跳过第0项
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
    {
        segment_desc_t *desc = gdt_table + i;
        if (desc->attr == 0)
        {
   108ad:	8b 45 08             	mov    0x8(%ebp),%eax
   108b0:	c1 e8 10             	shr    $0x10,%eax
   108b3:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
            irq_leave_protection(state);
   108b7:	8b 45 08             	mov    0x8(%ebp),%eax
   108ba:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
            return i * sizeof(segment_desc_t);
   108be:	8b 45 0c             	mov    0xc(%ebp),%eax
   108c1:	83 e8 01             	sub    $0x1,%eax
   108c4:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
        }
   108c8:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
    }
   108cc:	90                   	nop
   108cd:	c9                   	leave
   108ce:	c3                   	ret

000108cf <far_jump>:
   108cf:	55                   	push   %ebp
   108d0:	89 e5                	mov    %esp,%ebp
   108d2:	83 ec 10             	sub    $0x10,%esp
   108d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   108d8:	89 45 f8             	mov    %eax,-0x8(%ebp)
   108db:	8b 45 08             	mov    0x8(%ebp),%eax
   108de:	89 45 fc             	mov    %eax,-0x4(%ebp)
   108e1:	8d 45 f8             	lea    -0x8(%ebp),%eax
   108e4:	ff 28                	ljmp   *(%eax)
   108e6:	90                   	nop
   108e7:	c9                   	leave
   108e8:	c3                   	ret

000108e9 <segment_desc_set>:
{
   108e9:	55                   	push   %ebp
   108ea:	89 e5                	mov    %esp,%ebp
   108ec:	83 ec 14             	sub    $0x14,%esp
   108ef:	8b 45 14             	mov    0x14(%ebp),%eax
   108f2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   108f6:	8b 45 08             	mov    0x8(%ebp),%eax
   108f9:	83 e0 f8             	and    $0xfffffff8,%eax
   108fc:	05 a0 31 01 00       	add    $0x131a0,%eax
   10901:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   10904:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1090b:	76 0f                	jbe    1091c <segment_desc_set+0x33>
        attr |= SEG_G;
   1090d:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10913:	8b 45 10             	mov    0x10(%ebp),%eax
   10916:	c1 e8 0c             	shr    $0xc,%eax
   10919:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   1091c:	8b 45 10             	mov    0x10(%ebp),%eax
   1091f:	89 c2                	mov    %eax,%edx
   10921:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10924:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   10927:	8b 45 0c             	mov    0xc(%ebp),%eax
   1092a:	89 c2                	mov    %eax,%edx
   1092c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1092f:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10933:	8b 45 0c             	mov    0xc(%ebp),%eax
   10936:	c1 e8 10             	shr    $0x10,%eax
   10939:	89 c2                	mov    %eax,%edx
   1093b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1093e:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   10941:	8b 45 10             	mov    0x10(%ebp),%eax
   10944:	c1 e8 10             	shr    $0x10,%eax
   10947:	c1 e0 08             	shl    $0x8,%eax
   1094a:	66 25 00 0f          	and    $0xf00,%ax
   1094e:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10952:	89 c2                	mov    %eax,%edx
   10954:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10957:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   1095b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1095e:	c1 e8 18             	shr    $0x18,%eax
   10961:	89 c2                	mov    %eax,%edx
   10963:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10966:	88 50 07             	mov    %dl,0x7(%eax)
}
   10969:	90                   	nop
   1096a:	c9                   	leave
   1096b:	c3                   	ret

0001096c <init_gdt>:
{
   1096c:	55                   	push   %ebp
   1096d:	89 e5                	mov    %esp,%ebp
   1096f:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10972:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10979:	eb 19                	jmp    10994 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   1097b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1097e:	c1 e0 03             	shl    $0x3,%eax
   10981:	6a 00                	push   $0x0
   10983:	6a 00                	push   $0x0
   10985:	6a 00                	push   $0x0
   10987:	50                   	push   %eax
   10988:	e8 5c ff ff ff       	call   108e9 <segment_desc_set>
   1098d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10990:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10994:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1099b:	7e de                	jle    1097b <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   1099d:	68 92 40 00 00       	push   $0x4092
   109a2:	6a ff                	push   $0xffffffff
   109a4:	6a 00                	push   $0x0
   109a6:	6a 10                	push   $0x10
   109a8:	e8 3c ff ff ff       	call   108e9 <segment_desc_set>
   109ad:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   109b0:	68 9a 40 00 00       	push   $0x409a
   109b5:	6a ff                	push   $0xffffffff
   109b7:	6a 00                	push   $0x0
   109b9:	6a 08                	push   $0x8
   109bb:	e8 29 ff ff ff       	call   108e9 <segment_desc_set>
   109c0:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   109c3:	b8 a0 31 01 00       	mov    $0x131a0,%eax
   109c8:	68 00 08 00 00       	push   $0x800
   109cd:	50                   	push   %eax
   109ce:	e8 d4 fe ff ff       	call   108a7 <lgdt>
   109d3:	83 c4 08             	add    $0x8,%esp
}
   109d6:	90                   	nop
   109d7:	c9                   	leave
   109d8:	c3                   	ret

000109d9 <gate_desc_set>:
{
   109d9:	55                   	push   %ebp
   109da:	89 e5                	mov    %esp,%ebp
   109dc:	83 ec 08             	sub    $0x8,%esp
   109df:	8b 55 0c             	mov    0xc(%ebp),%edx
   109e2:	8b 45 14             	mov    0x14(%ebp),%eax
   109e5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   109e9:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   109ed:	8b 45 10             	mov    0x10(%ebp),%eax
   109f0:	89 c2                	mov    %eax,%edx
   109f2:	8b 45 08             	mov    0x8(%ebp),%eax
   109f5:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   109f8:	8b 45 08             	mov    0x8(%ebp),%eax
   109fb:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   109ff:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10a03:	8b 45 08             	mov    0x8(%ebp),%eax
   10a06:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a0a:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10a0e:	8b 45 10             	mov    0x10(%ebp),%eax
   10a11:	c1 e8 10             	shr    $0x10,%eax
   10a14:	89 c2                	mov    %eax,%edx
   10a16:	8b 45 08             	mov    0x8(%ebp),%eax
   10a19:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10a1d:	90                   	nop
   10a1e:	c9                   	leave
   10a1f:	c3                   	ret

00010a20 <gdt_alloc_des>:
{
   10a20:	55                   	push   %ebp
   10a21:	89 e5                	mov    %esp,%ebp
   10a23:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10a26:	e8 20 08 00 00       	call   1124b <irq_enter_protection>
   10a2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10a2e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10a35:	eb 34                	jmp    10a6b <gdt_alloc_des+0x4b>
        segment_desc_t *desc = gdt_table + i;
   10a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a3a:	c1 e0 03             	shl    $0x3,%eax
   10a3d:	05 a0 31 01 00       	add    $0x131a0,%eax
   10a42:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (desc->attr == 0)
   10a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a48:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a4c:	66 85 c0             	test   %ax,%ax
   10a4f:	75 16                	jne    10a67 <gdt_alloc_des+0x47>
            irq_leave_protection(state);
   10a51:	83 ec 0c             	sub    $0xc,%esp
   10a54:	ff 75 f0             	push   -0x10(%ebp)
   10a57:	e8 07 08 00 00       	call   11263 <irq_leave_protection>
   10a5c:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10a5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a62:	c1 e0 03             	shl    $0x3,%eax
   10a65:	eb 20                	jmp    10a87 <gdt_alloc_des+0x67>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10a67:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a6b:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10a72:	7e c3                	jle    10a37 <gdt_alloc_des+0x17>
    irq_leave_protection(state);
   10a74:	83 ec 0c             	sub    $0xc,%esp
   10a77:	ff 75 f0             	push   -0x10(%ebp)
   10a7a:	e8 e4 07 00 00       	call   11263 <irq_leave_protection>
   10a7f:	83 c4 10             	add    $0x10,%esp
    return -1;
   10a82:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a87:	c9                   	leave
   10a88:	c3                   	ret

00010a89 <switch_to_tss>:
{
   10a89:	55                   	push   %ebp
   10a8a:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   10a8c:	6a 00                	push   $0x0
   10a8e:	ff 75 08             	push   0x8(%ebp)
   10a91:	e8 39 fe ff ff       	call   108cf <far_jump>
   10a96:	83 c4 08             	add    $0x8,%esp
}
   10a99:	90                   	nop
   10a9a:	c9                   	leave
   10a9b:	c3                   	ret

00010a9c <cpu_init>:
{
   10a9c:	55                   	push   %ebp
   10a9d:	89 e5                	mov    %esp,%ebp
    init_gdt();
   10a9f:	e8 c8 fe ff ff       	call   1096c <init_gdt>
   10aa4:	90                   	nop
   10aa5:	5d                   	pop    %ebp
   10aa6:	c3                   	ret

00010aa7 <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   10aa7:	55                   	push   %ebp
   10aa8:	89 e5                	mov    %esp,%ebp
   10aaa:	83 ec 14             	sub    $0x14,%esp
   10aad:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   10ab4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10ab8:	89 c2                	mov    %eax,%edx
   10aba:	ec                   	in     (%dx),%al
   10abb:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   10abe:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   10ac2:	c9                   	leave
   10ac3:	c3                   	ret

00010ac4 <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   10ac4:	55                   	push   %ebp
   10ac5:	89 e5                	mov    %esp,%ebp
   10ac7:	83 ec 08             	sub    $0x8,%esp
   10aca:	8b 55 08             	mov    0x8(%ebp),%edx
   10acd:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ad0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10ad4:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   10ad7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10adb:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10adf:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   10ae0:	90                   	nop
   10ae1:	c9                   	leave
   10ae2:	c3                   	ret

00010ae3 <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   10ae3:	55                   	push   %ebp
   10ae4:	89 e5                	mov    %esp,%ebp
        hlt();
   10ae6:	fa                   	cli
    }
   10ae7:	90                   	nop
   10ae8:	5d                   	pop    %ebp
   10ae9:	c3                   	ret

00010aea <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   10aea:	55                   	push   %ebp
   10aeb:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   10aed:	fb                   	sti
}
   10aee:	90                   	nop
   10aef:	5d                   	pop    %ebp
   10af0:	c3                   	ret

00010af1 <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   10af1:	55                   	push   %ebp
   10af2:	89 e5                	mov    %esp,%ebp
   10af4:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   10af7:	8b 45 08             	mov    0x8(%ebp),%eax
   10afa:	c1 e8 10             	shr    $0x10,%eax
   10afd:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   10b01:	8b 45 08             	mov    0x8(%ebp),%eax
   10b04:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   10b08:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b0b:	83 e8 01             	sub    $0x1,%eax
   10b0e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10b12:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   10b16:	90                   	nop
   10b17:	c9                   	leave
   10b18:	c3                   	ret

00010b19 <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   10b19:	55                   	push   %ebp
   10b1a:	89 e5                	mov    %esp,%ebp
}
   10b1c:	f4                   	hlt

   10b1d:	90                   	nop
   10b1e:	5d                   	pop    %ebp
   10b1f:	c3                   	ret

00010b20 <read_eflags>:
    do_default_handler(frame, "Stack-Segment Fault.");
}

void do_handler_general_protection(exception_frame_t *frame)
{
    do_default_handler(frame, "General Protection.");
   10b20:	55                   	push   %ebp
   10b21:	89 e5                	mov    %esp,%ebp
   10b23:	83 ec 10             	sub    $0x10,%esp
}

   10b26:	9c                   	pushf
   10b27:	58                   	pop    %eax
   10b28:	89 45 fc             	mov    %eax,-0x4(%ebp)
void do_handler_page_fault(exception_frame_t *frame)
   10b2b:	8b 45 fc             	mov    -0x4(%ebp),%eax
{
   10b2e:	c9                   	leave
   10b2f:	c3                   	ret

00010b30 <write_eflags>:
    do_default_handler(frame, "Page Fault.");
}

   10b30:	55                   	push   %ebp
   10b31:	89 e5                	mov    %esp,%ebp
void do_handler_fpu_error(exception_frame_t *frame)
   10b33:	8b 45 08             	mov    0x8(%ebp),%eax
   10b36:	50                   	push   %eax
   10b37:	9d                   	popf
{
   10b38:	90                   	nop
   10b39:	5d                   	pop    %ebp
   10b3a:	c3                   	ret

00010b3b <dump_core_regs>:
{
   10b3b:	55                   	push   %ebp
   10b3c:	89 e5                	mov    %esp,%ebp
   10b3e:	57                   	push   %edi
   10b3f:	56                   	push   %esi
   10b40:	53                   	push   %ebx
   10b41:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   10b44:	8b 45 08             	mov    0x8(%ebp),%eax
   10b47:	8b 50 34             	mov    0x34(%eax),%edx
   10b4a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b4d:	8b 40 30             	mov    0x30(%eax),%eax
   10b50:	83 ec 04             	sub    $0x4,%esp
   10b53:	52                   	push   %edx
   10b54:	50                   	push   %eax
   10b55:	68 1c 1d 01 00       	push   $0x11d1c
   10b5a:	e8 51 10 00 00       	call   11bb0 <log_prinf>
   10b5f:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   10b62:	8b 45 08             	mov    0x8(%ebp),%eax
   10b65:	8b 38                	mov    (%eax),%edi
   10b67:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6a:	8b 70 04             	mov    0x4(%eax),%esi
   10b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b70:	8b 58 0c             	mov    0xc(%eax),%ebx
   10b73:	8b 45 08             	mov    0x8(%ebp),%eax
   10b76:	8b 48 08             	mov    0x8(%eax),%ecx
   10b79:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7c:	8b 50 0c             	mov    0xc(%eax),%edx
   10b7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b82:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b85:	83 ec 04             	sub    $0x4,%esp
   10b88:	57                   	push   %edi
   10b89:	56                   	push   %esi
   10b8a:	53                   	push   %ebx
   10b8b:	51                   	push   %ecx
   10b8c:	52                   	push   %edx
   10b8d:	50                   	push   %eax
   10b8e:	68 34 1d 01 00       	push   $0x11d34
   10b93:	e8 18 10 00 00       	call   11bb0 <log_prinf>
   10b98:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   10b9b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9e:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10ba1:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba4:	8b 40 18             	mov    0x18(%eax),%eax
   10ba7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10baa:	8b 45 08             	mov    0x8(%ebp),%eax
   10bad:	8b 58 14             	mov    0x14(%eax),%ebx
   10bb0:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10bb3:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb6:	8b 78 10             	mov    0x10(%eax),%edi
   10bb9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbc:	8b 70 24             	mov    0x24(%eax),%esi
   10bbf:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc2:	8b 58 28             	mov    0x28(%eax),%ebx
   10bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc8:	8b 50 20             	mov    0x20(%eax),%edx
   10bcb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bce:	8b 40 2c             	mov    0x2c(%eax),%eax
   10bd1:	83 ec 0c             	sub    $0xc,%esp
   10bd4:	51                   	push   %ecx
   10bd5:	ff 75 e4             	push   -0x1c(%ebp)
   10bd8:	ff 75 e0             	push   -0x20(%ebp)
   10bdb:	57                   	push   %edi
   10bdc:	56                   	push   %esi
   10bdd:	53                   	push   %ebx
   10bde:	52                   	push   %edx
   10bdf:	50                   	push   %eax
   10be0:	68 5c 1d 01 00       	push   $0x11d5c
   10be5:	e8 c6 0f 00 00       	call   11bb0 <log_prinf>
   10bea:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   10bed:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf0:	8b 50 40             	mov    0x40(%eax),%edx
   10bf3:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf6:	8b 40 38             	mov    0x38(%eax),%eax
   10bf9:	83 ec 04             	sub    $0x4,%esp
   10bfc:	52                   	push   %edx
   10bfd:	50                   	push   %eax
   10bfe:	68 ad 1d 01 00       	push   $0x11dad
   10c03:	e8 a8 0f 00 00       	call   11bb0 <log_prinf>
   10c08:	83 c4 10             	add    $0x10,%esp
}
   10c0b:	90                   	nop
   10c0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10c0f:	5b                   	pop    %ebx
   10c10:	5e                   	pop    %esi
   10c11:	5f                   	pop    %edi
   10c12:	5d                   	pop    %ebp
   10c13:	c3                   	ret

00010c14 <do_default_handler>:
{
   10c14:	55                   	push   %ebp
   10c15:	89 e5                	mov    %esp,%ebp
   10c17:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   10c1a:	83 ec 0c             	sub    $0xc,%esp
   10c1d:	68 c6 1d 01 00       	push   $0x11dc6
   10c22:	e8 89 0f 00 00       	call   11bb0 <log_prinf>
   10c27:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   10c2a:	83 ec 08             	sub    $0x8,%esp
   10c2d:	ff 75 0c             	push   0xc(%ebp)
   10c30:	68 e3 1d 01 00       	push   $0x11de3
   10c35:	e8 76 0f 00 00       	call   11bb0 <log_prinf>
   10c3a:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10c3d:	83 ec 0c             	sub    $0xc,%esp
   10c40:	ff 75 08             	push   0x8(%ebp)
   10c43:	e8 f3 fe ff ff       	call   10b3b <dump_core_regs>
   10c48:	83 c4 10             	add    $0x10,%esp
        hlt();
   10c4b:	e8 c9 fe ff ff       	call   10b19 <hlt>
   10c50:	eb f9                	jmp    10c4b <do_default_handler+0x37>

00010c52 <do_handler_unknow>:
{
   10c52:	55                   	push   %ebp
   10c53:	89 e5                	mov    %esp,%ebp
   10c55:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   10c58:	83 ec 08             	sub    $0x8,%esp
   10c5b:	68 f4 1d 01 00       	push   $0x11df4
   10c60:	ff 75 08             	push   0x8(%ebp)
   10c63:	e8 ac ff ff ff       	call   10c14 <do_default_handler>
   10c68:	83 c4 10             	add    $0x10,%esp
}
   10c6b:	90                   	nop
   10c6c:	c9                   	leave
   10c6d:	c3                   	ret

00010c6e <do_handler_divider>:
{
   10c6e:	55                   	push   %ebp
   10c6f:	89 e5                	mov    %esp,%ebp
   10c71:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   10c74:	83 ec 08             	sub    $0x8,%esp
   10c77:	68 08 1e 01 00       	push   $0x11e08
   10c7c:	ff 75 08             	push   0x8(%ebp)
   10c7f:	e8 90 ff ff ff       	call   10c14 <do_default_handler>
   10c84:	83 c4 10             	add    $0x10,%esp
}
   10c87:	90                   	nop
   10c88:	c9                   	leave
   10c89:	c3                   	ret

00010c8a <do_handler_Debug>:
{
   10c8a:	55                   	push   %ebp
   10c8b:	89 e5                	mov    %esp,%ebp
   10c8d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   10c90:	83 ec 08             	sub    $0x8,%esp
   10c93:	68 1d 1e 01 00       	push   $0x11e1d
   10c98:	ff 75 08             	push   0x8(%ebp)
   10c9b:	e8 74 ff ff ff       	call   10c14 <do_default_handler>
   10ca0:	83 c4 10             	add    $0x10,%esp
}
   10ca3:	90                   	nop
   10ca4:	c9                   	leave
   10ca5:	c3                   	ret

00010ca6 <do_handler_NMI>:
{
   10ca6:	55                   	push   %ebp
   10ca7:	89 e5                	mov    %esp,%ebp
   10ca9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10cac:	83 ec 08             	sub    $0x8,%esp
   10caf:	68 2d 1e 01 00       	push   $0x11e2d
   10cb4:	ff 75 08             	push   0x8(%ebp)
   10cb7:	e8 58 ff ff ff       	call   10c14 <do_default_handler>
   10cbc:	83 c4 10             	add    $0x10,%esp
}
   10cbf:	90                   	nop
   10cc0:	c9                   	leave
   10cc1:	c3                   	ret

00010cc2 <do_handler_breakpoint>:
{
   10cc2:	55                   	push   %ebp
   10cc3:	89 e5                	mov    %esp,%ebp
   10cc5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10cc8:	83 ec 08             	sub    $0x8,%esp
   10ccb:	68 3c 1e 01 00       	push   $0x11e3c
   10cd0:	ff 75 08             	push   0x8(%ebp)
   10cd3:	e8 3c ff ff ff       	call   10c14 <do_default_handler>
   10cd8:	83 c4 10             	add    $0x10,%esp
}
   10cdb:	90                   	nop
   10cdc:	c9                   	leave
   10cdd:	c3                   	ret

00010cde <do_handler_overflow>:
{
   10cde:	55                   	push   %ebp
   10cdf:	89 e5                	mov    %esp,%ebp
   10ce1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10ce4:	83 ec 08             	sub    $0x8,%esp
   10ce7:	68 48 1e 01 00       	push   $0x11e48
   10cec:	ff 75 08             	push   0x8(%ebp)
   10cef:	e8 20 ff ff ff       	call   10c14 <do_default_handler>
   10cf4:	83 c4 10             	add    $0x10,%esp
}
   10cf7:	90                   	nop
   10cf8:	c9                   	leave
   10cf9:	c3                   	ret

00010cfa <do_handler_bound_range>:
{
   10cfa:	55                   	push   %ebp
   10cfb:	89 e5                	mov    %esp,%ebp
   10cfd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10d00:	83 ec 08             	sub    $0x8,%esp
   10d03:	68 52 1e 01 00       	push   $0x11e52
   10d08:	ff 75 08             	push   0x8(%ebp)
   10d0b:	e8 04 ff ff ff       	call   10c14 <do_default_handler>
   10d10:	83 c4 10             	add    $0x10,%esp
}
   10d13:	90                   	nop
   10d14:	c9                   	leave
   10d15:	c3                   	ret

00010d16 <do_handler_invalid_opcode>:
{
   10d16:	55                   	push   %ebp
   10d17:	89 e5                	mov    %esp,%ebp
   10d19:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10d1c:	83 ec 08             	sub    $0x8,%esp
   10d1f:	68 68 1e 01 00       	push   $0x11e68
   10d24:	ff 75 08             	push   0x8(%ebp)
   10d27:	e8 e8 fe ff ff       	call   10c14 <do_default_handler>
   10d2c:	83 c4 10             	add    $0x10,%esp
}
   10d2f:	90                   	nop
   10d30:	c9                   	leave
   10d31:	c3                   	ret

00010d32 <do_handler_device_unavailable>:
{
   10d32:	55                   	push   %ebp
   10d33:	89 e5                	mov    %esp,%ebp
   10d35:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10d38:	83 ec 08             	sub    $0x8,%esp
   10d3b:	68 78 1e 01 00       	push   $0x11e78
   10d40:	ff 75 08             	push   0x8(%ebp)
   10d43:	e8 cc fe ff ff       	call   10c14 <do_default_handler>
   10d48:	83 c4 10             	add    $0x10,%esp
}
   10d4b:	90                   	nop
   10d4c:	c9                   	leave
   10d4d:	c3                   	ret

00010d4e <do_handler_double_fault>:
{
   10d4e:	55                   	push   %ebp
   10d4f:	89 e5                	mov    %esp,%ebp
   10d51:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   10d54:	83 ec 08             	sub    $0x8,%esp
   10d57:	68 8e 1e 01 00       	push   $0x11e8e
   10d5c:	ff 75 08             	push   0x8(%ebp)
   10d5f:	e8 b0 fe ff ff       	call   10c14 <do_default_handler>
   10d64:	83 c4 10             	add    $0x10,%esp
}
   10d67:	90                   	nop
   10d68:	c9                   	leave
   10d69:	c3                   	ret

00010d6a <do_handler_invalid_tss>:
{
   10d6a:	55                   	push   %ebp
   10d6b:	89 e5                	mov    %esp,%ebp
   10d6d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   10d70:	83 ec 08             	sub    $0x8,%esp
   10d73:	68 9c 1e 01 00       	push   $0x11e9c
   10d78:	ff 75 08             	push   0x8(%ebp)
   10d7b:	e8 94 fe ff ff       	call   10c14 <do_default_handler>
   10d80:	83 c4 10             	add    $0x10,%esp
}
   10d83:	90                   	nop
   10d84:	c9                   	leave
   10d85:	c3                   	ret

00010d86 <do_handler_segment_not_present>:
{
   10d86:	55                   	push   %ebp
   10d87:	89 e5                	mov    %esp,%ebp
   10d89:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10d8c:	83 ec 08             	sub    $0x8,%esp
   10d8f:	68 a8 1e 01 00       	push   $0x11ea8
   10d94:	ff 75 08             	push   0x8(%ebp)
   10d97:	e8 78 fe ff ff       	call   10c14 <do_default_handler>
   10d9c:	83 c4 10             	add    $0x10,%esp
}
   10d9f:	90                   	nop
   10da0:	c9                   	leave
   10da1:	c3                   	ret

00010da2 <do_handler_stack_segment_fault>:
{
   10da2:	55                   	push   %ebp
   10da3:	89 e5                	mov    %esp,%ebp
   10da5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10da8:	83 ec 08             	sub    $0x8,%esp
   10dab:	68 bd 1e 01 00       	push   $0x11ebd
   10db0:	ff 75 08             	push   0x8(%ebp)
   10db3:	e8 5c fe ff ff       	call   10c14 <do_default_handler>
   10db8:	83 c4 10             	add    $0x10,%esp
}
   10dbb:	90                   	nop
   10dbc:	c9                   	leave
   10dbd:	c3                   	ret

00010dbe <do_handler_general_protection>:
{
   10dbe:	55                   	push   %ebp
   10dbf:	89 e5                	mov    %esp,%ebp
   10dc1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   10dc4:	83 ec 08             	sub    $0x8,%esp
   10dc7:	68 d2 1e 01 00       	push   $0x11ed2
   10dcc:	ff 75 08             	push   0x8(%ebp)
   10dcf:	e8 40 fe ff ff       	call   10c14 <do_default_handler>
   10dd4:	83 c4 10             	add    $0x10,%esp
}
   10dd7:	90                   	nop
   10dd8:	c9                   	leave
   10dd9:	c3                   	ret

00010dda <do_handler_page_fault>:
{
   10dda:	55                   	push   %ebp
   10ddb:	89 e5                	mov    %esp,%ebp
   10ddd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10de0:	83 ec 08             	sub    $0x8,%esp
   10de3:	68 e6 1e 01 00       	push   $0x11ee6
   10de8:	ff 75 08             	push   0x8(%ebp)
   10deb:	e8 24 fe ff ff       	call   10c14 <do_default_handler>
   10df0:	83 c4 10             	add    $0x10,%esp
}
   10df3:	90                   	nop
   10df4:	c9                   	leave
   10df5:	c3                   	ret

00010df6 <do_handler_fpu_error>:
{
   10df6:	55                   	push   %ebp
   10df7:	89 e5                	mov    %esp,%ebp
   10df9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10dfc:	83 ec 08             	sub    $0x8,%esp
   10dff:	68 f2 1e 01 00       	push   $0x11ef2
   10e04:	ff 75 08             	push   0x8(%ebp)
   10e07:	e8 08 fe ff ff       	call   10c14 <do_default_handler>
   10e0c:	83 c4 10             	add    $0x10,%esp
}
   10e0f:	90                   	nop
   10e10:	c9                   	leave
   10e11:	c3                   	ret

00010e12 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   10e12:	55                   	push   %ebp
   10e13:	89 e5                	mov    %esp,%ebp
   10e15:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10e18:	83 ec 08             	sub    $0x8,%esp
   10e1b:	68 10 1f 01 00       	push   $0x11f10
   10e20:	ff 75 08             	push   0x8(%ebp)
   10e23:	e8 ec fd ff ff       	call   10c14 <do_default_handler>
   10e28:	83 c4 10             	add    $0x10,%esp
}
   10e2b:	90                   	nop
   10e2c:	c9                   	leave
   10e2d:	c3                   	ret

00010e2e <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   10e2e:	55                   	push   %ebp
   10e2f:	89 e5                	mov    %esp,%ebp
   10e31:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   10e34:	83 ec 08             	sub    $0x8,%esp
   10e37:	68 21 1f 01 00       	push   $0x11f21
   10e3c:	ff 75 08             	push   0x8(%ebp)
   10e3f:	e8 d0 fd ff ff       	call   10c14 <do_default_handler>
   10e44:	83 c4 10             	add    $0x10,%esp
}
   10e47:	90                   	nop
   10e48:	c9                   	leave
   10e49:	c3                   	ret

00010e4a <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   10e4a:	55                   	push   %ebp
   10e4b:	89 e5                	mov    %esp,%ebp
   10e4d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   10e50:	83 ec 08             	sub    $0x8,%esp
   10e53:	68 30 1f 01 00       	push   $0x11f30
   10e58:	ff 75 08             	push   0x8(%ebp)
   10e5b:	e8 b4 fd ff ff       	call   10c14 <do_default_handler>
   10e60:	83 c4 10             	add    $0x10,%esp
}
   10e63:	90                   	nop
   10e64:	c9                   	leave
   10e65:	c3                   	ret

00010e66 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   10e66:	55                   	push   %ebp
   10e67:	89 e5                	mov    %esp,%ebp
   10e69:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   10e6c:	83 ec 08             	sub    $0x8,%esp
   10e6f:	68 4f 1f 01 00       	push   $0x11f4f
   10e74:	ff 75 08             	push   0x8(%ebp)
   10e77:	e8 98 fd ff ff       	call   10c14 <do_default_handler>
   10e7c:	83 c4 10             	add    $0x10,%esp
}
   10e7f:	90                   	nop
   10e80:	c9                   	leave
   10e81:	c3                   	ret

00010e82 <init_pic>:

static void init_pic(void)
{
   10e82:	55                   	push   %ebp
   10e83:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10e85:	6a 11                	push   $0x11
   10e87:	6a 20                	push   $0x20
   10e89:	e8 36 fc ff ff       	call   10ac4 <outb>
   10e8e:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10e91:	6a 20                	push   $0x20
   10e93:	6a 21                	push   $0x21
   10e95:	e8 2a fc ff ff       	call   10ac4 <outb>
   10e9a:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10e9d:	6a 04                	push   $0x4
   10e9f:	6a 21                	push   $0x21
   10ea1:	e8 1e fc ff ff       	call   10ac4 <outb>
   10ea6:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10ea9:	6a 01                	push   $0x1
   10eab:	6a 21                	push   $0x21
   10ead:	e8 12 fc ff ff       	call   10ac4 <outb>
   10eb2:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10eb5:	6a 11                	push   $0x11
   10eb7:	68 a0 00 00 00       	push   $0xa0
   10ebc:	e8 03 fc ff ff       	call   10ac4 <outb>
   10ec1:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10ec4:	6a 28                	push   $0x28
   10ec6:	68 a1 00 00 00       	push   $0xa1
   10ecb:	e8 f4 fb ff ff       	call   10ac4 <outb>
   10ed0:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10ed3:	6a 02                	push   $0x2
   10ed5:	68 a1 00 00 00       	push   $0xa1
   10eda:	e8 e5 fb ff ff       	call   10ac4 <outb>
   10edf:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10ee2:	6a 01                	push   $0x1
   10ee4:	68 a1 00 00 00       	push   $0xa1
   10ee9:	e8 d6 fb ff ff       	call   10ac4 <outb>
   10eee:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10ef1:	68 fb 00 00 00       	push   $0xfb
   10ef6:	6a 21                	push   $0x21
   10ef8:	e8 c7 fb ff ff       	call   10ac4 <outb>
   10efd:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   10f00:	68 ff 00 00 00       	push   $0xff
   10f05:	68 a1 00 00 00       	push   $0xa1
   10f0a:	e8 b5 fb ff ff       	call   10ac4 <outb>
   10f0f:	83 c4 08             	add    $0x8,%esp
}
   10f12:	90                   	nop
   10f13:	c9                   	leave
   10f14:	c3                   	ret

00010f15 <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   10f15:	55                   	push   %ebp
   10f16:	89 e5                	mov    %esp,%ebp
   10f18:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10f1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10f22:	eb 25                	jmp    10f49 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10f24:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10f29:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f2c:	c1 e0 03             	shl    $0x3,%eax
   10f2f:	05 a0 39 01 00       	add    $0x139a0,%eax
   10f34:	68 00 8e 00 00       	push   $0x8e00
   10f39:	52                   	push   %edx
   10f3a:	6a 08                	push   $0x8
   10f3c:	50                   	push   %eax
   10f3d:	e8 97 fa ff ff       	call   109d9 <gate_desc_set>
   10f42:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10f45:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10f49:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10f4d:	7e d5                	jle    10f24 <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10f4f:	83 ec 08             	sub    $0x8,%esp
   10f52:	68 4a 00 01 00       	push   $0x1004a
   10f57:	6a 00                	push   $0x0
   10f59:	e8 65 01 00 00       	call   110c3 <irq_install>
   10f5e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10f61:	83 ec 08             	sub    $0x8,%esp
   10f64:	68 69 00 01 00       	push   $0x10069
   10f69:	6a 01                	push   $0x1
   10f6b:	e8 53 01 00 00       	call   110c3 <irq_install>
   10f70:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10f73:	83 ec 08             	sub    $0x8,%esp
   10f76:	68 88 00 01 00       	push   $0x10088
   10f7b:	6a 02                	push   $0x2
   10f7d:	e8 41 01 00 00       	call   110c3 <irq_install>
   10f82:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10f85:	83 ec 08             	sub    $0x8,%esp
   10f88:	68 a7 00 01 00       	push   $0x100a7
   10f8d:	6a 03                	push   $0x3
   10f8f:	e8 2f 01 00 00       	call   110c3 <irq_install>
   10f94:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10f97:	83 ec 08             	sub    $0x8,%esp
   10f9a:	68 c6 00 01 00       	push   $0x100c6
   10f9f:	6a 04                	push   $0x4
   10fa1:	e8 1d 01 00 00       	call   110c3 <irq_install>
   10fa6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10fa9:	83 ec 08             	sub    $0x8,%esp
   10fac:	68 e5 00 01 00       	push   $0x100e5
   10fb1:	6a 05                	push   $0x5
   10fb3:	e8 0b 01 00 00       	call   110c3 <irq_install>
   10fb8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10fbb:	83 ec 08             	sub    $0x8,%esp
   10fbe:	68 04 01 01 00       	push   $0x10104
   10fc3:	6a 06                	push   $0x6
   10fc5:	e8 f9 00 00 00       	call   110c3 <irq_install>
   10fca:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10fcd:	83 ec 08             	sub    $0x8,%esp
   10fd0:	68 23 01 01 00       	push   $0x10123
   10fd5:	6a 07                	push   $0x7
   10fd7:	e8 e7 00 00 00       	call   110c3 <irq_install>
   10fdc:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10fdf:	83 ec 08             	sub    $0x8,%esp
   10fe2:	68 42 01 01 00       	push   $0x10142
   10fe7:	6a 08                	push   $0x8
   10fe9:	e8 d5 00 00 00       	call   110c3 <irq_install>
   10fee:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   10ff1:	83 ec 08             	sub    $0x8,%esp
   10ff4:	68 5f 01 01 00       	push   $0x1015f
   10ff9:	6a 0a                	push   $0xa
   10ffb:	e8 c3 00 00 00       	call   110c3 <irq_install>
   11000:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   11003:	83 ec 08             	sub    $0x8,%esp
   11006:	68 7c 01 01 00       	push   $0x1017c
   1100b:	6a 0b                	push   $0xb
   1100d:	e8 b1 00 00 00       	call   110c3 <irq_install>
   11012:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   11015:	83 ec 08             	sub    $0x8,%esp
   11018:	68 99 01 01 00       	push   $0x10199
   1101d:	6a 0c                	push   $0xc
   1101f:	e8 9f 00 00 00       	call   110c3 <irq_install>
   11024:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   11027:	83 ec 08             	sub    $0x8,%esp
   1102a:	68 b6 01 01 00       	push   $0x101b6
   1102f:	6a 0d                	push   $0xd
   11031:	e8 8d 00 00 00       	call   110c3 <irq_install>
   11036:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   11039:	83 ec 08             	sub    $0x8,%esp
   1103c:	68 d3 01 01 00       	push   $0x101d3
   11041:	6a 0e                	push   $0xe
   11043:	e8 7b 00 00 00       	call   110c3 <irq_install>
   11048:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   1104b:	83 ec 08             	sub    $0x8,%esp
   1104e:	68 f0 01 01 00       	push   $0x101f0
   11053:	6a 10                	push   $0x10
   11055:	e8 69 00 00 00       	call   110c3 <irq_install>
   1105a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   1105d:	83 ec 08             	sub    $0x8,%esp
   11060:	68 0f 02 01 00       	push   $0x1020f
   11065:	6a 11                	push   $0x11
   11067:	e8 57 00 00 00       	call   110c3 <irq_install>
   1106c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   1106f:	83 ec 08             	sub    $0x8,%esp
   11072:	68 2c 02 01 00       	push   $0x1022c
   11077:	6a 12                	push   $0x12
   11079:	e8 45 00 00 00       	call   110c3 <irq_install>
   1107e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   11081:	83 ec 08             	sub    $0x8,%esp
   11084:	68 4b 02 01 00       	push   $0x1024b
   11089:	6a 13                	push   $0x13
   1108b:	e8 33 00 00 00       	call   110c3 <irq_install>
   11090:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   11093:	83 ec 08             	sub    $0x8,%esp
   11096:	68 6a 02 01 00       	push   $0x1026a
   1109b:	6a 14                	push   $0x14
   1109d:	e8 21 00 00 00       	call   110c3 <irq_install>
   110a2:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   110a5:	b8 a0 39 01 00       	mov    $0x139a0,%eax
   110aa:	83 ec 08             	sub    $0x8,%esp
   110ad:	68 00 04 00 00       	push   $0x400
   110b2:	50                   	push   %eax
   110b3:	e8 39 fa ff ff       	call   10af1 <lidt>
   110b8:	83 c4 10             	add    $0x10,%esp

    init_pic();
   110bb:	e8 c2 fd ff ff       	call   10e82 <init_pic>
}
   110c0:	90                   	nop
   110c1:	c9                   	leave
   110c2:	c3                   	ret

000110c3 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   110c3:	55                   	push   %ebp
   110c4:	89 e5                	mov    %esp,%ebp
   110c6:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   110c9:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   110cd:	7e 07                	jle    110d6 <irq_install+0x13>
    {
        return -1;
   110cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110d4:	eb 20                	jmp    110f6 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   110d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   110d9:	8b 55 08             	mov    0x8(%ebp),%edx
   110dc:	c1 e2 03             	shl    $0x3,%edx
   110df:	81 c2 a0 39 01 00    	add    $0x139a0,%edx
   110e5:	68 00 8e 00 00       	push   $0x8e00
   110ea:	50                   	push   %eax
   110eb:	6a 08                	push   $0x8
   110ed:	52                   	push   %edx
   110ee:	e8 e6 f8 ff ff       	call   109d9 <gate_desc_set>
   110f3:	83 c4 10             	add    $0x10,%esp
}
   110f6:	c9                   	leave
   110f7:	c3                   	ret

000110f8 <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   110f8:	55                   	push   %ebp
   110f9:	89 e5                	mov    %esp,%ebp
   110fb:	53                   	push   %ebx
   110fc:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   110ff:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11103:	7e 78                	jle    1117d <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11105:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   11109:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1110d:	7f 32                	jg     11141 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   1110f:	6a 21                	push   $0x21
   11111:	e8 91 f9 ff ff       	call   10aa7 <inb>
   11116:	83 c4 04             	add    $0x4,%esp
   11119:	89 c3                	mov    %eax,%ebx
   1111b:	8b 45 08             	mov    0x8(%ebp),%eax
   1111e:	ba 01 00 00 00       	mov    $0x1,%edx
   11123:	89 c1                	mov    %eax,%ecx
   11125:	d3 e2                	shl    %cl,%edx
   11127:	89 d0                	mov    %edx,%eax
   11129:	f7 d0                	not    %eax
   1112b:	21 d8                	and    %ebx,%eax
   1112d:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11130:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11134:	50                   	push   %eax
   11135:	6a 21                	push   $0x21
   11137:	e8 88 f9 ff ff       	call   10ac4 <outb>
   1113c:	83 c4 08             	add    $0x8,%esp
   1113f:	eb 3d                	jmp    1117e <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   11141:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11145:	68 a1 00 00 00       	push   $0xa1
   1114a:	e8 58 f9 ff ff       	call   10aa7 <inb>
   1114f:	83 c4 04             	add    $0x4,%esp
   11152:	89 c3                	mov    %eax,%ebx
   11154:	8b 45 08             	mov    0x8(%ebp),%eax
   11157:	ba 01 00 00 00       	mov    $0x1,%edx
   1115c:	89 c1                	mov    %eax,%ecx
   1115e:	d3 e2                	shl    %cl,%edx
   11160:	89 d0                	mov    %edx,%eax
   11162:	f7 d0                	not    %eax
   11164:	21 d8                	and    %ebx,%eax
   11166:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   11169:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1116d:	50                   	push   %eax
   1116e:	68 a1 00 00 00       	push   $0xa1
   11173:	e8 4c f9 ff ff       	call   10ac4 <outb>
   11178:	83 c4 08             	add    $0x8,%esp
   1117b:	eb 01                	jmp    1117e <irq_enable+0x86>
        return;
   1117d:	90                   	nop
    }
}
   1117e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11181:	c9                   	leave
   11182:	c3                   	ret

00011183 <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   11183:	55                   	push   %ebp
   11184:	89 e5                	mov    %esp,%ebp
   11186:	53                   	push   %ebx
   11187:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   1118a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1118e:	7e 74                	jle    11204 <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11190:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   11194:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11198:	7f 30                	jg     111ca <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1119a:	6a 21                	push   $0x21
   1119c:	e8 06 f9 ff ff       	call   10aa7 <inb>
   111a1:	83 c4 04             	add    $0x4,%esp
   111a4:	89 c3                	mov    %eax,%ebx
   111a6:	8b 45 08             	mov    0x8(%ebp),%eax
   111a9:	ba 01 00 00 00       	mov    $0x1,%edx
   111ae:	89 c1                	mov    %eax,%ecx
   111b0:	d3 e2                	shl    %cl,%edx
   111b2:	89 d0                	mov    %edx,%eax
   111b4:	09 d8                	or     %ebx,%eax
   111b6:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   111b9:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   111bd:	50                   	push   %eax
   111be:	6a 21                	push   $0x21
   111c0:	e8 ff f8 ff ff       	call   10ac4 <outb>
   111c5:	83 c4 08             	add    $0x8,%esp
   111c8:	eb 3b                	jmp    11205 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   111ca:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   111ce:	68 a1 00 00 00       	push   $0xa1
   111d3:	e8 cf f8 ff ff       	call   10aa7 <inb>
   111d8:	83 c4 04             	add    $0x4,%esp
   111db:	89 c3                	mov    %eax,%ebx
   111dd:	8b 45 08             	mov    0x8(%ebp),%eax
   111e0:	ba 01 00 00 00       	mov    $0x1,%edx
   111e5:	89 c1                	mov    %eax,%ecx
   111e7:	d3 e2                	shl    %cl,%edx
   111e9:	89 d0                	mov    %edx,%eax
   111eb:	09 d8                	or     %ebx,%eax
   111ed:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   111f0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   111f4:	50                   	push   %eax
   111f5:	68 a1 00 00 00       	push   $0xa1
   111fa:	e8 c5 f8 ff ff       	call   10ac4 <outb>
   111ff:	83 c4 08             	add    $0x8,%esp
   11202:	eb 01                	jmp    11205 <irq_disable+0x82>
        return;
   11204:	90                   	nop
    }
}
   11205:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11208:	c9                   	leave
   11209:	c3                   	ret

0001120a <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   1120a:	55                   	push   %ebp
   1120b:	89 e5                	mov    %esp,%ebp
    cli();
   1120d:	e8 d1 f8 ff ff       	call   10ae3 <cli>
}
   11212:	90                   	nop
   11213:	5d                   	pop    %ebp
   11214:	c3                   	ret

00011215 <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   11215:	55                   	push   %ebp
   11216:	89 e5                	mov    %esp,%ebp
    sti();
   11218:	e8 cd f8 ff ff       	call   10aea <sti>
}
   1121d:	90                   	nop
   1121e:	5d                   	pop    %ebp
   1121f:	c3                   	ret

00011220 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   11220:	55                   	push   %ebp
   11221:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11223:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   11227:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1122b:	7e 0f                	jle    1123c <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   1122d:	6a 20                	push   $0x20
   1122f:	68 a0 00 00 00       	push   $0xa0
   11234:	e8 8b f8 ff ff       	call   10ac4 <outb>
   11239:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   1123c:	6a 20                	push   $0x20
   1123e:	6a 20                	push   $0x20
   11240:	e8 7f f8 ff ff       	call   10ac4 <outb>
   11245:	83 c4 08             	add    $0x8,%esp
}
   11248:	90                   	nop
   11249:	c9                   	leave
   1124a:	c3                   	ret

0001124b <irq_enter_protection>:

// 进入临界区保护执行关中断
irq_state_t irq_enter_protection(void)
{
   1124b:	55                   	push   %ebp
   1124c:	89 e5                	mov    %esp,%ebp
   1124e:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11251:	e8 ca f8 ff ff       	call   10b20 <read_eflags>
   11256:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11259:	e8 ac ff ff ff       	call   1120a <irq_disable_global>
    return state;
   1125e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11261:	c9                   	leave
   11262:	c3                   	ret

00011263 <irq_leave_protection>:
// 退出临界区保护执行开中断
void irq_leave_protection(irq_state_t state)
{
   11263:	55                   	push   %ebp
   11264:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11266:	ff 75 08             	push   0x8(%ebp)
   11269:	e8 c2 f8 ff ff       	call   10b30 <write_eflags>
   1126e:	83 c4 04             	add    $0x4,%esp
   11271:	90                   	nop
   11272:	c9                   	leave
   11273:	c3                   	ret

00011274 <outb>:
}

void init_time(void)
{
    sys_tick = 0;
    init_pit();
   11274:	55                   	push   %ebp
   11275:	89 e5                	mov    %esp,%ebp
   11277:	83 ec 08             	sub    $0x8,%esp
   1127a:	8b 55 08             	mov    0x8(%ebp),%edx
   1127d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11280:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11284:	88 45 f8             	mov    %al,-0x8(%ebp)
   11287:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1128b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1128f:	ee                   	out    %al,(%dx)
   11290:	90                   	nop
   11291:	c9                   	leave
   11292:	c3                   	ret

00011293 <do_handler_time>:
{
   11293:	55                   	push   %ebp
   11294:	89 e5                	mov    %esp,%ebp
   11296:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   11299:	a1 a0 3d 01 00       	mov    0x13da0,%eax
   1129e:	83 c0 01             	add    $0x1,%eax
   112a1:	a3 a0 3d 01 00       	mov    %eax,0x13da0
    pic_send_eoi(IRQ0_TIMER);
   112a6:	83 ec 0c             	sub    $0xc,%esp
   112a9:	6a 20                	push   $0x20
   112ab:	e8 70 ff ff ff       	call   11220 <pic_send_eoi>
   112b0:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   112b3:	e8 65 f4 ff ff       	call   1071d <task_time_tick>
}
   112b8:	90                   	nop
   112b9:	c9                   	leave
   112ba:	c3                   	ret

000112bb <init_pit>:
{
   112bb:	55                   	push   %ebp
   112bc:	89 e5                	mov    %esp,%ebp
   112be:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   112c1:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   112c8:	6a 36                	push   $0x36
   112ca:	6a 43                	push   $0x43
   112cc:	e8 a3 ff ff ff       	call   11274 <outb>
   112d1:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   112d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112d7:	0f b6 c0             	movzbl %al,%eax
   112da:	50                   	push   %eax
   112db:	6a 40                	push   $0x40
   112dd:	e8 92 ff ff ff       	call   11274 <outb>
   112e2:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   112e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   112e8:	c1 e8 08             	shr    $0x8,%eax
   112eb:	0f b6 c0             	movzbl %al,%eax
   112ee:	50                   	push   %eax
   112ef:	6a 40                	push   $0x40
   112f1:	e8 7e ff ff ff       	call   11274 <outb>
   112f6:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   112f9:	83 ec 08             	sub    $0x8,%esp
   112fc:	68 89 02 01 00       	push   $0x10289
   11301:	6a 20                	push   $0x20
   11303:	e8 bb fd ff ff       	call   110c3 <irq_install>
   11308:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   1130b:	83 ec 0c             	sub    $0xc,%esp
   1130e:	6a 20                	push   $0x20
   11310:	e8 e3 fd ff ff       	call   110f8 <irq_enable>
   11315:	83 c4 10             	add    $0x10,%esp
}
   11318:	90                   	nop
   11319:	c9                   	leave
   1131a:	c3                   	ret

0001131b <init_time>:
{
   1131b:	55                   	push   %ebp
   1131c:	89 e5                	mov    %esp,%ebp
   1131e:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11321:	c7 05 a0 3d 01 00 00 	movl   $0x0,0x13da0
   11328:	00 00 00 
    init_pit();
   1132b:	e8 8b ff ff ff       	call   112bb <init_pit>
   11330:	90                   	nop
   11331:	c9                   	leave
   11332:	c3                   	ret

00011333 <kernel_init>:

/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   11333:	55                   	push   %ebp
   11334:	89 e5                	mov    %esp,%ebp
   11336:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   11339:	e8 5e f7 ff ff       	call   10a9c <cpu_init>

    init_log(); // 初始化打印函数
   1133e:	e8 fb 07 00 00       	call   11b3e <init_log>
    irq_init();
   11343:	e8 cd fb ff ff       	call   10f15 <irq_init>
    // 初始化定时器
    init_time();
   11348:	e8 ce ff ff ff       	call   1131b <init_time>

    // 初始化任务管理
    task_manager_init();
   1134d:	e8 cf f1 ff ff       	call   10521 <task_manager_init>
}
   11352:	90                   	nop
   11353:	c9                   	leave
   11354:	c3                   	ret

00011355 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;
void init_task_entry(void)
{
   11355:	55                   	push   %ebp
   11356:	89 e5                	mov    %esp,%ebp
   11358:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   1135b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init task: %d", count++);
   11362:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11365:	8d 50 01             	lea    0x1(%eax),%edx
   11368:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1136b:	83 ec 08             	sub    $0x8,%esp
   1136e:	50                   	push   %eax
   1136f:	68 69 1f 01 00       	push   $0x11f69
   11374:	e8 37 08 00 00       	call   11bb0 <log_prinf>
   11379:	83 c4 10             	add    $0x10,%esp
        sys_sleep(2000);
   1137c:	83 ec 0c             	sub    $0xc,%esp
   1137f:	68 d0 07 00 00       	push   $0x7d0
   11384:	e8 c7 f4 ff ff       	call   10850 <sys_sleep>
   11389:	83 c4 10             	add    $0x10,%esp
        log_prinf("init task: %d", count++);
   1138c:	eb d4                	jmp    11362 <init_task_entry+0xd>

0001138e <init_main>:
    }
}

void init_main(void)
{
   1138e:	55                   	push   %ebp
   1138f:	89 e5                	mov    %esp,%ebp
   11391:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   11394:	83 ec 0c             	sub    $0xc,%esp
   11397:	68 77 1f 01 00       	push   $0x11f77
   1139c:	e8 0f 08 00 00       	call   11bb0 <log_prinf>
   113a1:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   113a4:	83 ec 08             	sub    $0x8,%esp
   113a7:	68 85 1f 01 00       	push   $0x11f85
   113ac:	68 8b 1f 01 00       	push   $0x11f8b
   113b1:	e8 fa 07 00 00       	call   11bb0 <log_prinf>
   113b6:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   113b9:	83 ec 0c             	sub    $0xc,%esp
   113bc:	6a 63                	push   $0x63
   113be:	6a 30                	push   $0x30
   113c0:	6a 14                	push   $0x14
   113c2:	6a f6                	push   $0xfffffff6
   113c4:	68 96 1f 01 00       	push   $0x11f96
   113c9:	e8 e2 07 00 00       	call   11bb0 <log_prinf>
   113ce:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   113d1:	ba c0 4d 01 00       	mov    $0x14dc0,%edx
   113d6:	b8 55 13 01 00       	mov    $0x11355,%eax
   113db:	52                   	push   %edx
   113dc:	50                   	push   %eax
   113dd:	68 a2 1f 01 00       	push   $0x11fa2
   113e2:	68 c0 4d 01 00       	push   $0x14dc0
   113e7:	e8 2e f0 ff ff       	call   1041a <task_init>
   113ec:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   113ef:	e8 90 f1 ff ff       	call   10584 <task_first_init>

    irq_enable_global();
   113f4:	e8 1c fe ff ff       	call   11215 <irq_enable_global>
    int count = 0;
   113f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_main: %d", count++);
   11400:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11403:	8d 50 01             	lea    0x1(%eax),%edx
   11406:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11409:	83 ec 08             	sub    $0x8,%esp
   1140c:	50                   	push   %eax
   1140d:	68 ac 1f 01 00       	push   $0x11fac
   11412:	e8 99 07 00 00       	call   11bb0 <log_prinf>
   11417:	83 c4 10             	add    $0x10,%esp
        sys_sleep(1000);
   1141a:	83 ec 0c             	sub    $0xc,%esp
   1141d:	68 e8 03 00 00       	push   $0x3e8
   11422:	e8 29 f4 ff ff       	call   10850 <sys_sleep>
   11427:	83 c4 10             	add    $0x10,%esp
        log_prinf("init_main: %d", count++);
   1142a:	eb d4                	jmp    11400 <init_main+0x72>

0001142c <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   1142c:	55                   	push   %ebp
   1142d:	89 e5                	mov    %esp,%ebp
}
   1142f:	f4                   	hlt

   11430:	90                   	nop
   11431:	5d                   	pop    %ebp
   11432:	c3                   	ret

00011433 <kernel_strcpy>:
{
   11433:	55                   	push   %ebp
   11434:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   11436:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1143a:	74 3b                	je     11477 <kernel_strcpy+0x44>
   1143c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11440:	74 35                	je     11477 <kernel_strcpy+0x44>
    while (*dest && *src)
   11442:	eb 17                	jmp    1145b <kernel_strcpy+0x28>
        *dest++ = *src++;
   11444:	8b 55 0c             	mov    0xc(%ebp),%edx
   11447:	8d 42 01             	lea    0x1(%edx),%eax
   1144a:	89 45 0c             	mov    %eax,0xc(%ebp)
   1144d:	8b 45 08             	mov    0x8(%ebp),%eax
   11450:	8d 48 01             	lea    0x1(%eax),%ecx
   11453:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11456:	0f b6 12             	movzbl (%edx),%edx
   11459:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   1145b:	8b 45 08             	mov    0x8(%ebp),%eax
   1145e:	0f b6 00             	movzbl (%eax),%eax
   11461:	84 c0                	test   %al,%al
   11463:	74 0a                	je     1146f <kernel_strcpy+0x3c>
   11465:	8b 45 0c             	mov    0xc(%ebp),%eax
   11468:	0f b6 00             	movzbl (%eax),%eax
   1146b:	84 c0                	test   %al,%al
   1146d:	75 d5                	jne    11444 <kernel_strcpy+0x11>
    *dest = '\0';
   1146f:	8b 45 08             	mov    0x8(%ebp),%eax
   11472:	c6 00 00             	movb   $0x0,(%eax)
   11475:	eb 01                	jmp    11478 <kernel_strcpy+0x45>
        return;
   11477:	90                   	nop
}
   11478:	5d                   	pop    %ebp
   11479:	c3                   	ret

0001147a <kernel_strncpy>:
{
   1147a:	55                   	push   %ebp
   1147b:	89 e5                	mov    %esp,%ebp
   1147d:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11480:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11484:	74 61                	je     114e7 <kernel_strncpy+0x6d>
   11486:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1148a:	74 5b                	je     114e7 <kernel_strncpy+0x6d>
   1148c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11490:	74 55                	je     114e7 <kernel_strncpy+0x6d>
    char *d = dest;
   11492:	8b 45 08             	mov    0x8(%ebp),%eax
   11495:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   11498:	8b 45 0c             	mov    0xc(%ebp),%eax
   1149b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   1149e:	eb 17                	jmp    114b7 <kernel_strncpy+0x3d>
        *d++ = *s++;
   114a0:	8b 55 f8             	mov    -0x8(%ebp),%edx
   114a3:	8d 42 01             	lea    0x1(%edx),%eax
   114a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
   114a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114ac:	8d 48 01             	lea    0x1(%eax),%ecx
   114af:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   114b2:	0f b6 12             	movzbl (%edx),%edx
   114b5:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   114b7:	8b 45 10             	mov    0x10(%ebp),%eax
   114ba:	8d 50 ff             	lea    -0x1(%eax),%edx
   114bd:	89 55 10             	mov    %edx,0x10(%ebp)
   114c0:	85 c0                	test   %eax,%eax
   114c2:	7e 0a                	jle    114ce <kernel_strncpy+0x54>
   114c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114c7:	0f b6 00             	movzbl (%eax),%eax
   114ca:	84 c0                	test   %al,%al
   114cc:	75 d2                	jne    114a0 <kernel_strncpy+0x26>
    if (size == 0)
   114ce:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   114d2:	75 0b                	jne    114df <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   114d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114d7:	83 e8 01             	sub    $0x1,%eax
   114da:	c6 00 00             	movb   $0x0,(%eax)
   114dd:	eb 09                	jmp    114e8 <kernel_strncpy+0x6e>
        *d = '\0';
   114df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   114e2:	c6 00 00             	movb   $0x0,(%eax)
   114e5:	eb 01                	jmp    114e8 <kernel_strncpy+0x6e>
        return;
   114e7:	90                   	nop
}
   114e8:	c9                   	leave
   114e9:	c3                   	ret

000114ea <kernel_strncmp>:
{
   114ea:	55                   	push   %ebp
   114eb:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   114ed:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   114f1:	74 0c                	je     114ff <kernel_strncmp+0x15>
   114f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   114f7:	74 06                	je     114ff <kernel_strncmp+0x15>
   114f9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   114fd:	75 0f                	jne    1150e <kernel_strncmp+0x24>
        return -1;
   114ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11504:	eb 62                	jmp    11568 <kernel_strncmp+0x7e>
        s1++;
   11506:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   1150a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   1150e:	8b 45 08             	mov    0x8(%ebp),%eax
   11511:	0f b6 00             	movzbl (%eax),%eax
   11514:	84 c0                	test   %al,%al
   11516:	74 20                	je     11538 <kernel_strncmp+0x4e>
   11518:	8b 45 0c             	mov    0xc(%ebp),%eax
   1151b:	0f b6 00             	movzbl (%eax),%eax
   1151e:	84 c0                	test   %al,%al
   11520:	74 16                	je     11538 <kernel_strncmp+0x4e>
   11522:	8b 45 08             	mov    0x8(%ebp),%eax
   11525:	0f b6 10             	movzbl (%eax),%edx
   11528:	8b 45 0c             	mov    0xc(%ebp),%eax
   1152b:	0f b6 00             	movzbl (%eax),%eax
   1152e:	38 c2                	cmp    %al,%dl
   11530:	75 06                	jne    11538 <kernel_strncmp+0x4e>
   11532:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11536:	75 ce                	jne    11506 <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11538:	8b 45 08             	mov    0x8(%ebp),%eax
   1153b:	0f b6 00             	movzbl (%eax),%eax
   1153e:	84 c0                	test   %al,%al
   11540:	74 21                	je     11563 <kernel_strncmp+0x79>
   11542:	8b 45 0c             	mov    0xc(%ebp),%eax
   11545:	0f b6 00             	movzbl (%eax),%eax
   11548:	84 c0                	test   %al,%al
   1154a:	74 17                	je     11563 <kernel_strncmp+0x79>
   1154c:	8b 45 08             	mov    0x8(%ebp),%eax
   1154f:	0f b6 10             	movzbl (%eax),%edx
   11552:	8b 45 0c             	mov    0xc(%ebp),%eax
   11555:	0f b6 00             	movzbl (%eax),%eax
   11558:	38 c2                	cmp    %al,%dl
   1155a:	74 07                	je     11563 <kernel_strncmp+0x79>
   1155c:	b8 01 00 00 00       	mov    $0x1,%eax
   11561:	eb 05                	jmp    11568 <kernel_strncmp+0x7e>
   11563:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11568:	5d                   	pop    %ebp
   11569:	c3                   	ret

0001156a <kernel_strlen>:
{
   1156a:	55                   	push   %ebp
   1156b:	89 e5                	mov    %esp,%ebp
   1156d:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   11570:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11574:	75 07                	jne    1157d <kernel_strlen+0x13>
        return 0;
   11576:	b8 00 00 00 00       	mov    $0x0,%eax
   1157b:	eb 26                	jmp    115a3 <kernel_strlen+0x39>
    const char *c = str;
   1157d:	8b 45 08             	mov    0x8(%ebp),%eax
   11580:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11583:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   1158a:	eb 04                	jmp    11590 <kernel_strlen+0x26>
        len++;
   1158c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   11590:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11593:	8d 50 01             	lea    0x1(%eax),%edx
   11596:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11599:	0f b6 00             	movzbl (%eax),%eax
   1159c:	84 c0                	test   %al,%al
   1159e:	75 ec                	jne    1158c <kernel_strlen+0x22>
    return len;
   115a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   115a3:	c9                   	leave
   115a4:	c3                   	ret

000115a5 <kernel_memcpy>:
{
   115a5:	55                   	push   %ebp
   115a6:	89 e5                	mov    %esp,%ebp
   115a8:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   115ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   115af:	74 40                	je     115f1 <kernel_memcpy+0x4c>
   115b1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   115b5:	74 3a                	je     115f1 <kernel_memcpy+0x4c>
   115b7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   115bb:	74 34                	je     115f1 <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   115bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   115c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   115c3:	8b 45 08             	mov    0x8(%ebp),%eax
   115c6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   115c9:	eb 17                	jmp    115e2 <kernel_memcpy+0x3d>
        *d++ = *s++;
   115cb:	8b 55 fc             	mov    -0x4(%ebp),%edx
   115ce:	8d 42 01             	lea    0x1(%edx),%eax
   115d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
   115d4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115d7:	8d 48 01             	lea    0x1(%eax),%ecx
   115da:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   115dd:	0f b6 12             	movzbl (%edx),%edx
   115e0:	88 10                	mov    %dl,(%eax)
    while (size--)
   115e2:	8b 45 10             	mov    0x10(%ebp),%eax
   115e5:	8d 50 ff             	lea    -0x1(%eax),%edx
   115e8:	89 55 10             	mov    %edx,0x10(%ebp)
   115eb:	85 c0                	test   %eax,%eax
   115ed:	75 dc                	jne    115cb <kernel_memcpy+0x26>
   115ef:	eb 01                	jmp    115f2 <kernel_memcpy+0x4d>
        return;
   115f1:	90                   	nop
}
   115f2:	c9                   	leave
   115f3:	c3                   	ret

000115f4 <kernel_memset>:
{
   115f4:	55                   	push   %ebp
   115f5:	89 e5                	mov    %esp,%ebp
   115f7:	83 ec 14             	sub    $0x14,%esp
   115fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   115fd:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   11600:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11604:	74 2c                	je     11632 <kernel_memset+0x3e>
   11606:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1160a:	74 26                	je     11632 <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   1160c:	8b 45 08             	mov    0x8(%ebp),%eax
   1160f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   11612:	eb 0f                	jmp    11623 <kernel_memset+0x2f>
        *d++ = v;
   11614:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11617:	8d 50 01             	lea    0x1(%eax),%edx
   1161a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1161d:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11621:	88 10                	mov    %dl,(%eax)
    while (size--)
   11623:	8b 45 10             	mov    0x10(%ebp),%eax
   11626:	8d 50 ff             	lea    -0x1(%eax),%edx
   11629:	89 55 10             	mov    %edx,0x10(%ebp)
   1162c:	85 c0                	test   %eax,%eax
   1162e:	75 e4                	jne    11614 <kernel_memset+0x20>
   11630:	eb 01                	jmp    11633 <kernel_memset+0x3f>
        return;
   11632:	90                   	nop
}
   11633:	c9                   	leave
   11634:	c3                   	ret

00011635 <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   11635:	55                   	push   %ebp
   11636:	89 e5                	mov    %esp,%ebp
   11638:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   1163b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1163f:	74 06                	je     11647 <kernel_memcmp+0x12>
   11641:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11645:	75 07                	jne    1164e <kernel_memcmp+0x19>
    {
        return 1;
   11647:	b8 01 00 00 00       	mov    $0x1,%eax
   1164c:	eb 43                	jmp    11691 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   1164e:	8b 45 08             	mov    0x8(%ebp),%eax
   11651:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   11654:	8b 45 0c             	mov    0xc(%ebp),%eax
   11657:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   1165a:	eb 23                	jmp    1167f <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   1165c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1165f:	8d 50 01             	lea    0x1(%eax),%edx
   11662:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11665:	0f b6 08             	movzbl (%eax),%ecx
   11668:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1166b:	8d 50 01             	lea    0x1(%eax),%edx
   1166e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11671:	0f b6 00             	movzbl (%eax),%eax
   11674:	38 c1                	cmp    %al,%cl
   11676:	74 07                	je     1167f <kernel_memcmp+0x4a>
        {
            return 1;
   11678:	b8 01 00 00 00       	mov    $0x1,%eax
   1167d:	eb 12                	jmp    11691 <kernel_memcmp+0x5c>
    while (size--)
   1167f:	8b 45 10             	mov    0x10(%ebp),%eax
   11682:	8d 50 ff             	lea    -0x1(%eax),%edx
   11685:	89 55 10             	mov    %edx,0x10(%ebp)
   11688:	85 c0                	test   %eax,%eax
   1168a:	75 d0                	jne    1165c <kernel_memcmp+0x27>
        }
    }
    return 0;
   1168c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11691:	c9                   	leave
   11692:	c3                   	ret

00011693 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   11693:	55                   	push   %ebp
   11694:	89 e5                	mov    %esp,%ebp
   11696:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   11699:	8d 45 10             	lea    0x10(%ebp),%eax
   1169c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   1169f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116a2:	83 ec 04             	sub    $0x4,%esp
   116a5:	50                   	push   %eax
   116a6:	ff 75 0c             	push   0xc(%ebp)
   116a9:	ff 75 08             	push   0x8(%ebp)
   116ac:	e8 dd 00 00 00       	call   1178e <kernel_vsprintf>
   116b1:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   116b4:	90                   	nop
   116b5:	c9                   	leave
   116b6:	c3                   	ret

000116b7 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   116b7:	55                   	push   %ebp
   116b8:	89 e5                	mov    %esp,%ebp
   116ba:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   116bd:	8b 45 08             	mov    0x8(%ebp),%eax
   116c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   116c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   116c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   116c9:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   116cd:	74 1d                	je     116ec <kernel_itoa+0x35>
   116cf:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   116d3:	74 17                	je     116ec <kernel_itoa+0x35>
   116d5:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   116d9:	74 11                	je     116ec <kernel_itoa+0x35>
   116db:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   116df:	74 0b                	je     116ec <kernel_itoa+0x35>
    {
        *p = '\0';
   116e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116e4:	c6 00 00             	movb   $0x0,(%eax)
        return;
   116e7:	e9 a0 00 00 00       	jmp    1178c <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   116ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   116f0:	79 12                	jns    11704 <kernel_itoa+0x4d>
   116f2:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   116f6:	75 0c                	jne    11704 <kernel_itoa+0x4d>
    {
        *p++ = '-';
   116f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116fb:	8d 50 01             	lea    0x1(%eax),%edx
   116fe:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11701:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   11704:	8b 0d 08 20 01 00    	mov    0x12008,%ecx
   1170a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1170d:	99                   	cltd
   1170e:	f7 7d 10             	idivl  0x10(%ebp)
   11711:	89 d0                	mov    %edx,%eax
   11713:	83 c0 0f             	add    $0xf,%eax
   11716:	01 c8                	add    %ecx,%eax
   11718:	0f b6 00             	movzbl (%eax),%eax
   1171b:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   1171e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11721:	8d 50 01             	lea    0x1(%eax),%edx
   11724:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11727:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1172b:	88 10                	mov    %dl,(%eax)
        num /= base;
   1172d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11730:	99                   	cltd
   11731:	f7 7d 10             	idivl  0x10(%ebp)
   11734:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   11737:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1173b:	75 c7                	jne    11704 <kernel_itoa+0x4d>
    *p-- = '\0';
   1173d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11740:	8d 50 ff             	lea    -0x1(%eax),%edx
   11743:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11746:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   11749:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1174d:	7f 08                	jg     11757 <kernel_itoa+0xa0>
   1174f:	8b 45 08             	mov    0x8(%ebp),%eax
   11752:	83 c0 01             	add    $0x1,%eax
   11755:	eb 03                	jmp    1175a <kernel_itoa+0xa3>
   11757:	8b 45 08             	mov    0x8(%ebp),%eax
   1175a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   1175d:	eb 25                	jmp    11784 <kernel_itoa+0xcd>
    {
        char ch = *start;
   1175f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11762:	0f b6 00             	movzbl (%eax),%eax
   11765:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   11768:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1176b:	0f b6 10             	movzbl (%eax),%edx
   1176e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11771:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11773:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11776:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1177a:	88 10                	mov    %dl,(%eax)

        p--;
   1177c:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11780:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   11784:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11787:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   1178a:	72 d3                	jb     1175f <kernel_itoa+0xa8>
    }
}
   1178c:	c9                   	leave
   1178d:	c3                   	ret

0001178e <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   1178e:	55                   	push   %ebp
   1178f:	89 e5                	mov    %esp,%ebp
   11791:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   11794:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   1179b:	8b 45 08             	mov    0x8(%ebp),%eax
   1179e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   117a1:	e9 11 01 00 00       	jmp    118b7 <kernel_vsprintf+0x129>
    {
        switch (state)
   117a6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   117aa:	74 0b                	je     117b7 <kernel_vsprintf+0x29>
   117ac:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   117b0:	74 2b                	je     117dd <kernel_vsprintf+0x4f>
   117b2:	e9 00 01 00 00       	jmp    118b7 <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   117b7:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   117bb:	75 0c                	jne    117c9 <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   117bd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   117c4:	e9 ee 00 00 00       	jmp    118b7 <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   117c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   117cc:	8d 50 01             	lea    0x1(%eax),%edx
   117cf:	89 55 f8             	mov    %edx,-0x8(%ebp)
   117d2:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   117d6:	88 10                	mov    %dl,(%eax)
            }
            break;
   117d8:	e9 da 00 00 00       	jmp    118b7 <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   117dd:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   117e1:	75 31                	jne    11814 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   117e3:	8b 45 10             	mov    0x10(%ebp),%eax
   117e6:	8d 50 04             	lea    0x4(%eax),%edx
   117e9:	89 55 10             	mov    %edx,0x10(%ebp)
   117ec:	8b 00                	mov    (%eax),%eax
   117ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   117f1:	6a 0a                	push   $0xa
   117f3:	ff 75 e4             	push   -0x1c(%ebp)
   117f6:	ff 75 f8             	push   -0x8(%ebp)
   117f9:	e8 b9 fe ff ff       	call   116b7 <kernel_itoa>
   117fe:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11801:	ff 75 f8             	push   -0x8(%ebp)
   11804:	e8 61 fd ff ff       	call   1156a <kernel_strlen>
   11809:	83 c4 04             	add    $0x4,%esp
   1180c:	01 45 f8             	add    %eax,-0x8(%ebp)
   1180f:	e9 9b 00 00 00       	jmp    118af <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   11814:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11818:	75 2e                	jne    11848 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   1181a:	8b 45 10             	mov    0x10(%ebp),%eax
   1181d:	8d 50 04             	lea    0x4(%eax),%edx
   11820:	89 55 10             	mov    %edx,0x10(%ebp)
   11823:	8b 00                	mov    (%eax),%eax
   11825:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   11828:	6a 10                	push   $0x10
   1182a:	ff 75 e8             	push   -0x18(%ebp)
   1182d:	ff 75 f8             	push   -0x8(%ebp)
   11830:	e8 82 fe ff ff       	call   116b7 <kernel_itoa>
   11835:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11838:	ff 75 f8             	push   -0x8(%ebp)
   1183b:	e8 2a fd ff ff       	call   1156a <kernel_strlen>
   11840:	83 c4 04             	add    $0x4,%esp
   11843:	01 45 f8             	add    %eax,-0x8(%ebp)
   11846:	eb 67                	jmp    118af <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   11848:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1184c:	75 19                	jne    11867 <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   1184e:	8b 45 10             	mov    0x10(%ebp),%eax
   11851:	8d 50 04             	lea    0x4(%eax),%edx
   11854:	89 55 10             	mov    %edx,0x10(%ebp)
   11857:	8b 00                	mov    (%eax),%eax
   11859:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   1185c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1185f:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11863:	88 10                	mov    %dl,(%eax)
   11865:	eb 48                	jmp    118af <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   11867:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1186b:	75 42                	jne    118af <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   1186d:	8b 45 10             	mov    0x10(%ebp),%eax
   11870:	8d 50 04             	lea    0x4(%eax),%edx
   11873:	89 55 10             	mov    %edx,0x10(%ebp)
   11876:	8b 00                	mov    (%eax),%eax
   11878:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   1187b:	ff 75 f4             	push   -0xc(%ebp)
   1187e:	e8 e7 fc ff ff       	call   1156a <kernel_strlen>
   11883:	83 c4 04             	add    $0x4,%esp
   11886:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   11889:	eb 17                	jmp    118a2 <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   1188b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1188e:	8d 42 01             	lea    0x1(%edx),%eax
   11891:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11894:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11897:	8d 48 01             	lea    0x1(%eax),%ecx
   1189a:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1189d:	0f b6 12             	movzbl (%edx),%edx
   118a0:	88 10                	mov    %dl,(%eax)
                while (len--)
   118a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118a5:	8d 50 ff             	lea    -0x1(%eax),%edx
   118a8:	89 55 f0             	mov    %edx,-0x10(%ebp)
   118ab:	85 c0                	test   %eax,%eax
   118ad:	75 dc                	jne    1188b <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   118af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   118b6:	90                   	nop
    while ((ch = *fmt++))
   118b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   118ba:	8d 50 01             	lea    0x1(%eax),%edx
   118bd:	89 55 0c             	mov    %edx,0xc(%ebp)
   118c0:	0f b6 00             	movzbl (%eax),%eax
   118c3:	88 45 ef             	mov    %al,-0x11(%ebp)
   118c6:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   118ca:	0f 85 d6 fe ff ff    	jne    117a6 <kernel_vsprintf+0x18>
        }
    }
}
   118d0:	90                   	nop
   118d1:	90                   	nop
   118d2:	c9                   	leave
   118d3:	c3                   	ret

000118d4 <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   118d4:	55                   	push   %ebp
   118d5:	89 e5                	mov    %esp,%ebp
   118d7:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   118da:	83 ec 08             	sub    $0x8,%esp
   118dd:	ff 75 14             	push   0x14(%ebp)
   118e0:	68 bc 1f 01 00       	push   $0x11fbc
   118e5:	e8 c6 02 00 00       	call   11bb0 <log_prinf>
   118ea:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   118ed:	ff 75 10             	push   0x10(%ebp)
   118f0:	ff 75 0c             	push   0xc(%ebp)
   118f3:	ff 75 08             	push   0x8(%ebp)
   118f6:	68 ce 1f 01 00       	push   $0x11fce
   118fb:	e8 b0 02 00 00       	call   11bb0 <log_prinf>
   11900:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   11903:	e8 24 fb ff ff       	call   1142c <hlt>
   11908:	eb f9                	jmp    11903 <pannic+0x2f>

0001190a <list_is_empty>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
    // 表项为空，返回空
   1190a:	55                   	push   %ebp
   1190b:	89 e5                	mov    %esp,%ebp
    if (list_is_empty(list)) {
   1190d:	8b 45 08             	mov    0x8(%ebp),%eax
   11910:	8b 40 08             	mov    0x8(%eax),%eax
   11913:	85 c0                	test   %eax,%eax
   11915:	0f 94 c0             	sete   %al
   11918:	0f b6 c0             	movzbl %al,%eax
        return (list_node_t*)0;
   1191b:	5d                   	pop    %ebp
   1191c:	c3                   	ret

0001191d <list_init>:
void list_init(list_t *list) {
   1191d:	55                   	push   %ebp
   1191e:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   11920:	8b 45 08             	mov    0x8(%ebp),%eax
   11923:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1192a:	8b 45 08             	mov    0x8(%ebp),%eax
   1192d:	8b 50 04             	mov    0x4(%eax),%edx
   11930:	8b 45 08             	mov    0x8(%ebp),%eax
   11933:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11935:	8b 45 08             	mov    0x8(%ebp),%eax
   11938:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1193f:	90                   	nop
   11940:	5d                   	pop    %ebp
   11941:	c3                   	ret

00011942 <list_insert_first>:
void list_insert_first(list_t *list, list_node_t *node) {
   11942:	55                   	push   %ebp
   11943:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   11945:	8b 45 08             	mov    0x8(%ebp),%eax
   11948:	8b 10                	mov    (%eax),%edx
   1194a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1194d:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   11950:	8b 45 0c             	mov    0xc(%ebp),%eax
   11953:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if (list_is_empty(list)) {
   11959:	ff 75 08             	push   0x8(%ebp)
   1195c:	e8 a9 ff ff ff       	call   1190a <list_is_empty>
   11961:	83 c4 04             	add    $0x4,%esp
   11964:	85 c0                	test   %eax,%eax
   11966:	74 15                	je     1197d <list_insert_first+0x3b>
        list->last = list->first = node;
   11968:	8b 45 08             	mov    0x8(%ebp),%eax
   1196b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1196e:	89 10                	mov    %edx,(%eax)
   11970:	8b 45 08             	mov    0x8(%ebp),%eax
   11973:	8b 10                	mov    (%eax),%edx
   11975:	8b 45 08             	mov    0x8(%ebp),%eax
   11978:	89 50 04             	mov    %edx,0x4(%eax)
   1197b:	eb 12                	jmp    1198f <list_insert_first+0x4d>
        list->first->pre = node;
   1197d:	8b 45 08             	mov    0x8(%ebp),%eax
   11980:	8b 00                	mov    (%eax),%eax
   11982:	8b 55 0c             	mov    0xc(%ebp),%edx
   11985:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11987:	8b 45 08             	mov    0x8(%ebp),%eax
   1198a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1198d:	89 10                	mov    %edx,(%eax)
    list->count++;
   1198f:	8b 45 08             	mov    0x8(%ebp),%eax
   11992:	8b 40 08             	mov    0x8(%eax),%eax
   11995:	8d 50 01             	lea    0x1(%eax),%edx
   11998:	8b 45 08             	mov    0x8(%ebp),%eax
   1199b:	89 50 08             	mov    %edx,0x8(%eax)
}
   1199e:	90                   	nop
   1199f:	c9                   	leave
   119a0:	c3                   	ret

000119a1 <list_insert_last>:
void list_insert_last(list_t *list, list_node_t *node) {
   119a1:	55                   	push   %ebp
   119a2:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   119a4:	8b 45 08             	mov    0x8(%ebp),%eax
   119a7:	8b 50 04             	mov    0x4(%eax),%edx
   119aa:	8b 45 0c             	mov    0xc(%ebp),%eax
   119ad:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   119af:	8b 45 0c             	mov    0xc(%ebp),%eax
   119b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if (list_is_empty(list)) {
   119b9:	ff 75 08             	push   0x8(%ebp)
   119bc:	e8 49 ff ff ff       	call   1190a <list_is_empty>
   119c1:	83 c4 04             	add    $0x4,%esp
   119c4:	85 c0                	test   %eax,%eax
   119c6:	74 16                	je     119de <list_insert_last+0x3d>
        list->first = list->last = node;
   119c8:	8b 45 08             	mov    0x8(%ebp),%eax
   119cb:	8b 55 0c             	mov    0xc(%ebp),%edx
   119ce:	89 50 04             	mov    %edx,0x4(%eax)
   119d1:	8b 45 08             	mov    0x8(%ebp),%eax
   119d4:	8b 50 04             	mov    0x4(%eax),%edx
   119d7:	8b 45 08             	mov    0x8(%ebp),%eax
   119da:	89 10                	mov    %edx,(%eax)
   119dc:	eb 15                	jmp    119f3 <list_insert_last+0x52>
        list->last->next = node;
   119de:	8b 45 08             	mov    0x8(%ebp),%eax
   119e1:	8b 40 04             	mov    0x4(%eax),%eax
   119e4:	8b 55 0c             	mov    0xc(%ebp),%edx
   119e7:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   119ea:	8b 45 08             	mov    0x8(%ebp),%eax
   119ed:	8b 55 0c             	mov    0xc(%ebp),%edx
   119f0:	89 50 04             	mov    %edx,0x4(%eax)
    list->count++;
   119f3:	8b 45 08             	mov    0x8(%ebp),%eax
   119f6:	8b 40 08             	mov    0x8(%eax),%eax
   119f9:	8d 50 01             	lea    0x1(%eax),%edx
   119fc:	8b 45 08             	mov    0x8(%ebp),%eax
   119ff:	89 50 08             	mov    %edx,0x8(%eax)
}
   11a02:	90                   	nop
   11a03:	c9                   	leave
   11a04:	c3                   	ret

00011a05 <list_remove_first>:
list_node_t* list_remove_first(list_t *list) {
   11a05:	55                   	push   %ebp
   11a06:	89 e5                	mov    %esp,%ebp
   11a08:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   11a0b:	ff 75 08             	push   0x8(%ebp)
   11a0e:	e8 f7 fe ff ff       	call   1190a <list_is_empty>
   11a13:	83 c4 04             	add    $0x4,%esp
   11a16:	85 c0                	test   %eax,%eax
   11a18:	74 07                	je     11a21 <list_remove_first+0x1c>
        return (list_node_t*)0;
   11a1a:	b8 00 00 00 00       	mov    $0x0,%eax
   11a1f:	eb 5a                	jmp    11a7b <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   11a21:	8b 45 08             	mov    0x8(%ebp),%eax
   11a24:	8b 00                	mov    (%eax),%eax
   11a26:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   11a29:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a2c:	8b 50 04             	mov    0x4(%eax),%edx
   11a2f:	8b 45 08             	mov    0x8(%ebp),%eax
   11a32:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   11a34:	8b 45 08             	mov    0x8(%ebp),%eax
   11a37:	8b 00                	mov    (%eax),%eax
   11a39:	85 c0                	test   %eax,%eax
   11a3b:	75 0c                	jne    11a49 <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   11a3d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a40:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11a47:	eb 0c                	jmp    11a55 <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   11a49:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a4c:	8b 40 04             	mov    0x4(%eax),%eax
   11a4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   11a55:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a58:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   11a5e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a61:	8b 10                	mov    (%eax),%edx
   11a63:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a66:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   11a69:	8b 45 08             	mov    0x8(%ebp),%eax
   11a6c:	8b 40 08             	mov    0x8(%eax),%eax
   11a6f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11a72:	8b 45 08             	mov    0x8(%ebp),%eax
   11a75:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   11a78:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11a7b:	c9                   	leave
   11a7c:	c3                   	ret

00011a7d <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   11a7d:	55                   	push   %ebp
   11a7e:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   11a80:	8b 45 08             	mov    0x8(%ebp),%eax
   11a83:	8b 00                	mov    (%eax),%eax
   11a85:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11a88:	75 0b                	jne    11a95 <list_remove+0x18>
        list->first = remove_node->next;
   11a8a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a8d:	8b 50 04             	mov    0x4(%eax),%edx
   11a90:	8b 45 08             	mov    0x8(%ebp),%eax
   11a93:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   11a95:	8b 45 08             	mov    0x8(%ebp),%eax
   11a98:	8b 40 04             	mov    0x4(%eax),%eax
   11a9b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11a9e:	75 0b                	jne    11aab <list_remove+0x2e>
        list->last = remove_node->pre;
   11aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11aa3:	8b 10                	mov    (%eax),%edx
   11aa5:	8b 45 08             	mov    0x8(%ebp),%eax
   11aa8:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   11aab:	8b 45 0c             	mov    0xc(%ebp),%eax
   11aae:	8b 00                	mov    (%eax),%eax
   11ab0:	85 c0                	test   %eax,%eax
   11ab2:	74 0e                	je     11ac2 <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   11ab4:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ab7:	8b 00                	mov    (%eax),%eax
   11ab9:	8b 55 0c             	mov    0xc(%ebp),%edx
   11abc:	8b 52 04             	mov    0x4(%edx),%edx
   11abf:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   11ac2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ac5:	8b 40 04             	mov    0x4(%eax),%eax
   11ac8:	85 c0                	test   %eax,%eax
   11aca:	74 0d                	je     11ad9 <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   11acc:	8b 45 0c             	mov    0xc(%ebp),%eax
   11acf:	8b 40 04             	mov    0x4(%eax),%eax
   11ad2:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ad5:	8b 12                	mov    (%edx),%edx
   11ad7:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   11ad9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11adc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ae3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ae6:	8b 50 04             	mov    0x4(%eax),%edx
   11ae9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11aec:	89 10                	mov    %edx,(%eax)
    --list->count;
   11aee:	8b 45 08             	mov    0x8(%ebp),%eax
   11af1:	8b 40 08             	mov    0x8(%eax),%eax
   11af4:	8d 50 ff             	lea    -0x1(%eax),%edx
   11af7:	8b 45 08             	mov    0x8(%ebp),%eax
   11afa:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   11afd:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11b00:	5d                   	pop    %ebp
   11b01:	c3                   	ret

00011b02 <inb>:
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x80);
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
   11b02:	55                   	push   %ebp
   11b03:	89 e5                	mov    %esp,%ebp
   11b05:	83 ec 14             	sub    $0x14,%esp
   11b08:	8b 45 08             	mov    0x8(%ebp),%eax
   11b0b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    outb(COM1_PORT + 4, 0x0F);
}
   11b0f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11b13:	89 c2                	mov    %eax,%edx
   11b15:	ec                   	in     (%dx),%al
   11b16:	88 45 ff             	mov    %al,-0x1(%ebp)

void log_prinf(const char *fmt, ...)
{
   11b19:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    char str_buf[128];
   11b1d:	c9                   	leave
   11b1e:	c3                   	ret

00011b1f <outb>:
    va_end(args);

    irq_state_t state = irq_enter_protection();
    const char *p = str_buf;
    while (*p != '\0')
    {
   11b1f:	55                   	push   %ebp
   11b20:	89 e5                	mov    %esp,%ebp
   11b22:	83 ec 08             	sub    $0x8,%esp
   11b25:	8b 55 08             	mov    0x8(%ebp),%edx
   11b28:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b2b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11b2f:	88 45 f8             	mov    %al,-0x8(%ebp)
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   11b32:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11b36:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11b3a:	ee                   	out    %al,(%dx)
            ;
   11b3b:	90                   	nop
   11b3c:	c9                   	leave
   11b3d:	c3                   	ret

00011b3e <init_log>:
{
   11b3e:	55                   	push   %ebp
   11b3f:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11b41:	6a 00                	push   $0x0
   11b43:	68 f9 03 00 00       	push   $0x3f9
   11b48:	e8 d2 ff ff ff       	call   11b1f <outb>
   11b4d:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11b50:	68 80 00 00 00       	push   $0x80
   11b55:	68 fb 03 00 00       	push   $0x3fb
   11b5a:	e8 c0 ff ff ff       	call   11b1f <outb>
   11b5f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11b62:	6a 03                	push   $0x3
   11b64:	68 f8 03 00 00       	push   $0x3f8
   11b69:	e8 b1 ff ff ff       	call   11b1f <outb>
   11b6e:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11b71:	6a 00                	push   $0x0
   11b73:	68 f9 03 00 00       	push   $0x3f9
   11b78:	e8 a2 ff ff ff       	call   11b1f <outb>
   11b7d:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11b80:	6a 03                	push   $0x3
   11b82:	68 fb 03 00 00       	push   $0x3fb
   11b87:	e8 93 ff ff ff       	call   11b1f <outb>
   11b8c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x07);
   11b8f:	6a 07                	push   $0x7
   11b91:	68 fa 03 00 00       	push   $0x3fa
   11b96:	e8 84 ff ff ff       	call   11b1f <outb>
   11b9b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   11b9e:	6a 0f                	push   $0xf
   11ba0:	68 fc 03 00 00       	push   $0x3fc
   11ba5:	e8 75 ff ff ff       	call   11b1f <outb>
   11baa:	83 c4 08             	add    $0x8,%esp
}
   11bad:	90                   	nop
   11bae:	c9                   	leave
   11baf:	c3                   	ret

00011bb0 <log_prinf>:
{
   11bb0:	55                   	push   %ebp
   11bb1:	89 e5                	mov    %esp,%ebp
   11bb3:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   11bb9:	83 ec 04             	sub    $0x4,%esp
   11bbc:	68 80 00 00 00       	push   $0x80
   11bc1:	6a 00                	push   $0x0
   11bc3:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11bc9:	50                   	push   %eax
   11bca:	e8 25 fa ff ff       	call   115f4 <kernel_memset>
   11bcf:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   11bd2:	8d 45 0c             	lea    0xc(%ebp),%eax
   11bd5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   11bdb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   11be1:	83 ec 04             	sub    $0x4,%esp
   11be4:	50                   	push   %eax
   11be5:	ff 75 08             	push   0x8(%ebp)
   11be8:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11bee:	50                   	push   %eax
   11bef:	e8 9a fb ff ff       	call   1178e <kernel_vsprintf>
   11bf4:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   11bf7:	e8 4f f6 ff ff       	call   1124b <irq_enter_protection>
   11bfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char *p = str_buf;
   11bff:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11c05:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   11c08:	eb 3b                	jmp    11c45 <log_prinf+0x95>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   11c0a:	90                   	nop
   11c0b:	83 ec 0c             	sub    $0xc,%esp
   11c0e:	68 fd 03 00 00       	push   $0x3fd
   11c13:	e8 ea fe ff ff       	call   11b02 <inb>
   11c18:	83 c4 10             	add    $0x10,%esp
   11c1b:	0f b6 c0             	movzbl %al,%eax
   11c1e:	83 e0 40             	and    $0x40,%eax
   11c21:	85 c0                	test   %eax,%eax
   11c23:	74 e6                	je     11c0b <log_prinf+0x5b>
        outb(COM1_PORT, *p++);
   11c25:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c28:	8d 50 01             	lea    0x1(%eax),%edx
   11c2b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11c2e:	0f b6 00             	movzbl (%eax),%eax
   11c31:	0f b6 c0             	movzbl %al,%eax
   11c34:	83 ec 08             	sub    $0x8,%esp
   11c37:	50                   	push   %eax
   11c38:	68 f8 03 00 00       	push   $0x3f8
   11c3d:	e8 dd fe ff ff       	call   11b1f <outb>
   11c42:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   11c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11c48:	0f b6 00             	movzbl (%eax),%eax
   11c4b:	84 c0                	test   %al,%al
   11c4d:	75 bb                	jne    11c0a <log_prinf+0x5a>
    }

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   11c4f:	83 ec 08             	sub    $0x8,%esp
   11c52:	6a 0d                	push   $0xd
   11c54:	68 f8 03 00 00       	push   $0x3f8
   11c59:	e8 c1 fe ff ff       	call   11b1f <outb>
   11c5e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   11c61:	83 ec 08             	sub    $0x8,%esp
   11c64:	6a 0a                	push   $0xa
   11c66:	68 f8 03 00 00       	push   $0x3f8
   11c6b:	e8 af fe ff ff       	call   11b1f <outb>
   11c70:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11c73:	83 ec 0c             	sub    $0xc,%esp
   11c76:	ff 75 f0             	push   -0x10(%ebp)
   11c79:	e8 e5 f5 ff ff       	call   11263 <irq_leave_protection>
   11c7e:	83 c4 10             	add    $0x10,%esp
}
   11c81:	90                   	nop
   11c82:	c9                   	leave
   11c83:	c3                   	ret
