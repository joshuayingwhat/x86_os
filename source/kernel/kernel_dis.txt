
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001d10 memsz 0x00005aa0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001990  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000037c  00011990  00011990  00002990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011d0c  00011d0c  00002d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d80  00011d20  00011d20  00002d10  2**5
                  ALLOC
  4 .debug_line   00000cf2  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 000005d5  00000000  00000000  00003a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000021ce  00000000  00000000  00003fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000c73  00000000  00000000  000061a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000120  00000000  00000000  00006e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000be5  00000000  00000000  00006f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  00007b1d  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000bb4  00000000  00000000  00007b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102bd l     F .text	0000001b list_node_init
000102d8 l     F .text	0000000b list_count
000102e3 l     F .text	0000000a list_first
000102ed l     F .text	00000017 write_tr
00011d20 l     O .bss	000000bc task_manager
00010304 l     F .text	00000101 tss_init
00011a10 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 cpu.c
00010651 l     F .text	00000028 lgdt
00010679 l     F .text	0000001a far_jump
00011de0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
0001082d l     F .text	0000001d inb
0001084a l     F .text	0000001f outb
00010869 l     F .text	00000007 cli
00010870 l     F .text	00000007 sti
00010877 l     F .text	00000028 lidt
0001089f l     F .text	00000007 hlt
000125e0 l     O .bss	00000400 idt_table
000108a6 l     F .text	000000d9 dump_core_regs
0001097f l     F .text	0000003e do_default_handler
00010bed l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010fb6 l     F .text	0000001f outb
000129e0 l     O .bss	00000004 sys_tick
00010ff8 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00012a00 l     O .bss	00001000 init_task_stack
00013a00 l     O .bss	000000a0 init_task
00000000 l    df *ABS*	00000000 klib.c
0001114e l     F .text	00000007 hlt
00011d0c l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 list.c
0001162c l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011824 l     F .text	0000001d inb
00011841 l     F .text	0000001f outb
000112c7 g     F .text	0000004f kernel_memcpy
0001058f g     F .text	0000000a task_current
00010f80 g     F .text	0000000b irq_enable_global
000116c3 g     F .text	00000064 list_insert_last
00010af1 g     F .text	0000001c do_handler_segment_not_present
00010546 g     F .text	00000029 task_set_ready
00011316 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010822 g     F .text	0000000b cpu_init
000110c0 g     F .text	0000008e init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00011155 g     F .text	00000047 kernel_strcpy
00010e63 g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
00010a49 g     F .text	0000001c do_handler_overflow
00010b7d g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010b29 g     F .text	0000001c do_handler_general_protection
000109d9 g     F .text	0000001c do_handler_divider
00010ab9 g     F .text	0000001c do_handler_double_fault
00011092 g     F .text	0000002e init_task_entry
00010b45 g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010f8b g     F .text	0000002b pic_send_eoi
0001053c g     F .text	0000000a task_first_task
00011860 g     F .text	00000072 init_log
000109bd g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00010bd1 g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
00013aa0 g     O .bss	00002000 stack
000100e5 g       .text	00000000 exception_handler_bound_range
00010a81 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010b61 g     F .text	0000001c do_handler_fpu_error
000104ff g     F .text	0000003d task_first_init
00010b99 g     F .text	0000001c do_handler_machine_check
000109f5 g     F .text	0000001c do_handler_Debug
00011664 g     F .text	0000005f list_insert_first
00010a11 g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
0001119c g     F .text	00000070 kernel_strncpy
00010f75 g     F .text	0000000b irq_disable_global
00010599 g     F .text	00000048 sys_sched_yield
00011070 g     F .text	00000022 kernel_init
00010000 g       .text	00000000 _start
000114b0 g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
00010ad5 g     F .text	0000001c do_handler_invalid_tss
00010e2e g     F .text	00000035 irq_install
000118d2 g     F .text	000000be log_prinf
00010716 g     F .text	0000006d init_gdt
00010eee g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00010a9d g     F .text	0000001c do_handler_device_unavailable
0001060c g     F .text	00000045 task_dispatch
0001080f g     F .text	00000013 switch_to_tss
000105e1 g     F .text	0000002b task_next_run
00011357 g     F .text	0000005e kernel_memcmp
0001163f g     F .text	00000025 list_init
0001002b g       .text	00000000 exception_handler_unknow
00010bb5 g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
0001056f g     F .text	00000020 task_set_block
000101f0 g       .text	00000000 exception_handler_fpu_error
000104ae g     F .text	0000001e task_switch_from_to
000107ca g     F .text	00000045 gdt_alloc_des
00010c80 g     F .text	000001ae irq_init
0001128c g     F .text	0000003b kernel_strlen
00010693 g     F .text	00000083 segment_desc_set
00010a65 g     F .text	0000001c do_handler_bound_range
00011727 g     F .text	00000078 list_remove_first
0001120c g     F .text	00000080 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
00011058 g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
000104cc g     F .text	00000033 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
000115f6 g     F .text	00000036 pannic
00010b0d g     F .text	0000001c do_handler_stack_segment_fault
00010a2d g     F .text	0000001c do_handler_breakpoint
00010405 g     F .text	000000a9 task_init
000113b5 g     F .text	00000024 kernel_sprintf
000113d9 g     F .text	000000d7 kernel_itoa
0001179f g     F .text	00000085 list_remove
00010783 g     F .text	00000047 gate_desc_set
00010fd5 g     F .text	00000023 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 64 10 00 00       	call   11070 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc a0 5a 01 00       	mov    $0x15aa0,%esp
    jmp init_main
   10026:	e9 95 10 00 00       	jmp    110c0 <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 81 09 00 00       	call   109bd <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 7e 09 00 00       	call   109d9 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 7b 09 00 00       	call   109f5 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 78 09 00 00       	call   10a11 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 75 09 00 00       	call   10a2d <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 72 09 00 00       	call   10a49 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 6f 09 00 00       	call   10a65 <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 6c 09 00 00       	call   10a81 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 69 09 00 00       	call   10a9d <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 68 09 00 00       	call   10ab9 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 67 09 00 00       	call   10ad5 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 66 09 00 00       	call   10af1 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 65 09 00 00       	call   10b0d <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 64 09 00 00       	call   10b29 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 63 09 00 00       	call   10b45 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 60 09 00 00       	call   10b61 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 5f 09 00 00       	call   10b7d <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 5c 09 00 00       	call   10b99 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 59 09 00 00       	call   10bb5 <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 56 09 00 00       	call   10bd1 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 3b 0d 00 00       	call   10fd5 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <simple_switch>:
    //simple_switch(&from,&to)
     .text
     .global simple_switch
simple_switch:
    //取出from
    mov 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    //取出to
    mov 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp

    ret
   102bc:	c3                   	ret

000102bd <list_node_init>:
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
                     SEG_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t));
   102bd:	55                   	push   %ebp
   102be:	89 e5                	mov    %esp,%ebp

   102c0:	8b 45 08             	mov    0x8(%ebp),%eax
   102c3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102ca:	8b 45 08             	mov    0x8(%ebp),%eax
   102cd:	8b 50 04             	mov    0x4(%eax),%edx
   102d0:	8b 45 08             	mov    0x8(%ebp),%eax
   102d3:	89 10                	mov    %edx,(%eax)
    task->tss.eip = entry;
   102d5:	90                   	nop
   102d6:	5d                   	pop    %ebp
   102d7:	c3                   	ret

000102d8 <list_count>:
}

task_t *task_first_task(void)
{
    return &task_manager.first_task;
}
   102d8:	55                   	push   %ebp
   102d9:	89 e5                	mov    %esp,%ebp

   102db:	8b 45 08             	mov    0x8(%ebp),%eax
   102de:	8b 40 08             	mov    0x8(%eax),%eax
void task_set_ready(task_t *task)
   102e1:	5d                   	pop    %ebp
   102e2:	c3                   	ret

000102e3 <list_first>:
    task->state = TASK_READY;
}
// 将任务从就绪队列中移除 此时任务的状态不确定 有可能是等待 有可能是睡眠因此不设置状态置
void task_set_block(task_t *task)
{
    list_remove(&task_manager.ready_list, &task->run_node);
   102e3:	55                   	push   %ebp
   102e4:	89 e5                	mov    %esp,%ebp
}
   102e6:	8b 45 08             	mov    0x8(%ebp),%eax
   102e9:	8b 00                	mov    (%eax),%eax

   102eb:	5d                   	pop    %ebp
   102ec:	c3                   	ret

000102ed <write_tr>:
{
    __asm__ __volatile__("hlt");
}

static inline void write_tr(uint16_t tss_sel)
{
   102ed:	55                   	push   %ebp
   102ee:	89 e5                	mov    %esp,%ebp
   102f0:	83 ec 04             	sub    $0x4,%esp
   102f3:	8b 45 08             	mov    0x8(%ebp),%eax
   102f6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_sel));
   102fa:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   102fe:	0f 00 d8             	ltr    %ax
}
   10301:	90                   	nop
   10302:	c9                   	leave
   10303:	c3                   	ret

00010304 <tss_init>:
{
   10304:	55                   	push   %ebp
   10305:	89 e5                	mov    %esp,%ebp
   10307:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_des();
   1030a:	e8 bb 04 00 00       	call   107ca <gdt_alloc_des>
   1030f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   10312:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10316:	79 1a                	jns    10332 <tss_init+0x2e>
        log_prinf("alloc tss failed");
   10318:	83 ec 0c             	sub    $0xc,%esp
   1031b:	68 90 19 01 00       	push   $0x11990
   10320:	e8 ad 15 00 00       	call   118d2 <log_prinf>
   10325:	83 c4 10             	add    $0x10,%esp
        return -1;
   10328:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1032d:	e9 d1 00 00 00       	jmp    10403 <tss_init+0xff>
    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	83 c0 34             	add    $0x34,%eax
   10338:	68 89 00 00 00       	push   $0x89
   1033d:	68 a0 00 00 00       	push   $0xa0
   10342:	50                   	push   %eax
   10343:	ff 75 f4             	push   -0xc(%ebp)
   10346:	e8 48 03 00 00       	call   10693 <segment_desc_set>
   1034b:	83 c4 10             	add    $0x10,%esp
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   1034e:	8b 45 08             	mov    0x8(%ebp),%eax
   10351:	83 c0 34             	add    $0x34,%eax
   10354:	83 ec 04             	sub    $0x4,%esp
   10357:	6a 68                	push   $0x68
   10359:	6a 00                	push   $0x0
   1035b:	50                   	push   %eax
   1035c:	e8 b5 0f 00 00       	call   11316 <kernel_memset>
   10361:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10364:	8b 45 08             	mov    0x8(%ebp),%eax
   10367:	8b 55 0c             	mov    0xc(%ebp),%edx
   1036a:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1036d:	8b 45 08             	mov    0x8(%ebp),%eax
   10370:	8b 55 10             	mov    0x10(%ebp),%edx
   10373:	89 50 38             	mov    %edx,0x38(%eax)
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	8b 50 38             	mov    0x38(%eax),%edx
   1037c:	8b 45 08             	mov    0x8(%ebp),%eax
   1037f:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10382:	8b 45 08             	mov    0x8(%ebp),%eax
   10385:	c7 40 3c 10 00 00 00 	movl   $0x10,0x3c(%eax)
   1038c:	8b 45 08             	mov    0x8(%ebp),%eax
   1038f:	8b 50 3c             	mov    0x3c(%eax),%edx
   10392:	8b 45 08             	mov    0x8(%ebp),%eax
   10395:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   1039b:	8b 45 08             	mov    0x8(%ebp),%eax
   1039e:	c7 80 90 00 00 00 10 	movl   $0x10,0x90(%eax)
   103a5:	00 00 00 
   103a8:	8b 45 08             	mov    0x8(%ebp),%eax
   103ab:	8b 90 90 00 00 00    	mov    0x90(%eax),%edx
   103b1:	8b 45 08             	mov    0x8(%ebp),%eax
   103b4:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
   103ba:	8b 45 08             	mov    0x8(%ebp),%eax
   103bd:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
   103c3:	8b 45 08             	mov    0x8(%ebp),%eax
   103c6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
   103cc:	8b 45 08             	mov    0x8(%ebp),%eax
   103cf:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
   103d5:	8b 45 08             	mov    0x8(%ebp),%eax
   103d8:	89 50 7c             	mov    %edx,0x7c(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   103db:	8b 45 08             	mov    0x8(%ebp),%eax
   103de:	c7 80 80 00 00 00 08 	movl   $0x8,0x80(%eax)
   103e5:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFALUT;
   103e8:	8b 45 08             	mov    0x8(%ebp),%eax
   103eb:	c7 40 58 02 02 00 00 	movl   $0x202,0x58(%eax)
    task->tss_sel = tss_sel; // 将tss选择子保存到tss_sel中
   103f2:	8b 45 08             	mov    0x8(%ebp),%eax
   103f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   103f8:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    return 0;
   103fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10403:	c9                   	leave
   10404:	c3                   	ret

00010405 <task_init>:
{
   10405:	55                   	push   %ebp
   10406:	89 e5                	mov    %esp,%ebp
   10408:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t *)0);
   1040b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1040f:	75 19                	jne    1042a <task_init+0x25>
   10411:	68 a1 19 01 00       	push   $0x119a1
   10416:	68 10 1a 01 00       	push   $0x11a10
   1041b:	6a 26                	push   $0x26
   1041d:	68 b8 19 01 00       	push   $0x119b8
   10422:	e8 cf 11 00 00       	call   115f6 <pannic>
   10427:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1042a:	8b 45 08             	mov    0x8(%ebp),%eax
   1042d:	83 c0 04             	add    $0x4,%eax
   10430:	83 ec 04             	sub    $0x4,%esp
   10433:	6a 20                	push   $0x20
   10435:	ff 75 0c             	push   0xc(%ebp)
   10438:	50                   	push   %eax
   10439:	e8 5e 0d 00 00       	call   1119c <kernel_strncpy>
   1043e:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED; // 将开始创建的进程状态设置成task_created
   10441:	8b 45 08             	mov    0x8(%ebp),%eax
   10444:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tss_init(task, entry, esp);
   1044a:	83 ec 04             	sub    $0x4,%esp
   1044d:	ff 75 14             	push   0x14(%ebp)
   10450:	ff 75 10             	push   0x10(%ebp)
   10453:	ff 75 08             	push   0x8(%ebp)
   10456:	e8 a9 fe ff ff       	call   10304 <tss_init>
   1045b:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->all_node);
   1045e:	8b 45 08             	mov    0x8(%ebp),%eax
   10461:	83 c0 2c             	add    $0x2c,%eax
   10464:	83 ec 0c             	sub    $0xc,%esp
   10467:	50                   	push   %eax
   10468:	e8 50 fe ff ff       	call   102bd <list_node_init>
   1046d:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10470:	8b 45 08             	mov    0x8(%ebp),%eax
   10473:	83 c0 24             	add    $0x24,%eax
   10476:	83 ec 0c             	sub    $0xc,%esp
   10479:	50                   	push   %eax
   1047a:	e8 3e fe ff ff       	call   102bd <list_node_init>
   1047f:	83 c4 10             	add    $0x10,%esp
    task_set_ready(task);
   10482:	83 ec 0c             	sub    $0xc,%esp
   10485:	ff 75 08             	push   0x8(%ebp)
   10488:	e8 b9 00 00 00       	call   10546 <task_set_ready>
   1048d:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node);
   10490:	8b 45 08             	mov    0x8(%ebp),%eax
   10493:	83 c0 2c             	add    $0x2c,%eax
   10496:	83 ec 08             	sub    $0x8,%esp
   10499:	50                   	push   %eax
   1049a:	68 30 1d 01 00       	push   $0x11d30
   1049f:	e8 1f 12 00 00       	call   116c3 <list_insert_last>
   104a4:	83 c4 10             	add    $0x10,%esp
    return 0;
   104a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   104ac:	c9                   	leave
   104ad:	c3                   	ret

000104ae <task_switch_from_to>:
{
   104ae:	55                   	push   %ebp
   104af:	89 e5                	mov    %esp,%ebp
   104b1:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   104b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   104b7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
   104bd:	83 ec 0c             	sub    $0xc,%esp
   104c0:	50                   	push   %eax
   104c1:	e8 49 03 00 00       	call   1080f <switch_to_tss>
   104c6:	83 c4 10             	add    $0x10,%esp
}
   104c9:	90                   	nop
   104ca:	c9                   	leave
   104cb:	c3                   	ret

000104cc <task_manager_init>:
{
   104cc:	55                   	push   %ebp
   104cd:	89 e5                	mov    %esp,%ebp
   104cf:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   104d2:	83 ec 0c             	sub    $0xc,%esp
   104d5:	68 24 1d 01 00       	push   $0x11d24
   104da:	e8 60 11 00 00       	call   1163f <list_init>
   104df:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   104e2:	83 ec 0c             	sub    $0xc,%esp
   104e5:	68 30 1d 01 00       	push   $0x11d30
   104ea:	e8 50 11 00 00       	call   1163f <list_init>
   104ef:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = (task_t *)0;
   104f2:	c7 05 20 1d 01 00 00 	movl   $0x0,0x11d20
   104f9:	00 00 00 
}
   104fc:	90                   	nop
   104fd:	c9                   	leave
   104fe:	c3                   	ret

000104ff <task_first_init>:
{
   104ff:	55                   	push   %ebp
   10500:	89 e5                	mov    %esp,%ebp
   10502:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 0, 0); //??为什么入口设置为0，堆栈也设置为0
   10505:	6a 00                	push   $0x0
   10507:	6a 00                	push   $0x0
   10509:	68 05 1a 01 00       	push   $0x11a05
   1050e:	68 3c 1d 01 00       	push   $0x11d3c
   10513:	e8 ed fe ff ff       	call   10405 <task_init>
   10518:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   1051b:	a1 d8 1d 01 00       	mov    0x11dd8,%eax
   10520:	0f b7 c0             	movzwl %ax,%eax
   10523:	83 ec 0c             	sub    $0xc,%esp
   10526:	50                   	push   %eax
   10527:	e8 c1 fd ff ff       	call   102ed <write_tr>
   1052c:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = &task_manager.first_task;
   1052f:	c7 05 20 1d 01 00 3c 	movl   $0x11d3c,0x11d20
   10536:	1d 01 00 
}
   10539:	90                   	nop
   1053a:	c9                   	leave
   1053b:	c3                   	ret

0001053c <task_first_task>:
{
   1053c:	55                   	push   %ebp
   1053d:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   1053f:	b8 3c 1d 01 00       	mov    $0x11d3c,%eax
}
   10544:	5d                   	pop    %ebp
   10545:	c3                   	ret

00010546 <task_set_ready>:
{
   10546:	55                   	push   %ebp
   10547:	89 e5                	mov    %esp,%ebp
   10549:	83 ec 08             	sub    $0x8,%esp
    list_insert_last(&task_manager.ready_list, &task->run_node);
   1054c:	8b 45 08             	mov    0x8(%ebp),%eax
   1054f:	83 c0 24             	add    $0x24,%eax
   10552:	83 ec 08             	sub    $0x8,%esp
   10555:	50                   	push   %eax
   10556:	68 24 1d 01 00       	push   $0x11d24
   1055b:	e8 63 11 00 00       	call   116c3 <list_insert_last>
   10560:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10563:	8b 45 08             	mov    0x8(%ebp),%eax
   10566:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
}
   1056c:	90                   	nop
   1056d:	c9                   	leave
   1056e:	c3                   	ret

0001056f <task_set_block>:
{
   1056f:	55                   	push   %ebp
   10570:	89 e5                	mov    %esp,%ebp
   10572:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.ready_list, &task->run_node);
   10575:	8b 45 08             	mov    0x8(%ebp),%eax
   10578:	83 c0 24             	add    $0x24,%eax
   1057b:	83 ec 08             	sub    $0x8,%esp
   1057e:	50                   	push   %eax
   1057f:	68 24 1d 01 00       	push   $0x11d24
   10584:	e8 16 12 00 00       	call   1179f <list_remove>
   10589:	83 c4 10             	add    $0x10,%esp
}
   1058c:	90                   	nop
   1058d:	c9                   	leave
   1058e:	c3                   	ret

0001058f <task_current>:
task_t *task_current(void)
{
   1058f:	55                   	push   %ebp
   10590:	89 e5                	mov    %esp,%ebp
    return task_manager.currt_task;
   10592:	a1 20 1d 01 00       	mov    0x11d20,%eax
}
   10597:	5d                   	pop    %ebp
   10598:	c3                   	ret

00010599 <sys_sched_yield>:

int sys_sched_yield()
{
   10599:	55                   	push   %ebp
   1059a:	89 e5                	mov    %esp,%ebp
   1059c:	83 ec 18             	sub    $0x18,%esp
    if (list_count(&task_manager.ready_list) > 1)
   1059f:	68 24 1d 01 00       	push   $0x11d24
   105a4:	e8 2f fd ff ff       	call   102d8 <list_count>
   105a9:	83 c4 04             	add    $0x4,%esp
   105ac:	83 f8 01             	cmp    $0x1,%eax
   105af:	7e 29                	jle    105da <sys_sched_yield+0x41>
    {
        // 如果就绪队列中有其他的任务则将头部任务移到尾部
        task_t *current_task = task_current();
   105b1:	e8 d9 ff ff ff       	call   1058f <task_current>
   105b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // 从队列头部取出当前任务
        task_set_block(current_task);
   105b9:	83 ec 0c             	sub    $0xc,%esp
   105bc:	ff 75 f4             	push   -0xc(%ebp)
   105bf:	e8 ab ff ff ff       	call   1056f <task_set_block>
   105c4:	83 c4 10             	add    $0x10,%esp
        // 将当前任务添加到队列尾部
        task_set_ready(current_task);
   105c7:	83 ec 0c             	sub    $0xc,%esp
   105ca:	ff 75 f4             	push   -0xc(%ebp)
   105cd:	e8 74 ff ff ff       	call   10546 <task_set_ready>
   105d2:	83 c4 10             	add    $0x10,%esp
        // 将cpu的使用权让给下一个任务
        task_dispatch();
   105d5:	e8 32 00 00 00       	call   1060c <task_dispatch>
    }
    // 没有其他的任务了就直接返回
    return 0;
   105da:	b8 00 00 00 00       	mov    $0x0,%eax
}
   105df:	c9                   	leave
   105e0:	c3                   	ret

000105e1 <task_next_run>:

task_t *task_next_run(void)
{
   105e1:	55                   	push   %ebp
   105e2:	89 e5                	mov    %esp,%ebp
   105e4:	83 ec 10             	sub    $0x10,%esp
    list_node_t *task_node = list_first(&task_manager.ready_list);
   105e7:	68 24 1d 01 00       	push   $0x11d24
   105ec:	e8 f2 fc ff ff       	call   102e3 <list_first>
   105f1:	83 c4 04             	add    $0x4,%esp
   105f4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   105f7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   105fb:	74 08                	je     10605 <task_next_run+0x24>
   105fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10600:	83 e8 24             	sub    $0x24,%eax
   10603:	eb 05                	jmp    1060a <task_next_run+0x29>
   10605:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1060a:	c9                   	leave
   1060b:	c3                   	ret

0001060c <task_dispatch>:

void task_dispatch(void)
{
   1060c:	55                   	push   %ebp
   1060d:	89 e5                	mov    %esp,%ebp
   1060f:	83 ec 18             	sub    $0x18,%esp
    task_t *to = task_next_run();
   10612:	e8 ca ff ff ff       	call   105e1 <task_next_run>
   10617:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.currt_task)
   1061a:	a1 20 1d 01 00       	mov    0x11d20,%eax
   1061f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10622:	74 2a                	je     1064e <task_dispatch+0x42>
    {
        task_t *from = task_current();
   10624:	e8 66 ff ff ff       	call   1058f <task_current>
   10629:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_manager.currt_task = to;
   1062c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1062f:	a3 20 1d 01 00       	mov    %eax,0x11d20
        to->state = TASK_RUNNING;
   10634:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10637:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   1063d:	83 ec 08             	sub    $0x8,%esp
   10640:	ff 75 f4             	push   -0xc(%ebp)
   10643:	ff 75 f0             	push   -0x10(%ebp)
   10646:	e8 63 fe ff ff       	call   104ae <task_switch_from_to>
   1064b:	83 c4 10             	add    $0x10,%esp
    }
}
   1064e:	90                   	nop
   1064f:	c9                   	leave
   10650:	c3                   	ret

00010651 <lgdt>:
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}

// 从gdt表中找到一个空闲的项设置给tss
int gdt_alloc_des(void)
{
   10651:	55                   	push   %ebp
   10652:	89 e5                	mov    %esp,%ebp
   10654:	83 ec 10             	sub    $0x10,%esp
    {
        segment_desc_t *desc = gdt_table + i;
        if (desc->attr == 0)
        {
            return i * sizeof(segment_desc_t);
        }
   10657:	8b 45 08             	mov    0x8(%ebp),%eax
   1065a:	c1 e8 10             	shr    $0x10,%eax
   1065d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    }
   10661:	8b 45 08             	mov    0x8(%ebp),%eax
   10664:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return -1;
   10668:	8b 45 0c             	mov    0xc(%ebp),%eax
   1066b:	83 e8 01             	sub    $0x1,%eax
   1066e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10672:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

   10676:	90                   	nop
   10677:	c9                   	leave
   10678:	c3                   	ret

00010679 <far_jump>:
   10679:	55                   	push   %ebp
   1067a:	89 e5                	mov    %esp,%ebp
   1067c:	83 ec 10             	sub    $0x10,%esp
   1067f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10682:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10685:	8b 45 08             	mov    0x8(%ebp),%eax
   10688:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1068b:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1068e:	ff 28                	ljmp   *(%eax)
   10690:	90                   	nop
   10691:	c9                   	leave
   10692:	c3                   	ret

00010693 <segment_desc_set>:
{
   10693:	55                   	push   %ebp
   10694:	89 e5                	mov    %esp,%ebp
   10696:	83 ec 14             	sub    $0x14,%esp
   10699:	8b 45 14             	mov    0x14(%ebp),%eax
   1069c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   106a0:	8b 45 08             	mov    0x8(%ebp),%eax
   106a3:	83 e0 f8             	and    $0xfffffff8,%eax
   106a6:	05 e0 1d 01 00       	add    $0x11de0,%eax
   106ab:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   106ae:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   106b5:	76 0f                	jbe    106c6 <segment_desc_set+0x33>
        attr |= SEG_G;
   106b7:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   106bd:	8b 45 10             	mov    0x10(%ebp),%eax
   106c0:	c1 e8 0c             	shr    $0xc,%eax
   106c3:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   106c6:	8b 45 10             	mov    0x10(%ebp),%eax
   106c9:	89 c2                	mov    %eax,%edx
   106cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   106ce:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   106d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   106d4:	89 c2                	mov    %eax,%edx
   106d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   106d9:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   106dd:	8b 45 0c             	mov    0xc(%ebp),%eax
   106e0:	c1 e8 10             	shr    $0x10,%eax
   106e3:	89 c2                	mov    %eax,%edx
   106e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   106e8:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   106eb:	8b 45 10             	mov    0x10(%ebp),%eax
   106ee:	c1 e8 10             	shr    $0x10,%eax
   106f1:	c1 e0 08             	shl    $0x8,%eax
   106f4:	66 25 00 0f          	and    $0xf00,%ax
   106f8:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   106fc:	89 c2                	mov    %eax,%edx
   106fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10701:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   10705:	8b 45 0c             	mov    0xc(%ebp),%eax
   10708:	c1 e8 18             	shr    $0x18,%eax
   1070b:	89 c2                	mov    %eax,%edx
   1070d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10710:	88 50 07             	mov    %dl,0x7(%eax)
}
   10713:	90                   	nop
   10714:	c9                   	leave
   10715:	c3                   	ret

00010716 <init_gdt>:
{
   10716:	55                   	push   %ebp
   10717:	89 e5                	mov    %esp,%ebp
   10719:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1071c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10723:	eb 19                	jmp    1073e <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10725:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10728:	c1 e0 03             	shl    $0x3,%eax
   1072b:	6a 00                	push   $0x0
   1072d:	6a 00                	push   $0x0
   1072f:	6a 00                	push   $0x0
   10731:	50                   	push   %eax
   10732:	e8 5c ff ff ff       	call   10693 <segment_desc_set>
   10737:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1073a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1073e:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10745:	7e de                	jle    10725 <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   10747:	68 92 40 00 00       	push   $0x4092
   1074c:	6a ff                	push   $0xffffffff
   1074e:	6a 00                	push   $0x0
   10750:	6a 10                	push   $0x10
   10752:	e8 3c ff ff ff       	call   10693 <segment_desc_set>
   10757:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   1075a:	68 9a 40 00 00       	push   $0x409a
   1075f:	6a ff                	push   $0xffffffff
   10761:	6a 00                	push   $0x0
   10763:	6a 08                	push   $0x8
   10765:	e8 29 ff ff ff       	call   10693 <segment_desc_set>
   1076a:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1076d:	b8 e0 1d 01 00       	mov    $0x11de0,%eax
   10772:	68 00 08 00 00       	push   $0x800
   10777:	50                   	push   %eax
   10778:	e8 d4 fe ff ff       	call   10651 <lgdt>
   1077d:	83 c4 08             	add    $0x8,%esp
}
   10780:	90                   	nop
   10781:	c9                   	leave
   10782:	c3                   	ret

00010783 <gate_desc_set>:
{
   10783:	55                   	push   %ebp
   10784:	89 e5                	mov    %esp,%ebp
   10786:	83 ec 08             	sub    $0x8,%esp
   10789:	8b 55 0c             	mov    0xc(%ebp),%edx
   1078c:	8b 45 14             	mov    0x14(%ebp),%eax
   1078f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10793:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10797:	8b 45 10             	mov    0x10(%ebp),%eax
   1079a:	89 c2                	mov    %eax,%edx
   1079c:	8b 45 08             	mov    0x8(%ebp),%eax
   1079f:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   107a2:	8b 45 08             	mov    0x8(%ebp),%eax
   107a5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   107a9:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   107ad:	8b 45 08             	mov    0x8(%ebp),%eax
   107b0:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   107b4:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   107b8:	8b 45 10             	mov    0x10(%ebp),%eax
   107bb:	c1 e8 10             	shr    $0x10,%eax
   107be:	89 c2                	mov    %eax,%edx
   107c0:	8b 45 08             	mov    0x8(%ebp),%eax
   107c3:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   107c7:	90                   	nop
   107c8:	c9                   	leave
   107c9:	c3                   	ret

000107ca <gdt_alloc_des>:
{
   107ca:	55                   	push   %ebp
   107cb:	89 e5                	mov    %esp,%ebp
   107cd:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   107d0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   107d7:	eb 26                	jmp    107ff <gdt_alloc_des+0x35>
        segment_desc_t *desc = gdt_table + i;
   107d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107dc:	c1 e0 03             	shl    $0x3,%eax
   107df:	05 e0 1d 01 00       	add    $0x11de0,%eax
   107e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->attr == 0)
   107e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   107ea:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   107ee:	66 85 c0             	test   %ax,%ax
   107f1:	75 08                	jne    107fb <gdt_alloc_des+0x31>
            return i * sizeof(segment_desc_t);
   107f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   107f6:	c1 e0 03             	shl    $0x3,%eax
   107f9:	eb 12                	jmp    1080d <gdt_alloc_des+0x43>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   107fb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   107ff:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10806:	7e d1                	jle    107d9 <gdt_alloc_des+0xf>
    return -1;
   10808:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1080d:	c9                   	leave
   1080e:	c3                   	ret

0001080f <switch_to_tss>:
{
   1080f:	55                   	push   %ebp
   10810:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   10812:	6a 00                	push   $0x0
   10814:	ff 75 08             	push   0x8(%ebp)
   10817:	e8 5d fe ff ff       	call   10679 <far_jump>
   1081c:	83 c4 08             	add    $0x8,%esp
}
   1081f:	90                   	nop
   10820:	c9                   	leave
   10821:	c3                   	ret

00010822 <cpu_init>:
{
   10822:	55                   	push   %ebp
   10823:	89 e5                	mov    %esp,%ebp
    init_gdt();
   10825:	e8 ec fe ff ff       	call   10716 <init_gdt>
   1082a:	90                   	nop
   1082b:	5d                   	pop    %ebp
   1082c:	c3                   	ret

0001082d <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   1082d:	55                   	push   %ebp
   1082e:	89 e5                	mov    %esp,%ebp
   10830:	83 ec 14             	sub    $0x14,%esp
   10833:	8b 45 08             	mov    0x8(%ebp),%eax
   10836:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   1083a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1083e:	89 c2                	mov    %eax,%edx
   10840:	ec                   	in     (%dx),%al
   10841:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   10844:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   10848:	c9                   	leave
   10849:	c3                   	ret

0001084a <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   1084a:	55                   	push   %ebp
   1084b:	89 e5                	mov    %esp,%ebp
   1084d:	83 ec 08             	sub    $0x8,%esp
   10850:	8b 55 08             	mov    0x8(%ebp),%edx
   10853:	8b 45 0c             	mov    0xc(%ebp),%eax
   10856:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1085a:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   1085d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10861:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10865:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   10866:	90                   	nop
   10867:	c9                   	leave
   10868:	c3                   	ret

00010869 <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   10869:	55                   	push   %ebp
   1086a:	89 e5                	mov    %esp,%ebp
        hlt();
   1086c:	fa                   	cli
    }
   1086d:	90                   	nop
   1086e:	5d                   	pop    %ebp
   1086f:	c3                   	ret

00010870 <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   10870:	55                   	push   %ebp
   10871:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   10873:	fb                   	sti
}
   10874:	90                   	nop
   10875:	5d                   	pop    %ebp
   10876:	c3                   	ret

00010877 <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   10877:	55                   	push   %ebp
   10878:	89 e5                	mov    %esp,%ebp
   1087a:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   1087d:	8b 45 08             	mov    0x8(%ebp),%eax
   10880:	c1 e8 10             	shr    $0x10,%eax
   10883:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   10887:	8b 45 08             	mov    0x8(%ebp),%eax
   1088a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   1088e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10891:	83 e8 01             	sub    $0x1,%eax
   10894:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10898:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   1089c:	90                   	nop
   1089d:	c9                   	leave
   1089e:	c3                   	ret

0001089f <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   1089f:	55                   	push   %ebp
   108a0:	89 e5                	mov    %esp,%ebp
}
   108a2:	f4                   	hlt

   108a3:	90                   	nop
   108a4:	5d                   	pop    %ebp
   108a5:	c3                   	ret

000108a6 <dump_core_regs>:
{
   108a6:	55                   	push   %ebp
   108a7:	89 e5                	mov    %esp,%ebp
   108a9:	57                   	push   %edi
   108aa:	56                   	push   %esi
   108ab:	53                   	push   %ebx
   108ac:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   108af:	8b 45 08             	mov    0x8(%ebp),%eax
   108b2:	8b 50 34             	mov    0x34(%eax),%edx
   108b5:	8b 45 08             	mov    0x8(%ebp),%eax
   108b8:	8b 40 30             	mov    0x30(%eax),%eax
   108bb:	83 ec 04             	sub    $0x4,%esp
   108be:	52                   	push   %edx
   108bf:	50                   	push   %eax
   108c0:	68 1c 1a 01 00       	push   $0x11a1c
   108c5:	e8 08 10 00 00       	call   118d2 <log_prinf>
   108ca:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   108cd:	8b 45 08             	mov    0x8(%ebp),%eax
   108d0:	8b 38                	mov    (%eax),%edi
   108d2:	8b 45 08             	mov    0x8(%ebp),%eax
   108d5:	8b 70 04             	mov    0x4(%eax),%esi
   108d8:	8b 45 08             	mov    0x8(%ebp),%eax
   108db:	8b 58 0c             	mov    0xc(%eax),%ebx
   108de:	8b 45 08             	mov    0x8(%ebp),%eax
   108e1:	8b 48 08             	mov    0x8(%eax),%ecx
   108e4:	8b 45 08             	mov    0x8(%ebp),%eax
   108e7:	8b 50 0c             	mov    0xc(%eax),%edx
   108ea:	8b 45 08             	mov    0x8(%ebp),%eax
   108ed:	8b 40 3c             	mov    0x3c(%eax),%eax
   108f0:	83 ec 04             	sub    $0x4,%esp
   108f3:	57                   	push   %edi
   108f4:	56                   	push   %esi
   108f5:	53                   	push   %ebx
   108f6:	51                   	push   %ecx
   108f7:	52                   	push   %edx
   108f8:	50                   	push   %eax
   108f9:	68 34 1a 01 00       	push   $0x11a34
   108fe:	e8 cf 0f 00 00       	call   118d2 <log_prinf>
   10903:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   10906:	8b 45 08             	mov    0x8(%ebp),%eax
   10909:	8b 48 1c             	mov    0x1c(%eax),%ecx
   1090c:	8b 45 08             	mov    0x8(%ebp),%eax
   1090f:	8b 40 18             	mov    0x18(%eax),%eax
   10912:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10915:	8b 45 08             	mov    0x8(%ebp),%eax
   10918:	8b 58 14             	mov    0x14(%eax),%ebx
   1091b:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   1091e:	8b 45 08             	mov    0x8(%ebp),%eax
   10921:	8b 78 10             	mov    0x10(%eax),%edi
   10924:	8b 45 08             	mov    0x8(%ebp),%eax
   10927:	8b 70 24             	mov    0x24(%eax),%esi
   1092a:	8b 45 08             	mov    0x8(%ebp),%eax
   1092d:	8b 58 28             	mov    0x28(%eax),%ebx
   10930:	8b 45 08             	mov    0x8(%ebp),%eax
   10933:	8b 50 20             	mov    0x20(%eax),%edx
   10936:	8b 45 08             	mov    0x8(%ebp),%eax
   10939:	8b 40 2c             	mov    0x2c(%eax),%eax
   1093c:	83 ec 0c             	sub    $0xc,%esp
   1093f:	51                   	push   %ecx
   10940:	ff 75 e4             	push   -0x1c(%ebp)
   10943:	ff 75 e0             	push   -0x20(%ebp)
   10946:	57                   	push   %edi
   10947:	56                   	push   %esi
   10948:	53                   	push   %ebx
   10949:	52                   	push   %edx
   1094a:	50                   	push   %eax
   1094b:	68 5c 1a 01 00       	push   $0x11a5c
   10950:	e8 7d 0f 00 00       	call   118d2 <log_prinf>
   10955:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   10958:	8b 45 08             	mov    0x8(%ebp),%eax
   1095b:	8b 50 40             	mov    0x40(%eax),%edx
   1095e:	8b 45 08             	mov    0x8(%ebp),%eax
   10961:	8b 40 38             	mov    0x38(%eax),%eax
   10964:	83 ec 04             	sub    $0x4,%esp
   10967:	52                   	push   %edx
   10968:	50                   	push   %eax
   10969:	68 ad 1a 01 00       	push   $0x11aad
   1096e:	e8 5f 0f 00 00       	call   118d2 <log_prinf>
   10973:	83 c4 10             	add    $0x10,%esp
}
   10976:	90                   	nop
   10977:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1097a:	5b                   	pop    %ebx
   1097b:	5e                   	pop    %esi
   1097c:	5f                   	pop    %edi
   1097d:	5d                   	pop    %ebp
   1097e:	c3                   	ret

0001097f <do_default_handler>:
{
   1097f:	55                   	push   %ebp
   10980:	89 e5                	mov    %esp,%ebp
   10982:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   10985:	83 ec 0c             	sub    $0xc,%esp
   10988:	68 c6 1a 01 00       	push   $0x11ac6
   1098d:	e8 40 0f 00 00       	call   118d2 <log_prinf>
   10992:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   10995:	83 ec 08             	sub    $0x8,%esp
   10998:	ff 75 0c             	push   0xc(%ebp)
   1099b:	68 e3 1a 01 00       	push   $0x11ae3
   109a0:	e8 2d 0f 00 00       	call   118d2 <log_prinf>
   109a5:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   109a8:	83 ec 0c             	sub    $0xc,%esp
   109ab:	ff 75 08             	push   0x8(%ebp)
   109ae:	e8 f3 fe ff ff       	call   108a6 <dump_core_regs>
   109b3:	83 c4 10             	add    $0x10,%esp
        hlt();
   109b6:	e8 e4 fe ff ff       	call   1089f <hlt>
   109bb:	eb f9                	jmp    109b6 <do_default_handler+0x37>

000109bd <do_handler_unknow>:
{
   109bd:	55                   	push   %ebp
   109be:	89 e5                	mov    %esp,%ebp
   109c0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   109c3:	83 ec 08             	sub    $0x8,%esp
   109c6:	68 f4 1a 01 00       	push   $0x11af4
   109cb:	ff 75 08             	push   0x8(%ebp)
   109ce:	e8 ac ff ff ff       	call   1097f <do_default_handler>
   109d3:	83 c4 10             	add    $0x10,%esp
}
   109d6:	90                   	nop
   109d7:	c9                   	leave
   109d8:	c3                   	ret

000109d9 <do_handler_divider>:
{
   109d9:	55                   	push   %ebp
   109da:	89 e5                	mov    %esp,%ebp
   109dc:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   109df:	83 ec 08             	sub    $0x8,%esp
   109e2:	68 08 1b 01 00       	push   $0x11b08
   109e7:	ff 75 08             	push   0x8(%ebp)
   109ea:	e8 90 ff ff ff       	call   1097f <do_default_handler>
   109ef:	83 c4 10             	add    $0x10,%esp
}
   109f2:	90                   	nop
   109f3:	c9                   	leave
   109f4:	c3                   	ret

000109f5 <do_handler_Debug>:
{
   109f5:	55                   	push   %ebp
   109f6:	89 e5                	mov    %esp,%ebp
   109f8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   109fb:	83 ec 08             	sub    $0x8,%esp
   109fe:	68 1d 1b 01 00       	push   $0x11b1d
   10a03:	ff 75 08             	push   0x8(%ebp)
   10a06:	e8 74 ff ff ff       	call   1097f <do_default_handler>
   10a0b:	83 c4 10             	add    $0x10,%esp
}
   10a0e:	90                   	nop
   10a0f:	c9                   	leave
   10a10:	c3                   	ret

00010a11 <do_handler_NMI>:
{
   10a11:	55                   	push   %ebp
   10a12:	89 e5                	mov    %esp,%ebp
   10a14:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10a17:	83 ec 08             	sub    $0x8,%esp
   10a1a:	68 2d 1b 01 00       	push   $0x11b2d
   10a1f:	ff 75 08             	push   0x8(%ebp)
   10a22:	e8 58 ff ff ff       	call   1097f <do_default_handler>
   10a27:	83 c4 10             	add    $0x10,%esp
}
   10a2a:	90                   	nop
   10a2b:	c9                   	leave
   10a2c:	c3                   	ret

00010a2d <do_handler_breakpoint>:
{
   10a2d:	55                   	push   %ebp
   10a2e:	89 e5                	mov    %esp,%ebp
   10a30:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10a33:	83 ec 08             	sub    $0x8,%esp
   10a36:	68 3c 1b 01 00       	push   $0x11b3c
   10a3b:	ff 75 08             	push   0x8(%ebp)
   10a3e:	e8 3c ff ff ff       	call   1097f <do_default_handler>
   10a43:	83 c4 10             	add    $0x10,%esp
}
   10a46:	90                   	nop
   10a47:	c9                   	leave
   10a48:	c3                   	ret

00010a49 <do_handler_overflow>:
{
   10a49:	55                   	push   %ebp
   10a4a:	89 e5                	mov    %esp,%ebp
   10a4c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10a4f:	83 ec 08             	sub    $0x8,%esp
   10a52:	68 48 1b 01 00       	push   $0x11b48
   10a57:	ff 75 08             	push   0x8(%ebp)
   10a5a:	e8 20 ff ff ff       	call   1097f <do_default_handler>
   10a5f:	83 c4 10             	add    $0x10,%esp
}
   10a62:	90                   	nop
   10a63:	c9                   	leave
   10a64:	c3                   	ret

00010a65 <do_handler_bound_range>:
{
   10a65:	55                   	push   %ebp
   10a66:	89 e5                	mov    %esp,%ebp
   10a68:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10a6b:	83 ec 08             	sub    $0x8,%esp
   10a6e:	68 52 1b 01 00       	push   $0x11b52
   10a73:	ff 75 08             	push   0x8(%ebp)
   10a76:	e8 04 ff ff ff       	call   1097f <do_default_handler>
   10a7b:	83 c4 10             	add    $0x10,%esp
}
   10a7e:	90                   	nop
   10a7f:	c9                   	leave
   10a80:	c3                   	ret

00010a81 <do_handler_invalid_opcode>:
{
   10a81:	55                   	push   %ebp
   10a82:	89 e5                	mov    %esp,%ebp
   10a84:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10a87:	83 ec 08             	sub    $0x8,%esp
   10a8a:	68 68 1b 01 00       	push   $0x11b68
   10a8f:	ff 75 08             	push   0x8(%ebp)
   10a92:	e8 e8 fe ff ff       	call   1097f <do_default_handler>
   10a97:	83 c4 10             	add    $0x10,%esp
}
   10a9a:	90                   	nop
   10a9b:	c9                   	leave
   10a9c:	c3                   	ret

00010a9d <do_handler_device_unavailable>:
{
   10a9d:	55                   	push   %ebp
   10a9e:	89 e5                	mov    %esp,%ebp
   10aa0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10aa3:	83 ec 08             	sub    $0x8,%esp
   10aa6:	68 78 1b 01 00       	push   $0x11b78
   10aab:	ff 75 08             	push   0x8(%ebp)
   10aae:	e8 cc fe ff ff       	call   1097f <do_default_handler>
   10ab3:	83 c4 10             	add    $0x10,%esp
}
   10ab6:	90                   	nop
   10ab7:	c9                   	leave
   10ab8:	c3                   	ret

00010ab9 <do_handler_double_fault>:
{
   10ab9:	55                   	push   %ebp
   10aba:	89 e5                	mov    %esp,%ebp
   10abc:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   10abf:	83 ec 08             	sub    $0x8,%esp
   10ac2:	68 8e 1b 01 00       	push   $0x11b8e
   10ac7:	ff 75 08             	push   0x8(%ebp)
   10aca:	e8 b0 fe ff ff       	call   1097f <do_default_handler>
   10acf:	83 c4 10             	add    $0x10,%esp
}
   10ad2:	90                   	nop
   10ad3:	c9                   	leave
   10ad4:	c3                   	ret

00010ad5 <do_handler_invalid_tss>:
{
   10ad5:	55                   	push   %ebp
   10ad6:	89 e5                	mov    %esp,%ebp
   10ad8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   10adb:	83 ec 08             	sub    $0x8,%esp
   10ade:	68 9c 1b 01 00       	push   $0x11b9c
   10ae3:	ff 75 08             	push   0x8(%ebp)
   10ae6:	e8 94 fe ff ff       	call   1097f <do_default_handler>
   10aeb:	83 c4 10             	add    $0x10,%esp
}
   10aee:	90                   	nop
   10aef:	c9                   	leave
   10af0:	c3                   	ret

00010af1 <do_handler_segment_not_present>:
{
   10af1:	55                   	push   %ebp
   10af2:	89 e5                	mov    %esp,%ebp
   10af4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10af7:	83 ec 08             	sub    $0x8,%esp
   10afa:	68 a8 1b 01 00       	push   $0x11ba8
   10aff:	ff 75 08             	push   0x8(%ebp)
   10b02:	e8 78 fe ff ff       	call   1097f <do_default_handler>
   10b07:	83 c4 10             	add    $0x10,%esp
}
   10b0a:	90                   	nop
   10b0b:	c9                   	leave
   10b0c:	c3                   	ret

00010b0d <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   10b0d:	55                   	push   %ebp
   10b0e:	89 e5                	mov    %esp,%ebp
   10b10:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10b13:	83 ec 08             	sub    $0x8,%esp
   10b16:	68 bd 1b 01 00       	push   $0x11bbd
   10b1b:	ff 75 08             	push   0x8(%ebp)
   10b1e:	e8 5c fe ff ff       	call   1097f <do_default_handler>
   10b23:	83 c4 10             	add    $0x10,%esp
}
   10b26:	90                   	nop
   10b27:	c9                   	leave
   10b28:	c3                   	ret

00010b29 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   10b29:	55                   	push   %ebp
   10b2a:	89 e5                	mov    %esp,%ebp
   10b2c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   10b2f:	83 ec 08             	sub    $0x8,%esp
   10b32:	68 d2 1b 01 00       	push   $0x11bd2
   10b37:	ff 75 08             	push   0x8(%ebp)
   10b3a:	e8 40 fe ff ff       	call   1097f <do_default_handler>
   10b3f:	83 c4 10             	add    $0x10,%esp
}
   10b42:	90                   	nop
   10b43:	c9                   	leave
   10b44:	c3                   	ret

00010b45 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t *frame)
{
   10b45:	55                   	push   %ebp
   10b46:	89 e5                	mov    %esp,%ebp
   10b48:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10b4b:	83 ec 08             	sub    $0x8,%esp
   10b4e:	68 e6 1b 01 00       	push   $0x11be6
   10b53:	ff 75 08             	push   0x8(%ebp)
   10b56:	e8 24 fe ff ff       	call   1097f <do_default_handler>
   10b5b:	83 c4 10             	add    $0x10,%esp
}
   10b5e:	90                   	nop
   10b5f:	c9                   	leave
   10b60:	c3                   	ret

00010b61 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   10b61:	55                   	push   %ebp
   10b62:	89 e5                	mov    %esp,%ebp
   10b64:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10b67:	83 ec 08             	sub    $0x8,%esp
   10b6a:	68 f2 1b 01 00       	push   $0x11bf2
   10b6f:	ff 75 08             	push   0x8(%ebp)
   10b72:	e8 08 fe ff ff       	call   1097f <do_default_handler>
   10b77:	83 c4 10             	add    $0x10,%esp
}
   10b7a:	90                   	nop
   10b7b:	c9                   	leave
   10b7c:	c3                   	ret

00010b7d <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   10b7d:	55                   	push   %ebp
   10b7e:	89 e5                	mov    %esp,%ebp
   10b80:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10b83:	83 ec 08             	sub    $0x8,%esp
   10b86:	68 10 1c 01 00       	push   $0x11c10
   10b8b:	ff 75 08             	push   0x8(%ebp)
   10b8e:	e8 ec fd ff ff       	call   1097f <do_default_handler>
   10b93:	83 c4 10             	add    $0x10,%esp
}
   10b96:	90                   	nop
   10b97:	c9                   	leave
   10b98:	c3                   	ret

00010b99 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   10b99:	55                   	push   %ebp
   10b9a:	89 e5                	mov    %esp,%ebp
   10b9c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   10b9f:	83 ec 08             	sub    $0x8,%esp
   10ba2:	68 21 1c 01 00       	push   $0x11c21
   10ba7:	ff 75 08             	push   0x8(%ebp)
   10baa:	e8 d0 fd ff ff       	call   1097f <do_default_handler>
   10baf:	83 c4 10             	add    $0x10,%esp
}
   10bb2:	90                   	nop
   10bb3:	c9                   	leave
   10bb4:	c3                   	ret

00010bb5 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   10bb5:	55                   	push   %ebp
   10bb6:	89 e5                	mov    %esp,%ebp
   10bb8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   10bbb:	83 ec 08             	sub    $0x8,%esp
   10bbe:	68 30 1c 01 00       	push   $0x11c30
   10bc3:	ff 75 08             	push   0x8(%ebp)
   10bc6:	e8 b4 fd ff ff       	call   1097f <do_default_handler>
   10bcb:	83 c4 10             	add    $0x10,%esp
}
   10bce:	90                   	nop
   10bcf:	c9                   	leave
   10bd0:	c3                   	ret

00010bd1 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   10bd1:	55                   	push   %ebp
   10bd2:	89 e5                	mov    %esp,%ebp
   10bd4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   10bd7:	83 ec 08             	sub    $0x8,%esp
   10bda:	68 4f 1c 01 00       	push   $0x11c4f
   10bdf:	ff 75 08             	push   0x8(%ebp)
   10be2:	e8 98 fd ff ff       	call   1097f <do_default_handler>
   10be7:	83 c4 10             	add    $0x10,%esp
}
   10bea:	90                   	nop
   10beb:	c9                   	leave
   10bec:	c3                   	ret

00010bed <init_pic>:

static void init_pic(void)
{
   10bed:	55                   	push   %ebp
   10bee:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10bf0:	6a 11                	push   $0x11
   10bf2:	6a 20                	push   $0x20
   10bf4:	e8 51 fc ff ff       	call   1084a <outb>
   10bf9:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   10bfc:	6a 20                	push   $0x20
   10bfe:	6a 21                	push   $0x21
   10c00:	e8 45 fc ff ff       	call   1084a <outb>
   10c05:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   10c08:	6a 04                	push   $0x4
   10c0a:	6a 21                	push   $0x21
   10c0c:	e8 39 fc ff ff       	call   1084a <outb>
   10c11:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10c14:	6a 01                	push   $0x1
   10c16:	6a 21                	push   $0x21
   10c18:	e8 2d fc ff ff       	call   1084a <outb>
   10c1d:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10c20:	6a 11                	push   $0x11
   10c22:	68 a0 00 00 00       	push   $0xa0
   10c27:	e8 1e fc ff ff       	call   1084a <outb>
   10c2c:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10c2f:	6a 28                	push   $0x28
   10c31:	68 a1 00 00 00       	push   $0xa1
   10c36:	e8 0f fc ff ff       	call   1084a <outb>
   10c3b:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   10c3e:	6a 02                	push   $0x2
   10c40:	68 a1 00 00 00       	push   $0xa1
   10c45:	e8 00 fc ff ff       	call   1084a <outb>
   10c4a:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10c4d:	6a 01                	push   $0x1
   10c4f:	68 a1 00 00 00       	push   $0xa1
   10c54:	e8 f1 fb ff ff       	call   1084a <outb>
   10c59:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10c5c:	68 fb 00 00 00       	push   $0xfb
   10c61:	6a 21                	push   $0x21
   10c63:	e8 e2 fb ff ff       	call   1084a <outb>
   10c68:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   10c6b:	68 ff 00 00 00       	push   $0xff
   10c70:	68 a1 00 00 00       	push   $0xa1
   10c75:	e8 d0 fb ff ff       	call   1084a <outb>
   10c7a:	83 c4 08             	add    $0x8,%esp
}
   10c7d:	90                   	nop
   10c7e:	c9                   	leave
   10c7f:	c3                   	ret

00010c80 <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   10c80:	55                   	push   %ebp
   10c81:	89 e5                	mov    %esp,%ebp
   10c83:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10c86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10c8d:	eb 25                	jmp    10cb4 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10c8f:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10c94:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c97:	c1 e0 03             	shl    $0x3,%eax
   10c9a:	05 e0 25 01 00       	add    $0x125e0,%eax
   10c9f:	68 00 8e 00 00       	push   $0x8e00
   10ca4:	52                   	push   %edx
   10ca5:	6a 08                	push   $0x8
   10ca7:	50                   	push   %eax
   10ca8:	e8 d6 fa ff ff       	call   10783 <gate_desc_set>
   10cad:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10cb0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10cb4:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10cb8:	7e d5                	jle    10c8f <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10cba:	83 ec 08             	sub    $0x8,%esp
   10cbd:	68 4a 00 01 00       	push   $0x1004a
   10cc2:	6a 00                	push   $0x0
   10cc4:	e8 65 01 00 00       	call   10e2e <irq_install>
   10cc9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10ccc:	83 ec 08             	sub    $0x8,%esp
   10ccf:	68 69 00 01 00       	push   $0x10069
   10cd4:	6a 01                	push   $0x1
   10cd6:	e8 53 01 00 00       	call   10e2e <irq_install>
   10cdb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10cde:	83 ec 08             	sub    $0x8,%esp
   10ce1:	68 88 00 01 00       	push   $0x10088
   10ce6:	6a 02                	push   $0x2
   10ce8:	e8 41 01 00 00       	call   10e2e <irq_install>
   10ced:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10cf0:	83 ec 08             	sub    $0x8,%esp
   10cf3:	68 a7 00 01 00       	push   $0x100a7
   10cf8:	6a 03                	push   $0x3
   10cfa:	e8 2f 01 00 00       	call   10e2e <irq_install>
   10cff:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10d02:	83 ec 08             	sub    $0x8,%esp
   10d05:	68 c6 00 01 00       	push   $0x100c6
   10d0a:	6a 04                	push   $0x4
   10d0c:	e8 1d 01 00 00       	call   10e2e <irq_install>
   10d11:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10d14:	83 ec 08             	sub    $0x8,%esp
   10d17:	68 e5 00 01 00       	push   $0x100e5
   10d1c:	6a 05                	push   $0x5
   10d1e:	e8 0b 01 00 00       	call   10e2e <irq_install>
   10d23:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10d26:	83 ec 08             	sub    $0x8,%esp
   10d29:	68 04 01 01 00       	push   $0x10104
   10d2e:	6a 06                	push   $0x6
   10d30:	e8 f9 00 00 00       	call   10e2e <irq_install>
   10d35:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10d38:	83 ec 08             	sub    $0x8,%esp
   10d3b:	68 23 01 01 00       	push   $0x10123
   10d40:	6a 07                	push   $0x7
   10d42:	e8 e7 00 00 00       	call   10e2e <irq_install>
   10d47:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10d4a:	83 ec 08             	sub    $0x8,%esp
   10d4d:	68 42 01 01 00       	push   $0x10142
   10d52:	6a 08                	push   $0x8
   10d54:	e8 d5 00 00 00       	call   10e2e <irq_install>
   10d59:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   10d5c:	83 ec 08             	sub    $0x8,%esp
   10d5f:	68 5f 01 01 00       	push   $0x1015f
   10d64:	6a 0a                	push   $0xa
   10d66:	e8 c3 00 00 00       	call   10e2e <irq_install>
   10d6b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   10d6e:	83 ec 08             	sub    $0x8,%esp
   10d71:	68 7c 01 01 00       	push   $0x1017c
   10d76:	6a 0b                	push   $0xb
   10d78:	e8 b1 00 00 00       	call   10e2e <irq_install>
   10d7d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   10d80:	83 ec 08             	sub    $0x8,%esp
   10d83:	68 99 01 01 00       	push   $0x10199
   10d88:	6a 0c                	push   $0xc
   10d8a:	e8 9f 00 00 00       	call   10e2e <irq_install>
   10d8f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   10d92:	83 ec 08             	sub    $0x8,%esp
   10d95:	68 b6 01 01 00       	push   $0x101b6
   10d9a:	6a 0d                	push   $0xd
   10d9c:	e8 8d 00 00 00       	call   10e2e <irq_install>
   10da1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   10da4:	83 ec 08             	sub    $0x8,%esp
   10da7:	68 d3 01 01 00       	push   $0x101d3
   10dac:	6a 0e                	push   $0xe
   10dae:	e8 7b 00 00 00       	call   10e2e <irq_install>
   10db3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   10db6:	83 ec 08             	sub    $0x8,%esp
   10db9:	68 f0 01 01 00       	push   $0x101f0
   10dbe:	6a 10                	push   $0x10
   10dc0:	e8 69 00 00 00       	call   10e2e <irq_install>
   10dc5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   10dc8:	83 ec 08             	sub    $0x8,%esp
   10dcb:	68 0f 02 01 00       	push   $0x1020f
   10dd0:	6a 11                	push   $0x11
   10dd2:	e8 57 00 00 00       	call   10e2e <irq_install>
   10dd7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   10dda:	83 ec 08             	sub    $0x8,%esp
   10ddd:	68 2c 02 01 00       	push   $0x1022c
   10de2:	6a 12                	push   $0x12
   10de4:	e8 45 00 00 00       	call   10e2e <irq_install>
   10de9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   10dec:	83 ec 08             	sub    $0x8,%esp
   10def:	68 4b 02 01 00       	push   $0x1024b
   10df4:	6a 13                	push   $0x13
   10df6:	e8 33 00 00 00       	call   10e2e <irq_install>
   10dfb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   10dfe:	83 ec 08             	sub    $0x8,%esp
   10e01:	68 6a 02 01 00       	push   $0x1026a
   10e06:	6a 14                	push   $0x14
   10e08:	e8 21 00 00 00       	call   10e2e <irq_install>
   10e0d:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10e10:	b8 e0 25 01 00       	mov    $0x125e0,%eax
   10e15:	83 ec 08             	sub    $0x8,%esp
   10e18:	68 00 04 00 00       	push   $0x400
   10e1d:	50                   	push   %eax
   10e1e:	e8 54 fa ff ff       	call   10877 <lidt>
   10e23:	83 c4 10             	add    $0x10,%esp

    init_pic();
   10e26:	e8 c2 fd ff ff       	call   10bed <init_pic>
}
   10e2b:	90                   	nop
   10e2c:	c9                   	leave
   10e2d:	c3                   	ret

00010e2e <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   10e2e:	55                   	push   %ebp
   10e2f:	89 e5                	mov    %esp,%ebp
   10e31:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   10e34:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10e38:	7e 07                	jle    10e41 <irq_install+0x13>
    {
        return -1;
   10e3a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10e3f:	eb 20                	jmp    10e61 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10e41:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e44:	8b 55 08             	mov    0x8(%ebp),%edx
   10e47:	c1 e2 03             	shl    $0x3,%edx
   10e4a:	81 c2 e0 25 01 00    	add    $0x125e0,%edx
   10e50:	68 00 8e 00 00       	push   $0x8e00
   10e55:	50                   	push   %eax
   10e56:	6a 08                	push   $0x8
   10e58:	52                   	push   %edx
   10e59:	e8 25 f9 ff ff       	call   10783 <gate_desc_set>
   10e5e:	83 c4 10             	add    $0x10,%esp
}
   10e61:	c9                   	leave
   10e62:	c3                   	ret

00010e63 <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   10e63:	55                   	push   %ebp
   10e64:	89 e5                	mov    %esp,%ebp
   10e66:	53                   	push   %ebx
   10e67:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10e6a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10e6e:	7e 78                	jle    10ee8 <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10e70:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10e74:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10e78:	7f 32                	jg     10eac <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10e7a:	6a 21                	push   $0x21
   10e7c:	e8 ac f9 ff ff       	call   1082d <inb>
   10e81:	83 c4 04             	add    $0x4,%esp
   10e84:	89 c3                	mov    %eax,%ebx
   10e86:	8b 45 08             	mov    0x8(%ebp),%eax
   10e89:	ba 01 00 00 00       	mov    $0x1,%edx
   10e8e:	89 c1                	mov    %eax,%ecx
   10e90:	d3 e2                	shl    %cl,%edx
   10e92:	89 d0                	mov    %edx,%eax
   10e94:	f7 d0                	not    %eax
   10e96:	21 d8                	and    %ebx,%eax
   10e98:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10e9b:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10e9f:	50                   	push   %eax
   10ea0:	6a 21                	push   $0x21
   10ea2:	e8 a3 f9 ff ff       	call   1084a <outb>
   10ea7:	83 c4 08             	add    $0x8,%esp
   10eaa:	eb 3d                	jmp    10ee9 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   10eac:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10eb0:	68 a1 00 00 00       	push   $0xa1
   10eb5:	e8 73 f9 ff ff       	call   1082d <inb>
   10eba:	83 c4 04             	add    $0x4,%esp
   10ebd:	89 c3                	mov    %eax,%ebx
   10ebf:	8b 45 08             	mov    0x8(%ebp),%eax
   10ec2:	ba 01 00 00 00       	mov    $0x1,%edx
   10ec7:	89 c1                	mov    %eax,%ecx
   10ec9:	d3 e2                	shl    %cl,%edx
   10ecb:	89 d0                	mov    %edx,%eax
   10ecd:	f7 d0                	not    %eax
   10ecf:	21 d8                	and    %ebx,%eax
   10ed1:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10ed4:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10ed8:	50                   	push   %eax
   10ed9:	68 a1 00 00 00       	push   $0xa1
   10ede:	e8 67 f9 ff ff       	call   1084a <outb>
   10ee3:	83 c4 08             	add    $0x8,%esp
   10ee6:	eb 01                	jmp    10ee9 <irq_enable+0x86>
        return;
   10ee8:	90                   	nop
    }
}
   10ee9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10eec:	c9                   	leave
   10eed:	c3                   	ret

00010eee <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   10eee:	55                   	push   %ebp
   10eef:	89 e5                	mov    %esp,%ebp
   10ef1:	53                   	push   %ebx
   10ef2:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10ef5:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10ef9:	7e 74                	jle    10f6f <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10efb:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10eff:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f03:	7f 30                	jg     10f35 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10f05:	6a 21                	push   $0x21
   10f07:	e8 21 f9 ff ff       	call   1082d <inb>
   10f0c:	83 c4 04             	add    $0x4,%esp
   10f0f:	89 c3                	mov    %eax,%ebx
   10f11:	8b 45 08             	mov    0x8(%ebp),%eax
   10f14:	ba 01 00 00 00       	mov    $0x1,%edx
   10f19:	89 c1                	mov    %eax,%ecx
   10f1b:	d3 e2                	shl    %cl,%edx
   10f1d:	89 d0                	mov    %edx,%eax
   10f1f:	09 d8                	or     %ebx,%eax
   10f21:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10f24:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10f28:	50                   	push   %eax
   10f29:	6a 21                	push   $0x21
   10f2b:	e8 1a f9 ff ff       	call   1084a <outb>
   10f30:	83 c4 08             	add    $0x8,%esp
   10f33:	eb 3b                	jmp    10f70 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   10f35:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10f39:	68 a1 00 00 00       	push   $0xa1
   10f3e:	e8 ea f8 ff ff       	call   1082d <inb>
   10f43:	83 c4 04             	add    $0x4,%esp
   10f46:	89 c3                	mov    %eax,%ebx
   10f48:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4b:	ba 01 00 00 00       	mov    $0x1,%edx
   10f50:	89 c1                	mov    %eax,%ecx
   10f52:	d3 e2                	shl    %cl,%edx
   10f54:	89 d0                	mov    %edx,%eax
   10f56:	09 d8                	or     %ebx,%eax
   10f58:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10f5b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10f5f:	50                   	push   %eax
   10f60:	68 a1 00 00 00       	push   $0xa1
   10f65:	e8 e0 f8 ff ff       	call   1084a <outb>
   10f6a:	83 c4 08             	add    $0x8,%esp
   10f6d:	eb 01                	jmp    10f70 <irq_disable+0x82>
        return;
   10f6f:	90                   	nop
    }
}
   10f70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f73:	c9                   	leave
   10f74:	c3                   	ret

00010f75 <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   10f75:	55                   	push   %ebp
   10f76:	89 e5                	mov    %esp,%ebp
    cli();
   10f78:	e8 ec f8 ff ff       	call   10869 <cli>
}
   10f7d:	90                   	nop
   10f7e:	5d                   	pop    %ebp
   10f7f:	c3                   	ret

00010f80 <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   10f80:	55                   	push   %ebp
   10f81:	89 e5                	mov    %esp,%ebp
    sti();
   10f83:	e8 e8 f8 ff ff       	call   10870 <sti>
}
   10f88:	90                   	nop
   10f89:	5d                   	pop    %ebp
   10f8a:	c3                   	ret

00010f8b <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   10f8b:	55                   	push   %ebp
   10f8c:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10f8e:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   10f92:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10f96:	7e 0f                	jle    10fa7 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10f98:	6a 20                	push   $0x20
   10f9a:	68 a0 00 00 00       	push   $0xa0
   10f9f:	e8 a6 f8 ff ff       	call   1084a <outb>
   10fa4:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10fa7:	6a 20                	push   $0x20
   10fa9:	6a 20                	push   $0x20
   10fab:	e8 9a f8 ff ff       	call   1084a <outb>
   10fb0:	83 c4 08             	add    $0x8,%esp
   10fb3:	90                   	nop
   10fb4:	c9                   	leave
   10fb5:	c3                   	ret

00010fb6 <outb>:
{
    sys_tick = 0;
    init_pit();
   10fb6:	55                   	push   %ebp
   10fb7:	89 e5                	mov    %esp,%ebp
   10fb9:	83 ec 08             	sub    $0x8,%esp
   10fbc:	8b 55 08             	mov    0x8(%ebp),%edx
   10fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fc2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10fc6:	88 45 f8             	mov    %al,-0x8(%ebp)
   10fc9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10fcd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10fd1:	ee                   	out    %al,(%dx)
   10fd2:	90                   	nop
   10fd3:	c9                   	leave
   10fd4:	c3                   	ret

00010fd5 <do_handler_time>:
{
   10fd5:	55                   	push   %ebp
   10fd6:	89 e5                	mov    %esp,%ebp
   10fd8:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   10fdb:	a1 e0 29 01 00       	mov    0x129e0,%eax
   10fe0:	83 c0 01             	add    $0x1,%eax
   10fe3:	a3 e0 29 01 00       	mov    %eax,0x129e0
    pic_send_eoi(IRQ0_TIMER);
   10fe8:	83 ec 0c             	sub    $0xc,%esp
   10feb:	6a 20                	push   $0x20
   10fed:	e8 99 ff ff ff       	call   10f8b <pic_send_eoi>
   10ff2:	83 c4 10             	add    $0x10,%esp
}
   10ff5:	90                   	nop
   10ff6:	c9                   	leave
   10ff7:	c3                   	ret

00010ff8 <init_pit>:
{
   10ff8:	55                   	push   %ebp
   10ff9:	89 e5                	mov    %esp,%ebp
   10ffb:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   10ffe:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   11005:	6a 36                	push   $0x36
   11007:	6a 43                	push   $0x43
   11009:	e8 a8 ff ff ff       	call   10fb6 <outb>
   1100e:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   11011:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11014:	0f b6 c0             	movzbl %al,%eax
   11017:	50                   	push   %eax
   11018:	6a 40                	push   $0x40
   1101a:	e8 97 ff ff ff       	call   10fb6 <outb>
   1101f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   11022:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11025:	c1 e8 08             	shr    $0x8,%eax
   11028:	0f b6 c0             	movzbl %al,%eax
   1102b:	50                   	push   %eax
   1102c:	6a 40                	push   $0x40
   1102e:	e8 83 ff ff ff       	call   10fb6 <outb>
   11033:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   11036:	83 ec 08             	sub    $0x8,%esp
   11039:	68 89 02 01 00       	push   $0x10289
   1103e:	6a 20                	push   $0x20
   11040:	e8 e9 fd ff ff       	call   10e2e <irq_install>
   11045:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   11048:	83 ec 0c             	sub    $0xc,%esp
   1104b:	6a 20                	push   $0x20
   1104d:	e8 11 fe ff ff       	call   10e63 <irq_enable>
   11052:	83 c4 10             	add    $0x10,%esp
}
   11055:	90                   	nop
   11056:	c9                   	leave
   11057:	c3                   	ret

00011058 <init_time>:
{
   11058:	55                   	push   %ebp
   11059:	89 e5                	mov    %esp,%ebp
   1105b:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1105e:	c7 05 e0 29 01 00 00 	movl   $0x0,0x129e0
   11065:	00 00 00 
    init_pit();
   11068:	e8 8b ff ff ff       	call   10ff8 <init_pit>
   1106d:	90                   	nop
   1106e:	c9                   	leave
   1106f:	c3                   	ret

00011070 <kernel_init>:

/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   11070:	55                   	push   %ebp
   11071:	89 e5                	mov    %esp,%ebp
   11073:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   11076:	e8 a7 f7 ff ff       	call   10822 <cpu_init>

    init_log(); // 初始化打印函数
   1107b:	e8 e0 07 00 00       	call   11860 <init_log>
    irq_init();
   11080:	e8 fb fb ff ff       	call   10c80 <irq_init>
    // 初始化定时器
    init_time();
   11085:	e8 ce ff ff ff       	call   11058 <init_time>

    // 初始化任务管理
    task_manager_init();
   1108a:	e8 3d f4 ff ff       	call   104cc <task_manager_init>
}
   1108f:	90                   	nop
   11090:	c9                   	leave
   11091:	c3                   	ret

00011092 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;
void init_task_entry(void)
{
   11092:	55                   	push   %ebp
   11093:	89 e5                	mov    %esp,%ebp
   11095:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11098:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_task_entry: %d", count++);
   1109f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   110a2:	8d 50 01             	lea    0x1(%eax),%edx
   110a5:	89 55 f4             	mov    %edx,-0xc(%ebp)
   110a8:	83 ec 08             	sub    $0x8,%esp
   110ab:	50                   	push   %eax
   110ac:	68 69 1c 01 00       	push   $0x11c69
   110b1:	e8 1c 08 00 00       	call   118d2 <log_prinf>
   110b6:	83 c4 10             	add    $0x10,%esp
        sys_sched_yield();
   110b9:	e8 db f4 ff ff       	call   10599 <sys_sched_yield>
        log_prinf("init_task_entry: %d", count++);
   110be:	eb df                	jmp    1109f <init_task_entry+0xd>

000110c0 <init_main>:
    }
}

void init_main(void)
{
   110c0:	55                   	push   %ebp
   110c1:	89 e5                	mov    %esp,%ebp
   110c3:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   110c6:	83 ec 0c             	sub    $0xc,%esp
   110c9:	68 7d 1c 01 00       	push   $0x11c7d
   110ce:	e8 ff 07 00 00       	call   118d2 <log_prinf>
   110d3:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   110d6:	83 ec 08             	sub    $0x8,%esp
   110d9:	68 8b 1c 01 00       	push   $0x11c8b
   110de:	68 91 1c 01 00       	push   $0x11c91
   110e3:	e8 ea 07 00 00       	call   118d2 <log_prinf>
   110e8:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   110eb:	83 ec 0c             	sub    $0xc,%esp
   110ee:	6a 63                	push   $0x63
   110f0:	6a 30                	push   $0x30
   110f2:	6a 14                	push   $0x14
   110f4:	6a f6                	push   $0xfffffff6
   110f6:	68 9c 1c 01 00       	push   $0x11c9c
   110fb:	e8 d2 07 00 00       	call   118d2 <log_prinf>
   11100:	83 c4 20             	add    $0x20,%esp
    // irq_enable_global();//暂时先关掉定时中断

    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   11103:	ba 00 3a 01 00       	mov    $0x13a00,%edx
   11108:	b8 92 10 01 00       	mov    $0x11092,%eax
   1110d:	52                   	push   %edx
   1110e:	50                   	push   %eax
   1110f:	68 a8 1c 01 00       	push   $0x11ca8
   11114:	68 00 3a 01 00       	push   $0x13a00
   11119:	e8 e7 f2 ff ff       	call   10405 <task_init>
   1111e:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11121:	e8 d9 f3 ff ff       	call   104ff <task_first_init>
    int count = 0;
   11126:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_main: %d", count++);
   1112d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11130:	8d 50 01             	lea    0x1(%eax),%edx
   11133:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11136:	83 ec 08             	sub    $0x8,%esp
   11139:	50                   	push   %eax
   1113a:	68 b2 1c 01 00       	push   $0x11cb2
   1113f:	e8 8e 07 00 00       	call   118d2 <log_prinf>
   11144:	83 c4 10             	add    $0x10,%esp
        // 手动切换
        sys_sched_yield();
   11147:	e8 4d f4 ff ff       	call   10599 <sys_sched_yield>
        log_prinf("init_main: %d", count++);
   1114c:	eb df                	jmp    1112d <init_main+0x6d>

0001114e <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   1114e:	55                   	push   %ebp
   1114f:	89 e5                	mov    %esp,%ebp
}
   11151:	f4                   	hlt

   11152:	90                   	nop
   11153:	5d                   	pop    %ebp
   11154:	c3                   	ret

00011155 <kernel_strcpy>:
{
   11155:	55                   	push   %ebp
   11156:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   11158:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1115c:	74 3b                	je     11199 <kernel_strcpy+0x44>
   1115e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11162:	74 35                	je     11199 <kernel_strcpy+0x44>
    while (*dest && *src)
   11164:	eb 17                	jmp    1117d <kernel_strcpy+0x28>
        *dest++ = *src++;
   11166:	8b 55 0c             	mov    0xc(%ebp),%edx
   11169:	8d 42 01             	lea    0x1(%edx),%eax
   1116c:	89 45 0c             	mov    %eax,0xc(%ebp)
   1116f:	8b 45 08             	mov    0x8(%ebp),%eax
   11172:	8d 48 01             	lea    0x1(%eax),%ecx
   11175:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11178:	0f b6 12             	movzbl (%edx),%edx
   1117b:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   1117d:	8b 45 08             	mov    0x8(%ebp),%eax
   11180:	0f b6 00             	movzbl (%eax),%eax
   11183:	84 c0                	test   %al,%al
   11185:	74 0a                	je     11191 <kernel_strcpy+0x3c>
   11187:	8b 45 0c             	mov    0xc(%ebp),%eax
   1118a:	0f b6 00             	movzbl (%eax),%eax
   1118d:	84 c0                	test   %al,%al
   1118f:	75 d5                	jne    11166 <kernel_strcpy+0x11>
    *dest = '\0';
   11191:	8b 45 08             	mov    0x8(%ebp),%eax
   11194:	c6 00 00             	movb   $0x0,(%eax)
   11197:	eb 01                	jmp    1119a <kernel_strcpy+0x45>
        return;
   11199:	90                   	nop
}
   1119a:	5d                   	pop    %ebp
   1119b:	c3                   	ret

0001119c <kernel_strncpy>:
{
   1119c:	55                   	push   %ebp
   1119d:	89 e5                	mov    %esp,%ebp
   1119f:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   111a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111a6:	74 61                	je     11209 <kernel_strncpy+0x6d>
   111a8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111ac:	74 5b                	je     11209 <kernel_strncpy+0x6d>
   111ae:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111b2:	74 55                	je     11209 <kernel_strncpy+0x6d>
    char *d = dest;
   111b4:	8b 45 08             	mov    0x8(%ebp),%eax
   111b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   111ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   111bd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   111c0:	eb 17                	jmp    111d9 <kernel_strncpy+0x3d>
        *d++ = *s++;
   111c2:	8b 55 f8             	mov    -0x8(%ebp),%edx
   111c5:	8d 42 01             	lea    0x1(%edx),%eax
   111c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
   111cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111ce:	8d 48 01             	lea    0x1(%eax),%ecx
   111d1:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   111d4:	0f b6 12             	movzbl (%edx),%edx
   111d7:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   111d9:	8b 45 10             	mov    0x10(%ebp),%eax
   111dc:	8d 50 ff             	lea    -0x1(%eax),%edx
   111df:	89 55 10             	mov    %edx,0x10(%ebp)
   111e2:	85 c0                	test   %eax,%eax
   111e4:	7e 0a                	jle    111f0 <kernel_strncpy+0x54>
   111e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111e9:	0f b6 00             	movzbl (%eax),%eax
   111ec:	84 c0                	test   %al,%al
   111ee:	75 d2                	jne    111c2 <kernel_strncpy+0x26>
    if (size == 0)
   111f0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   111f4:	75 0b                	jne    11201 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   111f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111f9:	83 e8 01             	sub    $0x1,%eax
   111fc:	c6 00 00             	movb   $0x0,(%eax)
   111ff:	eb 09                	jmp    1120a <kernel_strncpy+0x6e>
        *d = '\0';
   11201:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11204:	c6 00 00             	movb   $0x0,(%eax)
   11207:	eb 01                	jmp    1120a <kernel_strncpy+0x6e>
        return;
   11209:	90                   	nop
}
   1120a:	c9                   	leave
   1120b:	c3                   	ret

0001120c <kernel_strncmp>:
{
   1120c:	55                   	push   %ebp
   1120d:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   1120f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11213:	74 0c                	je     11221 <kernel_strncmp+0x15>
   11215:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11219:	74 06                	je     11221 <kernel_strncmp+0x15>
   1121b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1121f:	75 0f                	jne    11230 <kernel_strncmp+0x24>
        return -1;
   11221:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11226:	eb 62                	jmp    1128a <kernel_strncmp+0x7e>
        s1++;
   11228:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   1122c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   11230:	8b 45 08             	mov    0x8(%ebp),%eax
   11233:	0f b6 00             	movzbl (%eax),%eax
   11236:	84 c0                	test   %al,%al
   11238:	74 20                	je     1125a <kernel_strncmp+0x4e>
   1123a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1123d:	0f b6 00             	movzbl (%eax),%eax
   11240:	84 c0                	test   %al,%al
   11242:	74 16                	je     1125a <kernel_strncmp+0x4e>
   11244:	8b 45 08             	mov    0x8(%ebp),%eax
   11247:	0f b6 10             	movzbl (%eax),%edx
   1124a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1124d:	0f b6 00             	movzbl (%eax),%eax
   11250:	38 c2                	cmp    %al,%dl
   11252:	75 06                	jne    1125a <kernel_strncmp+0x4e>
   11254:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11258:	75 ce                	jne    11228 <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1125a:	8b 45 08             	mov    0x8(%ebp),%eax
   1125d:	0f b6 00             	movzbl (%eax),%eax
   11260:	84 c0                	test   %al,%al
   11262:	74 21                	je     11285 <kernel_strncmp+0x79>
   11264:	8b 45 0c             	mov    0xc(%ebp),%eax
   11267:	0f b6 00             	movzbl (%eax),%eax
   1126a:	84 c0                	test   %al,%al
   1126c:	74 17                	je     11285 <kernel_strncmp+0x79>
   1126e:	8b 45 08             	mov    0x8(%ebp),%eax
   11271:	0f b6 10             	movzbl (%eax),%edx
   11274:	8b 45 0c             	mov    0xc(%ebp),%eax
   11277:	0f b6 00             	movzbl (%eax),%eax
   1127a:	38 c2                	cmp    %al,%dl
   1127c:	74 07                	je     11285 <kernel_strncmp+0x79>
   1127e:	b8 01 00 00 00       	mov    $0x1,%eax
   11283:	eb 05                	jmp    1128a <kernel_strncmp+0x7e>
   11285:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1128a:	5d                   	pop    %ebp
   1128b:	c3                   	ret

0001128c <kernel_strlen>:
{
   1128c:	55                   	push   %ebp
   1128d:	89 e5                	mov    %esp,%ebp
   1128f:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   11292:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11296:	75 07                	jne    1129f <kernel_strlen+0x13>
        return 0;
   11298:	b8 00 00 00 00       	mov    $0x0,%eax
   1129d:	eb 26                	jmp    112c5 <kernel_strlen+0x39>
    const char *c = str;
   1129f:	8b 45 08             	mov    0x8(%ebp),%eax
   112a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   112a5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   112ac:	eb 04                	jmp    112b2 <kernel_strlen+0x26>
        len++;
   112ae:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   112b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   112b5:	8d 50 01             	lea    0x1(%eax),%edx
   112b8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   112bb:	0f b6 00             	movzbl (%eax),%eax
   112be:	84 c0                	test   %al,%al
   112c0:	75 ec                	jne    112ae <kernel_strlen+0x22>
    return len;
   112c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   112c5:	c9                   	leave
   112c6:	c3                   	ret

000112c7 <kernel_memcpy>:
{
   112c7:	55                   	push   %ebp
   112c8:	89 e5                	mov    %esp,%ebp
   112ca:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   112cd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   112d1:	74 40                	je     11313 <kernel_memcpy+0x4c>
   112d3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112d7:	74 3a                	je     11313 <kernel_memcpy+0x4c>
   112d9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   112dd:	74 34                	je     11313 <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   112df:	8b 45 0c             	mov    0xc(%ebp),%eax
   112e2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   112e5:	8b 45 08             	mov    0x8(%ebp),%eax
   112e8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   112eb:	eb 17                	jmp    11304 <kernel_memcpy+0x3d>
        *d++ = *s++;
   112ed:	8b 55 fc             	mov    -0x4(%ebp),%edx
   112f0:	8d 42 01             	lea    0x1(%edx),%eax
   112f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
   112f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112f9:	8d 48 01             	lea    0x1(%eax),%ecx
   112fc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   112ff:	0f b6 12             	movzbl (%edx),%edx
   11302:	88 10                	mov    %dl,(%eax)
    while (size--)
   11304:	8b 45 10             	mov    0x10(%ebp),%eax
   11307:	8d 50 ff             	lea    -0x1(%eax),%edx
   1130a:	89 55 10             	mov    %edx,0x10(%ebp)
   1130d:	85 c0                	test   %eax,%eax
   1130f:	75 dc                	jne    112ed <kernel_memcpy+0x26>
   11311:	eb 01                	jmp    11314 <kernel_memcpy+0x4d>
        return;
   11313:	90                   	nop
}
   11314:	c9                   	leave
   11315:	c3                   	ret

00011316 <kernel_memset>:
{
   11316:	55                   	push   %ebp
   11317:	89 e5                	mov    %esp,%ebp
   11319:	83 ec 14             	sub    $0x14,%esp
   1131c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1131f:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   11322:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11326:	74 2c                	je     11354 <kernel_memset+0x3e>
   11328:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1132c:	74 26                	je     11354 <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   1132e:	8b 45 08             	mov    0x8(%ebp),%eax
   11331:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   11334:	eb 0f                	jmp    11345 <kernel_memset+0x2f>
        *d++ = v;
   11336:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11339:	8d 50 01             	lea    0x1(%eax),%edx
   1133c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1133f:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11343:	88 10                	mov    %dl,(%eax)
    while (size--)
   11345:	8b 45 10             	mov    0x10(%ebp),%eax
   11348:	8d 50 ff             	lea    -0x1(%eax),%edx
   1134b:	89 55 10             	mov    %edx,0x10(%ebp)
   1134e:	85 c0                	test   %eax,%eax
   11350:	75 e4                	jne    11336 <kernel_memset+0x20>
   11352:	eb 01                	jmp    11355 <kernel_memset+0x3f>
        return;
   11354:	90                   	nop
}
   11355:	c9                   	leave
   11356:	c3                   	ret

00011357 <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   11357:	55                   	push   %ebp
   11358:	89 e5                	mov    %esp,%ebp
   1135a:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   1135d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11361:	74 06                	je     11369 <kernel_memcmp+0x12>
   11363:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11367:	75 07                	jne    11370 <kernel_memcmp+0x19>
    {
        return 1;
   11369:	b8 01 00 00 00       	mov    $0x1,%eax
   1136e:	eb 43                	jmp    113b3 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   11370:	8b 45 08             	mov    0x8(%ebp),%eax
   11373:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   11376:	8b 45 0c             	mov    0xc(%ebp),%eax
   11379:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   1137c:	eb 23                	jmp    113a1 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   1137e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11381:	8d 50 01             	lea    0x1(%eax),%edx
   11384:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11387:	0f b6 08             	movzbl (%eax),%ecx
   1138a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1138d:	8d 50 01             	lea    0x1(%eax),%edx
   11390:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11393:	0f b6 00             	movzbl (%eax),%eax
   11396:	38 c1                	cmp    %al,%cl
   11398:	74 07                	je     113a1 <kernel_memcmp+0x4a>
        {
            return 1;
   1139a:	b8 01 00 00 00       	mov    $0x1,%eax
   1139f:	eb 12                	jmp    113b3 <kernel_memcmp+0x5c>
    while (size--)
   113a1:	8b 45 10             	mov    0x10(%ebp),%eax
   113a4:	8d 50 ff             	lea    -0x1(%eax),%edx
   113a7:	89 55 10             	mov    %edx,0x10(%ebp)
   113aa:	85 c0                	test   %eax,%eax
   113ac:	75 d0                	jne    1137e <kernel_memcmp+0x27>
        }
    }
    return 0;
   113ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
   113b3:	c9                   	leave
   113b4:	c3                   	ret

000113b5 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   113b5:	55                   	push   %ebp
   113b6:	89 e5                	mov    %esp,%ebp
   113b8:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   113bb:	8d 45 10             	lea    0x10(%ebp),%eax
   113be:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   113c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113c4:	83 ec 04             	sub    $0x4,%esp
   113c7:	50                   	push   %eax
   113c8:	ff 75 0c             	push   0xc(%ebp)
   113cb:	ff 75 08             	push   0x8(%ebp)
   113ce:	e8 dd 00 00 00       	call   114b0 <kernel_vsprintf>
   113d3:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   113d6:	90                   	nop
   113d7:	c9                   	leave
   113d8:	c3                   	ret

000113d9 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   113d9:	55                   	push   %ebp
   113da:	89 e5                	mov    %esp,%ebp
   113dc:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   113df:	8b 45 08             	mov    0x8(%ebp),%eax
   113e2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   113e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   113e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   113eb:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   113ef:	74 1d                	je     1140e <kernel_itoa+0x35>
   113f1:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   113f5:	74 17                	je     1140e <kernel_itoa+0x35>
   113f7:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   113fb:	74 11                	je     1140e <kernel_itoa+0x35>
   113fd:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11401:	74 0b                	je     1140e <kernel_itoa+0x35>
    {
        *p = '\0';
   11403:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11406:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11409:	e9 a0 00 00 00       	jmp    114ae <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   1140e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11412:	79 12                	jns    11426 <kernel_itoa+0x4d>
   11414:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11418:	75 0c                	jne    11426 <kernel_itoa+0x4d>
    {
        *p++ = '-';
   1141a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1141d:	8d 50 01             	lea    0x1(%eax),%edx
   11420:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11423:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   11426:	8b 0d 0c 1d 01 00    	mov    0x11d0c,%ecx
   1142c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1142f:	99                   	cltd
   11430:	f7 7d 10             	idivl  0x10(%ebp)
   11433:	89 d0                	mov    %edx,%eax
   11435:	83 c0 0f             	add    $0xf,%eax
   11438:	01 c8                	add    %ecx,%eax
   1143a:	0f b6 00             	movzbl (%eax),%eax
   1143d:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11440:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11443:	8d 50 01             	lea    0x1(%eax),%edx
   11446:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11449:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   1144d:	88 10                	mov    %dl,(%eax)
        num /= base;
   1144f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11452:	99                   	cltd
   11453:	f7 7d 10             	idivl  0x10(%ebp)
   11456:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   11459:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1145d:	75 c7                	jne    11426 <kernel_itoa+0x4d>
    *p-- = '\0';
   1145f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11462:	8d 50 ff             	lea    -0x1(%eax),%edx
   11465:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11468:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   1146b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1146f:	7f 08                	jg     11479 <kernel_itoa+0xa0>
   11471:	8b 45 08             	mov    0x8(%ebp),%eax
   11474:	83 c0 01             	add    $0x1,%eax
   11477:	eb 03                	jmp    1147c <kernel_itoa+0xa3>
   11479:	8b 45 08             	mov    0x8(%ebp),%eax
   1147c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   1147f:	eb 25                	jmp    114a6 <kernel_itoa+0xcd>
    {
        char ch = *start;
   11481:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11484:	0f b6 00             	movzbl (%eax),%eax
   11487:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   1148a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1148d:	0f b6 10             	movzbl (%eax),%edx
   11490:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11493:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11495:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11498:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   1149c:	88 10                	mov    %dl,(%eax)

        p--;
   1149e:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   114a2:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   114a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114a9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   114ac:	72 d3                	jb     11481 <kernel_itoa+0xa8>
    }
}
   114ae:	c9                   	leave
   114af:	c3                   	ret

000114b0 <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   114b0:	55                   	push   %ebp
   114b1:	89 e5                	mov    %esp,%ebp
   114b3:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   114b6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   114bd:	8b 45 08             	mov    0x8(%ebp),%eax
   114c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   114c3:	e9 11 01 00 00       	jmp    115d9 <kernel_vsprintf+0x129>
    {
        switch (state)
   114c8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   114cc:	74 0b                	je     114d9 <kernel_vsprintf+0x29>
   114ce:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   114d2:	74 2b                	je     114ff <kernel_vsprintf+0x4f>
   114d4:	e9 00 01 00 00       	jmp    115d9 <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   114d9:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   114dd:	75 0c                	jne    114eb <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   114df:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   114e6:	e9 ee 00 00 00       	jmp    115d9 <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   114eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   114ee:	8d 50 01             	lea    0x1(%eax),%edx
   114f1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   114f4:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   114f8:	88 10                	mov    %dl,(%eax)
            }
            break;
   114fa:	e9 da 00 00 00       	jmp    115d9 <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   114ff:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11503:	75 31                	jne    11536 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11505:	8b 45 10             	mov    0x10(%ebp),%eax
   11508:	8d 50 04             	lea    0x4(%eax),%edx
   1150b:	89 55 10             	mov    %edx,0x10(%ebp)
   1150e:	8b 00                	mov    (%eax),%eax
   11510:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   11513:	6a 0a                	push   $0xa
   11515:	ff 75 e4             	push   -0x1c(%ebp)
   11518:	ff 75 f8             	push   -0x8(%ebp)
   1151b:	e8 b9 fe ff ff       	call   113d9 <kernel_itoa>
   11520:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11523:	ff 75 f8             	push   -0x8(%ebp)
   11526:	e8 61 fd ff ff       	call   1128c <kernel_strlen>
   1152b:	83 c4 04             	add    $0x4,%esp
   1152e:	01 45 f8             	add    %eax,-0x8(%ebp)
   11531:	e9 9b 00 00 00       	jmp    115d1 <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   11536:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1153a:	75 2e                	jne    1156a <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   1153c:	8b 45 10             	mov    0x10(%ebp),%eax
   1153f:	8d 50 04             	lea    0x4(%eax),%edx
   11542:	89 55 10             	mov    %edx,0x10(%ebp)
   11545:	8b 00                	mov    (%eax),%eax
   11547:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   1154a:	6a 10                	push   $0x10
   1154c:	ff 75 e8             	push   -0x18(%ebp)
   1154f:	ff 75 f8             	push   -0x8(%ebp)
   11552:	e8 82 fe ff ff       	call   113d9 <kernel_itoa>
   11557:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   1155a:	ff 75 f8             	push   -0x8(%ebp)
   1155d:	e8 2a fd ff ff       	call   1128c <kernel_strlen>
   11562:	83 c4 04             	add    $0x4,%esp
   11565:	01 45 f8             	add    %eax,-0x8(%ebp)
   11568:	eb 67                	jmp    115d1 <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   1156a:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1156e:	75 19                	jne    11589 <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   11570:	8b 45 10             	mov    0x10(%ebp),%eax
   11573:	8d 50 04             	lea    0x4(%eax),%edx
   11576:	89 55 10             	mov    %edx,0x10(%ebp)
   11579:	8b 00                	mov    (%eax),%eax
   1157b:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   1157e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11581:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11585:	88 10                	mov    %dl,(%eax)
   11587:	eb 48                	jmp    115d1 <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   11589:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   1158d:	75 42                	jne    115d1 <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   1158f:	8b 45 10             	mov    0x10(%ebp),%eax
   11592:	8d 50 04             	lea    0x4(%eax),%edx
   11595:	89 55 10             	mov    %edx,0x10(%ebp)
   11598:	8b 00                	mov    (%eax),%eax
   1159a:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   1159d:	ff 75 f4             	push   -0xc(%ebp)
   115a0:	e8 e7 fc ff ff       	call   1128c <kernel_strlen>
   115a5:	83 c4 04             	add    $0x4,%esp
   115a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   115ab:	eb 17                	jmp    115c4 <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   115ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
   115b0:	8d 42 01             	lea    0x1(%edx),%eax
   115b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   115b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   115b9:	8d 48 01             	lea    0x1(%eax),%ecx
   115bc:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   115bf:	0f b6 12             	movzbl (%edx),%edx
   115c2:	88 10                	mov    %dl,(%eax)
                while (len--)
   115c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   115c7:	8d 50 ff             	lea    -0x1(%eax),%edx
   115ca:	89 55 f0             	mov    %edx,-0x10(%ebp)
   115cd:	85 c0                	test   %eax,%eax
   115cf:	75 dc                	jne    115ad <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   115d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   115d8:	90                   	nop
    while ((ch = *fmt++))
   115d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   115dc:	8d 50 01             	lea    0x1(%eax),%edx
   115df:	89 55 0c             	mov    %edx,0xc(%ebp)
   115e2:	0f b6 00             	movzbl (%eax),%eax
   115e5:	88 45 ef             	mov    %al,-0x11(%ebp)
   115e8:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   115ec:	0f 85 d6 fe ff ff    	jne    114c8 <kernel_vsprintf+0x18>
        }
    }
}
   115f2:	90                   	nop
   115f3:	90                   	nop
   115f4:	c9                   	leave
   115f5:	c3                   	ret

000115f6 <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   115f6:	55                   	push   %ebp
   115f7:	89 e5                	mov    %esp,%ebp
   115f9:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   115fc:	83 ec 08             	sub    $0x8,%esp
   115ff:	ff 75 14             	push   0x14(%ebp)
   11602:	68 c0 1c 01 00       	push   $0x11cc0
   11607:	e8 c6 02 00 00       	call   118d2 <log_prinf>
   1160c:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   1160f:	ff 75 10             	push   0x10(%ebp)
   11612:	ff 75 0c             	push   0xc(%ebp)
   11615:	ff 75 08             	push   0x8(%ebp)
   11618:	68 d2 1c 01 00       	push   $0x11cd2
   1161d:	e8 b0 02 00 00       	call   118d2 <log_prinf>
   11622:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   11625:	e8 24 fb ff ff       	call   1114e <hlt>
   1162a:	eb f9                	jmp    11625 <pannic+0x2f>

0001162c <list_is_empty>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
    // 表项为空，返回空
   1162c:	55                   	push   %ebp
   1162d:	89 e5                	mov    %esp,%ebp
    if (list_is_empty(list)) {
   1162f:	8b 45 08             	mov    0x8(%ebp),%eax
   11632:	8b 40 08             	mov    0x8(%eax),%eax
   11635:	85 c0                	test   %eax,%eax
   11637:	0f 94 c0             	sete   %al
   1163a:	0f b6 c0             	movzbl %al,%eax
        return (list_node_t*)0;
   1163d:	5d                   	pop    %ebp
   1163e:	c3                   	ret

0001163f <list_init>:
void list_init(list_t *list) {
   1163f:	55                   	push   %ebp
   11640:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   11642:	8b 45 08             	mov    0x8(%ebp),%eax
   11645:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1164c:	8b 45 08             	mov    0x8(%ebp),%eax
   1164f:	8b 50 04             	mov    0x4(%eax),%edx
   11652:	8b 45 08             	mov    0x8(%ebp),%eax
   11655:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11657:	8b 45 08             	mov    0x8(%ebp),%eax
   1165a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11661:	90                   	nop
   11662:	5d                   	pop    %ebp
   11663:	c3                   	ret

00011664 <list_insert_first>:
void list_insert_first(list_t *list, list_node_t *node) {
   11664:	55                   	push   %ebp
   11665:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   11667:	8b 45 08             	mov    0x8(%ebp),%eax
   1166a:	8b 10                	mov    (%eax),%edx
   1166c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1166f:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   11672:	8b 45 0c             	mov    0xc(%ebp),%eax
   11675:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if (list_is_empty(list)) {
   1167b:	ff 75 08             	push   0x8(%ebp)
   1167e:	e8 a9 ff ff ff       	call   1162c <list_is_empty>
   11683:	83 c4 04             	add    $0x4,%esp
   11686:	85 c0                	test   %eax,%eax
   11688:	74 15                	je     1169f <list_insert_first+0x3b>
        list->last = list->first = node;
   1168a:	8b 45 08             	mov    0x8(%ebp),%eax
   1168d:	8b 55 0c             	mov    0xc(%ebp),%edx
   11690:	89 10                	mov    %edx,(%eax)
   11692:	8b 45 08             	mov    0x8(%ebp),%eax
   11695:	8b 10                	mov    (%eax),%edx
   11697:	8b 45 08             	mov    0x8(%ebp),%eax
   1169a:	89 50 04             	mov    %edx,0x4(%eax)
   1169d:	eb 12                	jmp    116b1 <list_insert_first+0x4d>
        list->first->pre = node;
   1169f:	8b 45 08             	mov    0x8(%ebp),%eax
   116a2:	8b 00                	mov    (%eax),%eax
   116a4:	8b 55 0c             	mov    0xc(%ebp),%edx
   116a7:	89 10                	mov    %edx,(%eax)
        list->first = node;
   116a9:	8b 45 08             	mov    0x8(%ebp),%eax
   116ac:	8b 55 0c             	mov    0xc(%ebp),%edx
   116af:	89 10                	mov    %edx,(%eax)
    list->count++;
   116b1:	8b 45 08             	mov    0x8(%ebp),%eax
   116b4:	8b 40 08             	mov    0x8(%eax),%eax
   116b7:	8d 50 01             	lea    0x1(%eax),%edx
   116ba:	8b 45 08             	mov    0x8(%ebp),%eax
   116bd:	89 50 08             	mov    %edx,0x8(%eax)
}
   116c0:	90                   	nop
   116c1:	c9                   	leave
   116c2:	c3                   	ret

000116c3 <list_insert_last>:
void list_insert_last(list_t *list, list_node_t *node) {
   116c3:	55                   	push   %ebp
   116c4:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   116c6:	8b 45 08             	mov    0x8(%ebp),%eax
   116c9:	8b 50 04             	mov    0x4(%eax),%edx
   116cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   116cf:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   116d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   116d4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if (list_is_empty(list)) {
   116db:	ff 75 08             	push   0x8(%ebp)
   116de:	e8 49 ff ff ff       	call   1162c <list_is_empty>
   116e3:	83 c4 04             	add    $0x4,%esp
   116e6:	85 c0                	test   %eax,%eax
   116e8:	74 16                	je     11700 <list_insert_last+0x3d>
        list->first = list->last = node;
   116ea:	8b 45 08             	mov    0x8(%ebp),%eax
   116ed:	8b 55 0c             	mov    0xc(%ebp),%edx
   116f0:	89 50 04             	mov    %edx,0x4(%eax)
   116f3:	8b 45 08             	mov    0x8(%ebp),%eax
   116f6:	8b 50 04             	mov    0x4(%eax),%edx
   116f9:	8b 45 08             	mov    0x8(%ebp),%eax
   116fc:	89 10                	mov    %edx,(%eax)
   116fe:	eb 15                	jmp    11715 <list_insert_last+0x52>
        list->last->next = node;
   11700:	8b 45 08             	mov    0x8(%ebp),%eax
   11703:	8b 40 04             	mov    0x4(%eax),%eax
   11706:	8b 55 0c             	mov    0xc(%ebp),%edx
   11709:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   1170c:	8b 45 08             	mov    0x8(%ebp),%eax
   1170f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11712:	89 50 04             	mov    %edx,0x4(%eax)
    list->count++;
   11715:	8b 45 08             	mov    0x8(%ebp),%eax
   11718:	8b 40 08             	mov    0x8(%eax),%eax
   1171b:	8d 50 01             	lea    0x1(%eax),%edx
   1171e:	8b 45 08             	mov    0x8(%ebp),%eax
   11721:	89 50 08             	mov    %edx,0x8(%eax)
}
   11724:	90                   	nop
   11725:	c9                   	leave
   11726:	c3                   	ret

00011727 <list_remove_first>:
list_node_t* list_remove_first(list_t *list) {
   11727:	55                   	push   %ebp
   11728:	89 e5                	mov    %esp,%ebp
   1172a:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   1172d:	ff 75 08             	push   0x8(%ebp)
   11730:	e8 f7 fe ff ff       	call   1162c <list_is_empty>
   11735:	83 c4 04             	add    $0x4,%esp
   11738:	85 c0                	test   %eax,%eax
   1173a:	74 07                	je     11743 <list_remove_first+0x1c>
        return (list_node_t*)0;
   1173c:	b8 00 00 00 00       	mov    $0x0,%eax
   11741:	eb 5a                	jmp    1179d <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   11743:	8b 45 08             	mov    0x8(%ebp),%eax
   11746:	8b 00                	mov    (%eax),%eax
   11748:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   1174b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1174e:	8b 50 04             	mov    0x4(%eax),%edx
   11751:	8b 45 08             	mov    0x8(%ebp),%eax
   11754:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   11756:	8b 45 08             	mov    0x8(%ebp),%eax
   11759:	8b 00                	mov    (%eax),%eax
   1175b:	85 c0                	test   %eax,%eax
   1175d:	75 0c                	jne    1176b <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   1175f:	8b 45 08             	mov    0x8(%ebp),%eax
   11762:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11769:	eb 0c                	jmp    11777 <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   1176b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1176e:	8b 40 04             	mov    0x4(%eax),%eax
   11771:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   11777:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1177a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   11780:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11783:	8b 10                	mov    (%eax),%edx
   11785:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11788:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   1178b:	8b 45 08             	mov    0x8(%ebp),%eax
   1178e:	8b 40 08             	mov    0x8(%eax),%eax
   11791:	8d 50 ff             	lea    -0x1(%eax),%edx
   11794:	8b 45 08             	mov    0x8(%ebp),%eax
   11797:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1179a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1179d:	c9                   	leave
   1179e:	c3                   	ret

0001179f <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   1179f:	55                   	push   %ebp
   117a0:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   117a2:	8b 45 08             	mov    0x8(%ebp),%eax
   117a5:	8b 00                	mov    (%eax),%eax
   117a7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   117aa:	75 0b                	jne    117b7 <list_remove+0x18>
        list->first = remove_node->next;
   117ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   117af:	8b 50 04             	mov    0x4(%eax),%edx
   117b2:	8b 45 08             	mov    0x8(%ebp),%eax
   117b5:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   117b7:	8b 45 08             	mov    0x8(%ebp),%eax
   117ba:	8b 40 04             	mov    0x4(%eax),%eax
   117bd:	39 45 0c             	cmp    %eax,0xc(%ebp)
   117c0:	75 0b                	jne    117cd <list_remove+0x2e>
        list->last = remove_node->pre;
   117c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   117c5:	8b 10                	mov    (%eax),%edx
   117c7:	8b 45 08             	mov    0x8(%ebp),%eax
   117ca:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   117cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   117d0:	8b 00                	mov    (%eax),%eax
   117d2:	85 c0                	test   %eax,%eax
   117d4:	74 0e                	je     117e4 <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   117d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   117d9:	8b 00                	mov    (%eax),%eax
   117db:	8b 55 0c             	mov    0xc(%ebp),%edx
   117de:	8b 52 04             	mov    0x4(%edx),%edx
   117e1:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   117e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   117e7:	8b 40 04             	mov    0x4(%eax),%eax
   117ea:	85 c0                	test   %eax,%eax
   117ec:	74 0d                	je     117fb <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   117ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   117f1:	8b 40 04             	mov    0x4(%eax),%eax
   117f4:	8b 55 0c             	mov    0xc(%ebp),%edx
   117f7:	8b 12                	mov    (%edx),%edx
   117f9:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   117fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   117fe:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11805:	8b 45 0c             	mov    0xc(%ebp),%eax
   11808:	8b 50 04             	mov    0x4(%eax),%edx
   1180b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1180e:	89 10                	mov    %edx,(%eax)
    --list->count;
   11810:	8b 45 08             	mov    0x8(%ebp),%eax
   11813:	8b 40 08             	mov    0x8(%eax),%eax
   11816:	8d 50 ff             	lea    -0x1(%eax),%edx
   11819:	8b 45 08             	mov    0x8(%ebp),%eax
   1181c:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1181f:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   11822:	5d                   	pop    %ebp
   11823:	c3                   	ret

00011824 <inb>:
    outb(COM1_PORT + 3, 0x80);
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
    outb(COM1_PORT + 4, 0x0F);
   11824:	55                   	push   %ebp
   11825:	89 e5                	mov    %esp,%ebp
   11827:	83 ec 14             	sub    $0x14,%esp
   1182a:	8b 45 08             	mov    0x8(%ebp),%eax
   1182d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
}

   11831:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11835:	89 c2                	mov    %eax,%edx
   11837:	ec                   	in     (%dx),%al
   11838:	88 45 ff             	mov    %al,-0x1(%ebp)
void log_prinf(const char *fmt, ...)
{
    char str_buf[128];
   1183b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    va_list args;
   1183f:	c9                   	leave
   11840:	c3                   	ret

00011841 <outb>:

    const char *p = str_buf;
    while (*p != '\0')
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
            ;
   11841:	55                   	push   %ebp
   11842:	89 e5                	mov    %esp,%ebp
   11844:	83 ec 08             	sub    $0x8,%esp
   11847:	8b 55 08             	mov    0x8(%ebp),%edx
   1184a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1184d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11851:	88 45 f8             	mov    %al,-0x8(%ebp)
        outb(COM1_PORT, *p++);
   11854:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11858:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1185c:	ee                   	out    %al,(%dx)
    }
   1185d:	90                   	nop
   1185e:	c9                   	leave
   1185f:	c3                   	ret

00011860 <init_log>:
{
   11860:	55                   	push   %ebp
   11861:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11863:	6a 00                	push   $0x0
   11865:	68 f9 03 00 00       	push   $0x3f9
   1186a:	e8 d2 ff ff ff       	call   11841 <outb>
   1186f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11872:	68 80 00 00 00       	push   $0x80
   11877:	68 fb 03 00 00       	push   $0x3fb
   1187c:	e8 c0 ff ff ff       	call   11841 <outb>
   11881:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11884:	6a 03                	push   $0x3
   11886:	68 f8 03 00 00       	push   $0x3f8
   1188b:	e8 b1 ff ff ff       	call   11841 <outb>
   11890:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11893:	6a 00                	push   $0x0
   11895:	68 f9 03 00 00       	push   $0x3f9
   1189a:	e8 a2 ff ff ff       	call   11841 <outb>
   1189f:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   118a2:	6a 03                	push   $0x3
   118a4:	68 fb 03 00 00       	push   $0x3fb
   118a9:	e8 93 ff ff ff       	call   11841 <outb>
   118ae:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x07);
   118b1:	6a 07                	push   $0x7
   118b3:	68 fa 03 00 00       	push   $0x3fa
   118b8:	e8 84 ff ff ff       	call   11841 <outb>
   118bd:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   118c0:	6a 0f                	push   $0xf
   118c2:	68 fc 03 00 00       	push   $0x3fc
   118c7:	e8 75 ff ff ff       	call   11841 <outb>
   118cc:	83 c4 08             	add    $0x8,%esp
}
   118cf:	90                   	nop
   118d0:	c9                   	leave
   118d1:	c3                   	ret

000118d2 <log_prinf>:
{
   118d2:	55                   	push   %ebp
   118d3:	89 e5                	mov    %esp,%ebp
   118d5:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   118db:	83 ec 04             	sub    $0x4,%esp
   118de:	68 80 00 00 00       	push   $0x80
   118e3:	6a 00                	push   $0x0
   118e5:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   118eb:	50                   	push   %eax
   118ec:	e8 25 fa ff ff       	call   11316 <kernel_memset>
   118f1:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   118f4:	8d 45 0c             	lea    0xc(%ebp),%eax
   118f7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   118fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11903:	83 ec 04             	sub    $0x4,%esp
   11906:	50                   	push   %eax
   11907:	ff 75 08             	push   0x8(%ebp)
   1190a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11910:	50                   	push   %eax
   11911:	e8 9a fb ff ff       	call   114b0 <kernel_vsprintf>
   11916:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   11919:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1191f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   11922:	eb 3b                	jmp    1195f <log_prinf+0x8d>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   11924:	90                   	nop
   11925:	83 ec 0c             	sub    $0xc,%esp
   11928:	68 fd 03 00 00       	push   $0x3fd
   1192d:	e8 f2 fe ff ff       	call   11824 <inb>
   11932:	83 c4 10             	add    $0x10,%esp
   11935:	0f b6 c0             	movzbl %al,%eax
   11938:	83 e0 40             	and    $0x40,%eax
   1193b:	85 c0                	test   %eax,%eax
   1193d:	74 e6                	je     11925 <log_prinf+0x53>
        outb(COM1_PORT, *p++);
   1193f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11942:	8d 50 01             	lea    0x1(%eax),%edx
   11945:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11948:	0f b6 00             	movzbl (%eax),%eax
   1194b:	0f b6 c0             	movzbl %al,%eax
   1194e:	83 ec 08             	sub    $0x8,%esp
   11951:	50                   	push   %eax
   11952:	68 f8 03 00 00       	push   $0x3f8
   11957:	e8 e5 fe ff ff       	call   11841 <outb>
   1195c:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   1195f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11962:	0f b6 00             	movzbl (%eax),%eax
   11965:	84 c0                	test   %al,%al
   11967:	75 bb                	jne    11924 <log_prinf+0x52>

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   11969:	83 ec 08             	sub    $0x8,%esp
   1196c:	6a 0d                	push   $0xd
   1196e:	68 f8 03 00 00       	push   $0x3f8
   11973:	e8 c9 fe ff ff       	call   11841 <outb>
   11978:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   1197b:	83 ec 08             	sub    $0x8,%esp
   1197e:	6a 0a                	push   $0xa
   11980:	68 f8 03 00 00       	push   $0x3f8
   11985:	e8 b7 fe ff ff       	call   11841 <outb>
   1198a:	83 c4 10             	add    $0x10,%esp
}
   1198d:	90                   	nop
   1198e:	c9                   	leave
   1198f:	c3                   	ret
