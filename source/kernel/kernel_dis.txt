
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00002720 memsz 0x000075e0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002396  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000384  00012398  00012398  00003398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  0001271c  0001271c  0000371c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004ec0  00012720  00012720  00003720  2**5
                  ALLOC
  4 .debug_line   0000132d  00000000  00000000  00003720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 0000080b  00000000  00000000  00004a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00003f3d  00000000  00000000  00005258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000013ab  00000000  00000000  00009195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 000001a0  00000000  00000000  0000a540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000e6b  00000000  00000000  0000a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  0000b54b  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000fcc  00000000  00000000  0000b560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102bd l     F .text	0000005d addr_alloc_init
0001031a l     F .text	00000067 addr_alloc_page
00010381 l     F .text	00000062 addr_free_page
00000000 l    df *ABS*	00000000 task.c
0001046b l     F .text	0000001b list_node_init
00010486 l     F .text	0000000b list_node_next
00010491 l     F .text	0000000b list_count
0001049c l     F .text	0000000a list_first
000104a6 l     F .text	00000007 hlt
000104ad l     F .text	00000017 write_tr
00012720 l     O .bss	00001000 idle_task_stack
00013720 l     O .bss	00000190 task_manager
000104c4 l     F .text	00000107 tss_init
00012424 l     O .rodata	0000000a __func__.0
000106da l     F .text	0000000a idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
00010a6a l     F .text	00000028 lgdt
00010a92 l     F .text	0000001a far_jump
000138c0 l     O .bss	00000800 gdt_table
000140c0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00010c89 l     F .text	0000001d inb
00010ca6 l     F .text	0000001f outb
00010cc5 l     F .text	00000007 cli
00010ccc l     F .text	00000007 sti
00010cd3 l     F .text	00000028 lidt
00010cfb l     F .text	00000007 hlt
00010d02 l     F .text	00000010 read_eflags
00010d12 l     F .text	0000000b write_eflags
000140e0 l     O .bss	00000400 idt_table
00010d1d l     F .text	000000d9 dump_core_regs
00010df6 l     F .text	0000003e do_default_handler
00011064 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011456 l     F .text	0000001f outb
000144e0 l     O .bss	00000004 sys_tick
0001149d l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00014500 l     O .bss	00001000 init_task_stack
00015500 l     O .bss	000000b4 init_task
000155b4 l     O .bss	00000010 sem
00000000 l    df *ABS*	00000000 mutex.c
0001160e l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00011795 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00011b0c l     F .text	00000007 hlt
0001271c l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 list.c
00011fea l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000121e2 l     F .text	0000001d inb
000121ff l     F .text	0000001f outb
000155c4 l     O .bss	00000014 mutex
00011942 g     F .text	00000038 bitmap_get_bit
00011c85 g     F .text	0000004f kernel_memcpy
000107ed g     F .text	0000000a task_current
000113f7 g     F .text	0000000b irq_enable_global
00012081 g     F .text	00000064 list_insert_last
00010f68 g     F .text	0000001c do_handler_segment_not_present
0001078e g     F .text	00000034 task_set_ready
00011a3e g     F .text	0000001b bitmap_is_set
00011cd4 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010c6b g     F .text	0000001e cpu_init
0001156e g     F .text	000000a0 init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00011b13 g     F .text	00000047 kernel_strcpy
000112da g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
00010ec0 g     F .text	0000001c do_handler_overflow
00010ff4 g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010fa0 g     F .text	0000001c do_handler_general_protection
000118b0 g     F .text	00000029 sem_count
00010e50 g     F .text	0000001c do_handler_divider
0001197a g     F .text	000000c4 bitmap_set_bit
00010f30 g     F .text	0000001c do_handler_double_fault
00011545 g     F .text	00000029 init_task_entry
00010fbc g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00011402 g     F .text	0000002b pic_send_eoi
00010784 g     F .text	0000000a task_first_task
000117c3 g     F .text	0000006b sem_wait
0001221e g     F .text	0000009a init_log
00010e34 g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00011048 g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
000155e0 g     O .bss	00002000 stack
00010a13 g     F .text	00000057 sys_sleep
000100e5 g       .text	00000000 exception_handler_bound_range
0001182e g     F .text	00000082 sem_notify
00010ef8 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010fd8 g     F .text	0000001c do_handler_fpu_error
00010747 g     F .text	0000003d task_first_init
00011010 g     F .text	0000001c do_handler_machine_check
00010e6c g     F .text	0000001c do_handler_Debug
00012022 g     F .text	0000005f list_insert_first
000109f3 g     F .text	00000020 task_set_wakeup
00010e88 g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00011b5a g     F .text	00000070 kernel_strncpy
000113ec g     F .text	0000000b irq_disable_global
000107f7 g     F .text	00000061 sys_sched_yield
00011515 g     F .text	00000030 kernel_init
000117a0 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00011e6e g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
00011647 g     F .text	00000091 mutex_lock
0001022c g       .text	00000000 exception_handler_machine_check
00010f4c g     F .text	0000001c do_handler_invalid_tss
000109b9 g     F .text	0000003a task_set_sleep
000112a5 g     F .text	00000035 irq_install
000122b8 g     F .text	000000de log_prinf
00010b2f g     F .text	0000006d init_gdt
0001142d g     F .text	00000018 irq_enter_protection
00011619 g     F .text	0000002e mutex_init
00011365 g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
000118d9 g     F .text	00000016 bitmap_byte_count
00010f14 g     F .text	0000001c do_handler_device_unavailable
0001089b g     F .text	00000045 task_dispatch
00010c58 g     F .text	00000013 switch_to_tss
00010858 g     F .text	00000043 task_next_run
00011d15 g     F .text	0000005e kernel_memcmp
00011ffd g     F .text	00000025 list_init
0001002b g       .text	00000000 exception_handler_unknow
0001102c g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
000107c2 g     F .text	0000002b task_set_block
000101f0 g       .text	00000000 exception_handler_fpu_error
000106bc g     F .text	0000001e task_switch_from_to
00010be3 g     F .text	00000075 gdt_alloc_des
000110f7 g     F .text	000001ae irq_init
000116d8 g     F .text	000000bd mutex_unlock
00011445 g     F .text	00000011 irq_leave_protection
00011c4a g     F .text	0000003b kernel_strlen
00010aac g     F .text	00000083 segment_desc_set
00010edc g     F .text	0000001c do_handler_bound_range
000120e5 g     F .text	00000078 list_remove_first
00011bca g     F .text	00000080 kernel_strncmp
000118ef g     F .text	00000053 bitmap_init
0001017c g       .text	00000000 exception_handler_segment_not_present
000114fd g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
00011a59 g     F .text	000000b3 bitmap_alloc_nbits
000106e4 g     F .text	00000063 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
000108e0 g     F .text	000000d9 task_time_tick
000103e3 g     F .text	00000088 memory_init
00011fb4 g     F .text	00000036 pannic
00010f84 g     F .text	0000001c do_handler_stack_segment_fault
00010ea4 g     F .text	0000001c do_handler_breakpoint
000105cb g     F .text	000000f1 task_init
00011d73 g     F .text	00000024 kernel_sprintf
00011d97 g     F .text	000000d7 kernel_itoa
0001215d g     F .text	00000085 list_remove
00010b9c g     F .text	00000047 gate_desc_set
00011475 g     F .text	00000028 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 09 15 00 00       	call   11515 <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc e0 75 01 00       	mov    $0x175e0,%esp
    jmp init_main
   10026:	e9 43 15 00 00       	jmp    1156e <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 f8 0d 00 00       	call   10e34 <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 f5 0d 00 00       	call   10e50 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 f2 0d 00 00       	call   10e6c <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 ef 0d 00 00       	call   10e88 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 ec 0d 00 00       	call   10ea4 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 e9 0d 00 00       	call   10ec0 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 e6 0d 00 00       	call   10edc <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 e3 0d 00 00       	call   10ef8 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 e0 0d 00 00       	call   10f14 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 df 0d 00 00       	call   10f30 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 de 0d 00 00       	call   10f4c <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 dd 0d 00 00       	call   10f68 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 dc 0d 00 00       	call   10f84 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 db 0d 00 00       	call   10fa0 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 da 0d 00 00       	call   10fbc <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 d7 0d 00 00       	call   10fd8 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 d6 0d 00 00       	call   10ff4 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 d3 0d 00 00       	call   11010 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 d0 0d 00 00       	call   1102c <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 cd 0d 00 00       	call   11048 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 db 11 00 00       	call   11475 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <simple_switch>:
    //simple_switch(&from,&to)
     .text
     .global simple_switch
simple_switch:
    //取出from
    mov 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    //取出to
    mov 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp

    ret
   102bc:	c3                   	ret

000102bd <addr_alloc_init>:
#include "core/memory.h"

static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits,
                            uint32_t start, uint32_t size, uint32_t page_size)
{
   102bd:	55                   	push   %ebp
   102be:	89 e5                	mov    %esp,%ebp
   102c0:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   102c3:	8b 45 08             	mov    0x8(%ebp),%eax
   102c6:	83 ec 0c             	sub    $0xc,%esp
   102c9:	50                   	push   %eax
   102ca:	e8 4a 13 00 00       	call   11619 <mutex_init>
   102cf:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   102d2:	8b 45 08             	mov    0x8(%ebp),%eax
   102d5:	8b 55 10             	mov    0x10(%ebp),%edx
   102d8:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   102db:	8b 45 08             	mov    0x8(%ebp),%eax
   102de:	8b 55 14             	mov    0x14(%ebp),%edx
   102e1:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   102e4:	8b 45 08             	mov    0x8(%ebp),%eax
   102e7:	8b 55 18             	mov    0x18(%ebp),%edx
   102ea:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / alloc->page_size, 0);
   102ed:	8b 45 08             	mov    0x8(%ebp),%eax
   102f0:	8b 40 20             	mov    0x20(%eax),%eax
   102f3:	8b 55 08             	mov    0x8(%ebp),%edx
   102f6:	8b 4a 24             	mov    0x24(%edx),%ecx
   102f9:	ba 00 00 00 00       	mov    $0x0,%edx
   102fe:	f7 f1                	div    %ecx
   10300:	89 c2                	mov    %eax,%edx
   10302:	8b 45 08             	mov    0x8(%ebp),%eax
   10305:	83 c0 14             	add    $0x14,%eax
   10308:	6a 00                	push   $0x0
   1030a:	52                   	push   %edx
   1030b:	ff 75 0c             	push   0xc(%ebp)
   1030e:	50                   	push   %eax
   1030f:	e8 db 15 00 00       	call   118ef <bitmap_init>
   10314:	83 c4 10             	add    $0x10,%esp
}
   10317:	90                   	nop
   10318:	c9                   	leave
   10319:	c3                   	ret

0001031a <addr_alloc_page>:

static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   1031a:	55                   	push   %ebp
   1031b:	89 e5                	mov    %esp,%ebp
   1031d:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10320:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&alloc->mutex);
   10327:	8b 45 08             	mov    0x8(%ebp),%eax
   1032a:	83 ec 0c             	sub    $0xc,%esp
   1032d:	50                   	push   %eax
   1032e:	e8 14 13 00 00       	call   11647 <mutex_lock>
   10333:	83 c4 10             	add    $0x10,%esp
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10336:	8b 45 08             	mov    0x8(%ebp),%eax
   10339:	83 c0 14             	add    $0x14,%eax
   1033c:	83 ec 04             	sub    $0x4,%esp
   1033f:	ff 75 0c             	push   0xc(%ebp)
   10342:	6a 00                	push   $0x0
   10344:	50                   	push   %eax
   10345:	e8 0f 17 00 00       	call   11a59 <bitmap_alloc_nbits>
   1034a:	83 c4 10             	add    $0x10,%esp
   1034d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   10350:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10354:	78 17                	js     1036d <addr_alloc_page+0x53>
    {
        addr = alloc->start + page_index * alloc->page_size;
   10356:	8b 45 08             	mov    0x8(%ebp),%eax
   10359:	8b 48 1c             	mov    0x1c(%eax),%ecx
   1035c:	8b 45 08             	mov    0x8(%ebp),%eax
   1035f:	8b 50 24             	mov    0x24(%eax),%edx
   10362:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10365:	0f af c2             	imul   %edx,%eax
   10368:	01 c8                	add    %ecx,%eax
   1036a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    mutex_unlock(&alloc->mutex);
   1036d:	8b 45 08             	mov    0x8(%ebp),%eax
   10370:	83 ec 0c             	sub    $0xc,%esp
   10373:	50                   	push   %eax
   10374:	e8 5f 13 00 00       	call   116d8 <mutex_unlock>
   10379:	83 c4 10             	add    $0x10,%esp
    return addr;
   1037c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1037f:	c9                   	leave
   10380:	c3                   	ret

00010381 <addr_free_page>:

static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   10381:	55                   	push   %ebp
   10382:	89 e5                	mov    %esp,%ebp
   10384:	53                   	push   %ebx
   10385:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   10388:	8b 45 08             	mov    0x8(%ebp),%eax
   1038b:	83 ec 0c             	sub    $0xc,%esp
   1038e:	50                   	push   %eax
   1038f:	e8 b3 12 00 00       	call   11647 <mutex_lock>
   10394:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = (addr - alloc->start) / alloc->page_size;
   10397:	8b 45 08             	mov    0x8(%ebp),%eax
   1039a:	8b 40 1c             	mov    0x1c(%eax),%eax
   1039d:	8b 55 0c             	mov    0xc(%ebp),%edx
   103a0:	89 d1                	mov    %edx,%ecx
   103a2:	29 c1                	sub    %eax,%ecx
   103a4:	8b 45 08             	mov    0x8(%ebp),%eax
   103a7:	8b 58 24             	mov    0x24(%eax),%ebx
   103aa:	89 c8                	mov    %ecx,%eax
   103ac:	ba 00 00 00 00       	mov    $0x0,%edx
   103b1:	f7 f3                	div    %ebx
   103b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_index, page_count, 0);
   103b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   103b9:	8b 55 08             	mov    0x8(%ebp),%edx
   103bc:	83 c2 14             	add    $0x14,%edx
   103bf:	6a 00                	push   $0x0
   103c1:	ff 75 10             	push   0x10(%ebp)
   103c4:	50                   	push   %eax
   103c5:	52                   	push   %edx
   103c6:	e8 af 15 00 00       	call   1197a <bitmap_set_bit>
   103cb:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&alloc->mutex);
   103ce:	8b 45 08             	mov    0x8(%ebp),%eax
   103d1:	83 ec 0c             	sub    $0xc,%esp
   103d4:	50                   	push   %eax
   103d5:	e8 fe 12 00 00       	call   116d8 <mutex_unlock>
   103da:	83 c4 10             	add    $0x10,%esp
}
   103dd:	90                   	nop
   103de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   103e1:	c9                   	leave
   103e2:	c3                   	ret

000103e3 <memory_init>:
// 对计算机整个内存初始化
void memory_init(boot_info_t *boot_info)
{
   103e3:	55                   	push   %ebp
   103e4:	89 e5                	mov    %esp,%ebp
   103e6:	83 ec 48             	sub    $0x48,%esp
    addr_alloc_t add_alloc;
    uint8_t bits[8];
    addr_alloc_init(&add_alloc, bits, 0x1000, 64 * 4096, 4096);
   103e9:	83 ec 0c             	sub    $0xc,%esp
   103ec:	68 00 10 00 00       	push   $0x1000
   103f1:	68 00 00 04 00       	push   $0x40000
   103f6:	68 00 10 00 00       	push   $0x1000
   103fb:	8d 45 b8             	lea    -0x48(%ebp),%eax
   103fe:	50                   	push   %eax
   103ff:	8d 45 c0             	lea    -0x40(%ebp),%eax
   10402:	50                   	push   %eax
   10403:	e8 b5 fe ff ff       	call   102bd <addr_alloc_init>
   10408:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < 32; i++)
   1040b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10412:	eb 18                	jmp    1042c <memory_init+0x49>
    {
        uint32_t addr = addr_alloc_page(&add_alloc, 2);
   10414:	83 ec 08             	sub    $0x8,%esp
   10417:	6a 02                	push   $0x2
   10419:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1041c:	50                   	push   %eax
   1041d:	e8 f8 fe ff ff       	call   1031a <addr_alloc_page>
   10422:	83 c4 10             	add    $0x10,%esp
   10425:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (int i = 0; i < 32; i++)
   10428:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1042c:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
   10430:	7e e2                	jle    10414 <memory_init+0x31>
    }

    uint32_t addr = 0x1000;
   10432:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
    for (int i = 0; i < 32; i++)
   10439:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   10440:	eb 1f                	jmp    10461 <memory_init+0x7e>
    {
        addr_free_page(&add_alloc, addr, 2);
   10442:	83 ec 04             	sub    $0x4,%esp
   10445:	6a 02                	push   $0x2
   10447:	ff 75 f0             	push   -0x10(%ebp)
   1044a:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1044d:	50                   	push   %eax
   1044e:	e8 2e ff ff ff       	call   10381 <addr_free_page>
   10453:	83 c4 10             	add    $0x10,%esp
        addr += 8192;
   10456:	81 45 f0 00 20 00 00 	addl   $0x2000,-0x10(%ebp)
    for (int i = 0; i < 32; i++)
   1045d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   10461:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
   10465:	7e db                	jle    10442 <memory_init+0x5f>
    }
   10467:	90                   	nop
   10468:	90                   	nop
   10469:	c9                   	leave
   1046a:	c3                   	ret

0001046b <list_node_init>:
        // gdt表已经满了无法添加tss描述副到gdt中
        log_prinf("alloc tss failed");
        return -1;
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   1046b:	55                   	push   %ebp
   1046c:	89 e5                	mov    %esp,%ebp
                     SEG_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);
   1046e:	8b 45 08             	mov    0x8(%ebp),%eax
   10471:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10478:	8b 45 08             	mov    0x8(%ebp),%eax
   1047b:	8b 50 04             	mov    0x4(%eax),%edx
   1047e:	8b 45 08             	mov    0x8(%ebp),%eax
   10481:	89 10                	mov    %edx,(%eax)

   10483:	90                   	nop
   10484:	5d                   	pop    %ebp
   10485:	c3                   	ret

00010486 <list_node_next>:
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp)
{
    ASSERT(task != (task_t *)0);
    tss_init(task, entry, esp);
    // 复制进程名到task.name中
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10486:	55                   	push   %ebp
   10487:	89 e5                	mov    %esp,%ebp
    task->state = TASK_CREATED; // 将开始创建的进程状态设置成task_created
   10489:	8b 45 08             	mov    0x8(%ebp),%eax
   1048c:	8b 40 04             	mov    0x4(%eax),%eax
    task->sleep_ticks = 0;      // 初始化任务延迟时间
   1048f:	5d                   	pop    %ebp
   10490:	c3                   	ret

00010491 <list_count>:
{
    for (;;)
    {
        hlt(); // 执行低功耗指令
    }
}
   10491:	55                   	push   %ebp
   10492:	89 e5                	mov    %esp,%ebp

   10494:	8b 45 08             	mov    0x8(%ebp),%eax
   10497:	8b 40 08             	mov    0x8(%eax),%eax
void task_manager_init(void)
   1049a:	5d                   	pop    %ebp
   1049b:	c3                   	ret

0001049c <list_first>:
    list_init(&task_manager.task_list);
    list_init(&task_manager.sleep_list);
    task_manager.currt_task = (task_t *)0;

    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)(idle_task_stack + IDLE_TASK_SIZE));
}
   1049c:	55                   	push   %ebp
   1049d:	89 e5                	mov    %esp,%ebp

   1049f:	8b 45 08             	mov    0x8(%ebp),%eax
   104a2:	8b 00                	mov    (%eax),%eax
void task_first_init(void)
   104a4:	5d                   	pop    %ebp
   104a5:	c3                   	ret

000104a6 <hlt>:
    uint32_t addr[] = {offset, selector};
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
}

static inline void hlt(void)
{
   104a6:	55                   	push   %ebp
   104a7:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   104a9:	f4                   	hlt
}
   104aa:	90                   	nop
   104ab:	5d                   	pop    %ebp
   104ac:	c3                   	ret

000104ad <write_tr>:

static inline void write_tr(uint16_t tss_sel)
{
   104ad:	55                   	push   %ebp
   104ae:	89 e5                	mov    %esp,%ebp
   104b0:	83 ec 04             	sub    $0x4,%esp
   104b3:	8b 45 08             	mov    0x8(%ebp),%eax
   104b6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_sel));
   104ba:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   104be:	0f 00 d8             	ltr    %ax
}
   104c1:	90                   	nop
   104c2:	c9                   	leave
   104c3:	c3                   	ret

000104c4 <tss_init>:
{
   104c4:	55                   	push   %ebp
   104c5:	89 e5                	mov    %esp,%ebp
   104c7:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_des();
   104ca:	e8 14 07 00 00       	call   10be3 <gdt_alloc_des>
   104cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   104d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   104d6:	79 1a                	jns    104f2 <tss_init+0x2e>
        log_prinf("alloc tss failed");
   104d8:	83 ec 0c             	sub    $0xc,%esp
   104db:	68 98 23 01 00       	push   $0x12398
   104e0:	e8 d3 1d 00 00       	call   122b8 <log_prinf>
   104e5:	83 c4 10             	add    $0x10,%esp
        return -1;
   104e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   104ed:	e9 d7 00 00 00       	jmp    105c9 <tss_init+0x105>
    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   104f2:	8b 45 08             	mov    0x8(%ebp),%eax
   104f5:	83 c0 48             	add    $0x48,%eax
   104f8:	68 89 00 00 00       	push   $0x89
   104fd:	68 b4 00 00 00       	push   $0xb4
   10502:	50                   	push   %eax
   10503:	ff 75 f4             	push   -0xc(%ebp)
   10506:	e8 a1 05 00 00       	call   10aac <segment_desc_set>
   1050b:	83 c4 10             	add    $0x10,%esp
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   1050e:	8b 45 08             	mov    0x8(%ebp),%eax
   10511:	83 c0 48             	add    $0x48,%eax
   10514:	83 ec 04             	sub    $0x4,%esp
   10517:	6a 68                	push   $0x68
   10519:	6a 00                	push   $0x0
   1051b:	50                   	push   %eax
   1051c:	e8 b3 17 00 00       	call   11cd4 <kernel_memset>
   10521:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   10524:	8b 45 08             	mov    0x8(%ebp),%eax
   10527:	8b 55 0c             	mov    0xc(%ebp),%edx
   1052a:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1052d:	8b 45 08             	mov    0x8(%ebp),%eax
   10530:	8b 55 10             	mov    0x10(%ebp),%edx
   10533:	89 50 4c             	mov    %edx,0x4c(%eax)
   10536:	8b 45 08             	mov    0x8(%ebp),%eax
   10539:	8b 50 4c             	mov    0x4c(%eax),%edx
   1053c:	8b 45 08             	mov    0x8(%ebp),%eax
   1053f:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10545:	8b 45 08             	mov    0x8(%ebp),%eax
   10548:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
   1054f:	8b 45 08             	mov    0x8(%ebp),%eax
   10552:	8b 50 50             	mov    0x50(%eax),%edx
   10555:	8b 45 08             	mov    0x8(%ebp),%eax
   10558:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   1055e:	8b 45 08             	mov    0x8(%ebp),%eax
   10561:	c7 80 a4 00 00 00 10 	movl   $0x10,0xa4(%eax)
   10568:	00 00 00 
   1056b:	8b 45 08             	mov    0x8(%ebp),%eax
   1056e:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10574:	8b 45 08             	mov    0x8(%ebp),%eax
   10577:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   1057d:	8b 45 08             	mov    0x8(%ebp),%eax
   10580:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10586:	8b 45 08             	mov    0x8(%ebp),%eax
   10589:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   1058f:	8b 45 08             	mov    0x8(%ebp),%eax
   10592:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10598:	8b 45 08             	mov    0x8(%ebp),%eax
   1059b:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   105a1:	8b 45 08             	mov    0x8(%ebp),%eax
   105a4:	c7 80 94 00 00 00 08 	movl   $0x8,0x94(%eax)
   105ab:	00 00 00 
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFALUT;
   105ae:	8b 45 08             	mov    0x8(%ebp),%eax
   105b1:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)
    task->tss_sel = tss_sel; // 将tss选择子保存到tss_sel中
   105b8:	8b 45 08             	mov    0x8(%ebp),%eax
   105bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
   105be:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   105c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   105c9:	c9                   	leave
   105ca:	c3                   	ret

000105cb <task_init>:
{
   105cb:	55                   	push   %ebp
   105cc:	89 e5                	mov    %esp,%ebp
   105ce:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   105d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105d5:	75 19                	jne    105f0 <task_init+0x25>
   105d7:	68 a9 23 01 00       	push   $0x123a9
   105dc:	68 24 24 01 00       	push   $0x12424
   105e1:	6a 29                	push   $0x29
   105e3:	68 c0 23 01 00       	push   $0x123c0
   105e8:	e8 c7 19 00 00       	call   11fb4 <pannic>
   105ed:	83 c4 10             	add    $0x10,%esp
    tss_init(task, entry, esp);
   105f0:	83 ec 04             	sub    $0x4,%esp
   105f3:	ff 75 14             	push   0x14(%ebp)
   105f6:	ff 75 10             	push   0x10(%ebp)
   105f9:	ff 75 08             	push   0x8(%ebp)
   105fc:	e8 c3 fe ff ff       	call   104c4 <tss_init>
   10601:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10604:	8b 45 08             	mov    0x8(%ebp),%eax
   10607:	83 c0 10             	add    $0x10,%eax
   1060a:	83 ec 04             	sub    $0x4,%esp
   1060d:	6a 20                	push   $0x20
   1060f:	ff 75 0c             	push   0xc(%ebp)
   10612:	50                   	push   %eax
   10613:	e8 42 15 00 00       	call   11b5a <kernel_strncpy>
   10618:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED; // 将开始创建的进程状态设置成task_created
   1061b:	8b 45 08             	mov    0x8(%ebp),%eax
   1061e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;      // 初始化任务延迟时间
   10624:	8b 45 08             	mov    0x8(%ebp),%eax
   10627:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   1062e:	8b 45 08             	mov    0x8(%ebp),%eax
   10631:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task->slice_ticks = task->time_ticks;
   10638:	8b 45 08             	mov    0x8(%ebp),%eax
   1063b:	8b 50 08             	mov    0x8(%eax),%edx
   1063e:	8b 45 08             	mov    0x8(%ebp),%eax
   10641:	89 50 0c             	mov    %edx,0xc(%eax)
    list_node_init(&task->all_node);
   10644:	8b 45 08             	mov    0x8(%ebp),%eax
   10647:	83 c0 40             	add    $0x40,%eax
   1064a:	83 ec 0c             	sub    $0xc,%esp
   1064d:	50                   	push   %eax
   1064e:	e8 18 fe ff ff       	call   1046b <list_node_init>
   10653:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10656:	8b 45 08             	mov    0x8(%ebp),%eax
   10659:	83 c0 30             	add    $0x30,%eax
   1065c:	83 ec 0c             	sub    $0xc,%esp
   1065f:	50                   	push   %eax
   10660:	e8 06 fe ff ff       	call   1046b <list_node_init>
   10665:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10668:	8b 45 08             	mov    0x8(%ebp),%eax
   1066b:	83 c0 38             	add    $0x38,%eax
   1066e:	83 ec 0c             	sub    $0xc,%esp
   10671:	50                   	push   %eax
   10672:	e8 f4 fd ff ff       	call   1046b <list_node_init>
   10677:	83 c4 10             	add    $0x10,%esp
    irq_state_t state = irq_enter_protection();
   1067a:	e8 ae 0d 00 00       	call   1142d <irq_enter_protection>
   1067f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   10682:	83 ec 0c             	sub    $0xc,%esp
   10685:	ff 75 08             	push   0x8(%ebp)
   10688:	e8 01 01 00 00       	call   1078e <task_set_ready>
   1068d:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node);
   10690:	8b 45 08             	mov    0x8(%ebp),%eax
   10693:	83 c0 40             	add    $0x40,%eax
   10696:	83 ec 08             	sub    $0x8,%esp
   10699:	50                   	push   %eax
   1069a:	68 30 37 01 00       	push   $0x13730
   1069f:	e8 dd 19 00 00       	call   12081 <list_insert_last>
   106a4:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   106a7:	83 ec 0c             	sub    $0xc,%esp
   106aa:	ff 75 f4             	push   -0xc(%ebp)
   106ad:	e8 93 0d 00 00       	call   11445 <irq_leave_protection>
   106b2:	83 c4 10             	add    $0x10,%esp
    return 0;
   106b5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106ba:	c9                   	leave
   106bb:	c3                   	ret

000106bc <task_switch_from_to>:
{
   106bc:	55                   	push   %ebp
   106bd:	89 e5                	mov    %esp,%ebp
   106bf:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   106c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   106c5:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   106cb:	83 ec 0c             	sub    $0xc,%esp
   106ce:	50                   	push   %eax
   106cf:	e8 84 05 00 00       	call   10c58 <switch_to_tss>
   106d4:	83 c4 10             	add    $0x10,%esp
}
   106d7:	90                   	nop
   106d8:	c9                   	leave
   106d9:	c3                   	ret

000106da <idle_task_entry>:
{
   106da:	55                   	push   %ebp
   106db:	89 e5                	mov    %esp,%ebp
        hlt(); // 执行低功耗指令
   106dd:	e8 c4 fd ff ff       	call   104a6 <hlt>
   106e2:	eb f9                	jmp    106dd <idle_task_entry+0x3>

000106e4 <task_manager_init>:
{
   106e4:	55                   	push   %ebp
   106e5:	89 e5                	mov    %esp,%ebp
   106e7:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list);
   106ea:	83 ec 0c             	sub    $0xc,%esp
   106ed:	68 24 37 01 00       	push   $0x13724
   106f2:	e8 06 19 00 00       	call   11ffd <list_init>
   106f7:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   106fa:	83 ec 0c             	sub    $0xc,%esp
   106fd:	68 30 37 01 00       	push   $0x13730
   10702:	e8 f6 18 00 00       	call   11ffd <list_init>
   10707:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1070a:	83 ec 0c             	sub    $0xc,%esp
   1070d:	68 3c 37 01 00       	push   $0x1373c
   10712:	e8 e6 18 00 00       	call   11ffd <list_init>
   10717:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = (task_t *)0;
   1071a:	c7 05 20 37 01 00 00 	movl   $0x0,0x13720
   10721:	00 00 00 
    task_init(&task_manager.idle_task, "idle_task", (uint32_t)idle_task_entry, (uint32_t)(idle_task_stack + IDLE_TASK_SIZE));
   10724:	b8 20 37 01 00       	mov    $0x13720,%eax
   10729:	89 c2                	mov    %eax,%edx
   1072b:	b8 da 06 01 00       	mov    $0x106da,%eax
   10730:	52                   	push   %edx
   10731:	50                   	push   %eax
   10732:	68 0d 24 01 00       	push   $0x1240d
   10737:	68 fc 37 01 00       	push   $0x137fc
   1073c:	e8 8a fe ff ff       	call   105cb <task_init>
   10741:	83 c4 10             	add    $0x10,%esp
}
   10744:	90                   	nop
   10745:	c9                   	leave
   10746:	c3                   	ret

00010747 <task_first_init>:
{
   10747:	55                   	push   %ebp
   10748:	89 e5                	mov    %esp,%ebp
   1074a:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 0, 0); //??为什么入口设置为0，堆栈也设置为0
   1074d:	6a 00                	push   $0x0
   1074f:	6a 00                	push   $0x0
   10751:	68 17 24 01 00       	push   $0x12417
   10756:	68 48 37 01 00       	push   $0x13748
   1075b:	e8 6b fe ff ff       	call   105cb <task_init>
   10760:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10763:	a1 f8 37 01 00       	mov    0x137f8,%eax
   10768:	0f b7 c0             	movzwl %ax,%eax
   1076b:	83 ec 0c             	sub    $0xc,%esp
   1076e:	50                   	push   %eax
   1076f:	e8 39 fd ff ff       	call   104ad <write_tr>
   10774:	83 c4 10             	add    $0x10,%esp
    task_manager.currt_task = &task_manager.first_task;
   10777:	c7 05 20 37 01 00 48 	movl   $0x13748,0x13720
   1077e:	37 01 00 
}
   10781:	90                   	nop
   10782:	c9                   	leave
   10783:	c3                   	ret

00010784 <task_first_task>:

task_t *task_first_task(void)
{
   10784:	55                   	push   %ebp
   10785:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10787:	b8 48 37 01 00       	mov    $0x13748,%eax
}
   1078c:	5d                   	pop    %ebp
   1078d:	c3                   	ret

0001078e <task_set_ready>:

void task_set_ready(task_t *task)
{
   1078e:	55                   	push   %ebp
   1078f:	89 e5                	mov    %esp,%ebp
   10791:	83 ec 08             	sub    $0x8,%esp
    // 如果是空闲进程就直接返回不插入到就绪队列不然空闲进程也会运行
    if (task == &task_manager.idle_task)
   10794:	81 7d 08 fc 37 01 00 	cmpl   $0x137fc,0x8(%ebp)
   1079b:	74 22                	je     107bf <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   1079d:	8b 45 08             	mov    0x8(%ebp),%eax
   107a0:	83 c0 30             	add    $0x30,%eax
   107a3:	83 ec 08             	sub    $0x8,%esp
   107a6:	50                   	push   %eax
   107a7:	68 24 37 01 00       	push   $0x13724
   107ac:	e8 d0 18 00 00       	call   12081 <list_insert_last>
   107b1:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   107b4:	8b 45 08             	mov    0x8(%ebp),%eax
   107b7:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   107bd:	eb 01                	jmp    107c0 <task_set_ready+0x32>
        return;
   107bf:	90                   	nop
}
   107c0:	c9                   	leave
   107c1:	c3                   	ret

000107c2 <task_set_block>:
// 将任务从就绪队列中移除 此时任务的状态不确定 有可能是等待 有可能是睡眠因此不设置状态置
void task_set_block(task_t *task)
{
   107c2:	55                   	push   %ebp
   107c3:	89 e5                	mov    %esp,%ebp
   107c5:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   107c8:	81 7d 08 fc 37 01 00 	cmpl   $0x137fc,0x8(%ebp)
   107cf:	74 19                	je     107ea <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   107d1:	8b 45 08             	mov    0x8(%ebp),%eax
   107d4:	83 c0 30             	add    $0x30,%eax
   107d7:	83 ec 08             	sub    $0x8,%esp
   107da:	50                   	push   %eax
   107db:	68 24 37 01 00       	push   $0x13724
   107e0:	e8 78 19 00 00       	call   1215d <list_remove>
   107e5:	83 c4 10             	add    $0x10,%esp
   107e8:	eb 01                	jmp    107eb <task_set_block+0x29>
        return;
   107ea:	90                   	nop
}
   107eb:	c9                   	leave
   107ec:	c3                   	ret

000107ed <task_current>:

task_t *task_current(void)
{
   107ed:	55                   	push   %ebp
   107ee:	89 e5                	mov    %esp,%ebp
    return task_manager.currt_task;
   107f0:	a1 20 37 01 00       	mov    0x13720,%eax
}
   107f5:	5d                   	pop    %ebp
   107f6:	c3                   	ret

000107f7 <sys_sched_yield>:

int sys_sched_yield()
{
   107f7:	55                   	push   %ebp
   107f8:	89 e5                	mov    %esp,%ebp
   107fa:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   107fd:	e8 2b 0c 00 00       	call   1142d <irq_enter_protection>
   10802:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1)
   10805:	83 ec 0c             	sub    $0xc,%esp
   10808:	68 24 37 01 00       	push   $0x13724
   1080d:	e8 7f fc ff ff       	call   10491 <list_count>
   10812:	83 c4 10             	add    $0x10,%esp
   10815:	83 f8 01             	cmp    $0x1,%eax
   10818:	7e 29                	jle    10843 <sys_sched_yield+0x4c>
    {
        // 如果就绪队列中有其他的任务则将头部任务移到尾部
        task_t *current_task = task_current();
   1081a:	e8 ce ff ff ff       	call   107ed <task_current>
   1081f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // 从队列头部取出当前任务
        task_set_block(current_task);
   10822:	83 ec 0c             	sub    $0xc,%esp
   10825:	ff 75 f0             	push   -0x10(%ebp)
   10828:	e8 95 ff ff ff       	call   107c2 <task_set_block>
   1082d:	83 c4 10             	add    $0x10,%esp
        // 将当前任务添加到队列尾部
        task_set_ready(current_task);
   10830:	83 ec 0c             	sub    $0xc,%esp
   10833:	ff 75 f0             	push   -0x10(%ebp)
   10836:	e8 53 ff ff ff       	call   1078e <task_set_ready>
   1083b:	83 c4 10             	add    $0x10,%esp
        // 将cpu的使用权让给下一个任务
        task_dispatch();
   1083e:	e8 58 00 00 00       	call   1089b <task_dispatch>
    }
    irq_leave_protection(state);
   10843:	83 ec 0c             	sub    $0xc,%esp
   10846:	ff 75 f4             	push   -0xc(%ebp)
   10849:	e8 f7 0b 00 00       	call   11445 <irq_leave_protection>
   1084e:	83 c4 10             	add    $0x10,%esp
    // 没有其他的任务了就直接返回
    return 0;
   10851:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10856:	c9                   	leave
   10857:	c3                   	ret

00010858 <task_next_run>:

task_t *task_next_run(void)
{
   10858:	55                   	push   %ebp
   10859:	89 e5                	mov    %esp,%ebp
   1085b:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   1085e:	68 24 37 01 00       	push   $0x13724
   10863:	e8 29 fc ff ff       	call   10491 <list_count>
   10868:	83 c4 04             	add    $0x4,%esp
   1086b:	85 c0                	test   %eax,%eax
   1086d:	75 07                	jne    10876 <task_next_run+0x1e>
    {
        // 将空闲进程放入接下来要执行的任务队列
        return &task_manager.idle_task;
   1086f:	b8 fc 37 01 00       	mov    $0x137fc,%eax
   10874:	eb 23                	jmp    10899 <task_next_run+0x41>
    }
    list_node_t *task_node = list_first(&task_manager.ready_list);
   10876:	68 24 37 01 00       	push   $0x13724
   1087b:	e8 1c fc ff ff       	call   1049c <list_first>
   10880:	83 c4 04             	add    $0x4,%esp
   10883:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   10886:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1088a:	74 08                	je     10894 <task_next_run+0x3c>
   1088c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1088f:	83 e8 30             	sub    $0x30,%eax
   10892:	eb 05                	jmp    10899 <task_next_run+0x41>
   10894:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10899:	c9                   	leave
   1089a:	c3                   	ret

0001089b <task_dispatch>:

void task_dispatch(void)
{
   1089b:	55                   	push   %ebp
   1089c:	89 e5                	mov    %esp,%ebp
   1089e:	83 ec 18             	sub    $0x18,%esp
    // irq_state_t state = irq_enter_protection();
    task_t *to = task_next_run();
   108a1:	e8 b2 ff ff ff       	call   10858 <task_next_run>
   108a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.currt_task)
   108a9:	a1 20 37 01 00       	mov    0x13720,%eax
   108ae:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   108b1:	74 2a                	je     108dd <task_dispatch+0x42>
    {
        task_t *from = task_current();
   108b3:	e8 35 ff ff ff       	call   107ed <task_current>
   108b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_manager.currt_task = to;
   108bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108be:	a3 20 37 01 00       	mov    %eax,0x13720
        to->state = TASK_RUNNING;
   108c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108c6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   108cc:	83 ec 08             	sub    $0x8,%esp
   108cf:	ff 75 f4             	push   -0xc(%ebp)
   108d2:	ff 75 f0             	push   -0x10(%ebp)
   108d5:	e8 e2 fd ff ff       	call   106bc <task_switch_from_to>
   108da:	83 c4 10             	add    $0x10,%esp
    }
    // irq_leave_protection(state);
}
   108dd:	90                   	nop
   108de:	c9                   	leave
   108df:	c3                   	ret

000108e0 <task_time_tick>:
// 当时间片到了之后将运行中队列中当前的任务移到队列尾部
// 并取出运行队列中的下一个任务
void task_time_tick(void)
{
   108e0:	55                   	push   %ebp
   108e1:	89 e5                	mov    %esp,%ebp
   108e3:	83 ec 18             	sub    $0x18,%esp
    task_t *current_task = task_current();
   108e6:	e8 02 ff ff ff       	call   107ed <task_current>
   108eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // irq_state_t state = irq_enter_protection();
    // 当前任务的运行时间片已经为0了
    if (--current_task->slice_ticks == 0)
   108ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108f1:	8b 40 0c             	mov    0xc(%eax),%eax
   108f4:	8d 50 ff             	lea    -0x1(%eax),%edx
   108f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108fa:	89 50 0c             	mov    %edx,0xc(%eax)
   108fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10900:	8b 40 0c             	mov    0xc(%eax),%eax
   10903:	85 c0                	test   %eax,%eax
   10905:	75 2d                	jne    10934 <task_time_tick+0x54>
    {
        // 将这次的任务重新设置计数
        current_task->slice_ticks = current_task->time_ticks;
   10907:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1090a:	8b 50 08             	mov    0x8(%eax),%edx
   1090d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10910:	89 50 0c             	mov    %edx,0xc(%eax)
        task_set_block(current_task);
   10913:	83 ec 0c             	sub    $0xc,%esp
   10916:	ff 75 f0             	push   -0x10(%ebp)
   10919:	e8 a4 fe ff ff       	call   107c2 <task_set_block>
   1091e:	83 c4 10             	add    $0x10,%esp
        task_set_ready(current_task);
   10921:	83 ec 0c             	sub    $0xc,%esp
   10924:	ff 75 f0             	push   -0x10(%ebp)
   10927:	e8 62 fe ff ff       	call   1078e <task_set_ready>
   1092c:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1092f:	e8 67 ff ff ff       	call   1089b <task_dispatch>
    }
    list_node_t *curr = list_first(&task_manager.sleep_list);
   10934:	83 ec 0c             	sub    $0xc,%esp
   10937:	68 3c 37 01 00       	push   $0x1373c
   1093c:	e8 5b fb ff ff       	call   1049c <list_first>
   10941:	83 c4 10             	add    $0x10,%esp
   10944:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 如果当前节点有效不为空
    while (curr)
   10947:	eb 62                	jmp    109ab <task_time_tick+0xcb>
    {
        list_node_t *next = list_node_next(curr);
   10949:	83 ec 0c             	sub    $0xc,%esp
   1094c:	ff 75 f4             	push   -0xc(%ebp)
   1094f:	e8 32 fb ff ff       	call   10486 <list_node_next>
   10954:	83 c4 10             	add    $0x10,%esp
   10957:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t *task = list_node_parent(curr, task_t, run_node);
   1095a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1095e:	74 08                	je     10968 <task_time_tick+0x88>
   10960:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10963:	83 e8 30             	sub    $0x30,%eax
   10966:	eb 05                	jmp    1096d <task_time_tick+0x8d>
   10968:	b8 00 00 00 00       	mov    $0x0,%eax
   1096d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0)
   10970:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10973:	8b 40 04             	mov    0x4(%eax),%eax
   10976:	8d 50 ff             	lea    -0x1(%eax),%edx
   10979:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1097c:	89 50 04             	mov    %edx,0x4(%eax)
   1097f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10982:	8b 40 04             	mov    0x4(%eax),%eax
   10985:	85 c0                	test   %eax,%eax
   10987:	75 1c                	jne    109a5 <task_time_tick+0xc5>
        {
            task_set_wakeup(task);
   10989:	83 ec 0c             	sub    $0xc,%esp
   1098c:	ff 75 e8             	push   -0x18(%ebp)
   1098f:	e8 5f 00 00 00       	call   109f3 <task_set_wakeup>
   10994:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   10997:	83 ec 0c             	sub    $0xc,%esp
   1099a:	ff 75 e8             	push   -0x18(%ebp)
   1099d:	e8 ec fd ff ff       	call   1078e <task_set_ready>
   109a2:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   109a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   109ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   109af:	75 98                	jne    10949 <task_time_tick+0x69>
    }
    task_dispatch();
   109b1:	e8 e5 fe ff ff       	call   1089b <task_dispatch>
    // irq_leave_protection(state);
}
   109b6:	90                   	nop
   109b7:	c9                   	leave
   109b8:	c3                   	ret

000109b9 <task_set_sleep>:

// 将任务插入睡眠队列
void task_set_sleep(task_t *task, uint32_t ticks)
{
   109b9:	55                   	push   %ebp
   109ba:	89 e5                	mov    %esp,%ebp
   109bc:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0)
   109bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   109c3:	74 2b                	je     109f0 <task_set_sleep+0x37>
    {
        return; // 如果当前任务不需要睡眠则直接返回
    }
    task->sleep_ticks = ticks;
   109c5:	8b 55 0c             	mov    0xc(%ebp),%edx
   109c8:	8b 45 08             	mov    0x8(%ebp),%eax
   109cb:	89 50 04             	mov    %edx,0x4(%eax)
    task->state = TASK_SLEEP;
   109ce:	8b 45 08             	mov    0x8(%ebp),%eax
   109d1:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   109d7:	8b 45 08             	mov    0x8(%ebp),%eax
   109da:	83 c0 30             	add    $0x30,%eax
   109dd:	83 ec 08             	sub    $0x8,%esp
   109e0:	50                   	push   %eax
   109e1:	68 3c 37 01 00       	push   $0x1373c
   109e6:	e8 96 16 00 00       	call   12081 <list_insert_last>
   109eb:	83 c4 10             	add    $0x10,%esp
   109ee:	eb 01                	jmp    109f1 <task_set_sleep+0x38>
        return; // 如果当前任务不需要睡眠则直接返回
   109f0:	90                   	nop
}
   109f1:	c9                   	leave
   109f2:	c3                   	ret

000109f3 <task_set_wakeup>:

// 将任务从睡眠队列移除出去(到就绪对垒)
void task_set_wakeup(task_t *task)
{
   109f3:	55                   	push   %ebp
   109f4:	89 e5                	mov    %esp,%ebp
   109f6:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   109f9:	8b 45 08             	mov    0x8(%ebp),%eax
   109fc:	83 c0 30             	add    $0x30,%eax
   109ff:	83 ec 08             	sub    $0x8,%esp
   10a02:	50                   	push   %eax
   10a03:	68 3c 37 01 00       	push   $0x1373c
   10a08:	e8 50 17 00 00       	call   1215d <list_remove>
   10a0d:	83 c4 10             	add    $0x10,%esp
}
   10a10:	90                   	nop
   10a11:	c9                   	leave
   10a12:	c3                   	ret

00010a13 <sys_sleep>:
void sys_sleep(uint32_t ms)
{
   10a13:	55                   	push   %ebp
   10a14:	89 e5                	mov    %esp,%ebp
   10a16:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10a19:	e8 0f 0a 00 00       	call   1142d <irq_enter_protection>
   10a1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_block(task_manager.currt_task); // 将当前进程从队列中移除
   10a21:	a1 20 37 01 00       	mov    0x13720,%eax
   10a26:	83 ec 0c             	sub    $0xc,%esp
   10a29:	50                   	push   %eax
   10a2a:	e8 93 fd ff ff       	call   107c2 <task_set_block>
   10a2f:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.currt_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS);
   10a32:	8b 45 08             	mov    0x8(%ebp),%eax
   10a35:	83 c0 09             	add    $0x9,%eax
   10a38:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10a3d:	f7 e2                	mul    %edx
   10a3f:	c1 ea 03             	shr    $0x3,%edx
   10a42:	a1 20 37 01 00       	mov    0x13720,%eax
   10a47:	83 ec 08             	sub    $0x8,%esp
   10a4a:	52                   	push   %edx
   10a4b:	50                   	push   %eax
   10a4c:	e8 68 ff ff ff       	call   109b9 <task_set_sleep>
   10a51:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   10a54:	e8 42 fe ff ff       	call   1089b <task_dispatch>
    irq_leave_protection(state);
   10a59:	83 ec 0c             	sub    $0xc,%esp
   10a5c:	ff 75 f4             	push   -0xc(%ebp)
   10a5f:	e8 e1 09 00 00       	call   11445 <irq_leave_protection>
   10a64:	83 c4 10             	add    $0x10,%esp
}
   10a67:	90                   	nop
   10a68:	c9                   	leave
   10a69:	c3                   	ret

00010a6a <lgdt>:
    desc->offset15_0 = offset & 0xFFFF;
    desc->selector = selector;
    desc->attr = attr;
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}

   10a6a:	55                   	push   %ebp
   10a6b:	89 e5                	mov    %esp,%ebp
   10a6d:	83 ec 10             	sub    $0x10,%esp
{
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
    // 跳过第0项
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
    {
   10a70:	8b 45 08             	mov    0x8(%ebp),%eax
   10a73:	c1 e8 10             	shr    $0x10,%eax
   10a76:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
        segment_desc_t *desc = gdt_table + i;
   10a7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a7d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
        if (desc->attr == 0)
   10a81:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a84:	83 e8 01             	sub    $0x1,%eax
   10a87:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
        {
   10a8b:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
            mutex_unlock(&mutex);
   10a8f:	90                   	nop
   10a90:	c9                   	leave
   10a91:	c3                   	ret

00010a92 <far_jump>:
   10a92:	55                   	push   %ebp
   10a93:	89 e5                	mov    %esp,%ebp
   10a95:	83 ec 10             	sub    $0x10,%esp
   10a98:	8b 45 0c             	mov    0xc(%ebp),%eax
   10a9b:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa1:	89 45 fc             	mov    %eax,-0x4(%ebp)
   10aa4:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10aa7:	ff 28                	ljmp   *(%eax)
   10aa9:	90                   	nop
   10aaa:	c9                   	leave
   10aab:	c3                   	ret

00010aac <segment_desc_set>:
{
   10aac:	55                   	push   %ebp
   10aad:	89 e5                	mov    %esp,%ebp
   10aaf:	83 ec 14             	sub    $0x14,%esp
   10ab2:	8b 45 14             	mov    0x14(%ebp),%eax
   10ab5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   10ab9:	8b 45 08             	mov    0x8(%ebp),%eax
   10abc:	83 e0 f8             	and    $0xfffffff8,%eax
   10abf:	05 c0 38 01 00       	add    $0x138c0,%eax
   10ac4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   10ac7:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10ace:	76 0f                	jbe    10adf <segment_desc_set+0x33>
        attr |= SEG_G;
   10ad0:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10ad6:	8b 45 10             	mov    0x10(%ebp),%eax
   10ad9:	c1 e8 0c             	shr    $0xc,%eax
   10adc:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   10adf:	8b 45 10             	mov    0x10(%ebp),%eax
   10ae2:	89 c2                	mov    %eax,%edx
   10ae4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ae7:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   10aea:	8b 45 0c             	mov    0xc(%ebp),%eax
   10aed:	89 c2                	mov    %eax,%edx
   10aef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10af2:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10af6:	8b 45 0c             	mov    0xc(%ebp),%eax
   10af9:	c1 e8 10             	shr    $0x10,%eax
   10afc:	89 c2                	mov    %eax,%edx
   10afe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b01:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   10b04:	8b 45 10             	mov    0x10(%ebp),%eax
   10b07:	c1 e8 10             	shr    $0x10,%eax
   10b0a:	c1 e0 08             	shl    $0x8,%eax
   10b0d:	66 25 00 0f          	and    $0xf00,%ax
   10b11:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10b15:	89 c2                	mov    %eax,%edx
   10b17:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b1a:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   10b1e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b21:	c1 e8 18             	shr    $0x18,%eax
   10b24:	89 c2                	mov    %eax,%edx
   10b26:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b29:	88 50 07             	mov    %dl,0x7(%eax)
}
   10b2c:	90                   	nop
   10b2d:	c9                   	leave
   10b2e:	c3                   	ret

00010b2f <init_gdt>:
{
   10b2f:	55                   	push   %ebp
   10b30:	89 e5                	mov    %esp,%ebp
   10b32:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10b35:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10b3c:	eb 19                	jmp    10b57 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   10b3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10b41:	c1 e0 03             	shl    $0x3,%eax
   10b44:	6a 00                	push   $0x0
   10b46:	6a 00                	push   $0x0
   10b48:	6a 00                	push   $0x0
   10b4a:	50                   	push   %eax
   10b4b:	e8 5c ff ff ff       	call   10aac <segment_desc_set>
   10b50:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10b53:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10b57:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10b5e:	7e de                	jle    10b3e <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   10b60:	68 92 40 00 00       	push   $0x4092
   10b65:	6a ff                	push   $0xffffffff
   10b67:	6a 00                	push   $0x0
   10b69:	6a 10                	push   $0x10
   10b6b:	e8 3c ff ff ff       	call   10aac <segment_desc_set>
   10b70:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   10b73:	68 9a 40 00 00       	push   $0x409a
   10b78:	6a ff                	push   $0xffffffff
   10b7a:	6a 00                	push   $0x0
   10b7c:	6a 08                	push   $0x8
   10b7e:	e8 29 ff ff ff       	call   10aac <segment_desc_set>
   10b83:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10b86:	b8 c0 38 01 00       	mov    $0x138c0,%eax
   10b8b:	68 00 08 00 00       	push   $0x800
   10b90:	50                   	push   %eax
   10b91:	e8 d4 fe ff ff       	call   10a6a <lgdt>
   10b96:	83 c4 08             	add    $0x8,%esp
}
   10b99:	90                   	nop
   10b9a:	c9                   	leave
   10b9b:	c3                   	ret

00010b9c <gate_desc_set>:
{
   10b9c:	55                   	push   %ebp
   10b9d:	89 e5                	mov    %esp,%ebp
   10b9f:	83 ec 08             	sub    $0x8,%esp
   10ba2:	8b 55 0c             	mov    0xc(%ebp),%edx
   10ba5:	8b 45 14             	mov    0x14(%ebp),%eax
   10ba8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10bac:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10bb0:	8b 45 10             	mov    0x10(%ebp),%eax
   10bb3:	89 c2                	mov    %eax,%edx
   10bb5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb8:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10bbb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbe:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10bc2:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10bc6:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc9:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10bcd:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10bd1:	8b 45 10             	mov    0x10(%ebp),%eax
   10bd4:	c1 e8 10             	shr    $0x10,%eax
   10bd7:	89 c2                	mov    %eax,%edx
   10bd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdc:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10be0:	90                   	nop
   10be1:	c9                   	leave
   10be2:	c3                   	ret

00010be3 <gdt_alloc_des>:
{
   10be3:	55                   	push   %ebp
   10be4:	89 e5                	mov    %esp,%ebp
   10be6:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&mutex);
   10be9:	83 ec 0c             	sub    $0xc,%esp
   10bec:	68 c0 40 01 00       	push   $0x140c0
   10bf1:	e8 51 0a 00 00       	call   11647 <mutex_lock>
   10bf6:	83 c4 10             	add    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10bf9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10c00:	eb 36                	jmp    10c38 <gdt_alloc_des+0x55>
        segment_desc_t *desc = gdt_table + i;
   10c02:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c05:	c1 e0 03             	shl    $0x3,%eax
   10c08:	05 c0 38 01 00       	add    $0x138c0,%eax
   10c0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0)
   10c10:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c13:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10c17:	66 85 c0             	test   %ax,%ax
   10c1a:	75 18                	jne    10c34 <gdt_alloc_des+0x51>
            mutex_unlock(&mutex);
   10c1c:	83 ec 0c             	sub    $0xc,%esp
   10c1f:	68 c0 40 01 00       	push   $0x140c0
   10c24:	e8 af 0a 00 00       	call   116d8 <mutex_unlock>
   10c29:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10c2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c2f:	c1 e0 03             	shl    $0x3,%eax
   10c32:	eb 22                	jmp    10c56 <gdt_alloc_des+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10c34:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10c38:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10c3f:	7e c1                	jle    10c02 <gdt_alloc_des+0x1f>
    mutex_unlock(&mutex);
   10c41:	83 ec 0c             	sub    $0xc,%esp
   10c44:	68 c0 40 01 00       	push   $0x140c0
   10c49:	e8 8a 0a 00 00       	call   116d8 <mutex_unlock>
   10c4e:	83 c4 10             	add    $0x10,%esp
    return -1;
   10c51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10c56:	c9                   	leave
   10c57:	c3                   	ret

00010c58 <switch_to_tss>:
{
   10c58:	55                   	push   %ebp
   10c59:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   10c5b:	6a 00                	push   $0x0
   10c5d:	ff 75 08             	push   0x8(%ebp)
   10c60:	e8 2d fe ff ff       	call   10a92 <far_jump>
   10c65:	83 c4 08             	add    $0x8,%esp
}
   10c68:	90                   	nop
   10c69:	c9                   	leave
   10c6a:	c3                   	ret

00010c6b <cpu_init>:
{
   10c6b:	55                   	push   %ebp
   10c6c:	89 e5                	mov    %esp,%ebp
   10c6e:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   10c71:	83 ec 0c             	sub    $0xc,%esp
   10c74:	68 c0 40 01 00       	push   $0x140c0
   10c79:	e8 9b 09 00 00       	call   11619 <mutex_init>
   10c7e:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   10c81:	e8 a9 fe ff ff       	call   10b2f <init_gdt>
   10c86:	90                   	nop
   10c87:	c9                   	leave
   10c88:	c3                   	ret

00010c89 <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   10c89:	55                   	push   %ebp
   10c8a:	89 e5                	mov    %esp,%ebp
   10c8c:	83 ec 14             	sub    $0x14,%esp
   10c8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c92:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   10c96:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10c9a:	89 c2                	mov    %eax,%edx
   10c9c:	ec                   	in     (%dx),%al
   10c9d:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   10ca0:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   10ca4:	c9                   	leave
   10ca5:	c3                   	ret

00010ca6 <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   10ca6:	55                   	push   %ebp
   10ca7:	89 e5                	mov    %esp,%ebp
   10ca9:	83 ec 08             	sub    $0x8,%esp
   10cac:	8b 55 08             	mov    0x8(%ebp),%edx
   10caf:	8b 45 0c             	mov    0xc(%ebp),%eax
   10cb2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10cb6:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   10cb9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10cbd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10cc1:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   10cc2:	90                   	nop
   10cc3:	c9                   	leave
   10cc4:	c3                   	ret

00010cc5 <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   10cc5:	55                   	push   %ebp
   10cc6:	89 e5                	mov    %esp,%ebp
        hlt();
   10cc8:	fa                   	cli
    }
   10cc9:	90                   	nop
   10cca:	5d                   	pop    %ebp
   10ccb:	c3                   	ret

00010ccc <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   10ccc:	55                   	push   %ebp
   10ccd:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   10ccf:	fb                   	sti
}
   10cd0:	90                   	nop
   10cd1:	5d                   	pop    %ebp
   10cd2:	c3                   	ret

00010cd3 <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   10cd3:	55                   	push   %ebp
   10cd4:	89 e5                	mov    %esp,%ebp
   10cd6:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   10cd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cdc:	c1 e8 10             	shr    $0x10,%eax
   10cdf:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   10ce3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   10cea:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ced:	83 e8 01             	sub    $0x1,%eax
   10cf0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10cf4:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   10cf8:	90                   	nop
   10cf9:	c9                   	leave
   10cfa:	c3                   	ret

00010cfb <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   10cfb:	55                   	push   %ebp
   10cfc:	89 e5                	mov    %esp,%ebp
}
   10cfe:	f4                   	hlt

   10cff:	90                   	nop
   10d00:	5d                   	pop    %ebp
   10d01:	c3                   	ret

00010d02 <read_eflags>:
    do_default_handler(frame, "Stack-Segment Fault.");
}

void do_handler_general_protection(exception_frame_t *frame)
{
    do_default_handler(frame, "General Protection.");
   10d02:	55                   	push   %ebp
   10d03:	89 e5                	mov    %esp,%ebp
   10d05:	83 ec 10             	sub    $0x10,%esp
}

   10d08:	9c                   	pushf
   10d09:	58                   	pop    %eax
   10d0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
void do_handler_page_fault(exception_frame_t *frame)
   10d0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
{
   10d10:	c9                   	leave
   10d11:	c3                   	ret

00010d12 <write_eflags>:
    do_default_handler(frame, "Page Fault.");
}

   10d12:	55                   	push   %ebp
   10d13:	89 e5                	mov    %esp,%ebp
void do_handler_fpu_error(exception_frame_t *frame)
   10d15:	8b 45 08             	mov    0x8(%ebp),%eax
   10d18:	50                   	push   %eax
   10d19:	9d                   	popf
{
   10d1a:	90                   	nop
   10d1b:	5d                   	pop    %ebp
   10d1c:	c3                   	ret

00010d1d <dump_core_regs>:
{
   10d1d:	55                   	push   %ebp
   10d1e:	89 e5                	mov    %esp,%ebp
   10d20:	57                   	push   %edi
   10d21:	56                   	push   %esi
   10d22:	53                   	push   %ebx
   10d23:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   10d26:	8b 45 08             	mov    0x8(%ebp),%eax
   10d29:	8b 50 34             	mov    0x34(%eax),%edx
   10d2c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2f:	8b 40 30             	mov    0x30(%eax),%eax
   10d32:	83 ec 04             	sub    $0x4,%esp
   10d35:	52                   	push   %edx
   10d36:	50                   	push   %eax
   10d37:	68 30 24 01 00       	push   $0x12430
   10d3c:	e8 77 15 00 00       	call   122b8 <log_prinf>
   10d41:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   10d44:	8b 45 08             	mov    0x8(%ebp),%eax
   10d47:	8b 38                	mov    (%eax),%edi
   10d49:	8b 45 08             	mov    0x8(%ebp),%eax
   10d4c:	8b 70 04             	mov    0x4(%eax),%esi
   10d4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d52:	8b 58 0c             	mov    0xc(%eax),%ebx
   10d55:	8b 45 08             	mov    0x8(%ebp),%eax
   10d58:	8b 48 08             	mov    0x8(%eax),%ecx
   10d5b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d5e:	8b 50 0c             	mov    0xc(%eax),%edx
   10d61:	8b 45 08             	mov    0x8(%ebp),%eax
   10d64:	8b 40 3c             	mov    0x3c(%eax),%eax
   10d67:	83 ec 04             	sub    $0x4,%esp
   10d6a:	57                   	push   %edi
   10d6b:	56                   	push   %esi
   10d6c:	53                   	push   %ebx
   10d6d:	51                   	push   %ecx
   10d6e:	52                   	push   %edx
   10d6f:	50                   	push   %eax
   10d70:	68 48 24 01 00       	push   $0x12448
   10d75:	e8 3e 15 00 00       	call   122b8 <log_prinf>
   10d7a:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   10d7d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d80:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10d83:	8b 45 08             	mov    0x8(%ebp),%eax
   10d86:	8b 40 18             	mov    0x18(%eax),%eax
   10d89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10d8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d8f:	8b 58 14             	mov    0x14(%eax),%ebx
   10d92:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10d95:	8b 45 08             	mov    0x8(%ebp),%eax
   10d98:	8b 78 10             	mov    0x10(%eax),%edi
   10d9b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d9e:	8b 70 24             	mov    0x24(%eax),%esi
   10da1:	8b 45 08             	mov    0x8(%ebp),%eax
   10da4:	8b 58 28             	mov    0x28(%eax),%ebx
   10da7:	8b 45 08             	mov    0x8(%ebp),%eax
   10daa:	8b 50 20             	mov    0x20(%eax),%edx
   10dad:	8b 45 08             	mov    0x8(%ebp),%eax
   10db0:	8b 40 2c             	mov    0x2c(%eax),%eax
   10db3:	83 ec 0c             	sub    $0xc,%esp
   10db6:	51                   	push   %ecx
   10db7:	ff 75 e4             	push   -0x1c(%ebp)
   10dba:	ff 75 e0             	push   -0x20(%ebp)
   10dbd:	57                   	push   %edi
   10dbe:	56                   	push   %esi
   10dbf:	53                   	push   %ebx
   10dc0:	52                   	push   %edx
   10dc1:	50                   	push   %eax
   10dc2:	68 70 24 01 00       	push   $0x12470
   10dc7:	e8 ec 14 00 00       	call   122b8 <log_prinf>
   10dcc:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   10dcf:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd2:	8b 50 40             	mov    0x40(%eax),%edx
   10dd5:	8b 45 08             	mov    0x8(%ebp),%eax
   10dd8:	8b 40 38             	mov    0x38(%eax),%eax
   10ddb:	83 ec 04             	sub    $0x4,%esp
   10dde:	52                   	push   %edx
   10ddf:	50                   	push   %eax
   10de0:	68 c1 24 01 00       	push   $0x124c1
   10de5:	e8 ce 14 00 00       	call   122b8 <log_prinf>
   10dea:	83 c4 10             	add    $0x10,%esp
}
   10ded:	90                   	nop
   10dee:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10df1:	5b                   	pop    %ebx
   10df2:	5e                   	pop    %esi
   10df3:	5f                   	pop    %edi
   10df4:	5d                   	pop    %ebp
   10df5:	c3                   	ret

00010df6 <do_default_handler>:
{
   10df6:	55                   	push   %ebp
   10df7:	89 e5                	mov    %esp,%ebp
   10df9:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   10dfc:	83 ec 0c             	sub    $0xc,%esp
   10dff:	68 da 24 01 00       	push   $0x124da
   10e04:	e8 af 14 00 00       	call   122b8 <log_prinf>
   10e09:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   10e0c:	83 ec 08             	sub    $0x8,%esp
   10e0f:	ff 75 0c             	push   0xc(%ebp)
   10e12:	68 f7 24 01 00       	push   $0x124f7
   10e17:	e8 9c 14 00 00       	call   122b8 <log_prinf>
   10e1c:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10e1f:	83 ec 0c             	sub    $0xc,%esp
   10e22:	ff 75 08             	push   0x8(%ebp)
   10e25:	e8 f3 fe ff ff       	call   10d1d <dump_core_regs>
   10e2a:	83 c4 10             	add    $0x10,%esp
        hlt();
   10e2d:	e8 c9 fe ff ff       	call   10cfb <hlt>
   10e32:	eb f9                	jmp    10e2d <do_default_handler+0x37>

00010e34 <do_handler_unknow>:
{
   10e34:	55                   	push   %ebp
   10e35:	89 e5                	mov    %esp,%ebp
   10e37:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   10e3a:	83 ec 08             	sub    $0x8,%esp
   10e3d:	68 08 25 01 00       	push   $0x12508
   10e42:	ff 75 08             	push   0x8(%ebp)
   10e45:	e8 ac ff ff ff       	call   10df6 <do_default_handler>
   10e4a:	83 c4 10             	add    $0x10,%esp
}
   10e4d:	90                   	nop
   10e4e:	c9                   	leave
   10e4f:	c3                   	ret

00010e50 <do_handler_divider>:
{
   10e50:	55                   	push   %ebp
   10e51:	89 e5                	mov    %esp,%ebp
   10e53:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   10e56:	83 ec 08             	sub    $0x8,%esp
   10e59:	68 1c 25 01 00       	push   $0x1251c
   10e5e:	ff 75 08             	push   0x8(%ebp)
   10e61:	e8 90 ff ff ff       	call   10df6 <do_default_handler>
   10e66:	83 c4 10             	add    $0x10,%esp
}
   10e69:	90                   	nop
   10e6a:	c9                   	leave
   10e6b:	c3                   	ret

00010e6c <do_handler_Debug>:
{
   10e6c:	55                   	push   %ebp
   10e6d:	89 e5                	mov    %esp,%ebp
   10e6f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   10e72:	83 ec 08             	sub    $0x8,%esp
   10e75:	68 31 25 01 00       	push   $0x12531
   10e7a:	ff 75 08             	push   0x8(%ebp)
   10e7d:	e8 74 ff ff ff       	call   10df6 <do_default_handler>
   10e82:	83 c4 10             	add    $0x10,%esp
}
   10e85:	90                   	nop
   10e86:	c9                   	leave
   10e87:	c3                   	ret

00010e88 <do_handler_NMI>:
{
   10e88:	55                   	push   %ebp
   10e89:	89 e5                	mov    %esp,%ebp
   10e8b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   10e8e:	83 ec 08             	sub    $0x8,%esp
   10e91:	68 41 25 01 00       	push   $0x12541
   10e96:	ff 75 08             	push   0x8(%ebp)
   10e99:	e8 58 ff ff ff       	call   10df6 <do_default_handler>
   10e9e:	83 c4 10             	add    $0x10,%esp
}
   10ea1:	90                   	nop
   10ea2:	c9                   	leave
   10ea3:	c3                   	ret

00010ea4 <do_handler_breakpoint>:
{
   10ea4:	55                   	push   %ebp
   10ea5:	89 e5                	mov    %esp,%ebp
   10ea7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   10eaa:	83 ec 08             	sub    $0x8,%esp
   10ead:	68 50 25 01 00       	push   $0x12550
   10eb2:	ff 75 08             	push   0x8(%ebp)
   10eb5:	e8 3c ff ff ff       	call   10df6 <do_default_handler>
   10eba:	83 c4 10             	add    $0x10,%esp
}
   10ebd:	90                   	nop
   10ebe:	c9                   	leave
   10ebf:	c3                   	ret

00010ec0 <do_handler_overflow>:
{
   10ec0:	55                   	push   %ebp
   10ec1:	89 e5                	mov    %esp,%ebp
   10ec3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   10ec6:	83 ec 08             	sub    $0x8,%esp
   10ec9:	68 5c 25 01 00       	push   $0x1255c
   10ece:	ff 75 08             	push   0x8(%ebp)
   10ed1:	e8 20 ff ff ff       	call   10df6 <do_default_handler>
   10ed6:	83 c4 10             	add    $0x10,%esp
}
   10ed9:	90                   	nop
   10eda:	c9                   	leave
   10edb:	c3                   	ret

00010edc <do_handler_bound_range>:
{
   10edc:	55                   	push   %ebp
   10edd:	89 e5                	mov    %esp,%ebp
   10edf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   10ee2:	83 ec 08             	sub    $0x8,%esp
   10ee5:	68 66 25 01 00       	push   $0x12566
   10eea:	ff 75 08             	push   0x8(%ebp)
   10eed:	e8 04 ff ff ff       	call   10df6 <do_default_handler>
   10ef2:	83 c4 10             	add    $0x10,%esp
}
   10ef5:	90                   	nop
   10ef6:	c9                   	leave
   10ef7:	c3                   	ret

00010ef8 <do_handler_invalid_opcode>:
{
   10ef8:	55                   	push   %ebp
   10ef9:	89 e5                	mov    %esp,%ebp
   10efb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10efe:	83 ec 08             	sub    $0x8,%esp
   10f01:	68 7c 25 01 00       	push   $0x1257c
   10f06:	ff 75 08             	push   0x8(%ebp)
   10f09:	e8 e8 fe ff ff       	call   10df6 <do_default_handler>
   10f0e:	83 c4 10             	add    $0x10,%esp
}
   10f11:	90                   	nop
   10f12:	c9                   	leave
   10f13:	c3                   	ret

00010f14 <do_handler_device_unavailable>:
{
   10f14:	55                   	push   %ebp
   10f15:	89 e5                	mov    %esp,%ebp
   10f17:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10f1a:	83 ec 08             	sub    $0x8,%esp
   10f1d:	68 8c 25 01 00       	push   $0x1258c
   10f22:	ff 75 08             	push   0x8(%ebp)
   10f25:	e8 cc fe ff ff       	call   10df6 <do_default_handler>
   10f2a:	83 c4 10             	add    $0x10,%esp
}
   10f2d:	90                   	nop
   10f2e:	c9                   	leave
   10f2f:	c3                   	ret

00010f30 <do_handler_double_fault>:
{
   10f30:	55                   	push   %ebp
   10f31:	89 e5                	mov    %esp,%ebp
   10f33:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   10f36:	83 ec 08             	sub    $0x8,%esp
   10f39:	68 a2 25 01 00       	push   $0x125a2
   10f3e:	ff 75 08             	push   0x8(%ebp)
   10f41:	e8 b0 fe ff ff       	call   10df6 <do_default_handler>
   10f46:	83 c4 10             	add    $0x10,%esp
}
   10f49:	90                   	nop
   10f4a:	c9                   	leave
   10f4b:	c3                   	ret

00010f4c <do_handler_invalid_tss>:
{
   10f4c:	55                   	push   %ebp
   10f4d:	89 e5                	mov    %esp,%ebp
   10f4f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   10f52:	83 ec 08             	sub    $0x8,%esp
   10f55:	68 b0 25 01 00       	push   $0x125b0
   10f5a:	ff 75 08             	push   0x8(%ebp)
   10f5d:	e8 94 fe ff ff       	call   10df6 <do_default_handler>
   10f62:	83 c4 10             	add    $0x10,%esp
}
   10f65:	90                   	nop
   10f66:	c9                   	leave
   10f67:	c3                   	ret

00010f68 <do_handler_segment_not_present>:
{
   10f68:	55                   	push   %ebp
   10f69:	89 e5                	mov    %esp,%ebp
   10f6b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   10f6e:	83 ec 08             	sub    $0x8,%esp
   10f71:	68 bc 25 01 00       	push   $0x125bc
   10f76:	ff 75 08             	push   0x8(%ebp)
   10f79:	e8 78 fe ff ff       	call   10df6 <do_default_handler>
   10f7e:	83 c4 10             	add    $0x10,%esp
}
   10f81:	90                   	nop
   10f82:	c9                   	leave
   10f83:	c3                   	ret

00010f84 <do_handler_stack_segment_fault>:
{
   10f84:	55                   	push   %ebp
   10f85:	89 e5                	mov    %esp,%ebp
   10f87:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   10f8a:	83 ec 08             	sub    $0x8,%esp
   10f8d:	68 d1 25 01 00       	push   $0x125d1
   10f92:	ff 75 08             	push   0x8(%ebp)
   10f95:	e8 5c fe ff ff       	call   10df6 <do_default_handler>
   10f9a:	83 c4 10             	add    $0x10,%esp
}
   10f9d:	90                   	nop
   10f9e:	c9                   	leave
   10f9f:	c3                   	ret

00010fa0 <do_handler_general_protection>:
{
   10fa0:	55                   	push   %ebp
   10fa1:	89 e5                	mov    %esp,%ebp
   10fa3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   10fa6:	83 ec 08             	sub    $0x8,%esp
   10fa9:	68 e6 25 01 00       	push   $0x125e6
   10fae:	ff 75 08             	push   0x8(%ebp)
   10fb1:	e8 40 fe ff ff       	call   10df6 <do_default_handler>
   10fb6:	83 c4 10             	add    $0x10,%esp
}
   10fb9:	90                   	nop
   10fba:	c9                   	leave
   10fbb:	c3                   	ret

00010fbc <do_handler_page_fault>:
{
   10fbc:	55                   	push   %ebp
   10fbd:	89 e5                	mov    %esp,%ebp
   10fbf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   10fc2:	83 ec 08             	sub    $0x8,%esp
   10fc5:	68 fa 25 01 00       	push   $0x125fa
   10fca:	ff 75 08             	push   0x8(%ebp)
   10fcd:	e8 24 fe ff ff       	call   10df6 <do_default_handler>
   10fd2:	83 c4 10             	add    $0x10,%esp
}
   10fd5:	90                   	nop
   10fd6:	c9                   	leave
   10fd7:	c3                   	ret

00010fd8 <do_handler_fpu_error>:
{
   10fd8:	55                   	push   %ebp
   10fd9:	89 e5                	mov    %esp,%ebp
   10fdb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   10fde:	83 ec 08             	sub    $0x8,%esp
   10fe1:	68 06 26 01 00       	push   $0x12606
   10fe6:	ff 75 08             	push   0x8(%ebp)
   10fe9:	e8 08 fe ff ff       	call   10df6 <do_default_handler>
   10fee:	83 c4 10             	add    $0x10,%esp
}
   10ff1:	90                   	nop
   10ff2:	c9                   	leave
   10ff3:	c3                   	ret

00010ff4 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   10ff4:	55                   	push   %ebp
   10ff5:	89 e5                	mov    %esp,%ebp
   10ff7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10ffa:	83 ec 08             	sub    $0x8,%esp
   10ffd:	68 24 26 01 00       	push   $0x12624
   11002:	ff 75 08             	push   0x8(%ebp)
   11005:	e8 ec fd ff ff       	call   10df6 <do_default_handler>
   1100a:	83 c4 10             	add    $0x10,%esp
}
   1100d:	90                   	nop
   1100e:	c9                   	leave
   1100f:	c3                   	ret

00011010 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   11010:	55                   	push   %ebp
   11011:	89 e5                	mov    %esp,%ebp
   11013:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   11016:	83 ec 08             	sub    $0x8,%esp
   11019:	68 35 26 01 00       	push   $0x12635
   1101e:	ff 75 08             	push   0x8(%ebp)
   11021:	e8 d0 fd ff ff       	call   10df6 <do_default_handler>
   11026:	83 c4 10             	add    $0x10,%esp
}
   11029:	90                   	nop
   1102a:	c9                   	leave
   1102b:	c3                   	ret

0001102c <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   1102c:	55                   	push   %ebp
   1102d:	89 e5                	mov    %esp,%ebp
   1102f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   11032:	83 ec 08             	sub    $0x8,%esp
   11035:	68 44 26 01 00       	push   $0x12644
   1103a:	ff 75 08             	push   0x8(%ebp)
   1103d:	e8 b4 fd ff ff       	call   10df6 <do_default_handler>
   11042:	83 c4 10             	add    $0x10,%esp
}
   11045:	90                   	nop
   11046:	c9                   	leave
   11047:	c3                   	ret

00011048 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   11048:	55                   	push   %ebp
   11049:	89 e5                	mov    %esp,%ebp
   1104b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   1104e:	83 ec 08             	sub    $0x8,%esp
   11051:	68 63 26 01 00       	push   $0x12663
   11056:	ff 75 08             	push   0x8(%ebp)
   11059:	e8 98 fd ff ff       	call   10df6 <do_default_handler>
   1105e:	83 c4 10             	add    $0x10,%esp
}
   11061:	90                   	nop
   11062:	c9                   	leave
   11063:	c3                   	ret

00011064 <init_pic>:

static void init_pic(void)
{
   11064:	55                   	push   %ebp
   11065:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11067:	6a 11                	push   $0x11
   11069:	6a 20                	push   $0x20
   1106b:	e8 36 fc ff ff       	call   10ca6 <outb>
   11070:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   11073:	6a 20                	push   $0x20
   11075:	6a 21                	push   $0x21
   11077:	e8 2a fc ff ff       	call   10ca6 <outb>
   1107c:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   1107f:	6a 04                	push   $0x4
   11081:	6a 21                	push   $0x21
   11083:	e8 1e fc ff ff       	call   10ca6 <outb>
   11088:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   1108b:	6a 01                	push   $0x1
   1108d:	6a 21                	push   $0x21
   1108f:	e8 12 fc ff ff       	call   10ca6 <outb>
   11094:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11097:	6a 11                	push   $0x11
   11099:	68 a0 00 00 00       	push   $0xa0
   1109e:	e8 03 fc ff ff       	call   10ca6 <outb>
   110a3:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   110a6:	6a 28                	push   $0x28
   110a8:	68 a1 00 00 00       	push   $0xa1
   110ad:	e8 f4 fb ff ff       	call   10ca6 <outb>
   110b2:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   110b5:	6a 02                	push   $0x2
   110b7:	68 a1 00 00 00       	push   $0xa1
   110bc:	e8 e5 fb ff ff       	call   10ca6 <outb>
   110c1:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   110c4:	6a 01                	push   $0x1
   110c6:	68 a1 00 00 00       	push   $0xa1
   110cb:	e8 d6 fb ff ff       	call   10ca6 <outb>
   110d0:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   110d3:	68 fb 00 00 00       	push   $0xfb
   110d8:	6a 21                	push   $0x21
   110da:	e8 c7 fb ff ff       	call   10ca6 <outb>
   110df:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   110e2:	68 ff 00 00 00       	push   $0xff
   110e7:	68 a1 00 00 00       	push   $0xa1
   110ec:	e8 b5 fb ff ff       	call   10ca6 <outb>
   110f1:	83 c4 08             	add    $0x8,%esp
}
   110f4:	90                   	nop
   110f5:	c9                   	leave
   110f6:	c3                   	ret

000110f7 <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   110f7:	55                   	push   %ebp
   110f8:	89 e5                	mov    %esp,%ebp
   110fa:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   110fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11104:	eb 25                	jmp    1112b <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   11106:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   1110b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1110e:	c1 e0 03             	shl    $0x3,%eax
   11111:	05 e0 40 01 00       	add    $0x140e0,%eax
   11116:	68 00 8e 00 00       	push   $0x8e00
   1111b:	52                   	push   %edx
   1111c:	6a 08                	push   $0x8
   1111e:	50                   	push   %eax
   1111f:	e8 78 fa ff ff       	call   10b9c <gate_desc_set>
   11124:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   11127:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1112b:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1112f:	7e d5                	jle    11106 <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   11131:	83 ec 08             	sub    $0x8,%esp
   11134:	68 4a 00 01 00       	push   $0x1004a
   11139:	6a 00                	push   $0x0
   1113b:	e8 65 01 00 00       	call   112a5 <irq_install>
   11140:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   11143:	83 ec 08             	sub    $0x8,%esp
   11146:	68 69 00 01 00       	push   $0x10069
   1114b:	6a 01                	push   $0x1
   1114d:	e8 53 01 00 00       	call   112a5 <irq_install>
   11152:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   11155:	83 ec 08             	sub    $0x8,%esp
   11158:	68 88 00 01 00       	push   $0x10088
   1115d:	6a 02                	push   $0x2
   1115f:	e8 41 01 00 00       	call   112a5 <irq_install>
   11164:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   11167:	83 ec 08             	sub    $0x8,%esp
   1116a:	68 a7 00 01 00       	push   $0x100a7
   1116f:	6a 03                	push   $0x3
   11171:	e8 2f 01 00 00       	call   112a5 <irq_install>
   11176:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   11179:	83 ec 08             	sub    $0x8,%esp
   1117c:	68 c6 00 01 00       	push   $0x100c6
   11181:	6a 04                	push   $0x4
   11183:	e8 1d 01 00 00       	call   112a5 <irq_install>
   11188:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   1118b:	83 ec 08             	sub    $0x8,%esp
   1118e:	68 e5 00 01 00       	push   $0x100e5
   11193:	6a 05                	push   $0x5
   11195:	e8 0b 01 00 00       	call   112a5 <irq_install>
   1119a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   1119d:	83 ec 08             	sub    $0x8,%esp
   111a0:	68 04 01 01 00       	push   $0x10104
   111a5:	6a 06                	push   $0x6
   111a7:	e8 f9 00 00 00       	call   112a5 <irq_install>
   111ac:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   111af:	83 ec 08             	sub    $0x8,%esp
   111b2:	68 23 01 01 00       	push   $0x10123
   111b7:	6a 07                	push   $0x7
   111b9:	e8 e7 00 00 00       	call   112a5 <irq_install>
   111be:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   111c1:	83 ec 08             	sub    $0x8,%esp
   111c4:	68 42 01 01 00       	push   $0x10142
   111c9:	6a 08                	push   $0x8
   111cb:	e8 d5 00 00 00       	call   112a5 <irq_install>
   111d0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   111d3:	83 ec 08             	sub    $0x8,%esp
   111d6:	68 5f 01 01 00       	push   $0x1015f
   111db:	6a 0a                	push   $0xa
   111dd:	e8 c3 00 00 00       	call   112a5 <irq_install>
   111e2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   111e5:	83 ec 08             	sub    $0x8,%esp
   111e8:	68 7c 01 01 00       	push   $0x1017c
   111ed:	6a 0b                	push   $0xb
   111ef:	e8 b1 00 00 00       	call   112a5 <irq_install>
   111f4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   111f7:	83 ec 08             	sub    $0x8,%esp
   111fa:	68 99 01 01 00       	push   $0x10199
   111ff:	6a 0c                	push   $0xc
   11201:	e8 9f 00 00 00       	call   112a5 <irq_install>
   11206:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   11209:	83 ec 08             	sub    $0x8,%esp
   1120c:	68 b6 01 01 00       	push   $0x101b6
   11211:	6a 0d                	push   $0xd
   11213:	e8 8d 00 00 00       	call   112a5 <irq_install>
   11218:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   1121b:	83 ec 08             	sub    $0x8,%esp
   1121e:	68 d3 01 01 00       	push   $0x101d3
   11223:	6a 0e                	push   $0xe
   11225:	e8 7b 00 00 00       	call   112a5 <irq_install>
   1122a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   1122d:	83 ec 08             	sub    $0x8,%esp
   11230:	68 f0 01 01 00       	push   $0x101f0
   11235:	6a 10                	push   $0x10
   11237:	e8 69 00 00 00       	call   112a5 <irq_install>
   1123c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   1123f:	83 ec 08             	sub    $0x8,%esp
   11242:	68 0f 02 01 00       	push   $0x1020f
   11247:	6a 11                	push   $0x11
   11249:	e8 57 00 00 00       	call   112a5 <irq_install>
   1124e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   11251:	83 ec 08             	sub    $0x8,%esp
   11254:	68 2c 02 01 00       	push   $0x1022c
   11259:	6a 12                	push   $0x12
   1125b:	e8 45 00 00 00       	call   112a5 <irq_install>
   11260:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   11263:	83 ec 08             	sub    $0x8,%esp
   11266:	68 4b 02 01 00       	push   $0x1024b
   1126b:	6a 13                	push   $0x13
   1126d:	e8 33 00 00 00       	call   112a5 <irq_install>
   11272:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   11275:	83 ec 08             	sub    $0x8,%esp
   11278:	68 6a 02 01 00       	push   $0x1026a
   1127d:	6a 14                	push   $0x14
   1127f:	e8 21 00 00 00       	call   112a5 <irq_install>
   11284:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   11287:	b8 e0 40 01 00       	mov    $0x140e0,%eax
   1128c:	83 ec 08             	sub    $0x8,%esp
   1128f:	68 00 04 00 00       	push   $0x400
   11294:	50                   	push   %eax
   11295:	e8 39 fa ff ff       	call   10cd3 <lidt>
   1129a:	83 c4 10             	add    $0x10,%esp

    init_pic();
   1129d:	e8 c2 fd ff ff       	call   11064 <init_pic>
}
   112a2:	90                   	nop
   112a3:	c9                   	leave
   112a4:	c3                   	ret

000112a5 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   112a5:	55                   	push   %ebp
   112a6:	89 e5                	mov    %esp,%ebp
   112a8:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   112ab:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   112af:	7e 07                	jle    112b8 <irq_install+0x13>
    {
        return -1;
   112b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   112b6:	eb 20                	jmp    112d8 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   112b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   112bb:	8b 55 08             	mov    0x8(%ebp),%edx
   112be:	c1 e2 03             	shl    $0x3,%edx
   112c1:	81 c2 e0 40 01 00    	add    $0x140e0,%edx
   112c7:	68 00 8e 00 00       	push   $0x8e00
   112cc:	50                   	push   %eax
   112cd:	6a 08                	push   $0x8
   112cf:	52                   	push   %edx
   112d0:	e8 c7 f8 ff ff       	call   10b9c <gate_desc_set>
   112d5:	83 c4 10             	add    $0x10,%esp
}
   112d8:	c9                   	leave
   112d9:	c3                   	ret

000112da <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   112da:	55                   	push   %ebp
   112db:	89 e5                	mov    %esp,%ebp
   112dd:	53                   	push   %ebx
   112de:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   112e1:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   112e5:	7e 78                	jle    1135f <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   112e7:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   112eb:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   112ef:	7f 32                	jg     11323 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   112f1:	6a 21                	push   $0x21
   112f3:	e8 91 f9 ff ff       	call   10c89 <inb>
   112f8:	83 c4 04             	add    $0x4,%esp
   112fb:	89 c3                	mov    %eax,%ebx
   112fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11300:	ba 01 00 00 00       	mov    $0x1,%edx
   11305:	89 c1                	mov    %eax,%ecx
   11307:	d3 e2                	shl    %cl,%edx
   11309:	89 d0                	mov    %edx,%eax
   1130b:	f7 d0                	not    %eax
   1130d:	21 d8                	and    %ebx,%eax
   1130f:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11312:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11316:	50                   	push   %eax
   11317:	6a 21                	push   $0x21
   11319:	e8 88 f9 ff ff       	call   10ca6 <outb>
   1131e:	83 c4 08             	add    $0x8,%esp
   11321:	eb 3d                	jmp    11360 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   11323:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11327:	68 a1 00 00 00       	push   $0xa1
   1132c:	e8 58 f9 ff ff       	call   10c89 <inb>
   11331:	83 c4 04             	add    $0x4,%esp
   11334:	89 c3                	mov    %eax,%ebx
   11336:	8b 45 08             	mov    0x8(%ebp),%eax
   11339:	ba 01 00 00 00       	mov    $0x1,%edx
   1133e:	89 c1                	mov    %eax,%ecx
   11340:	d3 e2                	shl    %cl,%edx
   11342:	89 d0                	mov    %edx,%eax
   11344:	f7 d0                	not    %eax
   11346:	21 d8                	and    %ebx,%eax
   11348:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   1134b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1134f:	50                   	push   %eax
   11350:	68 a1 00 00 00       	push   $0xa1
   11355:	e8 4c f9 ff ff       	call   10ca6 <outb>
   1135a:	83 c4 08             	add    $0x8,%esp
   1135d:	eb 01                	jmp    11360 <irq_enable+0x86>
        return;
   1135f:	90                   	nop
    }
}
   11360:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11363:	c9                   	leave
   11364:	c3                   	ret

00011365 <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   11365:	55                   	push   %ebp
   11366:	89 e5                	mov    %esp,%ebp
   11368:	53                   	push   %ebx
   11369:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   1136c:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11370:	7e 74                	jle    113e6 <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11372:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   11376:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1137a:	7f 30                	jg     113ac <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1137c:	6a 21                	push   $0x21
   1137e:	e8 06 f9 ff ff       	call   10c89 <inb>
   11383:	83 c4 04             	add    $0x4,%esp
   11386:	89 c3                	mov    %eax,%ebx
   11388:	8b 45 08             	mov    0x8(%ebp),%eax
   1138b:	ba 01 00 00 00       	mov    $0x1,%edx
   11390:	89 c1                	mov    %eax,%ecx
   11392:	d3 e2                	shl    %cl,%edx
   11394:	89 d0                	mov    %edx,%eax
   11396:	09 d8                	or     %ebx,%eax
   11398:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   1139b:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1139f:	50                   	push   %eax
   113a0:	6a 21                	push   $0x21
   113a2:	e8 ff f8 ff ff       	call   10ca6 <outb>
   113a7:	83 c4 08             	add    $0x8,%esp
   113aa:	eb 3b                	jmp    113e7 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   113ac:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   113b0:	68 a1 00 00 00       	push   $0xa1
   113b5:	e8 cf f8 ff ff       	call   10c89 <inb>
   113ba:	83 c4 04             	add    $0x4,%esp
   113bd:	89 c3                	mov    %eax,%ebx
   113bf:	8b 45 08             	mov    0x8(%ebp),%eax
   113c2:	ba 01 00 00 00       	mov    $0x1,%edx
   113c7:	89 c1                	mov    %eax,%ecx
   113c9:	d3 e2                	shl    %cl,%edx
   113cb:	89 d0                	mov    %edx,%eax
   113cd:	09 d8                	or     %ebx,%eax
   113cf:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   113d2:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   113d6:	50                   	push   %eax
   113d7:	68 a1 00 00 00       	push   $0xa1
   113dc:	e8 c5 f8 ff ff       	call   10ca6 <outb>
   113e1:	83 c4 08             	add    $0x8,%esp
   113e4:	eb 01                	jmp    113e7 <irq_disable+0x82>
        return;
   113e6:	90                   	nop
    }
}
   113e7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   113ea:	c9                   	leave
   113eb:	c3                   	ret

000113ec <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   113ec:	55                   	push   %ebp
   113ed:	89 e5                	mov    %esp,%ebp
    cli();
   113ef:	e8 d1 f8 ff ff       	call   10cc5 <cli>
}
   113f4:	90                   	nop
   113f5:	5d                   	pop    %ebp
   113f6:	c3                   	ret

000113f7 <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   113f7:	55                   	push   %ebp
   113f8:	89 e5                	mov    %esp,%ebp
    sti();
   113fa:	e8 cd f8 ff ff       	call   10ccc <sti>
}
   113ff:	90                   	nop
   11400:	5d                   	pop    %ebp
   11401:	c3                   	ret

00011402 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   11402:	55                   	push   %ebp
   11403:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11405:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   11409:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1140d:	7e 0f                	jle    1141e <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   1140f:	6a 20                	push   $0x20
   11411:	68 a0 00 00 00       	push   $0xa0
   11416:	e8 8b f8 ff ff       	call   10ca6 <outb>
   1141b:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   1141e:	6a 20                	push   $0x20
   11420:	6a 20                	push   $0x20
   11422:	e8 7f f8 ff ff       	call   10ca6 <outb>
   11427:	83 c4 08             	add    $0x8,%esp
}
   1142a:	90                   	nop
   1142b:	c9                   	leave
   1142c:	c3                   	ret

0001142d <irq_enter_protection>:

// 进入临界区保护执行关中断
irq_state_t irq_enter_protection(void)
{
   1142d:	55                   	push   %ebp
   1142e:	89 e5                	mov    %esp,%ebp
   11430:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11433:	e8 ca f8 ff ff       	call   10d02 <read_eflags>
   11438:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   1143b:	e8 ac ff ff ff       	call   113ec <irq_disable_global>
    return state;
   11440:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11443:	c9                   	leave
   11444:	c3                   	ret

00011445 <irq_leave_protection>:
// 退出临界区保护执行开中断
void irq_leave_protection(irq_state_t state)
{
   11445:	55                   	push   %ebp
   11446:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   11448:	ff 75 08             	push   0x8(%ebp)
   1144b:	e8 c2 f8 ff ff       	call   10d12 <write_eflags>
   11450:	83 c4 04             	add    $0x4,%esp
   11453:	90                   	nop
   11454:	c9                   	leave
   11455:	c3                   	ret

00011456 <outb>:
}

void init_time(void)
{
    sys_tick = 0;
    init_pit();
   11456:	55                   	push   %ebp
   11457:	89 e5                	mov    %esp,%ebp
   11459:	83 ec 08             	sub    $0x8,%esp
   1145c:	8b 55 08             	mov    0x8(%ebp),%edx
   1145f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11462:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11466:	88 45 f8             	mov    %al,-0x8(%ebp)
   11469:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1146d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11471:	ee                   	out    %al,(%dx)
   11472:	90                   	nop
   11473:	c9                   	leave
   11474:	c3                   	ret

00011475 <do_handler_time>:
{
   11475:	55                   	push   %ebp
   11476:	89 e5                	mov    %esp,%ebp
   11478:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   1147b:	a1 e0 44 01 00       	mov    0x144e0,%eax
   11480:	83 c0 01             	add    $0x1,%eax
   11483:	a3 e0 44 01 00       	mov    %eax,0x144e0
    pic_send_eoi(IRQ0_TIMER);
   11488:	83 ec 0c             	sub    $0xc,%esp
   1148b:	6a 20                	push   $0x20
   1148d:	e8 70 ff ff ff       	call   11402 <pic_send_eoi>
   11492:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   11495:	e8 46 f4 ff ff       	call   108e0 <task_time_tick>
}
   1149a:	90                   	nop
   1149b:	c9                   	leave
   1149c:	c3                   	ret

0001149d <init_pit>:
{
   1149d:	55                   	push   %ebp
   1149e:	89 e5                	mov    %esp,%ebp
   114a0:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   114a3:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   114aa:	6a 36                	push   $0x36
   114ac:	6a 43                	push   $0x43
   114ae:	e8 a3 ff ff ff       	call   11456 <outb>
   114b3:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   114b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114b9:	0f b6 c0             	movzbl %al,%eax
   114bc:	50                   	push   %eax
   114bd:	6a 40                	push   $0x40
   114bf:	e8 92 ff ff ff       	call   11456 <outb>
   114c4:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   114c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114ca:	c1 e8 08             	shr    $0x8,%eax
   114cd:	0f b6 c0             	movzbl %al,%eax
   114d0:	50                   	push   %eax
   114d1:	6a 40                	push   $0x40
   114d3:	e8 7e ff ff ff       	call   11456 <outb>
   114d8:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   114db:	83 ec 08             	sub    $0x8,%esp
   114de:	68 89 02 01 00       	push   $0x10289
   114e3:	6a 20                	push   $0x20
   114e5:	e8 bb fd ff ff       	call   112a5 <irq_install>
   114ea:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   114ed:	83 ec 0c             	sub    $0xc,%esp
   114f0:	6a 20                	push   $0x20
   114f2:	e8 e3 fd ff ff       	call   112da <irq_enable>
   114f7:	83 c4 10             	add    $0x10,%esp
}
   114fa:	90                   	nop
   114fb:	c9                   	leave
   114fc:	c3                   	ret

000114fd <init_time>:
{
   114fd:	55                   	push   %ebp
   114fe:	89 e5                	mov    %esp,%ebp
   11500:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11503:	c7 05 e0 44 01 00 00 	movl   $0x0,0x144e0
   1150a:	00 00 00 
    init_pit();
   1150d:	e8 8b ff ff ff       	call   1149d <init_pit>
   11512:	90                   	nop
   11513:	c9                   	leave
   11514:	c3                   	ret

00011515 <kernel_init>:
#include "core/memory.h"
/**
 * 内核入口
 */
void kernel_init(boot_info_t *boot_info)
{
   11515:	55                   	push   %ebp
   11516:	89 e5                	mov    %esp,%ebp
   11518:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   1151b:	e8 4b f7 ff ff       	call   10c6b <cpu_init>
    memory_init(boot_info); // 对内存进行初始化
   11520:	83 ec 0c             	sub    $0xc,%esp
   11523:	ff 75 08             	push   0x8(%ebp)
   11526:	e8 b8 ee ff ff       	call   103e3 <memory_init>
   1152b:	83 c4 10             	add    $0x10,%esp
    init_log();             // 初始化打印函数
   1152e:	e8 eb 0c 00 00       	call   1221e <init_log>
    irq_init();
   11533:	e8 bf fb ff ff       	call   110f7 <irq_init>
    // 初始化定时器
    init_time();
   11538:	e8 c0 ff ff ff       	call   114fd <init_time>

    // 初始化任务管理
    task_manager_init();
   1153d:	e8 a2 f1 ff ff       	call   106e4 <task_manager_init>
}
   11542:	90                   	nop
   11543:	c9                   	leave
   11544:	c3                   	ret

00011545 <init_task_entry>:

static uint32_t init_task_stack[1024];
static task_t init_task;
static sem_t sem;
void init_task_entry(void)
{
   11545:	55                   	push   %ebp
   11546:	89 e5                	mov    %esp,%ebp
   11548:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   1154b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        // sem_wait(&sem);
        log_prinf("init task: %d", count++);
   11552:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11555:	8d 50 01             	lea    0x1(%eax),%edx
   11558:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1155b:	83 ec 08             	sub    $0x8,%esp
   1155e:	50                   	push   %eax
   1155f:	68 7d 26 01 00       	push   $0x1267d
   11564:	e8 4f 0d 00 00       	call   122b8 <log_prinf>
   11569:	83 c4 10             	add    $0x10,%esp
   1156c:	eb e4                	jmp    11552 <init_task_entry+0xd>

0001156e <init_main>:
    }
}

void init_main(void)
{
   1156e:	55                   	push   %ebp
   1156f:	89 e5                	mov    %esp,%ebp
   11571:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   11574:	83 ec 0c             	sub    $0xc,%esp
   11577:	68 8b 26 01 00       	push   $0x1268b
   1157c:	e8 37 0d 00 00       	call   122b8 <log_prinf>
   11581:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   11584:	83 ec 08             	sub    $0x8,%esp
   11587:	68 99 26 01 00       	push   $0x12699
   1158c:	68 9f 26 01 00       	push   $0x1269f
   11591:	e8 22 0d 00 00       	call   122b8 <log_prinf>
   11596:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   11599:	83 ec 0c             	sub    $0xc,%esp
   1159c:	6a 63                	push   $0x63
   1159e:	6a 30                	push   $0x30
   115a0:	6a 14                	push   $0x14
   115a2:	6a f6                	push   $0xfffffff6
   115a4:	68 aa 26 01 00       	push   $0x126aa
   115a9:	e8 0a 0d 00 00       	call   122b8 <log_prinf>
   115ae:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   115b1:	ba 00 55 01 00       	mov    $0x15500,%edx
   115b6:	b8 45 15 01 00       	mov    $0x11545,%eax
   115bb:	52                   	push   %edx
   115bc:	50                   	push   %eax
   115bd:	68 b6 26 01 00       	push   $0x126b6
   115c2:	68 00 55 01 00       	push   $0x15500
   115c7:	e8 ff ef ff ff       	call   105cb <task_init>
   115cc:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   115cf:	e8 73 f1 ff ff       	call   10747 <task_first_init>

    sem_init(&sem, 0);
   115d4:	83 ec 08             	sub    $0x8,%esp
   115d7:	6a 00                	push   $0x0
   115d9:	68 b4 55 01 00       	push   $0x155b4
   115de:	e8 bd 01 00 00       	call   117a0 <sem_init>
   115e3:	83 c4 10             	add    $0x10,%esp
    irq_enable_global();
   115e6:	e8 0c fe ff ff       	call   113f7 <irq_enable_global>
    int count = 0;
   115eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_prinf("init_main: %d", count++);
   115f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115f5:	8d 50 01             	lea    0x1(%eax),%edx
   115f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
   115fb:	83 ec 08             	sub    $0x8,%esp
   115fe:	50                   	push   %eax
   115ff:	68 c0 26 01 00       	push   $0x126c0
   11604:	e8 af 0c 00 00       	call   122b8 <log_prinf>
   11609:	83 c4 10             	add    $0x10,%esp
   1160c:	eb e4                	jmp    115f2 <init_main+0x84>

0001160e <list_count>:
   1160e:	55                   	push   %ebp
   1160f:	89 e5                	mov    %esp,%ebp
   11611:	8b 45 08             	mov    0x8(%ebp),%eax
   11614:	8b 40 08             	mov    0x8(%eax),%eax
   11617:	5d                   	pop    %ebp
   11618:	c3                   	ret

00011619 <mutex_init>:
{
   11619:	55                   	push   %ebp
   1161a:	89 e5                	mov    %esp,%ebp
   1161c:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   1161f:	8b 45 08             	mov    0x8(%ebp),%eax
   11622:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   11629:	8b 45 08             	mov    0x8(%ebp),%eax
   1162c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   11632:	8b 45 08             	mov    0x8(%ebp),%eax
   11635:	83 c0 08             	add    $0x8,%eax
   11638:	83 ec 0c             	sub    $0xc,%esp
   1163b:	50                   	push   %eax
   1163c:	e8 bc 09 00 00       	call   11ffd <list_init>
   11641:	83 c4 10             	add    $0x10,%esp
}
   11644:	90                   	nop
   11645:	c9                   	leave
   11646:	c3                   	ret

00011647 <mutex_lock>:
{
   11647:	55                   	push   %ebp
   11648:	89 e5                	mov    %esp,%ebp
   1164a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1164d:	e8 db fd ff ff       	call   1142d <irq_enter_protection>
   11652:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   11655:	e8 93 f1 ff ff       	call   107ed <task_current>
   1165a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0)
   1165d:	8b 45 08             	mov    0x8(%ebp),%eax
   11660:	8b 40 04             	mov    0x4(%eax),%eax
   11663:	85 c0                	test   %eax,%eax
   11665:	75 19                	jne    11680 <mutex_lock+0x39>
        mutex->locked_count++;
   11667:	8b 45 08             	mov    0x8(%ebp),%eax
   1166a:	8b 40 04             	mov    0x4(%eax),%eax
   1166d:	8d 50 01             	lea    0x1(%eax),%edx
   11670:	8b 45 08             	mov    0x8(%ebp),%eax
   11673:	89 50 04             	mov    %edx,0x4(%eax)
        mutex->owner = curr;
   11676:	8b 45 08             	mov    0x8(%ebp),%eax
   11679:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1167c:	89 10                	mov    %edx,(%eax)
   1167e:	eb 47                	jmp    116c7 <mutex_lock+0x80>
    else if (mutex->owner == curr)
   11680:	8b 45 08             	mov    0x8(%ebp),%eax
   11683:	8b 00                	mov    (%eax),%eax
   11685:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11688:	75 11                	jne    1169b <mutex_lock+0x54>
        mutex->locked_count++;
   1168a:	8b 45 08             	mov    0x8(%ebp),%eax
   1168d:	8b 40 04             	mov    0x4(%eax),%eax
   11690:	8d 50 01             	lea    0x1(%eax),%edx
   11693:	8b 45 08             	mov    0x8(%ebp),%eax
   11696:	89 50 04             	mov    %edx,0x4(%eax)
   11699:	eb 2c                	jmp    116c7 <mutex_lock+0x80>
        task_set_block(curr);
   1169b:	83 ec 0c             	sub    $0xc,%esp
   1169e:	ff 75 f0             	push   -0x10(%ebp)
   116a1:	e8 1c f1 ff ff       	call   107c2 <task_set_block>
   116a6:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   116a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116ac:	8d 50 38             	lea    0x38(%eax),%edx
   116af:	8b 45 08             	mov    0x8(%ebp),%eax
   116b2:	83 c0 08             	add    $0x8,%eax
   116b5:	83 ec 08             	sub    $0x8,%esp
   116b8:	52                   	push   %edx
   116b9:	50                   	push   %eax
   116ba:	e8 c2 09 00 00       	call   12081 <list_insert_last>
   116bf:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   116c2:	e8 d4 f1 ff ff       	call   1089b <task_dispatch>
    irq_leave_protection(state);
   116c7:	83 ec 0c             	sub    $0xc,%esp
   116ca:	ff 75 f4             	push   -0xc(%ebp)
   116cd:	e8 73 fd ff ff       	call   11445 <irq_leave_protection>
   116d2:	83 c4 10             	add    $0x10,%esp
}
   116d5:	90                   	nop
   116d6:	c9                   	leave
   116d7:	c3                   	ret

000116d8 <mutex_unlock>:
{
   116d8:	55                   	push   %ebp
   116d9:	89 e5                	mov    %esp,%ebp
   116db:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   116de:	e8 4a fd ff ff       	call   1142d <irq_enter_protection>
   116e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   116e6:	e8 02 f1 ff ff       	call   107ed <task_current>
   116eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr)
   116ee:	8b 45 08             	mov    0x8(%ebp),%eax
   116f1:	8b 00                	mov    (%eax),%eax
   116f3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   116f6:	0f 85 88 00 00 00    	jne    11784 <mutex_unlock+0xac>
        if (--mutex->locked_count == 0)
   116fc:	8b 45 08             	mov    0x8(%ebp),%eax
   116ff:	8b 40 04             	mov    0x4(%eax),%eax
   11702:	8d 50 ff             	lea    -0x1(%eax),%edx
   11705:	8b 45 08             	mov    0x8(%ebp),%eax
   11708:	89 50 04             	mov    %edx,0x4(%eax)
   1170b:	8b 45 08             	mov    0x8(%ebp),%eax
   1170e:	8b 40 04             	mov    0x4(%eax),%eax
   11711:	85 c0                	test   %eax,%eax
   11713:	75 6f                	jne    11784 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   11715:	8b 45 08             	mov    0x8(%ebp),%eax
   11718:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
            if (list_count(&mutex->wait_list))
   1171e:	8b 45 08             	mov    0x8(%ebp),%eax
   11721:	83 c0 08             	add    $0x8,%eax
   11724:	83 ec 0c             	sub    $0xc,%esp
   11727:	50                   	push   %eax
   11728:	e8 e1 fe ff ff       	call   1160e <list_count>
   1172d:	83 c4 10             	add    $0x10,%esp
   11730:	85 c0                	test   %eax,%eax
   11732:	74 50                	je     11784 <mutex_unlock+0xac>
                list_node_t *node = list_remove_first(&mutex->wait_list);
   11734:	8b 45 08             	mov    0x8(%ebp),%eax
   11737:	83 c0 08             	add    $0x8,%eax
   1173a:	83 ec 0c             	sub    $0xc,%esp
   1173d:	50                   	push   %eax
   1173e:	e8 a2 09 00 00       	call   120e5 <list_remove_first>
   11743:	83 c4 10             	add    $0x10,%esp
   11746:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t *task = list_node_parent(node, task_t, wait_node);
   11749:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1174d:	74 08                	je     11757 <mutex_unlock+0x7f>
   1174f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11752:	83 e8 38             	sub    $0x38,%eax
   11755:	eb 05                	jmp    1175c <mutex_unlock+0x84>
   11757:	b8 00 00 00 00       	mov    $0x0,%eax
   1175c:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   1175f:	83 ec 0c             	sub    $0xc,%esp
   11762:	ff 75 e8             	push   -0x18(%ebp)
   11765:	e8 24 f0 ff ff       	call   1078e <task_set_ready>
   1176a:	83 c4 10             	add    $0x10,%esp
                mutex->locked_count = 1;
   1176d:	8b 45 08             	mov    0x8(%ebp),%eax
   11770:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   11777:	8b 45 08             	mov    0x8(%ebp),%eax
   1177a:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1177d:	89 10                	mov    %edx,(%eax)
                task_dispatch();
   1177f:	e8 17 f1 ff ff       	call   1089b <task_dispatch>
    irq_leave_protection(state);
   11784:	83 ec 0c             	sub    $0xc,%esp
   11787:	ff 75 f4             	push   -0xc(%ebp)
   1178a:	e8 b6 fc ff ff       	call   11445 <irq_leave_protection>
   1178f:	83 c4 10             	add    $0x10,%esp
   11792:	90                   	nop
   11793:	c9                   	leave
   11794:	c3                   	ret

00011795 <list_count>:
   11795:	55                   	push   %ebp
   11796:	89 e5                	mov    %esp,%ebp
   11798:	8b 45 08             	mov    0x8(%ebp),%eax
   1179b:	8b 40 08             	mov    0x8(%eax),%eax
   1179e:	5d                   	pop    %ebp
   1179f:	c3                   	ret

000117a0 <sem_init>:
{
   117a0:	55                   	push   %ebp
   117a1:	89 e5                	mov    %esp,%ebp
   117a3:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   117a6:	8b 45 08             	mov    0x8(%ebp),%eax
   117a9:	8b 55 0c             	mov    0xc(%ebp),%edx
   117ac:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   117ae:	8b 45 08             	mov    0x8(%ebp),%eax
   117b1:	83 c0 04             	add    $0x4,%eax
   117b4:	83 ec 0c             	sub    $0xc,%esp
   117b7:	50                   	push   %eax
   117b8:	e8 40 08 00 00       	call   11ffd <list_init>
   117bd:	83 c4 10             	add    $0x10,%esp
}
   117c0:	90                   	nop
   117c1:	c9                   	leave
   117c2:	c3                   	ret

000117c3 <sem_wait>:
{
   117c3:	55                   	push   %ebp
   117c4:	89 e5                	mov    %esp,%ebp
   117c6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   117c9:	e8 5f fc ff ff       	call   1142d <irq_enter_protection>
   117ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0)
   117d1:	8b 45 08             	mov    0x8(%ebp),%eax
   117d4:	8b 00                	mov    (%eax),%eax
   117d6:	85 c0                	test   %eax,%eax
   117d8:	7e 0f                	jle    117e9 <sem_wait+0x26>
        sem->count--;
   117da:	8b 45 08             	mov    0x8(%ebp),%eax
   117dd:	8b 00                	mov    (%eax),%eax
   117df:	8d 50 ff             	lea    -0x1(%eax),%edx
   117e2:	8b 45 08             	mov    0x8(%ebp),%eax
   117e5:	89 10                	mov    %edx,(%eax)
   117e7:	eb 34                	jmp    1181d <sem_wait+0x5a>
        task_t *curr = task_current();
   117e9:	e8 ff ef ff ff       	call   107ed <task_current>
   117ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   117f1:	83 ec 0c             	sub    $0xc,%esp
   117f4:	ff 75 f0             	push   -0x10(%ebp)
   117f7:	e8 c6 ef ff ff       	call   107c2 <task_set_block>
   117fc:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   117ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11802:	8d 50 38             	lea    0x38(%eax),%edx
   11805:	8b 45 08             	mov    0x8(%ebp),%eax
   11808:	83 c0 04             	add    $0x4,%eax
   1180b:	83 ec 08             	sub    $0x8,%esp
   1180e:	52                   	push   %edx
   1180f:	50                   	push   %eax
   11810:	e8 6c 08 00 00       	call   12081 <list_insert_last>
   11815:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11818:	e8 7e f0 ff ff       	call   1089b <task_dispatch>
    irq_leave_protection(state);
   1181d:	83 ec 0c             	sub    $0xc,%esp
   11820:	ff 75 f4             	push   -0xc(%ebp)
   11823:	e8 1d fc ff ff       	call   11445 <irq_leave_protection>
   11828:	83 c4 10             	add    $0x10,%esp
}
   1182b:	90                   	nop
   1182c:	c9                   	leave
   1182d:	c3                   	ret

0001182e <sem_notify>:
{
   1182e:	55                   	push   %ebp
   1182f:	89 e5                	mov    %esp,%ebp
   11831:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11834:	e8 f4 fb ff ff       	call   1142d <irq_enter_protection>
   11839:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list))
   1183c:	8b 45 08             	mov    0x8(%ebp),%eax
   1183f:	83 c0 04             	add    $0x4,%eax
   11842:	83 ec 0c             	sub    $0xc,%esp
   11845:	50                   	push   %eax
   11846:	e8 4a ff ff ff       	call   11795 <list_count>
   1184b:	83 c4 10             	add    $0x10,%esp
   1184e:	85 c0                	test   %eax,%eax
   11850:	74 40                	je     11892 <sem_notify+0x64>
        list_node_t *node = list_remove_first(&sem->wait_list);
   11852:	8b 45 08             	mov    0x8(%ebp),%eax
   11855:	83 c0 04             	add    $0x4,%eax
   11858:	83 ec 0c             	sub    $0xc,%esp
   1185b:	50                   	push   %eax
   1185c:	e8 84 08 00 00       	call   120e5 <list_remove_first>
   11861:	83 c4 10             	add    $0x10,%esp
   11864:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   11867:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1186b:	74 08                	je     11875 <sem_notify+0x47>
   1186d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11870:	83 e8 38             	sub    $0x38,%eax
   11873:	eb 05                	jmp    1187a <sem_notify+0x4c>
   11875:	b8 00 00 00 00       	mov    $0x0,%eax
   1187a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   1187d:	83 ec 0c             	sub    $0xc,%esp
   11880:	ff 75 ec             	push   -0x14(%ebp)
   11883:	e8 06 ef ff ff       	call   1078e <task_set_ready>
   11888:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1188b:	e8 0b f0 ff ff       	call   1089b <task_dispatch>
   11890:	eb 0d                	jmp    1189f <sem_notify+0x71>
        sem->count++;
   11892:	8b 45 08             	mov    0x8(%ebp),%eax
   11895:	8b 00                	mov    (%eax),%eax
   11897:	8d 50 01             	lea    0x1(%eax),%edx
   1189a:	8b 45 08             	mov    0x8(%ebp),%eax
   1189d:	89 10                	mov    %edx,(%eax)
    irq_leave_protection(state);
   1189f:	83 ec 0c             	sub    $0xc,%esp
   118a2:	ff 75 f4             	push   -0xc(%ebp)
   118a5:	e8 9b fb ff ff       	call   11445 <irq_leave_protection>
   118aa:	83 c4 10             	add    $0x10,%esp
}
   118ad:	90                   	nop
   118ae:	c9                   	leave
   118af:	c3                   	ret

000118b0 <sem_count>:
{
   118b0:	55                   	push   %ebp
   118b1:	89 e5                	mov    %esp,%ebp
   118b3:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   118b6:	e8 72 fb ff ff       	call   1142d <irq_enter_protection>
   118bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   118be:	8b 45 08             	mov    0x8(%ebp),%eax
   118c1:	8b 00                	mov    (%eax),%eax
   118c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   118c6:	83 ec 0c             	sub    $0xc,%esp
   118c9:	ff 75 f4             	push   -0xc(%ebp)
   118cc:	e8 74 fb ff ff       	call   11445 <irq_leave_protection>
   118d1:	83 c4 10             	add    $0x10,%esp
    return count;
   118d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   118d7:	c9                   	leave
   118d8:	c3                   	ret

000118d9 <bitmap_byte_count>:
#include "tools/bitmap.h"
#include "tools/klib.h"

int bitmap_byte_count(int bit_count)
{
   118d9:	55                   	push   %ebp
   118da:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;
   118dc:	8b 45 08             	mov    0x8(%ebp),%eax
   118df:	83 c0 07             	add    $0x7,%eax
   118e2:	8d 50 07             	lea    0x7(%eax),%edx
   118e5:	85 c0                	test   %eax,%eax
   118e7:	0f 48 c2             	cmovs  %edx,%eax
   118ea:	c1 f8 03             	sar    $0x3,%eax
}
   118ed:	5d                   	pop    %ebp
   118ee:	c3                   	ret

000118ef <bitmap_init>:

void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   118ef:	55                   	push   %ebp
   118f0:	89 e5                	mov    %esp,%ebp
   118f2:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   118f5:	8b 45 08             	mov    0x8(%ebp),%eax
   118f8:	8b 55 10             	mov    0x10(%ebp),%edx
   118fb:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   118fd:	8b 45 08             	mov    0x8(%ebp),%eax
   11900:	8b 55 0c             	mov    0xc(%ebp),%edx
   11903:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count); // 计算位图的位数
   11906:	8b 45 08             	mov    0x8(%ebp),%eax
   11909:	8b 00                	mov    (%eax),%eax
   1190b:	50                   	push   %eax
   1190c:	e8 c8 ff ff ff       	call   118d9 <bitmap_byte_count>
   11911:	83 c4 04             	add    $0x4,%esp
   11914:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF : 0, bytes);
   11917:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1191b:	74 07                	je     11924 <bitmap_init+0x35>
   1191d:	ba ff 00 00 00       	mov    $0xff,%edx
   11922:	eb 05                	jmp    11929 <bitmap_init+0x3a>
   11924:	ba 00 00 00 00       	mov    $0x0,%edx
   11929:	8b 45 08             	mov    0x8(%ebp),%eax
   1192c:	8b 40 04             	mov    0x4(%eax),%eax
   1192f:	83 ec 04             	sub    $0x4,%esp
   11932:	ff 75 f4             	push   -0xc(%ebp)
   11935:	52                   	push   %edx
   11936:	50                   	push   %eax
   11937:	e8 98 03 00 00       	call   11cd4 <kernel_memset>
   1193c:	83 c4 10             	add    $0x10,%esp
}
   1193f:	90                   	nop
   11940:	c9                   	leave
   11941:	c3                   	ret

00011942 <bitmap_get_bit>:

int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   11942:	55                   	push   %ebp
   11943:	89 e5                	mov    %esp,%ebp
   11945:	53                   	push   %ebx
    return bitmap->bits[index / 8] & (1 << (index % 8));
   11946:	8b 45 08             	mov    0x8(%ebp),%eax
   11949:	8b 50 04             	mov    0x4(%eax),%edx
   1194c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1194f:	8d 48 07             	lea    0x7(%eax),%ecx
   11952:	85 c0                	test   %eax,%eax
   11954:	0f 48 c1             	cmovs  %ecx,%eax
   11957:	c1 f8 03             	sar    $0x3,%eax
   1195a:	01 d0                	add    %edx,%eax
   1195c:	0f b6 00             	movzbl (%eax),%eax
   1195f:	0f b6 c0             	movzbl %al,%eax
   11962:	8b 55 0c             	mov    0xc(%ebp),%edx
   11965:	83 e2 07             	and    $0x7,%edx
   11968:	bb 01 00 00 00       	mov    $0x1,%ebx
   1196d:	89 d1                	mov    %edx,%ecx
   1196f:	d3 e3                	shl    %cl,%ebx
   11971:	89 da                	mov    %ebx,%edx
   11973:	21 d0                	and    %edx,%eax
}
   11975:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11978:	c9                   	leave
   11979:	c3                   	ret

0001197a <bitmap_set_bit>:

void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit)
{
   1197a:	55                   	push   %ebp
   1197b:	89 e5                	mov    %esp,%ebp
   1197d:	56                   	push   %esi
   1197e:	53                   	push   %ebx
   1197f:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   11982:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11989:	e9 92 00 00 00       	jmp    11a20 <bitmap_set_bit+0xa6>
    {
        if (bit) // bit = 1
   1198e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   11992:	74 42                	je     119d6 <bitmap_set_bit+0x5c>
        {
            bitmap->bits[index / 8] |= (1 << (index % 8));
   11994:	8b 45 08             	mov    0x8(%ebp),%eax
   11997:	8b 50 04             	mov    0x4(%eax),%edx
   1199a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1199d:	8d 48 07             	lea    0x7(%eax),%ecx
   119a0:	85 c0                	test   %eax,%eax
   119a2:	0f 48 c1             	cmovs  %ecx,%eax
   119a5:	c1 f8 03             	sar    $0x3,%eax
   119a8:	89 c3                	mov    %eax,%ebx
   119aa:	89 d8                	mov    %ebx,%eax
   119ac:	01 d0                	add    %edx,%eax
   119ae:	0f b6 00             	movzbl (%eax),%eax
   119b1:	89 c6                	mov    %eax,%esi
   119b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   119b6:	83 e0 07             	and    $0x7,%eax
   119b9:	ba 01 00 00 00       	mov    $0x1,%edx
   119be:	89 c1                	mov    %eax,%ecx
   119c0:	d3 e2                	shl    %cl,%edx
   119c2:	89 d0                	mov    %edx,%eax
   119c4:	89 f2                	mov    %esi,%edx
   119c6:	09 c2                	or     %eax,%edx
   119c8:	8b 45 08             	mov    0x8(%ebp),%eax
   119cb:	8b 40 04             	mov    0x4(%eax),%eax
   119ce:	89 d9                	mov    %ebx,%ecx
   119d0:	01 c8                	add    %ecx,%eax
   119d2:	88 10                	mov    %dl,(%eax)
   119d4:	eb 42                	jmp    11a18 <bitmap_set_bit+0x9e>
        }
        else
        { // bit = 0
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   119d6:	8b 45 08             	mov    0x8(%ebp),%eax
   119d9:	8b 50 04             	mov    0x4(%eax),%edx
   119dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   119df:	8d 48 07             	lea    0x7(%eax),%ecx
   119e2:	85 c0                	test   %eax,%eax
   119e4:	0f 48 c1             	cmovs  %ecx,%eax
   119e7:	c1 f8 03             	sar    $0x3,%eax
   119ea:	89 c3                	mov    %eax,%ebx
   119ec:	89 d8                	mov    %ebx,%eax
   119ee:	01 d0                	add    %edx,%eax
   119f0:	0f b6 00             	movzbl (%eax),%eax
   119f3:	89 c6                	mov    %eax,%esi
   119f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   119f8:	83 e0 07             	and    $0x7,%eax
   119fb:	ba 01 00 00 00       	mov    $0x1,%edx
   11a00:	89 c1                	mov    %eax,%ecx
   11a02:	d3 e2                	shl    %cl,%edx
   11a04:	89 d0                	mov    %edx,%eax
   11a06:	f7 d0                	not    %eax
   11a08:	89 f2                	mov    %esi,%edx
   11a0a:	21 c2                	and    %eax,%edx
   11a0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0f:	8b 40 04             	mov    0x4(%eax),%eax
   11a12:	89 d9                	mov    %ebx,%ecx
   11a14:	01 c8                	add    %ecx,%eax
   11a16:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   11a18:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11a1c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   11a20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a23:	3b 45 10             	cmp    0x10(%ebp),%eax
   11a26:	7d 0e                	jge    11a36 <bitmap_set_bit+0xbc>
   11a28:	8b 45 08             	mov    0x8(%ebp),%eax
   11a2b:	8b 00                	mov    (%eax),%eax
   11a2d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11a30:	0f 8c 58 ff ff ff    	jl     1198e <bitmap_set_bit+0x14>
        }
    }
}
   11a36:	90                   	nop
   11a37:	83 c4 10             	add    $0x10,%esp
   11a3a:	5b                   	pop    %ebx
   11a3b:	5e                   	pop    %esi
   11a3c:	5d                   	pop    %ebp
   11a3d:	c3                   	ret

00011a3e <bitmap_is_set>:

int bitmap_is_set(bitmap_t *bitmap, int index)
{
   11a3e:	55                   	push   %ebp
   11a3f:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   11a41:	ff 75 0c             	push   0xc(%ebp)
   11a44:	ff 75 08             	push   0x8(%ebp)
   11a47:	e8 f6 fe ff ff       	call   11942 <bitmap_get_bit>
   11a4c:	83 c4 08             	add    $0x8,%esp
   11a4f:	85 c0                	test   %eax,%eax
   11a51:	0f 95 c0             	setne  %al
   11a54:	0f b6 c0             	movzbl %al,%eax
}
   11a57:	c9                   	leave
   11a58:	c3                   	ret

00011a59 <bitmap_alloc_nbits>:

int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   11a59:	55                   	push   %ebp
   11a5a:	89 e5                	mov    %esp,%ebp
   11a5c:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   11a5f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   11a66:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count)
   11a6d:	e9 85 00 00 00       	jmp    11af7 <bitmap_alloc_nbits+0x9e>
    {
        if (bitmap_get_bit(bitmap, search_idx) != bit)
   11a72:	ff 75 fc             	push   -0x4(%ebp)
   11a75:	ff 75 08             	push   0x8(%ebp)
   11a78:	e8 c5 fe ff ff       	call   11942 <bitmap_get_bit>
   11a7d:	83 c4 08             	add    $0x8,%esp
   11a80:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11a83:	74 06                	je     11a8b <bitmap_alloc_nbits+0x32>
        {
            search_idx++;
   11a85:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   11a89:	eb 6c                	jmp    11af7 <bitmap_alloc_nbits+0x9e>
        }
        ok_index = search_idx;
   11a8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a8e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   11a91:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   11a98:	eb 27                	jmp    11ac1 <bitmap_alloc_nbits+0x68>
        {
            if (bitmap_get_bit(bitmap, search_idx++) != bit)
   11a9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11a9d:	8d 50 01             	lea    0x1(%eax),%edx
   11aa0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11aa3:	50                   	push   %eax
   11aa4:	ff 75 08             	push   0x8(%ebp)
   11aa7:	e8 96 fe ff ff       	call   11942 <bitmap_get_bit>
   11aac:	83 c4 08             	add    $0x8,%esp
   11aaf:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11ab2:	74 09                	je     11abd <bitmap_alloc_nbits+0x64>
            {
                ok_index = -1;
   11ab4:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   11abb:	eb 16                	jmp    11ad3 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   11abd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11ac1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ac4:	3b 45 10             	cmp    0x10(%ebp),%eax
   11ac7:	7d 0a                	jge    11ad3 <bitmap_alloc_nbits+0x7a>
   11ac9:	8b 45 08             	mov    0x8(%ebp),%eax
   11acc:	8b 00                	mov    (%eax),%eax
   11ace:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11ad1:	7c c7                	jl     11a9a <bitmap_alloc_nbits+0x41>
            }
        }
        if (i >= count)
   11ad3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ad6:	3b 45 10             	cmp    0x10(%ebp),%eax
   11ad9:	7c 1c                	jl     11af7 <bitmap_alloc_nbits+0x9e>
        {
            bitmap_set_bit(bitmap, ok_index, count, ~bit);
   11adb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ade:	f7 d0                	not    %eax
   11ae0:	50                   	push   %eax
   11ae1:	ff 75 10             	push   0x10(%ebp)
   11ae4:	ff 75 f8             	push   -0x8(%ebp)
   11ae7:	ff 75 08             	push   0x8(%ebp)
   11aea:	e8 8b fe ff ff       	call   1197a <bitmap_set_bit>
   11aef:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   11af2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11af5:	eb 13                	jmp    11b0a <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count)
   11af7:	8b 45 08             	mov    0x8(%ebp),%eax
   11afa:	8b 00                	mov    (%eax),%eax
   11afc:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   11aff:	0f 8c 6d ff ff ff    	jl     11a72 <bitmap_alloc_nbits+0x19>
        }
    }
    return -1;
   11b05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11b0a:	c9                   	leave
   11b0b:	c3                   	ret

00011b0c <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   11b0c:	55                   	push   %ebp
   11b0d:	89 e5                	mov    %esp,%ebp
}
   11b0f:	f4                   	hlt

   11b10:	90                   	nop
   11b11:	5d                   	pop    %ebp
   11b12:	c3                   	ret

00011b13 <kernel_strcpy>:
{
   11b13:	55                   	push   %ebp
   11b14:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   11b16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b1a:	74 3b                	je     11b57 <kernel_strcpy+0x44>
   11b1c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b20:	74 35                	je     11b57 <kernel_strcpy+0x44>
    while (*dest && *src)
   11b22:	eb 17                	jmp    11b3b <kernel_strcpy+0x28>
        *dest++ = *src++;
   11b24:	8b 55 0c             	mov    0xc(%ebp),%edx
   11b27:	8d 42 01             	lea    0x1(%edx),%eax
   11b2a:	89 45 0c             	mov    %eax,0xc(%ebp)
   11b2d:	8b 45 08             	mov    0x8(%ebp),%eax
   11b30:	8d 48 01             	lea    0x1(%eax),%ecx
   11b33:	89 4d 08             	mov    %ecx,0x8(%ebp)
   11b36:	0f b6 12             	movzbl (%edx),%edx
   11b39:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   11b3b:	8b 45 08             	mov    0x8(%ebp),%eax
   11b3e:	0f b6 00             	movzbl (%eax),%eax
   11b41:	84 c0                	test   %al,%al
   11b43:	74 0a                	je     11b4f <kernel_strcpy+0x3c>
   11b45:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b48:	0f b6 00             	movzbl (%eax),%eax
   11b4b:	84 c0                	test   %al,%al
   11b4d:	75 d5                	jne    11b24 <kernel_strcpy+0x11>
    *dest = '\0';
   11b4f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b52:	c6 00 00             	movb   $0x0,(%eax)
   11b55:	eb 01                	jmp    11b58 <kernel_strcpy+0x45>
        return;
   11b57:	90                   	nop
}
   11b58:	5d                   	pop    %ebp
   11b59:	c3                   	ret

00011b5a <kernel_strncpy>:
{
   11b5a:	55                   	push   %ebp
   11b5b:	89 e5                	mov    %esp,%ebp
   11b5d:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b64:	74 61                	je     11bc7 <kernel_strncpy+0x6d>
   11b66:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b6a:	74 5b                	je     11bc7 <kernel_strncpy+0x6d>
   11b6c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11b70:	74 55                	je     11bc7 <kernel_strncpy+0x6d>
    char *d = dest;
   11b72:	8b 45 08             	mov    0x8(%ebp),%eax
   11b75:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   11b78:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b7b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   11b7e:	eb 17                	jmp    11b97 <kernel_strncpy+0x3d>
        *d++ = *s++;
   11b80:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11b83:	8d 42 01             	lea    0x1(%edx),%eax
   11b86:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11b89:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b8c:	8d 48 01             	lea    0x1(%eax),%ecx
   11b8f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11b92:	0f b6 12             	movzbl (%edx),%edx
   11b95:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   11b97:	8b 45 10             	mov    0x10(%ebp),%eax
   11b9a:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b9d:	89 55 10             	mov    %edx,0x10(%ebp)
   11ba0:	85 c0                	test   %eax,%eax
   11ba2:	7e 0a                	jle    11bae <kernel_strncpy+0x54>
   11ba4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11ba7:	0f b6 00             	movzbl (%eax),%eax
   11baa:	84 c0                	test   %al,%al
   11bac:	75 d2                	jne    11b80 <kernel_strncpy+0x26>
    if (size == 0)
   11bae:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11bb2:	75 0b                	jne    11bbf <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11bb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11bb7:	83 e8 01             	sub    $0x1,%eax
   11bba:	c6 00 00             	movb   $0x0,(%eax)
   11bbd:	eb 09                	jmp    11bc8 <kernel_strncpy+0x6e>
        *d = '\0';
   11bbf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11bc2:	c6 00 00             	movb   $0x0,(%eax)
   11bc5:	eb 01                	jmp    11bc8 <kernel_strncpy+0x6e>
        return;
   11bc7:	90                   	nop
}
   11bc8:	c9                   	leave
   11bc9:	c3                   	ret

00011bca <kernel_strncmp>:
{
   11bca:	55                   	push   %ebp
   11bcb:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   11bcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11bd1:	74 0c                	je     11bdf <kernel_strncmp+0x15>
   11bd3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11bd7:	74 06                	je     11bdf <kernel_strncmp+0x15>
   11bd9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11bdd:	75 0f                	jne    11bee <kernel_strncmp+0x24>
        return -1;
   11bdf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11be4:	eb 62                	jmp    11c48 <kernel_strncmp+0x7e>
        s1++;
   11be6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11bea:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   11bee:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf1:	0f b6 00             	movzbl (%eax),%eax
   11bf4:	84 c0                	test   %al,%al
   11bf6:	74 20                	je     11c18 <kernel_strncmp+0x4e>
   11bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bfb:	0f b6 00             	movzbl (%eax),%eax
   11bfe:	84 c0                	test   %al,%al
   11c00:	74 16                	je     11c18 <kernel_strncmp+0x4e>
   11c02:	8b 45 08             	mov    0x8(%ebp),%eax
   11c05:	0f b6 10             	movzbl (%eax),%edx
   11c08:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c0b:	0f b6 00             	movzbl (%eax),%eax
   11c0e:	38 c2                	cmp    %al,%dl
   11c10:	75 06                	jne    11c18 <kernel_strncmp+0x4e>
   11c12:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11c16:	75 ce                	jne    11be6 <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11c18:	8b 45 08             	mov    0x8(%ebp),%eax
   11c1b:	0f b6 00             	movzbl (%eax),%eax
   11c1e:	84 c0                	test   %al,%al
   11c20:	74 21                	je     11c43 <kernel_strncmp+0x79>
   11c22:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c25:	0f b6 00             	movzbl (%eax),%eax
   11c28:	84 c0                	test   %al,%al
   11c2a:	74 17                	je     11c43 <kernel_strncmp+0x79>
   11c2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11c2f:	0f b6 10             	movzbl (%eax),%edx
   11c32:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c35:	0f b6 00             	movzbl (%eax),%eax
   11c38:	38 c2                	cmp    %al,%dl
   11c3a:	74 07                	je     11c43 <kernel_strncmp+0x79>
   11c3c:	b8 01 00 00 00       	mov    $0x1,%eax
   11c41:	eb 05                	jmp    11c48 <kernel_strncmp+0x7e>
   11c43:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c48:	5d                   	pop    %ebp
   11c49:	c3                   	ret

00011c4a <kernel_strlen>:
{
   11c4a:	55                   	push   %ebp
   11c4b:	89 e5                	mov    %esp,%ebp
   11c4d:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   11c50:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c54:	75 07                	jne    11c5d <kernel_strlen+0x13>
        return 0;
   11c56:	b8 00 00 00 00       	mov    $0x0,%eax
   11c5b:	eb 26                	jmp    11c83 <kernel_strlen+0x39>
    const char *c = str;
   11c5d:	8b 45 08             	mov    0x8(%ebp),%eax
   11c60:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11c63:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   11c6a:	eb 04                	jmp    11c70 <kernel_strlen+0x26>
        len++;
   11c6c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   11c70:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c73:	8d 50 01             	lea    0x1(%eax),%edx
   11c76:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11c79:	0f b6 00             	movzbl (%eax),%eax
   11c7c:	84 c0                	test   %al,%al
   11c7e:	75 ec                	jne    11c6c <kernel_strlen+0x22>
    return len;
   11c80:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11c83:	c9                   	leave
   11c84:	c3                   	ret

00011c85 <kernel_memcpy>:
{
   11c85:	55                   	push   %ebp
   11c86:	89 e5                	mov    %esp,%ebp
   11c88:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11c8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c8f:	74 40                	je     11cd1 <kernel_memcpy+0x4c>
   11c91:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11c95:	74 3a                	je     11cd1 <kernel_memcpy+0x4c>
   11c97:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11c9b:	74 34                	je     11cd1 <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   11c9d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ca0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   11ca3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ca6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11ca9:	eb 17                	jmp    11cc2 <kernel_memcpy+0x3d>
        *d++ = *s++;
   11cab:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11cae:	8d 42 01             	lea    0x1(%edx),%eax
   11cb1:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11cb4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11cb7:	8d 48 01             	lea    0x1(%eax),%ecx
   11cba:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11cbd:	0f b6 12             	movzbl (%edx),%edx
   11cc0:	88 10                	mov    %dl,(%eax)
    while (size--)
   11cc2:	8b 45 10             	mov    0x10(%ebp),%eax
   11cc5:	8d 50 ff             	lea    -0x1(%eax),%edx
   11cc8:	89 55 10             	mov    %edx,0x10(%ebp)
   11ccb:	85 c0                	test   %eax,%eax
   11ccd:	75 dc                	jne    11cab <kernel_memcpy+0x26>
   11ccf:	eb 01                	jmp    11cd2 <kernel_memcpy+0x4d>
        return;
   11cd1:	90                   	nop
}
   11cd2:	c9                   	leave
   11cd3:	c3                   	ret

00011cd4 <kernel_memset>:
{
   11cd4:	55                   	push   %ebp
   11cd5:	89 e5                	mov    %esp,%ebp
   11cd7:	83 ec 14             	sub    $0x14,%esp
   11cda:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cdd:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   11ce0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ce4:	74 2c                	je     11d12 <kernel_memset+0x3e>
   11ce6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11cea:	74 26                	je     11d12 <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   11cec:	8b 45 08             	mov    0x8(%ebp),%eax
   11cef:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   11cf2:	eb 0f                	jmp    11d03 <kernel_memset+0x2f>
        *d++ = v;
   11cf4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11cf7:	8d 50 01             	lea    0x1(%eax),%edx
   11cfa:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11cfd:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11d01:	88 10                	mov    %dl,(%eax)
    while (size--)
   11d03:	8b 45 10             	mov    0x10(%ebp),%eax
   11d06:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d09:	89 55 10             	mov    %edx,0x10(%ebp)
   11d0c:	85 c0                	test   %eax,%eax
   11d0e:	75 e4                	jne    11cf4 <kernel_memset+0x20>
   11d10:	eb 01                	jmp    11d13 <kernel_memset+0x3f>
        return;
   11d12:	90                   	nop
}
   11d13:	c9                   	leave
   11d14:	c3                   	ret

00011d15 <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   11d15:	55                   	push   %ebp
   11d16:	89 e5                	mov    %esp,%ebp
   11d18:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   11d1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11d1f:	74 06                	je     11d27 <kernel_memcmp+0x12>
   11d21:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11d25:	75 07                	jne    11d2e <kernel_memcmp+0x19>
    {
        return 1;
   11d27:	b8 01 00 00 00       	mov    $0x1,%eax
   11d2c:	eb 43                	jmp    11d71 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   11d2e:	8b 45 08             	mov    0x8(%ebp),%eax
   11d31:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   11d34:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d37:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11d3a:	eb 23                	jmp    11d5f <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   11d3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11d3f:	8d 50 01             	lea    0x1(%eax),%edx
   11d42:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11d45:	0f b6 08             	movzbl (%eax),%ecx
   11d48:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11d4b:	8d 50 01             	lea    0x1(%eax),%edx
   11d4e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11d51:	0f b6 00             	movzbl (%eax),%eax
   11d54:	38 c1                	cmp    %al,%cl
   11d56:	74 07                	je     11d5f <kernel_memcmp+0x4a>
        {
            return 1;
   11d58:	b8 01 00 00 00       	mov    $0x1,%eax
   11d5d:	eb 12                	jmp    11d71 <kernel_memcmp+0x5c>
    while (size--)
   11d5f:	8b 45 10             	mov    0x10(%ebp),%eax
   11d62:	8d 50 ff             	lea    -0x1(%eax),%edx
   11d65:	89 55 10             	mov    %edx,0x10(%ebp)
   11d68:	85 c0                	test   %eax,%eax
   11d6a:	75 d0                	jne    11d3c <kernel_memcmp+0x27>
        }
    }
    return 0;
   11d6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d71:	c9                   	leave
   11d72:	c3                   	ret

00011d73 <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   11d73:	55                   	push   %ebp
   11d74:	89 e5                	mov    %esp,%ebp
   11d76:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   11d79:	8d 45 10             	lea    0x10(%ebp),%eax
   11d7c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   11d7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d82:	83 ec 04             	sub    $0x4,%esp
   11d85:	50                   	push   %eax
   11d86:	ff 75 0c             	push   0xc(%ebp)
   11d89:	ff 75 08             	push   0x8(%ebp)
   11d8c:	e8 dd 00 00 00       	call   11e6e <kernel_vsprintf>
   11d91:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11d94:	90                   	nop
   11d95:	c9                   	leave
   11d96:	c3                   	ret

00011d97 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   11d97:	55                   	push   %ebp
   11d98:	89 e5                	mov    %esp,%ebp
   11d9a:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11d9d:	8b 45 08             	mov    0x8(%ebp),%eax
   11da0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   11da3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11da6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   11da9:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11dad:	74 1d                	je     11dcc <kernel_itoa+0x35>
   11daf:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11db3:	74 17                	je     11dcc <kernel_itoa+0x35>
   11db5:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11db9:	74 11                	je     11dcc <kernel_itoa+0x35>
   11dbb:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11dbf:	74 0b                	je     11dcc <kernel_itoa+0x35>
    {
        *p = '\0';
   11dc1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11dc4:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11dc7:	e9 a0 00 00 00       	jmp    11e6c <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   11dcc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11dd0:	79 12                	jns    11de4 <kernel_itoa+0x4d>
   11dd2:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11dd6:	75 0c                	jne    11de4 <kernel_itoa+0x4d>
    {
        *p++ = '-';
   11dd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11ddb:	8d 50 01             	lea    0x1(%eax),%edx
   11dde:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11de1:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   11de4:	8b 0d 1c 27 01 00    	mov    0x1271c,%ecx
   11dea:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ded:	99                   	cltd
   11dee:	f7 7d 10             	idivl  0x10(%ebp)
   11df1:	89 d0                	mov    %edx,%eax
   11df3:	83 c0 0f             	add    $0xf,%eax
   11df6:	01 c8                	add    %ecx,%eax
   11df8:	0f b6 00             	movzbl (%eax),%eax
   11dfb:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11dfe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e01:	8d 50 01             	lea    0x1(%eax),%edx
   11e04:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11e07:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   11e0b:	88 10                	mov    %dl,(%eax)
        num /= base;
   11e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e10:	99                   	cltd
   11e11:	f7 7d 10             	idivl  0x10(%ebp)
   11e14:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   11e17:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11e1b:	75 c7                	jne    11de4 <kernel_itoa+0x4d>
    *p-- = '\0';
   11e1d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e20:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e23:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11e26:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   11e29:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11e2d:	7f 08                	jg     11e37 <kernel_itoa+0xa0>
   11e2f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e32:	83 c0 01             	add    $0x1,%eax
   11e35:	eb 03                	jmp    11e3a <kernel_itoa+0xa3>
   11e37:	8b 45 08             	mov    0x8(%ebp),%eax
   11e3a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   11e3d:	eb 25                	jmp    11e64 <kernel_itoa+0xcd>
    {
        char ch = *start;
   11e3f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e42:	0f b6 00             	movzbl (%eax),%eax
   11e45:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   11e48:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e4b:	0f b6 10             	movzbl (%eax),%edx
   11e4e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e51:	88 10                	mov    %dl,(%eax)
        *p = ch;
   11e53:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e56:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   11e5a:	88 10                	mov    %dl,(%eax)

        p--;
   11e5c:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11e60:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   11e64:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e67:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   11e6a:	72 d3                	jb     11e3f <kernel_itoa+0xa8>
    }
}
   11e6c:	c9                   	leave
   11e6d:	c3                   	ret

00011e6e <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   11e6e:	55                   	push   %ebp
   11e6f:	89 e5                	mov    %esp,%ebp
   11e71:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   11e74:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   11e7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11e7e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   11e81:	e9 11 01 00 00       	jmp    11f97 <kernel_vsprintf+0x129>
    {
        switch (state)
   11e86:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11e8a:	74 0b                	je     11e97 <kernel_vsprintf+0x29>
   11e8c:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   11e90:	74 2b                	je     11ebd <kernel_vsprintf+0x4f>
   11e92:	e9 00 01 00 00       	jmp    11f97 <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   11e97:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11e9b:	75 0c                	jne    11ea9 <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   11e9d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11ea4:	e9 ee 00 00 00       	jmp    11f97 <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   11ea9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11eac:	8d 50 01             	lea    0x1(%eax),%edx
   11eaf:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11eb2:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11eb6:	88 10                	mov    %dl,(%eax)
            }
            break;
   11eb8:	e9 da 00 00 00       	jmp    11f97 <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   11ebd:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11ec1:	75 31                	jne    11ef4 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11ec3:	8b 45 10             	mov    0x10(%ebp),%eax
   11ec6:	8d 50 04             	lea    0x4(%eax),%edx
   11ec9:	89 55 10             	mov    %edx,0x10(%ebp)
   11ecc:	8b 00                	mov    (%eax),%eax
   11ece:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   11ed1:	6a 0a                	push   $0xa
   11ed3:	ff 75 e4             	push   -0x1c(%ebp)
   11ed6:	ff 75 f8             	push   -0x8(%ebp)
   11ed9:	e8 b9 fe ff ff       	call   11d97 <kernel_itoa>
   11ede:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11ee1:	ff 75 f8             	push   -0x8(%ebp)
   11ee4:	e8 61 fd ff ff       	call   11c4a <kernel_strlen>
   11ee9:	83 c4 04             	add    $0x4,%esp
   11eec:	01 45 f8             	add    %eax,-0x8(%ebp)
   11eef:	e9 9b 00 00 00       	jmp    11f8f <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   11ef4:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11ef8:	75 2e                	jne    11f28 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   11efa:	8b 45 10             	mov    0x10(%ebp),%eax
   11efd:	8d 50 04             	lea    0x4(%eax),%edx
   11f00:	89 55 10             	mov    %edx,0x10(%ebp)
   11f03:	8b 00                	mov    (%eax),%eax
   11f05:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   11f08:	6a 10                	push   $0x10
   11f0a:	ff 75 e8             	push   -0x18(%ebp)
   11f0d:	ff 75 f8             	push   -0x8(%ebp)
   11f10:	e8 82 fe ff ff       	call   11d97 <kernel_itoa>
   11f15:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11f18:	ff 75 f8             	push   -0x8(%ebp)
   11f1b:	e8 2a fd ff ff       	call   11c4a <kernel_strlen>
   11f20:	83 c4 04             	add    $0x4,%esp
   11f23:	01 45 f8             	add    %eax,-0x8(%ebp)
   11f26:	eb 67                	jmp    11f8f <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   11f28:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11f2c:	75 19                	jne    11f47 <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   11f2e:	8b 45 10             	mov    0x10(%ebp),%eax
   11f31:	8d 50 04             	lea    0x4(%eax),%edx
   11f34:	89 55 10             	mov    %edx,0x10(%ebp)
   11f37:	8b 00                	mov    (%eax),%eax
   11f39:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   11f3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11f3f:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11f43:	88 10                	mov    %dl,(%eax)
   11f45:	eb 48                	jmp    11f8f <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   11f47:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11f4b:	75 42                	jne    11f8f <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   11f4d:	8b 45 10             	mov    0x10(%ebp),%eax
   11f50:	8d 50 04             	lea    0x4(%eax),%edx
   11f53:	89 55 10             	mov    %edx,0x10(%ebp)
   11f56:	8b 00                	mov    (%eax),%eax
   11f58:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   11f5b:	ff 75 f4             	push   -0xc(%ebp)
   11f5e:	e8 e7 fc ff ff       	call   11c4a <kernel_strlen>
   11f63:	83 c4 04             	add    $0x4,%esp
   11f66:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   11f69:	eb 17                	jmp    11f82 <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   11f6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11f6e:	8d 42 01             	lea    0x1(%edx),%eax
   11f71:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11f74:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11f77:	8d 48 01             	lea    0x1(%eax),%ecx
   11f7a:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11f7d:	0f b6 12             	movzbl (%edx),%edx
   11f80:	88 10                	mov    %dl,(%eax)
                while (len--)
   11f82:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f85:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f88:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11f8b:	85 c0                	test   %eax,%eax
   11f8d:	75 dc                	jne    11f6b <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   11f8f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11f96:	90                   	nop
    while ((ch = *fmt++))
   11f97:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f9a:	8d 50 01             	lea    0x1(%eax),%edx
   11f9d:	89 55 0c             	mov    %edx,0xc(%ebp)
   11fa0:	0f b6 00             	movzbl (%eax),%eax
   11fa3:	88 45 ef             	mov    %al,-0x11(%ebp)
   11fa6:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11faa:	0f 85 d6 fe ff ff    	jne    11e86 <kernel_vsprintf+0x18>
        }
    }
}
   11fb0:	90                   	nop
   11fb1:	90                   	nop
   11fb2:	c9                   	leave
   11fb3:	c3                   	ret

00011fb4 <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   11fb4:	55                   	push   %ebp
   11fb5:	89 e5                	mov    %esp,%ebp
   11fb7:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   11fba:	83 ec 08             	sub    $0x8,%esp
   11fbd:	ff 75 14             	push   0x14(%ebp)
   11fc0:	68 d0 26 01 00       	push   $0x126d0
   11fc5:	e8 ee 02 00 00       	call   122b8 <log_prinf>
   11fca:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   11fcd:	ff 75 10             	push   0x10(%ebp)
   11fd0:	ff 75 0c             	push   0xc(%ebp)
   11fd3:	ff 75 08             	push   0x8(%ebp)
   11fd6:	68 e2 26 01 00       	push   $0x126e2
   11fdb:	e8 d8 02 00 00       	call   122b8 <log_prinf>
   11fe0:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   11fe3:	e8 24 fb ff ff       	call   11b0c <hlt>
   11fe8:	eb f9                	jmp    11fe3 <pannic+0x2f>

00011fea <list_is_empty>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
    // 表项为空，返回空
   11fea:	55                   	push   %ebp
   11feb:	89 e5                	mov    %esp,%ebp
    if (list_is_empty(list)) {
   11fed:	8b 45 08             	mov    0x8(%ebp),%eax
   11ff0:	8b 40 08             	mov    0x8(%eax),%eax
   11ff3:	85 c0                	test   %eax,%eax
   11ff5:	0f 94 c0             	sete   %al
   11ff8:	0f b6 c0             	movzbl %al,%eax
        return (list_node_t*)0;
   11ffb:	5d                   	pop    %ebp
   11ffc:	c3                   	ret

00011ffd <list_init>:
void list_init(list_t *list) {
   11ffd:	55                   	push   %ebp
   11ffe:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12000:	8b 45 08             	mov    0x8(%ebp),%eax
   12003:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1200a:	8b 45 08             	mov    0x8(%ebp),%eax
   1200d:	8b 50 04             	mov    0x4(%eax),%edx
   12010:	8b 45 08             	mov    0x8(%ebp),%eax
   12013:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   12015:	8b 45 08             	mov    0x8(%ebp),%eax
   12018:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1201f:	90                   	nop
   12020:	5d                   	pop    %ebp
   12021:	c3                   	ret

00012022 <list_insert_first>:
void list_insert_first(list_t *list, list_node_t *node) {
   12022:	55                   	push   %ebp
   12023:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12025:	8b 45 08             	mov    0x8(%ebp),%eax
   12028:	8b 10                	mov    (%eax),%edx
   1202a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1202d:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   12030:	8b 45 0c             	mov    0xc(%ebp),%eax
   12033:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if (list_is_empty(list)) {
   12039:	ff 75 08             	push   0x8(%ebp)
   1203c:	e8 a9 ff ff ff       	call   11fea <list_is_empty>
   12041:	83 c4 04             	add    $0x4,%esp
   12044:	85 c0                	test   %eax,%eax
   12046:	74 15                	je     1205d <list_insert_first+0x3b>
        list->last = list->first = node;
   12048:	8b 45 08             	mov    0x8(%ebp),%eax
   1204b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1204e:	89 10                	mov    %edx,(%eax)
   12050:	8b 45 08             	mov    0x8(%ebp),%eax
   12053:	8b 10                	mov    (%eax),%edx
   12055:	8b 45 08             	mov    0x8(%ebp),%eax
   12058:	89 50 04             	mov    %edx,0x4(%eax)
   1205b:	eb 12                	jmp    1206f <list_insert_first+0x4d>
        list->first->pre = node;
   1205d:	8b 45 08             	mov    0x8(%ebp),%eax
   12060:	8b 00                	mov    (%eax),%eax
   12062:	8b 55 0c             	mov    0xc(%ebp),%edx
   12065:	89 10                	mov    %edx,(%eax)
        list->first = node;
   12067:	8b 45 08             	mov    0x8(%ebp),%eax
   1206a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1206d:	89 10                	mov    %edx,(%eax)
    list->count++;
   1206f:	8b 45 08             	mov    0x8(%ebp),%eax
   12072:	8b 40 08             	mov    0x8(%eax),%eax
   12075:	8d 50 01             	lea    0x1(%eax),%edx
   12078:	8b 45 08             	mov    0x8(%ebp),%eax
   1207b:	89 50 08             	mov    %edx,0x8(%eax)
}
   1207e:	90                   	nop
   1207f:	c9                   	leave
   12080:	c3                   	ret

00012081 <list_insert_last>:
void list_insert_last(list_t *list, list_node_t *node) {
   12081:	55                   	push   %ebp
   12082:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12084:	8b 45 08             	mov    0x8(%ebp),%eax
   12087:	8b 50 04             	mov    0x4(%eax),%edx
   1208a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1208d:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   1208f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12092:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if (list_is_empty(list)) {
   12099:	ff 75 08             	push   0x8(%ebp)
   1209c:	e8 49 ff ff ff       	call   11fea <list_is_empty>
   120a1:	83 c4 04             	add    $0x4,%esp
   120a4:	85 c0                	test   %eax,%eax
   120a6:	74 16                	je     120be <list_insert_last+0x3d>
        list->first = list->last = node;
   120a8:	8b 45 08             	mov    0x8(%ebp),%eax
   120ab:	8b 55 0c             	mov    0xc(%ebp),%edx
   120ae:	89 50 04             	mov    %edx,0x4(%eax)
   120b1:	8b 45 08             	mov    0x8(%ebp),%eax
   120b4:	8b 50 04             	mov    0x4(%eax),%edx
   120b7:	8b 45 08             	mov    0x8(%ebp),%eax
   120ba:	89 10                	mov    %edx,(%eax)
   120bc:	eb 15                	jmp    120d3 <list_insert_last+0x52>
        list->last->next = node;
   120be:	8b 45 08             	mov    0x8(%ebp),%eax
   120c1:	8b 40 04             	mov    0x4(%eax),%eax
   120c4:	8b 55 0c             	mov    0xc(%ebp),%edx
   120c7:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   120ca:	8b 45 08             	mov    0x8(%ebp),%eax
   120cd:	8b 55 0c             	mov    0xc(%ebp),%edx
   120d0:	89 50 04             	mov    %edx,0x4(%eax)
    list->count++;
   120d3:	8b 45 08             	mov    0x8(%ebp),%eax
   120d6:	8b 40 08             	mov    0x8(%eax),%eax
   120d9:	8d 50 01             	lea    0x1(%eax),%edx
   120dc:	8b 45 08             	mov    0x8(%ebp),%eax
   120df:	89 50 08             	mov    %edx,0x8(%eax)
}
   120e2:	90                   	nop
   120e3:	c9                   	leave
   120e4:	c3                   	ret

000120e5 <list_remove_first>:
list_node_t* list_remove_first(list_t *list) {
   120e5:	55                   	push   %ebp
   120e6:	89 e5                	mov    %esp,%ebp
   120e8:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list)) {
   120eb:	ff 75 08             	push   0x8(%ebp)
   120ee:	e8 f7 fe ff ff       	call   11fea <list_is_empty>
   120f3:	83 c4 04             	add    $0x4,%esp
   120f6:	85 c0                	test   %eax,%eax
   120f8:	74 07                	je     12101 <list_remove_first+0x1c>
        return (list_node_t*)0;
   120fa:	b8 00 00 00 00       	mov    $0x0,%eax
   120ff:	eb 5a                	jmp    1215b <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   12101:	8b 45 08             	mov    0x8(%ebp),%eax
   12104:	8b 00                	mov    (%eax),%eax
   12106:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   12109:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1210c:	8b 50 04             	mov    0x4(%eax),%edx
   1210f:	8b 45 08             	mov    0x8(%ebp),%eax
   12112:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   12114:	8b 45 08             	mov    0x8(%ebp),%eax
   12117:	8b 00                	mov    (%eax),%eax
   12119:	85 c0                	test   %eax,%eax
   1211b:	75 0c                	jne    12129 <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   1211d:	8b 45 08             	mov    0x8(%ebp),%eax
   12120:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12127:	eb 0c                	jmp    12135 <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   12129:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1212c:	8b 40 04             	mov    0x4(%eax),%eax
   1212f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   12135:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12138:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1213e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12141:	8b 10                	mov    (%eax),%edx
   12143:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12146:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   12149:	8b 45 08             	mov    0x8(%ebp),%eax
   1214c:	8b 40 08             	mov    0x8(%eax),%eax
   1214f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12152:	8b 45 08             	mov    0x8(%ebp),%eax
   12155:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   12158:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1215b:	c9                   	leave
   1215c:	c3                   	ret

0001215d <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   1215d:	55                   	push   %ebp
   1215e:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   12160:	8b 45 08             	mov    0x8(%ebp),%eax
   12163:	8b 00                	mov    (%eax),%eax
   12165:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12168:	75 0b                	jne    12175 <list_remove+0x18>
        list->first = remove_node->next;
   1216a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1216d:	8b 50 04             	mov    0x4(%eax),%edx
   12170:	8b 45 08             	mov    0x8(%ebp),%eax
   12173:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   12175:	8b 45 08             	mov    0x8(%ebp),%eax
   12178:	8b 40 04             	mov    0x4(%eax),%eax
   1217b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1217e:	75 0b                	jne    1218b <list_remove+0x2e>
        list->last = remove_node->pre;
   12180:	8b 45 0c             	mov    0xc(%ebp),%eax
   12183:	8b 10                	mov    (%eax),%edx
   12185:	8b 45 08             	mov    0x8(%ebp),%eax
   12188:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   1218b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1218e:	8b 00                	mov    (%eax),%eax
   12190:	85 c0                	test   %eax,%eax
   12192:	74 0e                	je     121a2 <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   12194:	8b 45 0c             	mov    0xc(%ebp),%eax
   12197:	8b 00                	mov    (%eax),%eax
   12199:	8b 55 0c             	mov    0xc(%ebp),%edx
   1219c:	8b 52 04             	mov    0x4(%edx),%edx
   1219f:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   121a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   121a5:	8b 40 04             	mov    0x4(%eax),%eax
   121a8:	85 c0                	test   %eax,%eax
   121aa:	74 0d                	je     121b9 <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   121ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   121af:	8b 40 04             	mov    0x4(%eax),%eax
   121b2:	8b 55 0c             	mov    0xc(%ebp),%edx
   121b5:	8b 12                	mov    (%edx),%edx
   121b7:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   121b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   121bc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   121c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   121c6:	8b 50 04             	mov    0x4(%eax),%edx
   121c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   121cc:	89 10                	mov    %edx,(%eax)
    --list->count;
   121ce:	8b 45 08             	mov    0x8(%ebp),%eax
   121d1:	8b 40 08             	mov    0x8(%eax),%eax
   121d4:	8d 50 ff             	lea    -0x1(%eax),%edx
   121d7:	8b 45 08             	mov    0x8(%ebp),%eax
   121da:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   121dd:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   121e0:	5d                   	pop    %ebp
   121e1:	c3                   	ret

000121e2 <inb>:
void init_log()
{
    mutex_init(&mutex);
    // 对硬件初始化
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x80);
   121e2:	55                   	push   %ebp
   121e3:	89 e5                	mov    %esp,%ebp
   121e5:	83 ec 14             	sub    $0x14,%esp
   121e8:	8b 45 08             	mov    0x8(%ebp),%eax
   121eb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
   121ef:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   121f3:	89 c2                	mov    %eax,%edx
   121f5:	ec                   	in     (%dx),%al
   121f6:	88 45 ff             	mov    %al,-0x1(%ebp)
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
    outb(COM1_PORT + 4, 0x0F);
   121f9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   121fd:	c9                   	leave
   121fe:	c3                   	ret

000121ff <outb>:
    kernel_memset(str_buf, '\0', sizeof(str_buf));
    va_start(args, fmt);

    kernel_vsprintf(str_buf, fmt, args);
    va_end(args);

   121ff:	55                   	push   %ebp
   12200:	89 e5                	mov    %esp,%ebp
   12202:	83 ec 08             	sub    $0x8,%esp
   12205:	8b 55 08             	mov    0x8(%ebp),%edx
   12208:	8b 45 0c             	mov    0xc(%ebp),%eax
   1220b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1220f:	88 45 f8             	mov    %al,-0x8(%ebp)
    mutex_lock(&mutex);
   12212:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12216:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1221a:	ee                   	out    %al,(%dx)
    const char *p = str_buf;
   1221b:	90                   	nop
   1221c:	c9                   	leave
   1221d:	c3                   	ret

0001221e <init_log>:
{
   1221e:	55                   	push   %ebp
   1221f:	89 e5                	mov    %esp,%ebp
   12221:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12224:	83 ec 0c             	sub    $0xc,%esp
   12227:	68 c4 55 01 00       	push   $0x155c4
   1222c:	e8 e8 f3 ff ff       	call   11619 <mutex_init>
   12231:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12234:	83 ec 08             	sub    $0x8,%esp
   12237:	6a 00                	push   $0x0
   12239:	68 f9 03 00 00       	push   $0x3f9
   1223e:	e8 bc ff ff ff       	call   121ff <outb>
   12243:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80);
   12246:	83 ec 08             	sub    $0x8,%esp
   12249:	68 80 00 00 00       	push   $0x80
   1224e:	68 fb 03 00 00       	push   $0x3fb
   12253:	e8 a7 ff ff ff       	call   121ff <outb>
   12258:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   1225b:	83 ec 08             	sub    $0x8,%esp
   1225e:	6a 03                	push   $0x3
   12260:	68 f8 03 00 00       	push   $0x3f8
   12265:	e8 95 ff ff ff       	call   121ff <outb>
   1226a:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   1226d:	83 ec 08             	sub    $0x8,%esp
   12270:	6a 00                	push   $0x0
   12272:	68 f9 03 00 00       	push   $0x3f9
   12277:	e8 83 ff ff ff       	call   121ff <outb>
   1227c:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   1227f:	83 ec 08             	sub    $0x8,%esp
   12282:	6a 03                	push   $0x3
   12284:	68 fb 03 00 00       	push   $0x3fb
   12289:	e8 71 ff ff ff       	call   121ff <outb>
   1228e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0x07);
   12291:	83 ec 08             	sub    $0x8,%esp
   12294:	6a 07                	push   $0x7
   12296:	68 fa 03 00 00       	push   $0x3fa
   1229b:	e8 5f ff ff ff       	call   121ff <outb>
   122a0:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0F);
   122a3:	83 ec 08             	sub    $0x8,%esp
   122a6:	6a 0f                	push   $0xf
   122a8:	68 fc 03 00 00       	push   $0x3fc
   122ad:	e8 4d ff ff ff       	call   121ff <outb>
   122b2:	83 c4 10             	add    $0x10,%esp
}
   122b5:	90                   	nop
   122b6:	c9                   	leave
   122b7:	c3                   	ret

000122b8 <log_prinf>:
{
   122b8:	55                   	push   %ebp
   122b9:	89 e5                	mov    %esp,%ebp
   122bb:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   122c1:	83 ec 04             	sub    $0x4,%esp
   122c4:	68 80 00 00 00       	push   $0x80
   122c9:	6a 00                	push   $0x0
   122cb:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   122d1:	50                   	push   %eax
   122d2:	e8 fd f9 ff ff       	call   11cd4 <kernel_memset>
   122d7:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   122da:	8d 45 0c             	lea    0xc(%ebp),%eax
   122dd:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   122e3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   122e9:	83 ec 04             	sub    $0x4,%esp
   122ec:	50                   	push   %eax
   122ed:	ff 75 08             	push   0x8(%ebp)
   122f0:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   122f6:	50                   	push   %eax
   122f7:	e8 72 fb ff ff       	call   11e6e <kernel_vsprintf>
   122fc:	83 c4 10             	add    $0x10,%esp
    mutex_lock(&mutex);
   122ff:	83 ec 0c             	sub    $0xc,%esp
   12302:	68 c4 55 01 00       	push   $0x155c4
   12307:	e8 3b f3 ff ff       	call   11647 <mutex_lock>
   1230c:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   1230f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12315:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   12318:	eb 3b                	jmp    12355 <log_prinf+0x9d>
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   1231a:	90                   	nop
   1231b:	83 ec 0c             	sub    $0xc,%esp
   1231e:	68 fd 03 00 00       	push   $0x3fd
   12323:	e8 ba fe ff ff       	call   121e2 <inb>
   12328:	83 c4 10             	add    $0x10,%esp
   1232b:	0f b6 c0             	movzbl %al,%eax
   1232e:	83 e0 40             	and    $0x40,%eax
   12331:	85 c0                	test   %eax,%eax
   12333:	74 e6                	je     1231b <log_prinf+0x63>
            ;
        outb(COM1_PORT, *p++);
   12335:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12338:	8d 50 01             	lea    0x1(%eax),%edx
   1233b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1233e:	0f b6 00             	movzbl (%eax),%eax
   12341:	0f b6 c0             	movzbl %al,%eax
   12344:	83 ec 08             	sub    $0x8,%esp
   12347:	50                   	push   %eax
   12348:	68 f8 03 00 00       	push   $0x3f8
   1234d:	e8 ad fe ff ff       	call   121ff <outb>
   12352:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   12355:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12358:	0f b6 00             	movzbl (%eax),%eax
   1235b:	84 c0                	test   %al,%al
   1235d:	75 bb                	jne    1231a <log_prinf+0x62>
    }

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   1235f:	83 ec 08             	sub    $0x8,%esp
   12362:	6a 0d                	push   $0xd
   12364:	68 f8 03 00 00       	push   $0x3f8
   12369:	e8 91 fe ff ff       	call   121ff <outb>
   1236e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12371:	83 ec 08             	sub    $0x8,%esp
   12374:	6a 0a                	push   $0xa
   12376:	68 f8 03 00 00       	push   $0x3f8
   1237b:	e8 7f fe ff ff       	call   121ff <outb>
   12380:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&mutex);
   12383:	83 ec 0c             	sub    $0xc,%esp
   12386:	68 c4 55 01 00       	push   $0x155c4
   1238b:	e8 48 f3 ff ff       	call   116d8 <mutex_unlock>
   12390:	83 c4 10             	add    $0x10,%esp
}
   12393:	90                   	nop
   12394:	c9                   	leave
   12395:	c3                   	ret
