
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001908 memsz 0x00005630 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001595  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000036c  00011598  00011598  00002598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011904  00011904  00002904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d10  00011920  00011920  00002908  2**5
                  ALLOC
  4 .debug_line   00000b30  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 000005d5  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001cdb  00000000  00000000  00003a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000b03  00000000  00000000  000056e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000120  00000000  00000000  000061f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000a44  00000000  00000000  00006310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  00006d54  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000994  00000000  00000000  00006d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102bd l     F .text	000000dd tss_init
00011610 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 cpu.c
000103f5 l     F .text	00000028 lgdt
0001041d l     F .text	0000001a far_jump
00011920 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000105d1 l     F .text	0000001d inb
000105ee l     F .text	0000001f outb
0001060d l     F .text	00000007 cli
00010614 l     F .text	00000007 sti
0001061b l     F .text	00000028 lidt
00010643 l     F .text	00000007 hlt
00012120 l     O .bss	00000400 idt_table
0001064a l     F .text	000000d9 dump_core_regs
00010723 l     F .text	0000003e do_default_handler
00010991 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010d5a l     F .text	0000001f outb
00012520 l     O .bss	00000004 sys_tick
00010d9c l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00010e14 l     F .text	00000017 write_tr
00012540 l     O .bss	0000006c first_task
000125c0 l     O .bss	00001000 init_task_stack
000135c0 l     O .bss	0000006c init_task
00000000 l    df *ABS*	00000000 klib.c
00010f45 l     F .text	00000007 hlt
00011904 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 log.c
00011429 l     F .text	0000001d inb
00011446 l     F .text	0000001f outb
000110be g     F .text	0000004f kernel_memcpy
00010d24 g     F .text	0000000b irq_enable_global
00010895 g     F .text	0000001c do_handler_segment_not_present
0001110d g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
000105c6 g     F .text	0000000b cpu_init
00010e86 g     F .text	000000bf init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00010f4c g     F .text	00000047 kernel_strcpy
00010c07 g     F .text	0000008b irq_enable
000100a7 g       .text	00000000 exception_handler_breakpoint
000107ed g     F .text	0000001c do_handler_overflow
00010921 g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
000108cd g     F .text	0000001c do_handler_general_protection
0001077d g     F .text	0000001c do_handler_divider
0001085d g     F .text	0000001c do_handler_double_fault
00010e48 g     F .text	0000003e init_task_entry
000108e9 g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010d2f g     F .text	0000002b pic_send_eoi
00011465 g     F .text	00000072 init_log
00010761 g     F .text	0000001c do_handler_unknow
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00010975 g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102a8 g       .text	00000000 simple_switch
00010289 g       .text	00000000 exception_handler_time
00013630 g     O .bss	00002000 stack
000100e5 g       .text	00000000 exception_handler_bound_range
00010825 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010905 g     F .text	0000001c do_handler_fpu_error
0001093d g     F .text	0000001c do_handler_machine_check
00010799 g     F .text	0000001c do_handler_Debug
000107b5 g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00010f93 g     F .text	00000070 kernel_strncpy
00010d19 g     F .text	0000000b irq_disable_global
00010e2b g     F .text	0000001d kernel_init
00010000 g       .text	00000000 _start
000112a7 g     F .text	00000146 kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
00010879 g     F .text	0000001c do_handler_invalid_tss
00010bd2 g     F .text	00000035 irq_install
000114d7 g     F .text	000000be log_prinf
000104ba g     F .text	0000006d init_gdt
00010c92 g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00010841 g     F .text	0000001c do_handler_device_unavailable
000105b3 g     F .text	00000013 switch_to_tss
0001114e g     F .text	0000005e kernel_memcmp
00011423 g     F .text	00000006 list_init
0001002b g       .text	00000000 exception_handler_unknow
00010959 g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
000101f0 g       .text	00000000 exception_handler_fpu_error
000103da g     F .text	0000001b task_switch_from_to
0001056e g     F .text	00000045 gdt_alloc_des
00010a24 g     F .text	000001ae irq_init
00011083 g     F .text	0000003b kernel_strlen
00010437 g     F .text	00000083 segment_desc_set
00010809 g     F .text	0000001c do_handler_bound_range
00011003 g     F .text	00000080 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
00010dfc g     F .text	00000018 init_time
00010088 g       .text	00000000 exception_handler_NMI
00010069 g       .text	00000000 exception_handler_Debug
000113ed g     F .text	00000036 pannic
000108b1 g     F .text	0000001c do_handler_stack_segment_fault
000107d1 g     F .text	0000001c do_handler_breakpoint
0001039a g     F .text	00000040 task_init
000111ac g     F .text	00000024 kernel_sprintf
000111d0 g     F .text	000000d7 kernel_itoa
00010527 g     F .text	00000047 gate_desc_set
00010d79 g     F .text	00000023 do_handler_time



Disassembly of section .text:

00010000 <_start>:
    .text
    .extern kernel_init
    .global _start
    .extern init_main
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov  %esp,%ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov  0x8(%ebp),%eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 1f 0e 00 00       	call   10e2b <kernel_init>

    jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    mov $(stack+KERNEL_STACK_SIZE), %esp
   10021:	bc 30 56 01 00       	mov    $0x15630,%esp
    jmp init_main
   10026:	e9 5b 0e 00 00       	jmp    10e86 <init_main>

0001002b <exception_handler_unknow>:

    add $(2*4), %esp
    iret
.endm

exception_handler  unknow,-1,0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 25 07 00 00       	call   10761 <do_handler_unknow>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret

0001004a <exception_handler_divider>:
exception_handler  divider,0,0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 22 07 00 00       	call   1077d <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret

00010069 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 1f 07 00 00       	call   10799 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret

00010088 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 1c 07 00 00       	call   107b5 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 19 07 00 00       	call   107d1 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret

000100c6 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 16 07 00 00       	call   107ed <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret

000100e5 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 13 07 00 00       	call   10809 <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 10 07 00 00       	call   10825 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 0d 07 00 00       	call   10841 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret

00010142 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 0c 07 00 00       	call   1085d <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 0b 07 00 00       	call   10879 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 0a 07 00 00       	call   10895 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 09 07 00 00       	call   108b1 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret

000101b6 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 08 07 00 00       	call   108cd <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret

000101d3 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 07 07 00 00       	call   108e9 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 04 07 00 00       	call   10905 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 03 07 00 00       	call   10921 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret

0001022c <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 00 07 00 00       	call   1093d <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 fd 06 00 00       	call   10959 <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 fa 06 00 00       	call   10975 <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret

00010289 <exception_handler_time>:

exception_handler time, 0x20, 0
   10289:	6a 00                	push   $0x0
   1028b:	6a 20                	push   $0x20
   1028d:	60                   	pusha
   1028e:	1e                   	push   %ds
   1028f:	06                   	push   %es
   10290:	0f a0                	push   %fs
   10292:	0f a8                	push   %gs
   10294:	54                   	push   %esp
   10295:	e8 df 0a 00 00       	call   10d79 <do_handler_time>
   1029a:	83 c4 04             	add    $0x4,%esp
   1029d:	0f a9                	pop    %gs
   1029f:	0f a1                	pop    %fs
   102a1:	07                   	pop    %es
   102a2:	1f                   	pop    %ds
   102a3:	61                   	popa
   102a4:	83 c4 08             	add    $0x8,%esp
   102a7:	cf                   	iret

000102a8 <simple_switch>:
    //simple_switch(&from,&to)
     .text
     .global simple_switch
simple_switch:
    //取出from
    mov 4(%esp), %eax
   102a8:	8b 44 24 04          	mov    0x4(%esp),%eax
    //取出to
    mov 8(%esp), %edx
   102ac:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102b0:	55                   	push   %ebp
    push %ebx
   102b1:	53                   	push   %ebx
    push %esi
   102b2:	56                   	push   %esi
    push %edi
   102b3:	57                   	push   %edi
    mov %esp, (%eax)
   102b4:	89 20                	mov    %esp,(%eax)

    mov %edx, %esp
   102b6:	89 d4                	mov    %edx,%esp
    pop %edi
   102b8:	5f                   	pop    %edi
    pop %esi
   102b9:	5e                   	pop    %esi
    pop %ebx
   102ba:	5b                   	pop    %ebx
    pop %ebp
   102bb:	5d                   	pop    %ebp

    ret
   102bc:	c3                   	ret

000102bd <tss_init>:
#include "cpu/cpu.h"
#include "tools/log.h"

// 任务切换后设置另外一个程序的tss
static int tss_init(task_t *task, uint32_t entry, uint32_t esp)
{
   102bd:	55                   	push   %ebp
   102be:	89 e5                	mov    %esp,%ebp
   102c0:	83 ec 18             	sub    $0x18,%esp
    // 找到一个空闲的gdt描述副
    int tss_sel = gdt_alloc_des();
   102c3:	e8 a6 02 00 00       	call   1056e <gdt_alloc_des>
   102c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   102cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102cf:	79 1a                	jns    102eb <tss_init+0x2e>
    {
        // gdt表已经满了无法添加tss描述副到gdt中
        log_prinf("alloc tss failed");
   102d1:	83 ec 0c             	sub    $0xc,%esp
   102d4:	68 98 15 01 00       	push   $0x11598
   102d9:	e8 f9 11 00 00       	call   114d7 <log_prinf>
   102de:	83 c4 10             	add    $0x10,%esp
        return -1;
   102e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102e6:	e9 ad 00 00 00       	jmp    10398 <tss_init+0xdb>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(task_t),
   102eb:	8b 45 08             	mov    0x8(%ebp),%eax
   102ee:	68 89 00 00 00       	push   $0x89
   102f3:	6a 6c                	push   $0x6c
   102f5:	50                   	push   %eax
   102f6:	ff 75 f4             	push   -0xc(%ebp)
   102f9:	e8 39 01 00 00       	call   10437 <segment_desc_set>
   102fe:	83 c4 10             	add    $0x10,%esp
                     SEG_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10301:	8b 45 08             	mov    0x8(%ebp),%eax
   10304:	83 ec 04             	sub    $0x4,%esp
   10307:	6a 68                	push   $0x68
   10309:	6a 00                	push   $0x0
   1030b:	50                   	push   %eax
   1030c:	e8 fc 0d 00 00       	call   1110d <kernel_memset>
   10311:	83 c4 10             	add    $0x10,%esp

    task->tss.eip = entry;
   10314:	8b 45 08             	mov    0x8(%ebp),%eax
   10317:	8b 55 0c             	mov    0xc(%ebp),%edx
   1031a:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   1031d:	8b 45 08             	mov    0x8(%ebp),%eax
   10320:	8b 55 10             	mov    0x10(%ebp),%edx
   10323:	89 50 04             	mov    %edx,0x4(%eax)
   10326:	8b 45 08             	mov    0x8(%ebp),%eax
   10329:	8b 50 04             	mov    0x4(%eax),%edx
   1032c:	8b 45 08             	mov    0x8(%ebp),%eax
   1032f:	89 50 38             	mov    %edx,0x38(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	8b 50 08             	mov    0x8(%eax),%edx
   10342:	8b 45 08             	mov    0x8(%ebp),%eax
   10345:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10348:	8b 45 08             	mov    0x8(%ebp),%eax
   1034b:	c7 40 5c 10 00 00 00 	movl   $0x10,0x5c(%eax)
   10352:	8b 45 08             	mov    0x8(%ebp),%eax
   10355:	8b 50 5c             	mov    0x5c(%eax),%edx
   10358:	8b 45 08             	mov    0x8(%ebp),%eax
   1035b:	89 50 58             	mov    %edx,0x58(%eax)
   1035e:	8b 45 08             	mov    0x8(%ebp),%eax
   10361:	8b 50 58             	mov    0x58(%eax),%edx
   10364:	8b 45 08             	mov    0x8(%ebp),%eax
   10367:	89 50 54             	mov    %edx,0x54(%eax)
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	8b 50 54             	mov    0x54(%eax),%edx
   10370:	8b 45 08             	mov    0x8(%ebp),%eax
   10373:	89 50 48             	mov    %edx,0x48(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   10376:	8b 45 08             	mov    0x8(%ebp),%eax
   10379:	c7 40 4c 08 00 00 00 	movl   $0x8,0x4c(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFALUT;
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)
    task->tss_sel = tss_sel; // 将tss选择子保存到tss_sel中
   1038a:	8b 45 08             	mov    0x8(%ebp),%eax
   1038d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10390:	89 50 68             	mov    %edx,0x68(%eax)
    return 0;
   10393:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10398:	c9                   	leave
   10399:	c3                   	ret

0001039a <task_init>:

int task_init(task_t *task, uint32_t entry, uint32_t esp)
{
   1039a:	55                   	push   %ebp
   1039b:	89 e5                	mov    %esp,%ebp
   1039d:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t *)0);
   103a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103a4:	75 19                	jne    103bf <task_init+0x25>
   103a6:	68 a9 15 01 00       	push   $0x115a9
   103ab:	68 10 16 01 00       	push   $0x11610
   103b0:	6a 24                	push   $0x24
   103b2:	68 c0 15 01 00       	push   $0x115c0
   103b7:	e8 31 10 00 00       	call   113ed <pannic>
   103bc:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   103bf:	83 ec 04             	sub    $0x4,%esp
   103c2:	ff 75 10             	push   0x10(%ebp)
   103c5:	ff 75 0c             	push   0xc(%ebp)
   103c8:	ff 75 08             	push   0x8(%ebp)
   103cb:	e8 ed fe ff ff       	call   102bd <tss_init>
   103d0:	83 c4 10             	add    $0x10,%esp
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     task->stack = pesp;
    // }
    return 0;
   103d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103d8:	c9                   	leave
   103d9:	c3                   	ret

000103da <task_switch_from_to>:

void simple_switch(uint32_t **from, uint32_t *to);

void task_switch_from_to(task_t *from, task_t *to)
{
   103da:	55                   	push   %ebp
   103db:	89 e5                	mov    %esp,%ebp
   103dd:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   103e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   103e3:	8b 40 68             	mov    0x68(%eax),%eax
   103e6:	83 ec 0c             	sub    $0xc,%esp
   103e9:	50                   	push   %eax
   103ea:	e8 c4 01 00 00       	call   105b3 <switch_to_tss>
   103ef:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   103f2:	90                   	nop
   103f3:	c9                   	leave
   103f4:	c3                   	ret

000103f5 <lgdt>:
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
}

// 从gdt表中找到一个空闲的项设置给tss
int gdt_alloc_des(void)
{
   103f5:	55                   	push   %ebp
   103f6:	89 e5                	mov    %esp,%ebp
   103f8:	83 ec 10             	sub    $0x10,%esp
    {
        segment_desc_t *desc = gdt_table + i;
        if (desc->attr == 0)
        {
            return i * sizeof(segment_desc_t);
        }
   103fb:	8b 45 08             	mov    0x8(%ebp),%eax
   103fe:	c1 e8 10             	shr    $0x10,%eax
   10401:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    }
   10405:	8b 45 08             	mov    0x8(%ebp),%eax
   10408:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return -1;
   1040c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1040f:	83 e8 01             	sub    $0x1,%eax
   10412:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   10416:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

   1041a:	90                   	nop
   1041b:	c9                   	leave
   1041c:	c3                   	ret

0001041d <far_jump>:
   1041d:	55                   	push   %ebp
   1041e:	89 e5                	mov    %esp,%ebp
   10420:	83 ec 10             	sub    $0x10,%esp
   10423:	8b 45 0c             	mov    0xc(%ebp),%eax
   10426:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10429:	8b 45 08             	mov    0x8(%ebp),%eax
   1042c:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1042f:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10432:	ff 28                	ljmp   *(%eax)
   10434:	90                   	nop
   10435:	c9                   	leave
   10436:	c3                   	ret

00010437 <segment_desc_set>:
{
   10437:	55                   	push   %ebp
   10438:	89 e5                	mov    %esp,%ebp
   1043a:	83 ec 14             	sub    $0x14,%esp
   1043d:	8b 45 14             	mov    0x14(%ebp),%eax
   10440:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + selector / sizeof(segment_desc_t);
   10444:	8b 45 08             	mov    0x8(%ebp),%eax
   10447:	83 e0 f8             	and    $0xfffffff8,%eax
   1044a:	05 20 19 01 00       	add    $0x11920,%eax
   1044f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (limit > 0xFFFFF)
   10452:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10459:	76 0f                	jbe    1046a <segment_desc_set+0x33>
        attr |= SEG_G;
   1045b:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10461:	8b 45 10             	mov    0x10(%ebp),%eax
   10464:	c1 e8 0c             	shr    $0xc,%eax
   10467:	89 45 10             	mov    %eax,0x10(%ebp)
    desc->limit15_0 = limit & 0xFFFF;
   1046a:	8b 45 10             	mov    0x10(%ebp),%eax
   1046d:	89 c2                	mov    %eax,%edx
   1046f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10472:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   10475:	8b 45 0c             	mov    0xc(%ebp),%eax
   10478:	89 c2                	mov    %eax,%edx
   1047a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1047d:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10481:	8b 45 0c             	mov    0xc(%ebp),%eax
   10484:	c1 e8 10             	shr    $0x10,%eax
   10487:	89 c2                	mov    %eax,%edx
   10489:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1048c:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   1048f:	8b 45 10             	mov    0x10(%ebp),%eax
   10492:	c1 e8 10             	shr    $0x10,%eax
   10495:	c1 e0 08             	shl    $0x8,%eax
   10498:	66 25 00 0f          	and    $0xf00,%ax
   1049c:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   104a0:	89 c2                	mov    %eax,%edx
   104a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104a5:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   104a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   104ac:	c1 e8 18             	shr    $0x18,%eax
   104af:	89 c2                	mov    %eax,%edx
   104b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104b4:	88 50 07             	mov    %dl,0x7(%eax)
}
   104b7:	90                   	nop
   104b8:	c9                   	leave
   104b9:	c3                   	ret

000104ba <init_gdt>:
{
   104ba:	55                   	push   %ebp
   104bb:	89 e5                	mov    %esp,%ebp
   104bd:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   104c0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   104c7:	eb 19                	jmp    104e2 <init_gdt+0x28>
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0);
   104c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104cc:	c1 e0 03             	shl    $0x3,%eax
   104cf:	6a 00                	push   $0x0
   104d1:	6a 00                	push   $0x0
   104d3:	6a 00                	push   $0x0
   104d5:	50                   	push   %eax
   104d6:	e8 5c ff ff ff       	call   10437 <segment_desc_set>
   104db:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   104de:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104e2:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   104e9:	7e de                	jle    104c9 <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
   104eb:	68 92 40 00 00       	push   $0x4092
   104f0:	6a ff                	push   $0xffffffff
   104f2:	6a 00                	push   $0x0
   104f4:	6a 10                	push   $0x10
   104f6:	e8 3c ff ff ff       	call   10437 <segment_desc_set>
   104fb:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF, SEG_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
   104fe:	68 9a 40 00 00       	push   $0x409a
   10503:	6a ff                	push   $0xffffffff
   10505:	6a 00                	push   $0x0
   10507:	6a 08                	push   $0x8
   10509:	e8 29 ff ff ff       	call   10437 <segment_desc_set>
   1050e:	83 c4 10             	add    $0x10,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10511:	b8 20 19 01 00       	mov    $0x11920,%eax
   10516:	68 00 08 00 00       	push   $0x800
   1051b:	50                   	push   %eax
   1051c:	e8 d4 fe ff ff       	call   103f5 <lgdt>
   10521:	83 c4 08             	add    $0x8,%esp
}
   10524:	90                   	nop
   10525:	c9                   	leave
   10526:	c3                   	ret

00010527 <gate_desc_set>:
{
   10527:	55                   	push   %ebp
   10528:	89 e5                	mov    %esp,%ebp
   1052a:	83 ec 08             	sub    $0x8,%esp
   1052d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10530:	8b 45 14             	mov    0x14(%ebp),%eax
   10533:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10537:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   1053b:	8b 45 10             	mov    0x10(%ebp),%eax
   1053e:	89 c2                	mov    %eax,%edx
   10540:	8b 45 08             	mov    0x8(%ebp),%eax
   10543:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10546:	8b 45 08             	mov    0x8(%ebp),%eax
   10549:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1054d:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10551:	8b 45 08             	mov    0x8(%ebp),%eax
   10554:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10558:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   1055c:	8b 45 10             	mov    0x10(%ebp),%eax
   1055f:	c1 e8 10             	shr    $0x10,%eax
   10562:	89 c2                	mov    %eax,%edx
   10564:	8b 45 08             	mov    0x8(%ebp),%eax
   10567:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   1056b:	90                   	nop
   1056c:	c9                   	leave
   1056d:	c3                   	ret

0001056e <gdt_alloc_des>:
{
   1056e:	55                   	push   %ebp
   1056f:	89 e5                	mov    %esp,%ebp
   10571:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10574:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1057b:	eb 26                	jmp    105a3 <gdt_alloc_des+0x35>
        segment_desc_t *desc = gdt_table + i;
   1057d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10580:	c1 e0 03             	shl    $0x3,%eax
   10583:	05 20 19 01 00       	add    $0x11920,%eax
   10588:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->attr == 0)
   1058b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1058e:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10592:	66 85 c0             	test   %ax,%ax
   10595:	75 08                	jne    1059f <gdt_alloc_des+0x31>
            return i * sizeof(segment_desc_t);
   10597:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1059a:	c1 e0 03             	shl    $0x3,%eax
   1059d:	eb 12                	jmp    105b1 <gdt_alloc_des+0x43>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1059f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   105a3:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   105aa:	7e d1                	jle    1057d <gdt_alloc_des+0xf>
    return -1;
   105ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   105b1:	c9                   	leave
   105b2:	c3                   	ret

000105b3 <switch_to_tss>:
{
   105b3:	55                   	push   %ebp
   105b4:	89 e5                	mov    %esp,%ebp
    far_jump(tss_sel, 0);
   105b6:	6a 00                	push   $0x0
   105b8:	ff 75 08             	push   0x8(%ebp)
   105bb:	e8 5d fe ff ff       	call   1041d <far_jump>
   105c0:	83 c4 08             	add    $0x8,%esp
}
   105c3:	90                   	nop
   105c4:	c9                   	leave
   105c5:	c3                   	ret

000105c6 <cpu_init>:
{
   105c6:	55                   	push   %ebp
   105c7:	89 e5                	mov    %esp,%ebp
    init_gdt();
   105c9:	e8 ec fe ff ff       	call   104ba <init_gdt>
   105ce:	90                   	nop
   105cf:	5d                   	pop    %ebp
   105d0:	c3                   	ret

000105d1 <inb>:
static void dump_core_regs(exception_frame_t *frame)
{
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
              frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);

   105d1:	55                   	push   %ebp
   105d2:	89 e5                	mov    %esp,%ebp
   105d4:	83 ec 14             	sub    $0x14,%esp
   105d7:	8b 45 08             	mov    0x8(%ebp),%eax
   105da:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    log_prinf("EAX: 0x%x\n"
              "EBX: 0x%x\n"
   105de:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   105e2:	89 c2                	mov    %eax,%edx
   105e4:	ec                   	in     (%dx),%al
   105e5:	88 45 ff             	mov    %al,-0x1(%ebp)
              "ECX: 0x%x\n"
              "EDX: 0x%x\n"
              "EDI: 0x%x\n"
   105e8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
              "ESI: 0x%x\n"
   105ec:	c9                   	leave
   105ed:	c3                   	ret

000105ee <outb>:
    // 发生异常的地址
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
}

static void do_default_handler(exception_frame_t *frame, const char *message)
{
   105ee:	55                   	push   %ebp
   105ef:	89 e5                	mov    %esp,%ebp
   105f1:	83 ec 08             	sub    $0x8,%esp
   105f4:	8b 55 08             	mov    0x8(%ebp),%edx
   105f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   105fa:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   105fe:	88 45 f8             	mov    %al,-0x8(%ebp)
    log_prinf("----------------------------");
   10601:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10605:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10609:	ee                   	out    %al,(%dx)
    log_prinf("IRQ/Exception %s", message);
   1060a:	90                   	nop
   1060b:	c9                   	leave
   1060c:	c3                   	ret

0001060d <cli>:
    dump_core_regs(frame);
    for (;;)
    {
        // 如果发生异常让cpu暂停运行
   1060d:	55                   	push   %ebp
   1060e:	89 e5                	mov    %esp,%ebp
        hlt();
   10610:	fa                   	cli
    }
   10611:	90                   	nop
   10612:	5d                   	pop    %ebp
   10613:	c3                   	ret

00010614 <sti>:
}
// 中断异常处理函数
void do_handler_unknow(exception_frame_t *frame)
{
   10614:	55                   	push   %ebp
   10615:	89 e5                	mov    %esp,%ebp
    do_default_handler(frame, "unknow exception!!!");
   10617:	fb                   	sti
}
   10618:	90                   	nop
   10619:	5d                   	pop    %ebp
   1061a:	c3                   	ret

0001061b <lidt>:
    do_default_handler(frame, "NMI Interrupt.");
}

void do_handler_breakpoint(exception_frame_t *frame)
{
    do_default_handler(frame, "Breakpoint.");
   1061b:	55                   	push   %ebp
   1061c:	89 e5                	mov    %esp,%ebp
   1061e:	83 ec 10             	sub    $0x10,%esp
void do_handler_overflow(exception_frame_t *frame)
{
    do_default_handler(frame, "Overflow.");
}

void do_handler_bound_range(exception_frame_t *frame)
   10621:	8b 45 08             	mov    0x8(%ebp),%eax
   10624:	c1 e8 10             	shr    $0x10,%eax
   10627:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
{
   1062b:	8b 45 08             	mov    0x8(%ebp),%eax
   1062e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    do_default_handler(frame, "BOUND Range Exceeded.");
   10632:	8b 45 0c             	mov    0xc(%ebp),%eax
   10635:	83 e8 01             	sub    $0x1,%eax
   10638:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
}
   1063c:	0f 01 5d fa          	lidtl  -0x6(%ebp)

   10640:	90                   	nop
   10641:	c9                   	leave
   10642:	c3                   	ret

00010643 <hlt>:
    do_default_handler(frame, "Invalid TSS");
}

void do_handler_segment_not_present(exception_frame_t *frame)
{
    do_default_handler(frame, "Segment Not Present.");
   10643:	55                   	push   %ebp
   10644:	89 e5                	mov    %esp,%ebp
}
   10646:	f4                   	hlt

   10647:	90                   	nop
   10648:	5d                   	pop    %ebp
   10649:	c3                   	ret

0001064a <dump_core_regs>:
{
   1064a:	55                   	push   %ebp
   1064b:	89 e5                	mov    %esp,%ebp
   1064d:	57                   	push   %edi
   1064e:	56                   	push   %esi
   1064f:	53                   	push   %ebx
   10650:	83 ec 1c             	sub    $0x1c,%esp
    log_prinf("IRQ: %d,errorCode: %d", frame->num, frame->error_code);
   10653:	8b 45 08             	mov    0x8(%ebp),%eax
   10656:	8b 50 34             	mov    0x34(%eax),%edx
   10659:	8b 45 08             	mov    0x8(%ebp),%eax
   1065c:	8b 40 30             	mov    0x30(%eax),%eax
   1065f:	83 ec 04             	sub    $0x4,%esp
   10662:	52                   	push   %edx
   10663:	50                   	push   %eax
   10664:	68 1c 16 01 00       	push   $0x1161c
   10669:	e8 69 0e 00 00       	call   114d7 <log_prinf>
   1066e:	83 c4 10             	add    $0x10,%esp
    log_prinf("CS:%d\nDS:%d\n ES:%d\nSS:%d\nFS:%d\nGS:%d\n",
   10671:	8b 45 08             	mov    0x8(%ebp),%eax
   10674:	8b 38                	mov    (%eax),%edi
   10676:	8b 45 08             	mov    0x8(%ebp),%eax
   10679:	8b 70 04             	mov    0x4(%eax),%esi
   1067c:	8b 45 08             	mov    0x8(%ebp),%eax
   1067f:	8b 58 0c             	mov    0xc(%eax),%ebx
   10682:	8b 45 08             	mov    0x8(%ebp),%eax
   10685:	8b 48 08             	mov    0x8(%eax),%ecx
   10688:	8b 45 08             	mov    0x8(%ebp),%eax
   1068b:	8b 50 0c             	mov    0xc(%eax),%edx
   1068e:	8b 45 08             	mov    0x8(%ebp),%eax
   10691:	8b 40 3c             	mov    0x3c(%eax),%eax
   10694:	83 ec 04             	sub    $0x4,%esp
   10697:	57                   	push   %edi
   10698:	56                   	push   %esi
   10699:	53                   	push   %ebx
   1069a:	51                   	push   %ecx
   1069b:	52                   	push   %edx
   1069c:	50                   	push   %eax
   1069d:	68 34 16 01 00       	push   $0x11634
   106a2:	e8 30 0e 00 00       	call   114d7 <log_prinf>
   106a7:	83 c4 20             	add    $0x20,%esp
    log_prinf("EAX: 0x%x\n"
   106aa:	8b 45 08             	mov    0x8(%ebp),%eax
   106ad:	8b 48 1c             	mov    0x1c(%eax),%ecx
   106b0:	8b 45 08             	mov    0x8(%ebp),%eax
   106b3:	8b 40 18             	mov    0x18(%eax),%eax
   106b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   106b9:	8b 45 08             	mov    0x8(%ebp),%eax
   106bc:	8b 58 14             	mov    0x14(%eax),%ebx
   106bf:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   106c2:	8b 45 08             	mov    0x8(%ebp),%eax
   106c5:	8b 78 10             	mov    0x10(%eax),%edi
   106c8:	8b 45 08             	mov    0x8(%ebp),%eax
   106cb:	8b 70 24             	mov    0x24(%eax),%esi
   106ce:	8b 45 08             	mov    0x8(%ebp),%eax
   106d1:	8b 58 28             	mov    0x28(%eax),%ebx
   106d4:	8b 45 08             	mov    0x8(%ebp),%eax
   106d7:	8b 50 20             	mov    0x20(%eax),%edx
   106da:	8b 45 08             	mov    0x8(%ebp),%eax
   106dd:	8b 40 2c             	mov    0x2c(%eax),%eax
   106e0:	83 ec 0c             	sub    $0xc,%esp
   106e3:	51                   	push   %ecx
   106e4:	ff 75 e4             	push   -0x1c(%ebp)
   106e7:	ff 75 e0             	push   -0x20(%ebp)
   106ea:	57                   	push   %edi
   106eb:	56                   	push   %esi
   106ec:	53                   	push   %ebx
   106ed:	52                   	push   %edx
   106ee:	50                   	push   %eax
   106ef:	68 5c 16 01 00       	push   $0x1165c
   106f4:	e8 de 0d 00 00       	call   114d7 <log_prinf>
   106f9:	83 c4 30             	add    $0x30,%esp
    log_prinf("EIP: 0x%x\nEFLPAGS: 0x%x\n", frame->eip, frame->eflags);
   106fc:	8b 45 08             	mov    0x8(%ebp),%eax
   106ff:	8b 50 40             	mov    0x40(%eax),%edx
   10702:	8b 45 08             	mov    0x8(%ebp),%eax
   10705:	8b 40 38             	mov    0x38(%eax),%eax
   10708:	83 ec 04             	sub    $0x4,%esp
   1070b:	52                   	push   %edx
   1070c:	50                   	push   %eax
   1070d:	68 ad 16 01 00       	push   $0x116ad
   10712:	e8 c0 0d 00 00       	call   114d7 <log_prinf>
   10717:	83 c4 10             	add    $0x10,%esp
}
   1071a:	90                   	nop
   1071b:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1071e:	5b                   	pop    %ebx
   1071f:	5e                   	pop    %esi
   10720:	5f                   	pop    %edi
   10721:	5d                   	pop    %ebp
   10722:	c3                   	ret

00010723 <do_default_handler>:
{
   10723:	55                   	push   %ebp
   10724:	89 e5                	mov    %esp,%ebp
   10726:	83 ec 08             	sub    $0x8,%esp
    log_prinf("----------------------------");
   10729:	83 ec 0c             	sub    $0xc,%esp
   1072c:	68 c6 16 01 00       	push   $0x116c6
   10731:	e8 a1 0d 00 00       	call   114d7 <log_prinf>
   10736:	83 c4 10             	add    $0x10,%esp
    log_prinf("IRQ/Exception %s", message);
   10739:	83 ec 08             	sub    $0x8,%esp
   1073c:	ff 75 0c             	push   0xc(%ebp)
   1073f:	68 e3 16 01 00       	push   $0x116e3
   10744:	e8 8e 0d 00 00       	call   114d7 <log_prinf>
   10749:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   1074c:	83 ec 0c             	sub    $0xc,%esp
   1074f:	ff 75 08             	push   0x8(%ebp)
   10752:	e8 f3 fe ff ff       	call   1064a <dump_core_regs>
   10757:	83 c4 10             	add    $0x10,%esp
        hlt();
   1075a:	e8 e4 fe ff ff       	call   10643 <hlt>
   1075f:	eb f9                	jmp    1075a <do_default_handler+0x37>

00010761 <do_handler_unknow>:
{
   10761:	55                   	push   %ebp
   10762:	89 e5                	mov    %esp,%ebp
   10764:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknow exception!!!");
   10767:	83 ec 08             	sub    $0x8,%esp
   1076a:	68 f4 16 01 00       	push   $0x116f4
   1076f:	ff 75 08             	push   0x8(%ebp)
   10772:	e8 ac ff ff ff       	call   10723 <do_default_handler>
   10777:	83 c4 10             	add    $0x10,%esp
}
   1077a:	90                   	nop
   1077b:	c9                   	leave
   1077c:	c3                   	ret

0001077d <do_handler_divider>:
{
   1077d:	55                   	push   %ebp
   1077e:	89 e5                	mov    %esp,%ebp
   10780:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception!!!");
   10783:	83 ec 08             	sub    $0x8,%esp
   10786:	68 08 17 01 00       	push   $0x11708
   1078b:	ff 75 08             	push   0x8(%ebp)
   1078e:	e8 90 ff ff ff       	call   10723 <do_default_handler>
   10793:	83 c4 10             	add    $0x10,%esp
}
   10796:	90                   	nop
   10797:	c9                   	leave
   10798:	c3                   	ret

00010799 <do_handler_Debug>:
{
   10799:	55                   	push   %ebp
   1079a:	89 e5                	mov    %esp,%ebp
   1079c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   1079f:	83 ec 08             	sub    $0x8,%esp
   107a2:	68 1d 17 01 00       	push   $0x1171d
   107a7:	ff 75 08             	push   0x8(%ebp)
   107aa:	e8 74 ff ff ff       	call   10723 <do_default_handler>
   107af:	83 c4 10             	add    $0x10,%esp
}
   107b2:	90                   	nop
   107b3:	c9                   	leave
   107b4:	c3                   	ret

000107b5 <do_handler_NMI>:
{
   107b5:	55                   	push   %ebp
   107b6:	89 e5                	mov    %esp,%ebp
   107b8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   107bb:	83 ec 08             	sub    $0x8,%esp
   107be:	68 2d 17 01 00       	push   $0x1172d
   107c3:	ff 75 08             	push   0x8(%ebp)
   107c6:	e8 58 ff ff ff       	call   10723 <do_default_handler>
   107cb:	83 c4 10             	add    $0x10,%esp
}
   107ce:	90                   	nop
   107cf:	c9                   	leave
   107d0:	c3                   	ret

000107d1 <do_handler_breakpoint>:
{
   107d1:	55                   	push   %ebp
   107d2:	89 e5                	mov    %esp,%ebp
   107d4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   107d7:	83 ec 08             	sub    $0x8,%esp
   107da:	68 3c 17 01 00       	push   $0x1173c
   107df:	ff 75 08             	push   0x8(%ebp)
   107e2:	e8 3c ff ff ff       	call   10723 <do_default_handler>
   107e7:	83 c4 10             	add    $0x10,%esp
}
   107ea:	90                   	nop
   107eb:	c9                   	leave
   107ec:	c3                   	ret

000107ed <do_handler_overflow>:
{
   107ed:	55                   	push   %ebp
   107ee:	89 e5                	mov    %esp,%ebp
   107f0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   107f3:	83 ec 08             	sub    $0x8,%esp
   107f6:	68 48 17 01 00       	push   $0x11748
   107fb:	ff 75 08             	push   0x8(%ebp)
   107fe:	e8 20 ff ff ff       	call   10723 <do_default_handler>
   10803:	83 c4 10             	add    $0x10,%esp
}
   10806:	90                   	nop
   10807:	c9                   	leave
   10808:	c3                   	ret

00010809 <do_handler_bound_range>:
{
   10809:	55                   	push   %ebp
   1080a:	89 e5                	mov    %esp,%ebp
   1080c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   1080f:	83 ec 08             	sub    $0x8,%esp
   10812:	68 52 17 01 00       	push   $0x11752
   10817:	ff 75 08             	push   0x8(%ebp)
   1081a:	e8 04 ff ff ff       	call   10723 <do_default_handler>
   1081f:	83 c4 10             	add    $0x10,%esp
}
   10822:	90                   	nop
   10823:	c9                   	leave
   10824:	c3                   	ret

00010825 <do_handler_invalid_opcode>:
{
   10825:	55                   	push   %ebp
   10826:	89 e5                	mov    %esp,%ebp
   10828:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   1082b:	83 ec 08             	sub    $0x8,%esp
   1082e:	68 68 17 01 00       	push   $0x11768
   10833:	ff 75 08             	push   0x8(%ebp)
   10836:	e8 e8 fe ff ff       	call   10723 <do_default_handler>
   1083b:	83 c4 10             	add    $0x10,%esp
}
   1083e:	90                   	nop
   1083f:	c9                   	leave
   10840:	c3                   	ret

00010841 <do_handler_device_unavailable>:
{
   10841:	55                   	push   %ebp
   10842:	89 e5                	mov    %esp,%ebp
   10844:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10847:	83 ec 08             	sub    $0x8,%esp
   1084a:	68 78 17 01 00       	push   $0x11778
   1084f:	ff 75 08             	push   0x8(%ebp)
   10852:	e8 cc fe ff ff       	call   10723 <do_default_handler>
   10857:	83 c4 10             	add    $0x10,%esp
}
   1085a:	90                   	nop
   1085b:	c9                   	leave
   1085c:	c3                   	ret

0001085d <do_handler_double_fault>:
{
   1085d:	55                   	push   %ebp
   1085e:	89 e5                	mov    %esp,%ebp
   10860:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   10863:	83 ec 08             	sub    $0x8,%esp
   10866:	68 8e 17 01 00       	push   $0x1178e
   1086b:	ff 75 08             	push   0x8(%ebp)
   1086e:	e8 b0 fe ff ff       	call   10723 <do_default_handler>
   10873:	83 c4 10             	add    $0x10,%esp
}
   10876:	90                   	nop
   10877:	c9                   	leave
   10878:	c3                   	ret

00010879 <do_handler_invalid_tss>:
{
   10879:	55                   	push   %ebp
   1087a:	89 e5                	mov    %esp,%ebp
   1087c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   1087f:	83 ec 08             	sub    $0x8,%esp
   10882:	68 9c 17 01 00       	push   $0x1179c
   10887:	ff 75 08             	push   0x8(%ebp)
   1088a:	e8 94 fe ff ff       	call   10723 <do_default_handler>
   1088f:	83 c4 10             	add    $0x10,%esp
}
   10892:	90                   	nop
   10893:	c9                   	leave
   10894:	c3                   	ret

00010895 <do_handler_segment_not_present>:
{
   10895:	55                   	push   %ebp
   10896:	89 e5                	mov    %esp,%ebp
   10898:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   1089b:	83 ec 08             	sub    $0x8,%esp
   1089e:	68 a8 17 01 00       	push   $0x117a8
   108a3:	ff 75 08             	push   0x8(%ebp)
   108a6:	e8 78 fe ff ff       	call   10723 <do_default_handler>
   108ab:	83 c4 10             	add    $0x10,%esp
}
   108ae:	90                   	nop
   108af:	c9                   	leave
   108b0:	c3                   	ret

000108b1 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   108b1:	55                   	push   %ebp
   108b2:	89 e5                	mov    %esp,%ebp
   108b4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   108b7:	83 ec 08             	sub    $0x8,%esp
   108ba:	68 bd 17 01 00       	push   $0x117bd
   108bf:	ff 75 08             	push   0x8(%ebp)
   108c2:	e8 5c fe ff ff       	call   10723 <do_default_handler>
   108c7:	83 c4 10             	add    $0x10,%esp
}
   108ca:	90                   	nop
   108cb:	c9                   	leave
   108cc:	c3                   	ret

000108cd <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   108cd:	55                   	push   %ebp
   108ce:	89 e5                	mov    %esp,%ebp
   108d0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General Protection.");
   108d3:	83 ec 08             	sub    $0x8,%esp
   108d6:	68 d2 17 01 00       	push   $0x117d2
   108db:	ff 75 08             	push   0x8(%ebp)
   108de:	e8 40 fe ff ff       	call   10723 <do_default_handler>
   108e3:	83 c4 10             	add    $0x10,%esp
}
   108e6:	90                   	nop
   108e7:	c9                   	leave
   108e8:	c3                   	ret

000108e9 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t *frame)
{
   108e9:	55                   	push   %ebp
   108ea:	89 e5                	mov    %esp,%ebp
   108ec:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page Fault.");
   108ef:	83 ec 08             	sub    $0x8,%esp
   108f2:	68 e6 17 01 00       	push   $0x117e6
   108f7:	ff 75 08             	push   0x8(%ebp)
   108fa:	e8 24 fe ff ff       	call   10723 <do_default_handler>
   108ff:	83 c4 10             	add    $0x10,%esp
}
   10902:	90                   	nop
   10903:	c9                   	leave
   10904:	c3                   	ret

00010905 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   10905:	55                   	push   %ebp
   10906:	89 e5                	mov    %esp,%ebp
   10908:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   1090b:	83 ec 08             	sub    $0x8,%esp
   1090e:	68 f2 17 01 00       	push   $0x117f2
   10913:	ff 75 08             	push   0x8(%ebp)
   10916:	e8 08 fe ff ff       	call   10723 <do_default_handler>
   1091b:	83 c4 10             	add    $0x10,%esp
}
   1091e:	90                   	nop
   1091f:	c9                   	leave
   10920:	c3                   	ret

00010921 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   10921:	55                   	push   %ebp
   10922:	89 e5                	mov    %esp,%ebp
   10924:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   10927:	83 ec 08             	sub    $0x8,%esp
   1092a:	68 10 18 01 00       	push   $0x11810
   1092f:	ff 75 08             	push   0x8(%ebp)
   10932:	e8 ec fd ff ff       	call   10723 <do_default_handler>
   10937:	83 c4 10             	add    $0x10,%esp
}
   1093a:	90                   	nop
   1093b:	c9                   	leave
   1093c:	c3                   	ret

0001093d <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   1093d:	55                   	push   %ebp
   1093e:	89 e5                	mov    %esp,%ebp
   10940:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   10943:	83 ec 08             	sub    $0x8,%esp
   10946:	68 21 18 01 00       	push   $0x11821
   1094b:	ff 75 08             	push   0x8(%ebp)
   1094e:	e8 d0 fd ff ff       	call   10723 <do_default_handler>
   10953:	83 c4 10             	add    $0x10,%esp
}
   10956:	90                   	nop
   10957:	c9                   	leave
   10958:	c3                   	ret

00010959 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   10959:	55                   	push   %ebp
   1095a:	89 e5                	mov    %esp,%ebp
   1095c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   1095f:	83 ec 08             	sub    $0x8,%esp
   10962:	68 30 18 01 00       	push   $0x11830
   10967:	ff 75 08             	push   0x8(%ebp)
   1096a:	e8 b4 fd ff ff       	call   10723 <do_default_handler>
   1096f:	83 c4 10             	add    $0x10,%esp
}
   10972:	90                   	nop
   10973:	c9                   	leave
   10974:	c3                   	ret

00010975 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   10975:	55                   	push   %ebp
   10976:	89 e5                	mov    %esp,%ebp
   10978:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   1097b:	83 ec 08             	sub    $0x8,%esp
   1097e:	68 4f 18 01 00       	push   $0x1184f
   10983:	ff 75 08             	push   0x8(%ebp)
   10986:	e8 98 fd ff ff       	call   10723 <do_default_handler>
   1098b:	83 c4 10             	add    $0x10,%esp
}
   1098e:	90                   	nop
   1098f:	c9                   	leave
   10990:	c3                   	ret

00010991 <init_pic>:

static void init_pic(void)
{
   10991:	55                   	push   %ebp
   10992:	89 e5                	mov    %esp,%ebp
    // 对的一块8259芯片的初始化
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10994:	6a 11                	push   $0x11
   10996:	6a 20                	push   $0x20
   10998:	e8 51 fc ff ff       	call   105ee <outb>
   1099d:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START);
   109a0:	6a 20                	push   $0x20
   109a2:	6a 21                	push   $0x21
   109a4:	e8 45 fc ff ff       	call   105ee <outb>
   109a9:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);
   109ac:	6a 04                	push   $0x4
   109ae:	6a 21                	push   $0x21
   109b0:	e8 39 fc ff ff       	call   105ee <outb>
   109b5:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086);
   109b8:	6a 01                	push   $0x1
   109ba:	6a 21                	push   $0x21
   109bc:	e8 2d fc ff ff       	call   105ee <outb>
   109c1:	83 c4 08             	add    $0x8,%esp

    // 对的二块8259芯片的初始化
    outb(PIC1_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   109c4:	6a 11                	push   $0x11
   109c6:	68 a0 00 00 00       	push   $0xa0
   109cb:	e8 1e fc ff ff       	call   105ee <outb>
   109d0:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   109d3:	6a 28                	push   $0x28
   109d5:	68 a1 00 00 00       	push   $0xa1
   109da:	e8 0f fc ff ff       	call   105ee <outb>
   109df:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);
   109e2:	6a 02                	push   $0x2
   109e4:	68 a1 00 00 00       	push   $0xa1
   109e9:	e8 00 fc ff ff       	call   105ee <outb>
   109ee:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);
   109f1:	6a 01                	push   $0x1
   109f3:	68 a1 00 00 00       	push   $0xa1
   109f8:	e8 f1 fb ff ff       	call   105ee <outb>
   109fd:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10a00:	68 fb 00 00 00       	push   $0xfb
   10a05:	6a 21                	push   $0x21
   10a07:	e8 e2 fb ff ff       	call   105ee <outb>
   10a0c:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xff);
   10a0f:	68 ff 00 00 00       	push   $0xff
   10a14:	68 a1 00 00 00       	push   $0xa1
   10a19:	e8 d0 fb ff ff       	call   105ee <outb>
   10a1e:	83 c4 08             	add    $0x8,%esp
}
   10a21:	90                   	nop
   10a22:	c9                   	leave
   10a23:	c3                   	ret

00010a24 <irq_init>:

// 初始化中断向量表
void irq_init(void)
{
   10a24:	55                   	push   %ebp
   10a25:	89 e5                	mov    %esp,%ebp
   10a27:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10a2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10a31:	eb 25                	jmp    10a58 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknow, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10a33:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a3b:	c1 e0 03             	shl    $0x3,%eax
   10a3e:	05 20 21 01 00       	add    $0x12120,%eax
   10a43:	68 00 8e 00 00       	push   $0x8e00
   10a48:	52                   	push   %edx
   10a49:	6a 08                	push   $0x8
   10a4b:	50                   	push   %eax
   10a4c:	e8 d6 fa ff ff       	call   10527 <gate_desc_set>
   10a51:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10a54:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a58:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10a5c:	7e d5                	jle    10a33 <irq_init+0xf>
    }

    // 将异常处理配置到idt表中
    // 除0异常
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10a5e:	83 ec 08             	sub    $0x8,%esp
   10a61:	68 4a 00 01 00       	push   $0x1004a
   10a66:	6a 00                	push   $0x0
   10a68:	e8 65 01 00 00       	call   10bd2 <irq_install>
   10a6d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10a70:	83 ec 08             	sub    $0x8,%esp
   10a73:	68 69 00 01 00       	push   $0x10069
   10a78:	6a 01                	push   $0x1
   10a7a:	e8 53 01 00 00       	call   10bd2 <irq_install>
   10a7f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10a82:	83 ec 08             	sub    $0x8,%esp
   10a85:	68 88 00 01 00       	push   $0x10088
   10a8a:	6a 02                	push   $0x2
   10a8c:	e8 41 01 00 00       	call   10bd2 <irq_install>
   10a91:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10a94:	83 ec 08             	sub    $0x8,%esp
   10a97:	68 a7 00 01 00       	push   $0x100a7
   10a9c:	6a 03                	push   $0x3
   10a9e:	e8 2f 01 00 00       	call   10bd2 <irq_install>
   10aa3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10aa6:	83 ec 08             	sub    $0x8,%esp
   10aa9:	68 c6 00 01 00       	push   $0x100c6
   10aae:	6a 04                	push   $0x4
   10ab0:	e8 1d 01 00 00       	call   10bd2 <irq_install>
   10ab5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10ab8:	83 ec 08             	sub    $0x8,%esp
   10abb:	68 e5 00 01 00       	push   $0x100e5
   10ac0:	6a 05                	push   $0x5
   10ac2:	e8 0b 01 00 00       	call   10bd2 <irq_install>
   10ac7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10aca:	83 ec 08             	sub    $0x8,%esp
   10acd:	68 04 01 01 00       	push   $0x10104
   10ad2:	6a 06                	push   $0x6
   10ad4:	e8 f9 00 00 00       	call   10bd2 <irq_install>
   10ad9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10adc:	83 ec 08             	sub    $0x8,%esp
   10adf:	68 23 01 01 00       	push   $0x10123
   10ae4:	6a 07                	push   $0x7
   10ae6:	e8 e7 00 00 00       	call   10bd2 <irq_install>
   10aeb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10aee:	83 ec 08             	sub    $0x8,%esp
   10af1:	68 42 01 01 00       	push   $0x10142
   10af6:	6a 08                	push   $0x8
   10af8:	e8 d5 00 00 00       	call   10bd2 <irq_install>
   10afd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   10b00:	83 ec 08             	sub    $0x8,%esp
   10b03:	68 5f 01 01 00       	push   $0x1015f
   10b08:	6a 0a                	push   $0xa
   10b0a:	e8 c3 00 00 00       	call   10bd2 <irq_install>
   10b0f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   10b12:	83 ec 08             	sub    $0x8,%esp
   10b15:	68 7c 01 01 00       	push   $0x1017c
   10b1a:	6a 0b                	push   $0xb
   10b1c:	e8 b1 00 00 00       	call   10bd2 <irq_install>
   10b21:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   10b24:	83 ec 08             	sub    $0x8,%esp
   10b27:	68 99 01 01 00       	push   $0x10199
   10b2c:	6a 0c                	push   $0xc
   10b2e:	e8 9f 00 00 00       	call   10bd2 <irq_install>
   10b33:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   10b36:	83 ec 08             	sub    $0x8,%esp
   10b39:	68 b6 01 01 00       	push   $0x101b6
   10b3e:	6a 0d                	push   $0xd
   10b40:	e8 8d 00 00 00       	call   10bd2 <irq_install>
   10b45:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   10b48:	83 ec 08             	sub    $0x8,%esp
   10b4b:	68 d3 01 01 00       	push   $0x101d3
   10b50:	6a 0e                	push   $0xe
   10b52:	e8 7b 00 00 00       	call   10bd2 <irq_install>
   10b57:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   10b5a:	83 ec 08             	sub    $0x8,%esp
   10b5d:	68 f0 01 01 00       	push   $0x101f0
   10b62:	6a 10                	push   $0x10
   10b64:	e8 69 00 00 00       	call   10bd2 <irq_install>
   10b69:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   10b6c:	83 ec 08             	sub    $0x8,%esp
   10b6f:	68 0f 02 01 00       	push   $0x1020f
   10b74:	6a 11                	push   $0x11
   10b76:	e8 57 00 00 00       	call   10bd2 <irq_install>
   10b7b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   10b7e:	83 ec 08             	sub    $0x8,%esp
   10b81:	68 2c 02 01 00       	push   $0x1022c
   10b86:	6a 12                	push   $0x12
   10b88:	e8 45 00 00 00       	call   10bd2 <irq_install>
   10b8d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   10b90:	83 ec 08             	sub    $0x8,%esp
   10b93:	68 4b 02 01 00       	push   $0x1024b
   10b98:	6a 13                	push   $0x13
   10b9a:	e8 33 00 00 00       	call   10bd2 <irq_install>
   10b9f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   10ba2:	83 ec 08             	sub    $0x8,%esp
   10ba5:	68 6a 02 01 00       	push   $0x1026a
   10baa:	6a 14                	push   $0x14
   10bac:	e8 21 00 00 00       	call   10bd2 <irq_install>
   10bb1:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table, sizeof(idt_table));
   10bb4:	b8 20 21 01 00       	mov    $0x12120,%eax
   10bb9:	83 ec 08             	sub    $0x8,%esp
   10bbc:	68 00 04 00 00       	push   $0x400
   10bc1:	50                   	push   %eax
   10bc2:	e8 54 fa ff ff       	call   1061b <lidt>
   10bc7:	83 c4 10             	add    $0x10,%esp

    init_pic();
   10bca:	e8 c2 fd ff ff       	call   10991 <init_pic>
}
   10bcf:	90                   	nop
   10bd0:	c9                   	leave
   10bd1:	c3                   	ret

00010bd2 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   10bd2:	55                   	push   %ebp
   10bd3:	89 e5                	mov    %esp,%ebp
   10bd5:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   10bd8:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10bdc:	7e 07                	jle    10be5 <irq_install+0x13>
    {
        return -1;
   10bde:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10be3:	eb 20                	jmp    10c05 <irq_install+0x33>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10be5:	8b 45 0c             	mov    0xc(%ebp),%eax
   10be8:	8b 55 08             	mov    0x8(%ebp),%edx
   10beb:	c1 e2 03             	shl    $0x3,%edx
   10bee:	81 c2 20 21 01 00    	add    $0x12120,%edx
   10bf4:	68 00 8e 00 00       	push   $0x8e00
   10bf9:	50                   	push   %eax
   10bfa:	6a 08                	push   $0x8
   10bfc:	52                   	push   %edx
   10bfd:	e8 25 f9 ff ff       	call   10527 <gate_desc_set>
   10c02:	83 c4 10             	add    $0x10,%esp
}
   10c05:	c9                   	leave
   10c06:	c3                   	ret

00010c07 <irq_enable>:

// 8259中断打开
void irq_enable(int irq_num)
{
   10c07:	55                   	push   %ebp
   10c08:	89 e5                	mov    %esp,%ebp
   10c0a:	53                   	push   %ebx
   10c0b:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10c0e:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c12:	7e 78                	jle    10c8c <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10c14:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10c18:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10c1c:	7f 32                	jg     10c50 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10c1e:	6a 21                	push   $0x21
   10c20:	e8 ac f9 ff ff       	call   105d1 <inb>
   10c25:	83 c4 04             	add    $0x4,%esp
   10c28:	89 c3                	mov    %eax,%ebx
   10c2a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2d:	ba 01 00 00 00       	mov    $0x1,%edx
   10c32:	89 c1                	mov    %eax,%ecx
   10c34:	d3 e2                	shl    %cl,%edx
   10c36:	89 d0                	mov    %edx,%eax
   10c38:	f7 d0                	not    %eax
   10c3a:	21 d8                	and    %ebx,%eax
   10c3c:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10c3f:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10c43:	50                   	push   %eax
   10c44:	6a 21                	push   $0x21
   10c46:	e8 a3 f9 ff ff       	call   105ee <outb>
   10c4b:	83 c4 08             	add    $0x8,%esp
   10c4e:	eb 3d                	jmp    10c8d <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   10c50:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10c54:	68 a1 00 00 00       	push   $0xa1
   10c59:	e8 73 f9 ff ff       	call   105d1 <inb>
   10c5e:	83 c4 04             	add    $0x4,%esp
   10c61:	89 c3                	mov    %eax,%ebx
   10c63:	8b 45 08             	mov    0x8(%ebp),%eax
   10c66:	ba 01 00 00 00       	mov    $0x1,%edx
   10c6b:	89 c1                	mov    %eax,%ecx
   10c6d:	d3 e2                	shl    %cl,%edx
   10c6f:	89 d0                	mov    %edx,%eax
   10c71:	f7 d0                	not    %eax
   10c73:	21 d8                	and    %ebx,%eax
   10c75:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10c78:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10c7c:	50                   	push   %eax
   10c7d:	68 a1 00 00 00       	push   $0xa1
   10c82:	e8 67 f9 ff ff       	call   105ee <outb>
   10c87:	83 c4 08             	add    $0x8,%esp
   10c8a:	eb 01                	jmp    10c8d <irq_enable+0x86>
        return;
   10c8c:	90                   	nop
    }
}
   10c8d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10c90:	c9                   	leave
   10c91:	c3                   	ret

00010c92 <irq_disable>:

// 8259中断关闭
void irq_disable(int irq_num)
{
   10c92:	55                   	push   %ebp
   10c93:	89 e5                	mov    %esp,%ebp
   10c95:	53                   	push   %ebx
   10c96:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10c99:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c9d:	7e 74                	jle    10d13 <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   10c9f:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10ca3:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ca7:	7f 30                	jg     10cd9 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10ca9:	6a 21                	push   $0x21
   10cab:	e8 21 f9 ff ff       	call   105d1 <inb>
   10cb0:	83 c4 04             	add    $0x4,%esp
   10cb3:	89 c3                	mov    %eax,%ebx
   10cb5:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb8:	ba 01 00 00 00       	mov    $0x1,%edx
   10cbd:	89 c1                	mov    %eax,%ecx
   10cbf:	d3 e2                	shl    %cl,%edx
   10cc1:	89 d0                	mov    %edx,%eax
   10cc3:	09 d8                	or     %ebx,%eax
   10cc5:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10cc8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10ccc:	50                   	push   %eax
   10ccd:	6a 21                	push   $0x21
   10ccf:	e8 1a f9 ff ff       	call   105ee <outb>
   10cd4:	83 c4 08             	add    $0x8,%esp
   10cd7:	eb 3b                	jmp    10d14 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   10cd9:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10cdd:	68 a1 00 00 00       	push   $0xa1
   10ce2:	e8 ea f8 ff ff       	call   105d1 <inb>
   10ce7:	83 c4 04             	add    $0x4,%esp
   10cea:	89 c3                	mov    %eax,%ebx
   10cec:	8b 45 08             	mov    0x8(%ebp),%eax
   10cef:	ba 01 00 00 00       	mov    $0x1,%edx
   10cf4:	89 c1                	mov    %eax,%ecx
   10cf6:	d3 e2                	shl    %cl,%edx
   10cf8:	89 d0                	mov    %edx,%eax
   10cfa:	09 d8                	or     %ebx,%eax
   10cfc:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10cff:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d03:	50                   	push   %eax
   10d04:	68 a1 00 00 00       	push   $0xa1
   10d09:	e8 e0 f8 ff ff       	call   105ee <outb>
   10d0e:	83 c4 08             	add    $0x8,%esp
   10d11:	eb 01                	jmp    10d14 <irq_disable+0x82>
        return;
   10d13:	90                   	nop
    }
}
   10d14:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d17:	c9                   	leave
   10d18:	c3                   	ret

00010d19 <irq_disable_global>:

// 全局中断关闭
void irq_disable_global(void)
{
   10d19:	55                   	push   %ebp
   10d1a:	89 e5                	mov    %esp,%ebp
    cli();
   10d1c:	e8 ec f8 ff ff       	call   1060d <cli>
}
   10d21:	90                   	nop
   10d22:	5d                   	pop    %ebp
   10d23:	c3                   	ret

00010d24 <irq_enable_global>:

// 全局中断开启
void irq_enable_global(void)
{
   10d24:	55                   	push   %ebp
   10d25:	89 e5                	mov    %esp,%ebp
    sti();
   10d27:	e8 e8 f8 ff ff       	call   10614 <sti>
}
   10d2c:	90                   	nop
   10d2d:	5d                   	pop    %ebp
   10d2e:	c3                   	ret

00010d2f <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   10d2f:	55                   	push   %ebp
   10d30:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10d32:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num >= 8)
   10d36:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d3a:	7e 0f                	jle    10d4b <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10d3c:	6a 20                	push   $0x20
   10d3e:	68 a0 00 00 00       	push   $0xa0
   10d43:	e8 a6 f8 ff ff       	call   105ee <outb>
   10d48:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10d4b:	6a 20                	push   $0x20
   10d4d:	6a 20                	push   $0x20
   10d4f:	e8 9a f8 ff ff       	call   105ee <outb>
   10d54:	83 c4 08             	add    $0x8,%esp
   10d57:	90                   	nop
   10d58:	c9                   	leave
   10d59:	c3                   	ret

00010d5a <outb>:
{
    sys_tick = 0;
    init_pit();
   10d5a:	55                   	push   %ebp
   10d5b:	89 e5                	mov    %esp,%ebp
   10d5d:	83 ec 08             	sub    $0x8,%esp
   10d60:	8b 55 08             	mov    0x8(%ebp),%edx
   10d63:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d66:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10d6a:	88 45 f8             	mov    %al,-0x8(%ebp)
   10d6d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10d71:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10d75:	ee                   	out    %al,(%dx)
   10d76:	90                   	nop
   10d77:	c9                   	leave
   10d78:	c3                   	ret

00010d79 <do_handler_time>:
{
   10d79:	55                   	push   %ebp
   10d7a:	89 e5                	mov    %esp,%ebp
   10d7c:	83 ec 08             	sub    $0x8,%esp
    sys_tick++; // 每一次定时中断来了之后就自增1
   10d7f:	a1 20 25 01 00       	mov    0x12520,%eax
   10d84:	83 c0 01             	add    $0x1,%eax
   10d87:	a3 20 25 01 00       	mov    %eax,0x12520
    pic_send_eoi(IRQ0_TIMER);
   10d8c:	83 ec 0c             	sub    $0xc,%esp
   10d8f:	6a 20                	push   $0x20
   10d91:	e8 99 ff ff ff       	call   10d2f <pic_send_eoi>
   10d96:	83 c4 10             	add    $0x10,%esp
}
   10d99:	90                   	nop
   10d9a:	c9                   	leave
   10d9b:	c3                   	ret

00010d9c <init_pit>:
{
   10d9c:	55                   	push   %ebp
   10d9d:	89 e5                	mov    %esp,%ebp
   10d9f:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   10da2:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3);
   10da9:	6a 36                	push   $0x36
   10dab:	6a 43                	push   $0x43
   10dad:	e8 a8 ff ff ff       	call   10d5a <outb>
   10db2:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);
   10db5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10db8:	0f b6 c0             	movzbl %al,%eax
   10dbb:	50                   	push   %eax
   10dbc:	6a 40                	push   $0x40
   10dbe:	e8 97 ff ff ff       	call   10d5a <outb>
   10dc3:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF);
   10dc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10dc9:	c1 e8 08             	shr    $0x8,%eax
   10dcc:	0f b6 c0             	movzbl %al,%eax
   10dcf:	50                   	push   %eax
   10dd0:	6a 40                	push   $0x40
   10dd2:	e8 83 ff ff ff       	call   10d5a <outb>
   10dd7:	83 c4 08             	add    $0x8,%esp
    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_time); // 添加到中断函数中
   10dda:	83 ec 08             	sub    $0x8,%esp
   10ddd:	68 89 02 01 00       	push   $0x10289
   10de2:	6a 20                	push   $0x20
   10de4:	e8 e9 fd ff ff       	call   10bd2 <irq_install>
   10de9:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);                                         // 打开定时中断
   10dec:	83 ec 0c             	sub    $0xc,%esp
   10def:	6a 20                	push   $0x20
   10df1:	e8 11 fe ff ff       	call   10c07 <irq_enable>
   10df6:	83 c4 10             	add    $0x10,%esp
}
   10df9:	90                   	nop
   10dfa:	c9                   	leave
   10dfb:	c3                   	ret

00010dfc <init_time>:
{
   10dfc:	55                   	push   %ebp
   10dfd:	89 e5                	mov    %esp,%ebp
   10dff:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10e02:	c7 05 20 25 01 00 00 	movl   $0x0,0x12520
   10e09:	00 00 00 
    init_pit();
   10e0c:	e8 8b ff ff ff       	call   10d9c <init_pit>
   10e11:	90                   	nop
   10e12:	c9                   	leave
   10e13:	c3                   	ret

00010e14 <write_tr>:
   10e14:	55                   	push   %ebp
   10e15:	89 e5                	mov    %esp,%ebp
   10e17:	83 ec 04             	sub    $0x4,%esp
   10e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   10e21:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10e25:	0f 00 d8             	ltr    %ax
   10e28:	90                   	nop
   10e29:	c9                   	leave
   10e2a:	c3                   	ret

00010e2b <kernel_init>:
{
   10e2b:	55                   	push   %ebp
   10e2c:	89 e5                	mov    %esp,%ebp
   10e2e:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10e31:	e8 90 f7 ff ff       	call   105c6 <cpu_init>
    init_log(); // 初始化打印函数
   10e36:	e8 2a 06 00 00       	call   11465 <init_log>
    irq_init();
   10e3b:	e8 e4 fb ff ff       	call   10a24 <irq_init>
    init_time();
   10e40:	e8 b7 ff ff ff       	call   10dfc <init_time>
}
   10e45:	90                   	nop
   10e46:	c9                   	leave
   10e47:	c3                   	ret

00010e48 <init_task_entry>:
{
   10e48:	55                   	push   %ebp
   10e49:	89 e5                	mov    %esp,%ebp
   10e4b:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10e4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        log_prinf("init_task_entry: %d", count++);
   10e55:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e58:	8d 50 01             	lea    0x1(%eax),%edx
   10e5b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10e5e:	83 ec 08             	sub    $0x8,%esp
   10e61:	50                   	push   %eax
   10e62:	68 69 18 01 00       	push   $0x11869
   10e67:	e8 6b 06 00 00       	call   114d7 <log_prinf>
   10e6c:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task, &first_task);
   10e6f:	83 ec 08             	sub    $0x8,%esp
   10e72:	68 40 25 01 00       	push   $0x12540
   10e77:	68 c0 35 01 00       	push   $0x135c0
   10e7c:	e8 59 f5 ff ff       	call   103da <task_switch_from_to>
   10e81:	83 c4 10             	add    $0x10,%esp
        log_prinf("init_task_entry: %d", count++);
   10e84:	eb cf                	jmp    10e55 <init_task_entry+0xd>

00010e86 <init_main>:
{
   10e86:	55                   	push   %ebp
   10e87:	89 e5                	mov    %esp,%ebp
   10e89:	83 ec 18             	sub    $0x18,%esp
    log_prinf("os is running");
   10e8c:	83 ec 0c             	sub    $0xc,%esp
   10e8f:	68 7d 18 01 00       	push   $0x1187d
   10e94:	e8 3e 06 00 00       	call   114d7 <log_prinf>
   10e99:	83 c4 10             	add    $0x10,%esp
    log_prinf("version %s", OS_VERSION);
   10e9c:	83 ec 08             	sub    $0x8,%esp
   10e9f:	68 8b 18 01 00       	push   $0x1188b
   10ea4:	68 91 18 01 00       	push   $0x11891
   10ea9:	e8 29 06 00 00       	call   114d7 <log_prinf>
   10eae:	83 c4 10             	add    $0x10,%esp
    log_prinf("%d %d %x %c", -10, 20, 0x30, 'c');
   10eb1:	83 ec 0c             	sub    $0xc,%esp
   10eb4:	6a 63                	push   $0x63
   10eb6:	6a 30                	push   $0x30
   10eb8:	6a 14                	push   $0x14
   10eba:	6a f6                	push   $0xfffffff6
   10ebc:	68 9c 18 01 00       	push   $0x1189c
   10ec1:	e8 11 06 00 00       	call   114d7 <log_prinf>
   10ec6:	83 c4 20             	add    $0x20,%esp
    task_init(&init_task, (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   10ec9:	ba c0 35 01 00       	mov    $0x135c0,%edx
   10ece:	b8 48 0e 01 00       	mov    $0x10e48,%eax
   10ed3:	83 ec 04             	sub    $0x4,%esp
   10ed6:	52                   	push   %edx
   10ed7:	50                   	push   %eax
   10ed8:	68 c0 35 01 00       	push   $0x135c0
   10edd:	e8 b8 f4 ff ff       	call   1039a <task_init>
   10ee2:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, 0, 0); //??为什么入口设置为0，堆栈也设置为0
   10ee5:	83 ec 04             	sub    $0x4,%esp
   10ee8:	6a 00                	push   $0x0
   10eea:	6a 00                	push   $0x0
   10eec:	68 40 25 01 00       	push   $0x12540
   10ef1:	e8 a4 f4 ff ff       	call   1039a <task_init>
   10ef6:	83 c4 10             	add    $0x10,%esp
    write_tr(first_task.tss_sel);
   10ef9:	a1 a8 25 01 00       	mov    0x125a8,%eax
   10efe:	0f b7 c0             	movzwl %ax,%eax
   10f01:	83 ec 0c             	sub    $0xc,%esp
   10f04:	50                   	push   %eax
   10f05:	e8 0a ff ff ff       	call   10e14 <write_tr>
   10f0a:	83 c4 10             	add    $0x10,%esp
    int count = 0;
   10f0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        log_prinf("init_main: %d", count++);
   10f14:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f17:	8d 50 01             	lea    0x1(%eax),%edx
   10f1a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f1d:	83 ec 08             	sub    $0x8,%esp
   10f20:	50                   	push   %eax
   10f21:	68 a8 18 01 00       	push   $0x118a8
   10f26:	e8 ac 05 00 00       	call   114d7 <log_prinf>
   10f2b:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&first_task, &init_task);
   10f2e:	83 ec 08             	sub    $0x8,%esp
   10f31:	68 c0 35 01 00       	push   $0x135c0
   10f36:	68 40 25 01 00       	push   $0x12540
   10f3b:	e8 9a f4 ff ff       	call   103da <task_switch_from_to>
   10f40:	83 c4 10             	add    $0x10,%esp
        log_prinf("init_main: %d", count++);
   10f43:	eb cf                	jmp    10f14 <init_main+0x8e>

00010f45 <hlt>:
    }
    uint8_t *d = (uint8_t *)dest;
    while (size--)
    {
        *d++ = v;
    }
   10f45:	55                   	push   %ebp
   10f46:	89 e5                	mov    %esp,%ebp
}
   10f48:	f4                   	hlt

   10f49:	90                   	nop
   10f4a:	5d                   	pop    %ebp
   10f4b:	c3                   	ret

00010f4c <kernel_strcpy>:
{
   10f4c:	55                   	push   %ebp
   10f4d:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   10f4f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f53:	74 3b                	je     10f90 <kernel_strcpy+0x44>
   10f55:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f59:	74 35                	je     10f90 <kernel_strcpy+0x44>
    while (*dest && *src)
   10f5b:	eb 17                	jmp    10f74 <kernel_strcpy+0x28>
        *dest++ = *src++;
   10f5d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f60:	8d 42 01             	lea    0x1(%edx),%eax
   10f63:	89 45 0c             	mov    %eax,0xc(%ebp)
   10f66:	8b 45 08             	mov    0x8(%ebp),%eax
   10f69:	8d 48 01             	lea    0x1(%eax),%ecx
   10f6c:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10f6f:	0f b6 12             	movzbl (%edx),%edx
   10f72:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   10f74:	8b 45 08             	mov    0x8(%ebp),%eax
   10f77:	0f b6 00             	movzbl (%eax),%eax
   10f7a:	84 c0                	test   %al,%al
   10f7c:	74 0a                	je     10f88 <kernel_strcpy+0x3c>
   10f7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f81:	0f b6 00             	movzbl (%eax),%eax
   10f84:	84 c0                	test   %al,%al
   10f86:	75 d5                	jne    10f5d <kernel_strcpy+0x11>
    *dest = '\0';
   10f88:	8b 45 08             	mov    0x8(%ebp),%eax
   10f8b:	c6 00 00             	movb   $0x0,(%eax)
   10f8e:	eb 01                	jmp    10f91 <kernel_strcpy+0x45>
        return;
   10f90:	90                   	nop
}
   10f91:	5d                   	pop    %ebp
   10f92:	c3                   	ret

00010f93 <kernel_strncpy>:
{
   10f93:	55                   	push   %ebp
   10f94:	89 e5                	mov    %esp,%ebp
   10f96:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   10f99:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f9d:	74 61                	je     11000 <kernel_strncpy+0x6d>
   10f9f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fa3:	74 5b                	je     11000 <kernel_strncpy+0x6d>
   10fa5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10fa9:	74 55                	je     11000 <kernel_strncpy+0x6d>
    char *d = dest;
   10fab:	8b 45 08             	mov    0x8(%ebp),%eax
   10fae:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   10fb1:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fb4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s))
   10fb7:	eb 17                	jmp    10fd0 <kernel_strncpy+0x3d>
        *d++ = *s++;
   10fb9:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10fbc:	8d 42 01             	lea    0x1(%edx),%eax
   10fbf:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10fc2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fc5:	8d 48 01             	lea    0x1(%eax),%ecx
   10fc8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10fcb:	0f b6 12             	movzbl (%edx),%edx
   10fce:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   10fd0:	8b 45 10             	mov    0x10(%ebp),%eax
   10fd3:	8d 50 ff             	lea    -0x1(%eax),%edx
   10fd6:	89 55 10             	mov    %edx,0x10(%ebp)
   10fd9:	85 c0                	test   %eax,%eax
   10fdb:	7e 0a                	jle    10fe7 <kernel_strncpy+0x54>
   10fdd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10fe0:	0f b6 00             	movzbl (%eax),%eax
   10fe3:	84 c0                	test   %al,%al
   10fe5:	75 d2                	jne    10fb9 <kernel_strncpy+0x26>
    if (size == 0)
   10fe7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10feb:	75 0b                	jne    10ff8 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   10fed:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ff0:	83 e8 01             	sub    $0x1,%eax
   10ff3:	c6 00 00             	movb   $0x0,(%eax)
   10ff6:	eb 09                	jmp    11001 <kernel_strncpy+0x6e>
        *d = '\0';
   10ff8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ffb:	c6 00 00             	movb   $0x0,(%eax)
   10ffe:	eb 01                	jmp    11001 <kernel_strncpy+0x6e>
        return;
   11000:	90                   	nop
}
   11001:	c9                   	leave
   11002:	c3                   	ret

00011003 <kernel_strncmp>:
{
   11003:	55                   	push   %ebp
   11004:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2 || !size)
   11006:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1100a:	74 0c                	je     11018 <kernel_strncmp+0x15>
   1100c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11010:	74 06                	je     11018 <kernel_strncmp+0x15>
   11012:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11016:	75 0f                	jne    11027 <kernel_strncmp+0x24>
        return -1;
   11018:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1101d:	eb 62                	jmp    11081 <kernel_strncmp+0x7e>
        s1++;
   1101f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11023:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   11027:	8b 45 08             	mov    0x8(%ebp),%eax
   1102a:	0f b6 00             	movzbl (%eax),%eax
   1102d:	84 c0                	test   %al,%al
   1102f:	74 20                	je     11051 <kernel_strncmp+0x4e>
   11031:	8b 45 0c             	mov    0xc(%ebp),%eax
   11034:	0f b6 00             	movzbl (%eax),%eax
   11037:	84 c0                	test   %al,%al
   11039:	74 16                	je     11051 <kernel_strncmp+0x4e>
   1103b:	8b 45 08             	mov    0x8(%ebp),%eax
   1103e:	0f b6 10             	movzbl (%eax),%edx
   11041:	8b 45 0c             	mov    0xc(%ebp),%eax
   11044:	0f b6 00             	movzbl (%eax),%eax
   11047:	38 c2                	cmp    %al,%dl
   11049:	75 06                	jne    11051 <kernel_strncmp+0x4e>
   1104b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1104f:	75 ce                	jne    1101f <kernel_strncmp+0x1c>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11051:	8b 45 08             	mov    0x8(%ebp),%eax
   11054:	0f b6 00             	movzbl (%eax),%eax
   11057:	84 c0                	test   %al,%al
   11059:	74 21                	je     1107c <kernel_strncmp+0x79>
   1105b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1105e:	0f b6 00             	movzbl (%eax),%eax
   11061:	84 c0                	test   %al,%al
   11063:	74 17                	je     1107c <kernel_strncmp+0x79>
   11065:	8b 45 08             	mov    0x8(%ebp),%eax
   11068:	0f b6 10             	movzbl (%eax),%edx
   1106b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1106e:	0f b6 00             	movzbl (%eax),%eax
   11071:	38 c2                	cmp    %al,%dl
   11073:	74 07                	je     1107c <kernel_strncmp+0x79>
   11075:	b8 01 00 00 00       	mov    $0x1,%eax
   1107a:	eb 05                	jmp    11081 <kernel_strncmp+0x7e>
   1107c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11081:	5d                   	pop    %ebp
   11082:	c3                   	ret

00011083 <kernel_strlen>:
{
   11083:	55                   	push   %ebp
   11084:	89 e5                	mov    %esp,%ebp
   11086:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   11089:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1108d:	75 07                	jne    11096 <kernel_strlen+0x13>
        return 0;
   1108f:	b8 00 00 00 00       	mov    $0x0,%eax
   11094:	eb 26                	jmp    110bc <kernel_strlen+0x39>
    const char *c = str;
   11096:	8b 45 08             	mov    0x8(%ebp),%eax
   11099:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   1109c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   110a3:	eb 04                	jmp    110a9 <kernel_strlen+0x26>
        len++;
   110a5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   110a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110ac:	8d 50 01             	lea    0x1(%eax),%edx
   110af:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110b2:	0f b6 00             	movzbl (%eax),%eax
   110b5:	84 c0                	test   %al,%al
   110b7:	75 ec                	jne    110a5 <kernel_strlen+0x22>
    return len;
   110b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   110bc:	c9                   	leave
   110bd:	c3                   	ret

000110be <kernel_memcpy>:
{
   110be:	55                   	push   %ebp
   110bf:	89 e5                	mov    %esp,%ebp
   110c1:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   110c4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110c8:	74 40                	je     1110a <kernel_memcpy+0x4c>
   110ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110ce:	74 3a                	je     1110a <kernel_memcpy+0x4c>
   110d0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110d4:	74 34                	je     1110a <kernel_memcpy+0x4c>
    uint8_t *s = (uint8_t *)src;
   110d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   110d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   110dc:	8b 45 08             	mov    0x8(%ebp),%eax
   110df:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   110e2:	eb 17                	jmp    110fb <kernel_memcpy+0x3d>
        *d++ = *s++;
   110e4:	8b 55 fc             	mov    -0x4(%ebp),%edx
   110e7:	8d 42 01             	lea    0x1(%edx),%eax
   110ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
   110ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
   110f0:	8d 48 01             	lea    0x1(%eax),%ecx
   110f3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   110f6:	0f b6 12             	movzbl (%edx),%edx
   110f9:	88 10                	mov    %dl,(%eax)
    while (size--)
   110fb:	8b 45 10             	mov    0x10(%ebp),%eax
   110fe:	8d 50 ff             	lea    -0x1(%eax),%edx
   11101:	89 55 10             	mov    %edx,0x10(%ebp)
   11104:	85 c0                	test   %eax,%eax
   11106:	75 dc                	jne    110e4 <kernel_memcpy+0x26>
   11108:	eb 01                	jmp    1110b <kernel_memcpy+0x4d>
        return;
   1110a:	90                   	nop
}
   1110b:	c9                   	leave
   1110c:	c3                   	ret

0001110d <kernel_memset>:
{
   1110d:	55                   	push   %ebp
   1110e:	89 e5                	mov    %esp,%ebp
   11110:	83 ec 14             	sub    $0x14,%esp
   11113:	8b 45 0c             	mov    0xc(%ebp),%eax
   11116:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   11119:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1111d:	74 2c                	je     1114b <kernel_memset+0x3e>
   1111f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11123:	74 26                	je     1114b <kernel_memset+0x3e>
    uint8_t *d = (uint8_t *)dest;
   11125:	8b 45 08             	mov    0x8(%ebp),%eax
   11128:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   1112b:	eb 0f                	jmp    1113c <kernel_memset+0x2f>
        *d++ = v;
   1112d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11130:	8d 50 01             	lea    0x1(%eax),%edx
   11133:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11136:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1113a:	88 10                	mov    %dl,(%eax)
    while (size--)
   1113c:	8b 45 10             	mov    0x10(%ebp),%eax
   1113f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11142:	89 55 10             	mov    %edx,0x10(%ebp)
   11145:	85 c0                	test   %eax,%eax
   11147:	75 e4                	jne    1112d <kernel_memset+0x20>
   11149:	eb 01                	jmp    1114c <kernel_memset+0x3f>
        return;
   1114b:	90                   	nop
}
   1114c:	c9                   	leave
   1114d:	c3                   	ret

0001114e <kernel_memcmp>:
int kernel_memcmp(void *d1, void *d2, int size)
{
   1114e:	55                   	push   %ebp
   1114f:	89 e5                	mov    %esp,%ebp
   11151:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   11154:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11158:	74 06                	je     11160 <kernel_memcmp+0x12>
   1115a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1115e:	75 07                	jne    11167 <kernel_memcmp+0x19>
    {
        return 1;
   11160:	b8 01 00 00 00       	mov    $0x1,%eax
   11165:	eb 43                	jmp    111aa <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   11167:	8b 45 08             	mov    0x8(%ebp),%eax
   1116a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   1116d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11170:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11173:	eb 23                	jmp    11198 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   11175:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11178:	8d 50 01             	lea    0x1(%eax),%edx
   1117b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1117e:	0f b6 08             	movzbl (%eax),%ecx
   11181:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11184:	8d 50 01             	lea    0x1(%eax),%edx
   11187:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1118a:	0f b6 00             	movzbl (%eax),%eax
   1118d:	38 c1                	cmp    %al,%cl
   1118f:	74 07                	je     11198 <kernel_memcmp+0x4a>
        {
            return 1;
   11191:	b8 01 00 00 00       	mov    $0x1,%eax
   11196:	eb 12                	jmp    111aa <kernel_memcmp+0x5c>
    while (size--)
   11198:	8b 45 10             	mov    0x10(%ebp),%eax
   1119b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1119e:	89 55 10             	mov    %edx,0x10(%ebp)
   111a1:	85 c0                	test   %eax,%eax
   111a3:	75 d0                	jne    11175 <kernel_memcmp+0x27>
        }
    }
    return 0;
   111a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111aa:	c9                   	leave
   111ab:	c3                   	ret

000111ac <kernel_sprintf>:

void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   111ac:	55                   	push   %ebp
   111ad:	89 e5                	mov    %esp,%ebp
   111af:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start(args, fmt);
   111b2:	8d 45 10             	lea    0x10(%ebp),%eax
   111b5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_vsprintf(buffer, fmt, args);
   111b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111bb:	83 ec 04             	sub    $0x4,%esp
   111be:	50                   	push   %eax
   111bf:	ff 75 0c             	push   0xc(%ebp)
   111c2:	ff 75 08             	push   0x8(%ebp)
   111c5:	e8 dd 00 00 00       	call   112a7 <kernel_vsprintf>
   111ca:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   111cd:	90                   	nop
   111ce:	c9                   	leave
   111cf:	c3                   	ret

000111d0 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   111d0:	55                   	push   %ebp
   111d1:	89 e5                	mov    %esp,%ebp
   111d3:	83 ec 10             	sub    $0x10,%esp
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   111d6:	8b 45 08             	mov    0x8(%ebp),%eax
   111d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int old_num = num;
   111dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   111df:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   111e2:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   111e6:	74 1d                	je     11205 <kernel_itoa+0x35>
   111e8:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   111ec:	74 17                	je     11205 <kernel_itoa+0x35>
   111ee:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   111f2:	74 11                	je     11205 <kernel_itoa+0x35>
   111f4:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   111f8:	74 0b                	je     11205 <kernel_itoa+0x35>
    {
        *p = '\0';
   111fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111fd:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11200:	e9 a0 00 00 00       	jmp    112a5 <kernel_itoa+0xd5>
    }
    if ((num < 0) && (base == 10))
   11205:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11209:	79 12                	jns    1121d <kernel_itoa+0x4d>
   1120b:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1120f:	75 0c                	jne    1121d <kernel_itoa+0x4d>
    {
        *p++ = '-';
   11211:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11214:	8d 50 01             	lea    0x1(%eax),%edx
   11217:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1121a:	c6 00 2d             	movb   $0x2d,(%eax)
    }
    do
    {
        char ch = num2ch[num % base + 15];
   1121d:	8b 0d 04 19 01 00    	mov    0x11904,%ecx
   11223:	8b 45 0c             	mov    0xc(%ebp),%eax
   11226:	99                   	cltd
   11227:	f7 7d 10             	idivl  0x10(%ebp)
   1122a:	89 d0                	mov    %edx,%eax
   1122c:	83 c0 0f             	add    $0xf,%eax
   1122f:	01 c8                	add    %ecx,%eax
   11231:	0f b6 00             	movzbl (%eax),%eax
   11234:	88 45 f3             	mov    %al,-0xd(%ebp)
        *p++ = ch;
   11237:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1123a:	8d 50 01             	lea    0x1(%eax),%edx
   1123d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11240:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   11244:	88 10                	mov    %dl,(%eax)
        num /= base;
   11246:	8b 45 0c             	mov    0xc(%ebp),%eax
   11249:	99                   	cltd
   1124a:	f7 7d 10             	idivl  0x10(%ebp)
   1124d:	89 45 0c             	mov    %eax,0xc(%ebp)
    } while (num);
   11250:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11254:	75 c7                	jne    1121d <kernel_itoa+0x4d>
    *p-- = '\0';
   11256:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11259:	8d 50 ff             	lea    -0x1(%eax),%edx
   1125c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1125f:	c6 00 00             	movb   $0x0,(%eax)
    char *start = (old_num > 0) ? buf : buf + 1;
   11262:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11266:	7f 08                	jg     11270 <kernel_itoa+0xa0>
   11268:	8b 45 08             	mov    0x8(%ebp),%eax
   1126b:	83 c0 01             	add    $0x1,%eax
   1126e:	eb 03                	jmp    11273 <kernel_itoa+0xa3>
   11270:	8b 45 08             	mov    0x8(%ebp),%eax
   11273:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (start < p)
   11276:	eb 25                	jmp    1129d <kernel_itoa+0xcd>
    {
        char ch = *start;
   11278:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1127b:	0f b6 00             	movzbl (%eax),%eax
   1127e:	88 45 f2             	mov    %al,-0xe(%ebp)
        *start = *p;
   11281:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11284:	0f b6 10             	movzbl (%eax),%edx
   11287:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1128a:	88 10                	mov    %dl,(%eax)
        *p = ch;
   1128c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1128f:	0f b6 55 f2          	movzbl -0xe(%ebp),%edx
   11293:	88 10                	mov    %dl,(%eax)

        p--;
   11295:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
        start++;
   11299:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (start < p)
   1129d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112a0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   112a3:	72 d3                	jb     11278 <kernel_itoa+0xa8>
    }
}
   112a5:	c9                   	leave
   112a6:	c3                   	ret

000112a7 <kernel_vsprintf>:

void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   112a7:	55                   	push   %ebp
   112a8:	89 e5                	mov    %esp,%ebp
   112aa:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   112ad:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   112b4:	8b 45 08             	mov    0x8(%ebp),%eax
   112b7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   112ba:	e9 11 01 00 00       	jmp    113d0 <kernel_vsprintf+0x129>
    {
        switch (state)
   112bf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   112c3:	74 0b                	je     112d0 <kernel_vsprintf+0x29>
   112c5:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   112c9:	74 2b                	je     112f6 <kernel_vsprintf+0x4f>
   112cb:	e9 00 01 00 00       	jmp    113d0 <kernel_vsprintf+0x129>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   112d0:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   112d4:	75 0c                	jne    112e2 <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   112d6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   112dd:	e9 ee 00 00 00       	jmp    113d0 <kernel_vsprintf+0x129>
            }
            else
            {
                *curr++ = ch;
   112e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112e5:	8d 50 01             	lea    0x1(%eax),%edx
   112e8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112eb:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   112ef:	88 10                	mov    %dl,(%eax)
            }
            break;
   112f1:	e9 da 00 00 00       	jmp    113d0 <kernel_vsprintf+0x129>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   112f6:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   112fa:	75 31                	jne    1132d <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   112fc:	8b 45 10             	mov    0x10(%ebp),%eax
   112ff:	8d 50 04             	lea    0x4(%eax),%edx
   11302:	89 55 10             	mov    %edx,0x10(%ebp)
   11305:	8b 00                	mov    (%eax),%eax
   11307:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   1130a:	6a 0a                	push   $0xa
   1130c:	ff 75 e4             	push   -0x1c(%ebp)
   1130f:	ff 75 f8             	push   -0x8(%ebp)
   11312:	e8 b9 fe ff ff       	call   111d0 <kernel_itoa>
   11317:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   1131a:	ff 75 f8             	push   -0x8(%ebp)
   1131d:	e8 61 fd ff ff       	call   11083 <kernel_strlen>
   11322:	83 c4 04             	add    $0x4,%esp
   11325:	01 45 f8             	add    %eax,-0x8(%ebp)
   11328:	e9 9b 00 00 00       	jmp    113c8 <kernel_vsprintf+0x121>
            }
            else if (ch == 'x')
   1132d:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11331:	75 2e                	jne    11361 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   11333:	8b 45 10             	mov    0x10(%ebp),%eax
   11336:	8d 50 04             	lea    0x4(%eax),%edx
   11339:	89 55 10             	mov    %edx,0x10(%ebp)
   1133c:	8b 00                	mov    (%eax),%eax
   1133e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   11341:	6a 10                	push   $0x10
   11343:	ff 75 e8             	push   -0x18(%ebp)
   11346:	ff 75 f8             	push   -0x8(%ebp)
   11349:	e8 82 fe ff ff       	call   111d0 <kernel_itoa>
   1134e:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11351:	ff 75 f8             	push   -0x8(%ebp)
   11354:	e8 2a fd ff ff       	call   11083 <kernel_strlen>
   11359:	83 c4 04             	add    $0x4,%esp
   1135c:	01 45 f8             	add    %eax,-0x8(%ebp)
   1135f:	eb 67                	jmp    113c8 <kernel_vsprintf+0x121>
            }
            else if (ch == 'c')
   11361:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11365:	75 19                	jne    11380 <kernel_vsprintf+0xd9>
            {
                char c = va_arg(args, int);
   11367:	8b 45 10             	mov    0x10(%ebp),%eax
   1136a:	8d 50 04             	lea    0x4(%eax),%edx
   1136d:	89 55 10             	mov    %edx,0x10(%ebp)
   11370:	8b 00                	mov    (%eax),%eax
   11372:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr = c;
   11375:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11378:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1137c:	88 10                	mov    %dl,(%eax)
   1137e:	eb 48                	jmp    113c8 <kernel_vsprintf+0x121>
            }
            else if (ch == 's')
   11380:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11384:	75 42                	jne    113c8 <kernel_vsprintf+0x121>
            {
                const char *str = va_arg(args, char *);
   11386:	8b 45 10             	mov    0x10(%ebp),%eax
   11389:	8d 50 04             	lea    0x4(%eax),%edx
   1138c:	89 55 10             	mov    %edx,0x10(%ebp)
   1138f:	8b 00                	mov    (%eax),%eax
   11391:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   11394:	ff 75 f4             	push   -0xc(%ebp)
   11397:	e8 e7 fc ff ff       	call   11083 <kernel_strlen>
   1139c:	83 c4 04             	add    $0x4,%esp
   1139f:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   113a2:	eb 17                	jmp    113bb <kernel_vsprintf+0x114>
                {
                    *curr++ = *str++;
   113a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113a7:	8d 42 01             	lea    0x1(%edx),%eax
   113aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
   113ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113b0:	8d 48 01             	lea    0x1(%eax),%ecx
   113b3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   113b6:	0f b6 12             	movzbl (%edx),%edx
   113b9:	88 10                	mov    %dl,(%eax)
                while (len--)
   113bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   113be:	8d 50 ff             	lea    -0x1(%eax),%edx
   113c1:	89 55 f0             	mov    %edx,-0x10(%ebp)
   113c4:	85 c0                	test   %eax,%eax
   113c6:	75 dc                	jne    113a4 <kernel_vsprintf+0xfd>
                }
            }
            state = NORMAL;
   113c8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   113cf:	90                   	nop
    while ((ch = *fmt++))
   113d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   113d3:	8d 50 01             	lea    0x1(%eax),%edx
   113d6:	89 55 0c             	mov    %edx,0xc(%ebp)
   113d9:	0f b6 00             	movzbl (%eax),%eax
   113dc:	88 45 ef             	mov    %al,-0x11(%ebp)
   113df:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   113e3:	0f 85 d6 fe ff ff    	jne    112bf <kernel_vsprintf+0x18>
        }
    }
}
   113e9:	90                   	nop
   113ea:	90                   	nop
   113eb:	c9                   	leave
   113ec:	c3                   	ret

000113ed <pannic>:

void pannic(const char *file, int line, const char *func, const char *cond)
{
   113ed:	55                   	push   %ebp
   113ee:	89 e5                	mov    %esp,%ebp
   113f0:	83 ec 08             	sub    $0x8,%esp
    log_prinf("assert failed! %s", cond);
   113f3:	83 ec 08             	sub    $0x8,%esp
   113f6:	ff 75 14             	push   0x14(%ebp)
   113f9:	68 b8 18 01 00       	push   $0x118b8
   113fe:	e8 d4 00 00 00       	call   114d7 <log_prinf>
   11403:	83 c4 10             	add    $0x10,%esp
    log_prinf("file:%s\nline:%d\nfunc:%s\n", file, line, func);
   11406:	ff 75 10             	push   0x10(%ebp)
   11409:	ff 75 0c             	push   0xc(%ebp)
   1140c:	ff 75 08             	push   0x8(%ebp)
   1140f:	68 ca 18 01 00       	push   $0x118ca
   11414:	e8 be 00 00 00       	call   114d7 <log_prinf>
   11419:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt(); // 死机
   1141c:	e8 24 fb ff ff       	call   10f45 <hlt>
   11421:	eb f9                	jmp    1141c <pannic+0x2f>

00011423 <list_init>:
#include "tools/list.h"

// 初始化链表
void list_init(list_t *list)
{
   11423:	55                   	push   %ebp
   11424:	89 e5                	mov    %esp,%ebp
   11426:	90                   	nop
   11427:	5d                   	pop    %ebp
   11428:	c3                   	ret

00011429 <inb>:
    outb(COM1_PORT + 3, 0x80);
    outb(COM1_PORT + 0, 0x3);
    outb(COM1_PORT + 1, 0x00);
    outb(COM1_PORT + 3, 0x03);
    outb(COM1_PORT + 2, 0x07);
    outb(COM1_PORT + 4, 0x0F);
   11429:	55                   	push   %ebp
   1142a:	89 e5                	mov    %esp,%ebp
   1142c:	83 ec 14             	sub    $0x14,%esp
   1142f:	8b 45 08             	mov    0x8(%ebp),%eax
   11432:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
}

   11436:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1143a:	89 c2                	mov    %eax,%edx
   1143c:	ec                   	in     (%dx),%al
   1143d:	88 45 ff             	mov    %al,-0x1(%ebp)
void log_prinf(const char *fmt, ...)
{
    char str_buf[128];
   11440:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    va_list args;
   11444:	c9                   	leave
   11445:	c3                   	ret

00011446 <outb>:

    const char *p = str_buf;
    while (*p != '\0')
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
            ;
   11446:	55                   	push   %ebp
   11447:	89 e5                	mov    %esp,%ebp
   11449:	83 ec 08             	sub    $0x8,%esp
   1144c:	8b 55 08             	mov    0x8(%ebp),%edx
   1144f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11452:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11456:	88 45 f8             	mov    %al,-0x8(%ebp)
        outb(COM1_PORT, *p++);
   11459:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1145d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11461:	ee                   	out    %al,(%dx)
    }
   11462:	90                   	nop
   11463:	c9                   	leave
   11464:	c3                   	ret

00011465 <init_log>:
{
   11465:	55                   	push   %ebp
   11466:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);
   11468:	6a 00                	push   $0x0
   1146a:	68 f9 03 00 00       	push   $0x3f9
   1146f:	e8 d2 ff ff ff       	call   11446 <outb>
   11474:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);
   11477:	68 80 00 00 00       	push   $0x80
   1147c:	68 fb 03 00 00       	push   $0x3fb
   11481:	e8 c0 ff ff ff       	call   11446 <outb>
   11486:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11489:	6a 03                	push   $0x3
   1148b:	68 f8 03 00 00       	push   $0x3f8
   11490:	e8 b1 ff ff ff       	call   11446 <outb>
   11495:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11498:	6a 00                	push   $0x0
   1149a:	68 f9 03 00 00       	push   $0x3f9
   1149f:	e8 a2 ff ff ff       	call   11446 <outb>
   114a4:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   114a7:	6a 03                	push   $0x3
   114a9:	68 fb 03 00 00       	push   $0x3fb
   114ae:	e8 93 ff ff ff       	call   11446 <outb>
   114b3:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0x07);
   114b6:	6a 07                	push   $0x7
   114b8:	68 fa 03 00 00       	push   $0x3fa
   114bd:	e8 84 ff ff ff       	call   11446 <outb>
   114c2:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   114c5:	6a 0f                	push   $0xf
   114c7:	68 fc 03 00 00       	push   $0x3fc
   114cc:	e8 75 ff ff ff       	call   11446 <outb>
   114d1:	83 c4 08             	add    $0x8,%esp
}
   114d4:	90                   	nop
   114d5:	c9                   	leave
   114d6:	c3                   	ret

000114d7 <log_prinf>:
{
   114d7:	55                   	push   %ebp
   114d8:	89 e5                	mov    %esp,%ebp
   114da:	81 ec 98 00 00 00    	sub    $0x98,%esp
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   114e0:	83 ec 04             	sub    $0x4,%esp
   114e3:	68 80 00 00 00       	push   $0x80
   114e8:	6a 00                	push   $0x0
   114ea:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   114f0:	50                   	push   %eax
   114f1:	e8 17 fc ff ff       	call   1110d <kernel_memset>
   114f6:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   114f9:	8d 45 0c             	lea    0xc(%ebp),%eax
   114fc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   11502:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11508:	83 ec 04             	sub    $0x4,%esp
   1150b:	50                   	push   %eax
   1150c:	ff 75 08             	push   0x8(%ebp)
   1150f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11515:	50                   	push   %eax
   11516:	e8 8c fd ff ff       	call   112a7 <kernel_vsprintf>
   1151b:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   1151e:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11524:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   11527:	eb 3b                	jmp    11564 <log_prinf+0x8d>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   11529:	90                   	nop
   1152a:	83 ec 0c             	sub    $0xc,%esp
   1152d:	68 fd 03 00 00       	push   $0x3fd
   11532:	e8 f2 fe ff ff       	call   11429 <inb>
   11537:	83 c4 10             	add    $0x10,%esp
   1153a:	0f b6 c0             	movzbl %al,%eax
   1153d:	83 e0 40             	and    $0x40,%eax
   11540:	85 c0                	test   %eax,%eax
   11542:	74 e6                	je     1152a <log_prinf+0x53>
        outb(COM1_PORT, *p++);
   11544:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11547:	8d 50 01             	lea    0x1(%eax),%edx
   1154a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1154d:	0f b6 00             	movzbl (%eax),%eax
   11550:	0f b6 c0             	movzbl %al,%eax
   11553:	83 ec 08             	sub    $0x8,%esp
   11556:	50                   	push   %eax
   11557:	68 f8 03 00 00       	push   $0x3f8
   1155c:	e8 e5 fe ff ff       	call   11446 <outb>
   11561:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   11564:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11567:	0f b6 00             	movzbl (%eax),%eax
   1156a:	84 c0                	test   %al,%al
   1156c:	75 bb                	jne    11529 <log_prinf+0x52>

    // 输出完成后换行，回车
    outb(COM1_PORT, '\r');
   1156e:	83 ec 08             	sub    $0x8,%esp
   11571:	6a 0d                	push   $0xd
   11573:	68 f8 03 00 00       	push   $0x3f8
   11578:	e8 c9 fe ff ff       	call   11446 <outb>
   1157d:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   11580:	83 ec 08             	sub    $0x8,%esp
   11583:	6a 0a                	push   $0xa
   11585:	68 f8 03 00 00       	push   $0x3f8
   1158a:	e8 b7 fe ff ff       	call   11446 <outb>
   1158f:	83 c4 10             	add    $0x10,%esp
}
   11592:	90                   	nop
   11593:	c9                   	leave
   11594:	c3                   	ret
