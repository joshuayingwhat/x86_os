
/Users/joshuayingwhat/diy-x86os-master/start/start/source/loader/loader.elf:     file format elf32-i386
/Users/joshuayingwhat/diy-x86os-master/start/start/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00001687 memsz 0x00001687 flags r-x
    LOAD off    0x00001688 vaddr 0x00009688 paddr 0x00009688 align 2**12
         filesz 0x00000018 memsz 0x0000006c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062b  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000005c  0000862b  0000862b  0000162b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009688  00009688  00001688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  000096a0  000096a0  000016a0  2**5
                  ALLOC
  4 .comment      00000012  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000016b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000008ce  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000036e  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000003b6  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000260  00000000  00000000  0000270c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000412  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000151  00000000  00000000  00002d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000017  00000000  00000000  00002ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	00000036 lgdt
000080b0 l     F .text	0000001a read_cr0
000080ca l     F .text	00000012 write_cr0
000080dc l     F .text	0000002b far_jump
00008107 l     F .text	0000003c show_msg
00008143 l     F .text	00000139 detect_memory
0000827c l     F .text	00000096 enter_protected_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008335 l     F .text	0000001d inb
00008352 l     F .text	0000001f inw
00008371 l     F .text	0000001f outb
00008390 l     F .text	00000130 read_disk
000084c0 l     F .text	0000011a reload_elf_file
000085da l     F .text	00000005 die
00008312 g     F .text	00000023 loader_entry
00009688 g     O .data	00000018 gdt_table
000085df g     F .text	0000004c load_kernel
000096a0 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
000096a0 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
000096a0 g       .data	00000000 _edata
000096f4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start
	.extern loader_entry
_start:
	jmp loader_entry
    8000:	e9 0f 03             	jmp    8312 <loader_entry>

00008003 <protect_mode_entry>:
	.text
	.global protect_mode_entry
	.extern load_kernel
protect_mode_entry: //保护模式32位指令的入口
	//将所有的寄存器设置成32位
	mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs
	jmp $8,$load_kernel
    8011:	ea df 85 00 00       	ljmp   $0x0,$0x85df
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
        __asm__ __volatile__(
            "mov $0xe, %%ah\n\t"
            "mov %[ch], %%al\n\t"
            "int $0x10" ::[ch] "r"(c));
    }
}
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)

/**
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
 * 检测内存容量
 */
static void detect_memory(void)
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
{
    803e:	66 c9                	leavel
    8040:	66 c3                	retl

00008042 <outb>:
    boot_info.ram_region_count = 0;
    for (int i = 0; i < BOOT_RAW_REGION_MAX; i++)
    {
        SMAP_entry_t *entry = &smap_entry;

        __asm__ __volatile__("int $0x15"
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
                             : "=a"(signature), "=c"(bytes), "=b"(contID)
    805d:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8063:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8069:	ee                   	out    %al,(%dx)
                             : "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
    806a:	90                   	nop
    806b:	66 c9                	leavel
    806d:	66 c3                	retl

0000806f <cli>:

        if (signature != 0x534D4150)
        { // 如果内存检测结果为0x534D4150，表示失败
            show_msg("detect memory error!!!\n\r");
    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
            return;
    8074:	fa                   	cli
        }
    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl

0000807a <lgdt>:
        }

        if (entry->Type == 1)
        { // 内存中有些地址需要被硬件占用("比如:显存")，因此如果type=1则说明当前地址可以被操作系统使用
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp

        if (contID == 0)
        {
            break; // 整个读取结束
        }
    }
    8083:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8088:	66 c1 e8 10          	shr    $0x10,%eax
    808c:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    show_msg("detect memory ok!!!\n\r");
    8090:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8095:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
}
    8099:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    809e:	66 83 e8 01          	sub    $0x1,%eax
    80a2:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

    80a6:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
uint16_t gdt_table[][4] = {
    80ab:	90                   	nop
    80ac:	66 c9                	leavel
    80ae:	66 c3                	retl

000080b0 <read_cr0>:
    uint32_t cr0 = read_cr0();
    write_cr0(cr0 | (1 << 0));
    // 第五步:清空流水线，执行远跳转指令
    far_jump(8, (uint32_t)protect_mode_entry);
}
void loader_entry(void)
    80b0:	66 55                	push   %ebp
    80b2:	66 89 e5             	mov    %esp,%ebp
    80b5:	66 83 ec 10          	sub    $0x10,%esp
{
    show_msg("------loading------\n\r");
    80b9:	0f 20 c0             	mov    %cr0,%eax
    80bc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    detect_memory();
    80c1:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
    // 16位模式中处理完加载loader以及一些硬件检查后进入32位保护模式
    80c6:	66 c9                	leavel
    80c8:	66 c3                	retl

000080ca <write_cr0>:
    enter_protected_mode();
    for (;;)
    {
    }
    80ca:	66 55                	push   %ebp
    80cc:	66 89 e5             	mov    %esp,%ebp
    80cf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d4:	0f 22 c0             	mov    %eax,%cr0
    80d7:	90                   	nop
    80d8:	66 5d                	pop    %ebp
    80da:	66 c3                	retl

000080dc <far_jump>:
    80dc:	66 55                	push   %ebp
    80de:	66 89 e5             	mov    %esp,%ebp
    80e1:	66 83 ec 10          	sub    $0x10,%esp
    80e5:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ea:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80ef:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f4:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    80f9:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    80fe:	67 66 ff 28          	ljmpl  *(%eax)
    8102:	90                   	nop
    8103:	66 c9                	leavel
    8105:	66 c3                	retl

00008107 <show_msg>:
{
    8107:	66 55                	push   %ebp
    8109:	66 89 e5             	mov    %esp,%ebp
    810c:	66 83 ec 10          	sub    $0x10,%esp
    while ((c = *msg++) != '\0')
    8110:	eb 0c                	jmp    811e <show_msg+0x17>
        __asm__ __volatile__(
    8112:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8118:	b4 0e                	mov    $0xe,%ah
    811a:	88 c0                	mov    %al,%al
    811c:	cd 10                	int    $0x10
    while ((c = *msg++) != '\0')
    811e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8123:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8128:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    812d:	67 66 0f b6 00       	movzbl (%eax),%eax
    8132:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8136:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813b:	75 d5                	jne    8112 <show_msg+0xb>
}
    813d:	90                   	nop
    813e:	90                   	nop
    813f:	66 c9                	leavel
    8141:	66 c3                	retl

00008143 <detect_memory>:
{
    8143:	66 55                	push   %ebp
    8145:	66 89 e5             	mov    %esp,%ebp
    8148:	66 57                	push   %edi
    814a:	66 56                	push   %esi
    814c:	66 53                	push   %ebx
    814e:	66 83 ec 30          	sub    $0x30,%esp
    uint32_t contID = 0;
    8152:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8159:	00 00 
    show_msg("try do detect memory: ");
    815b:	66 68 2b 86 00 00    	pushl  $0x862b
    8161:	66 e8 a0 ff ff ff    	calll  8107 <show_msg>
    8167:	66 83 c4 04          	add    $0x4,%esp
    boot_info.ram_region_count = 0;
    816b:	66 c7 06 f0 96 00 00 	movl   $0x0,-0x6910
    8172:	00 00 
    for (int i = 0; i < BOOT_RAW_REGION_MAX; i++)
    8174:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    817b:	00 00 
    817d:	e9 d0 00             	jmp    8250 <detect_memory+0x10d>
        SMAP_entry_t *entry = &smap_entry;
    8180:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8185:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)
        __asm__ __volatile__("int $0x15"
    818a:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8190:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8195:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819b:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a1:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a6:	66 89 f7             	mov    %esi,%edi
    81a9:	cd 15                	int    $0x15
    81ab:	66 89 da             	mov    %ebx,%edx
    81ae:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b3:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81b8:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
        if (signature != 0x534D4150)
    81bd:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c4:	4d 53 
    81c6:	74 13                	je     81db <detect_memory+0x98>
            show_msg("detect memory error!!!\n\r");
    81c8:	66 68 42 86 00 00    	pushl  $0x8642
    81ce:	66 e8 33 ff ff ff    	calll  8107 <show_msg>
    81d4:	66 83 c4 04          	add    $0x4,%esp
    81d8:	e9 92 00             	jmp    826d <detect_memory+0x12a>
        if (bytes > 20 && (entry->ACPI & 0x0001) == 0)
    81db:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e1:	76 13                	jbe    81f6 <detect_memory+0xb3>
    81e3:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81e8:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81ed:	66 83 e0 01          	and    $0x1,%eax
    81f1:	66 85 c0             	test   %eax,%eax
    81f4:	74 53                	je     8249 <detect_memory+0x106>
        if (entry->Type == 1)
    81f6:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fb:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8200:	66 83 f8 01          	cmp    $0x1,%eax
    8204:	75 39                	jne    823f <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8206:	66 a1 f0 96          	mov    0x96f0,%eax
    820a:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    820f:	67 66 8b 12          	mov    (%edx),%edx
    8213:	67 66 89 14 c5 a0 96 	mov    %edx,0x96a0(,%eax,8)
    821a:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    821c:	66 a1 f0 96          	mov    0x96f0,%eax
    8220:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8225:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    822a:	67 66 89 14 c5 a4 96 	mov    %edx,0x96a4(,%eax,8)
    8231:	00 00 
            boot_info.ram_region_count++;
    8233:	66 a1 f0 96          	mov    0x96f0,%eax
    8237:	66 83 c0 01          	add    $0x1,%eax
    823b:	66 a3 f0 96          	mov    %eax,0x96f0
        if (contID == 0)
    823f:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8245:	74 15                	je     825c <detect_memory+0x119>
    8247:	eb 01                	jmp    824a <detect_memory+0x107>
            continue;
    8249:	90                   	nop
    for (int i = 0; i < BOOT_RAW_REGION_MAX; i++)
    824a:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8250:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8256:	0f 8e 26 ff          	jle    8180 <detect_memory+0x3d>
    825a:	eb 01                	jmp    825d <detect_memory+0x11a>
            break; // 整个读取结束
    825c:	90                   	nop
    show_msg("detect memory ok!!!\n\r");
    825d:	66 68 5b 86 00 00    	pushl  $0x865b
    8263:	66 e8 9e fe ff ff    	calll  8107 <show_msg>
    8269:	66 83 c4 04          	add    $0x4,%esp
}
    826d:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8272:	66 5b                	pop    %ebx
    8274:	66 5e                	pop    %esi
    8276:	66 5f                	pop    %edi
    8278:	66 5d                	pop    %ebp
    827a:	66 c3                	retl

0000827c <enter_protected_mode>:
{
    827c:	66 55                	push   %ebp
    827e:	66 89 e5             	mov    %esp,%ebp
    8281:	66 83 ec 10          	sub    $0x10,%esp
    cli();
    8285:	66 e8 e4 fd ff ff    	calll  806f <cli>
    uint8_t v = inb(0x92);
    828b:	66 68 92 00 00 00    	pushl  $0x92
    8291:	66 e8 81 fd ff ff    	calll  8018 <inb>
    8297:	66 83 c4 04          	add    $0x4,%esp
    829b:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, v | 0x02);
    829f:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a5:	66 83 c8 02          	or     $0x2,%eax
    82a9:	66 0f b6 c0          	movzbl %al,%eax
    82ad:	66 50                	push   %eax
    82af:	66 68 92 00 00 00    	pushl  $0x92
    82b5:	66 e8 87 fd ff ff    	calll  8042 <outb>
    82bb:	66 83 c4 08          	add    $0x8,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82bf:	66 b8 88 96 00 00    	mov    $0x9688,%eax
    82c5:	66 6a 18             	pushl  $0x18
    82c8:	66 50                	push   %eax
    82ca:	66 e8 aa fd ff ff    	calll  807a <lgdt>
    82d0:	66 83 c4 08          	add    $0x8,%esp
    uint32_t cr0 = read_cr0();
    82d4:	66 e8 d6 fd ff ff    	calll  80b0 <read_cr0>
    82da:	66 0f b7 c0          	movzwl %ax,%eax
    82de:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1 << 0));
    82e3:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e8:	66 83 c8 01          	or     $0x1,%eax
    82ec:	66 50                	push   %eax
    82ee:	66 e8 d6 fd ff ff    	calll  80ca <write_cr0>
    82f4:	66 83 c4 04          	add    $0x4,%esp
    far_jump(8, (uint32_t)protect_mode_entry);
    82f8:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82fe:	66 50                	push   %eax
    8300:	66 6a 08             	pushl  $0x8
    8303:	66 e8 d3 fd ff ff    	calll  80dc <far_jump>
    8309:	66 83 c4 08          	add    $0x8,%esp
}
    830d:	90                   	nop
    830e:	66 c9                	leavel
    8310:	66 c3                	retl

00008312 <loader_entry>:
{
    8312:	66 55                	push   %ebp
    8314:	66 89 e5             	mov    %esp,%ebp
    show_msg("------loading------\n\r");
    8317:	66 68 71 86 00 00    	pushl  $0x8671
    831d:	66 e8 e4 fd ff ff    	calll  8107 <show_msg>
    8323:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8327:	66 e8 16 fe ff ff    	calll  8143 <detect_memory>
    enter_protected_mode();
    832d:	66 e8 49 ff ff ff    	calll  827c <enter_protected_mode>
    for (;;)
    8333:	eb fe                	jmp    8333 <loader_entry+0x21>

00008335 <inb>:

    outb(0x1F2, (uint8_t)sector_count);
    outb(0x1F3, (uint8_t)sector);
    outb(0x1F4, (uint8_t)(sector >> 8));
    outb(0x1F5, (uint8_t)(sector >> 16));

    8335:	55                   	push   %bp
    8336:	89 e5                	mov    %sp,%bp
    8338:	83 ec 14             	sub    $0x14,%sp
    833b:	8b 45 08             	mov    0x8(%di),%ax
    833e:	66 89 45 ec          	mov    %eax,-0x14(%di)
    outb(0x1F7, 0x24);

    8342:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8346:	89 c2                	mov    %ax,%dx
    8348:	ec                   	in     (%dx),%al
    8349:	88 45 ff             	mov    %al,-0x1(%di)
    uint16_t *data_buf = (uint16_t *)buffer;

    while (sector_count--)
    834c:	0f b6 45 ff          	movzbw -0x1(%di),%ax
    {
    8350:	c9                   	leave
    8351:	c3                   	ret

00008352 <inw>:
        /* code */
        while ((inb(0x1F7) & 0x88) != 0x8)
        {
    8352:	55                   	push   %bp
    8353:	89 e5                	mov    %sp,%bp
    8355:	83 ec 14             	sub    $0x14,%sp
    8358:	8b 45 08             	mov    0x8(%di),%ax
    835b:	66 89 45 ec          	mov    %eax,-0x14(%di)
            /* code */
        }
    835f:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8363:	89 c2                	mov    %ax,%dx
    8365:	66 ed                	in     (%dx),%eax
    8367:	66 89 45 fe          	mov    %eax,-0x2(%di)
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
        {
            *data_buf++ = inw(0x1F0);
    836b:	0f b7 45 fe          	movzww -0x2(%di),%ax
        }
    836f:	c9                   	leave
    8370:	c3                   	ret

00008371 <outb>:
    }
}
    8371:	55                   	push   %bp
    8372:	89 e5                	mov    %sp,%bp
    8374:	83 ec 08             	sub    $0x8,%sp
    8377:	8b 55 08             	mov    0x8(%di),%dx
    837a:	8b 45 0c             	mov    0xc(%di),%ax
    837d:	66 89 55 fc          	mov    %edx,-0x4(%di)
    8381:	88 45 f8             	mov    %al,-0x8(%di)

    8384:	0f b7 55 fc          	movzww -0x4(%di),%dx
    8388:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    838c:	ee                   	out    %al,(%dx)
static uint32_t reload_elf_file(uint8_t *file_buffer)
    838d:	90                   	nop
    838e:	c9                   	leave
    838f:	c3                   	ret

00008390 <read_disk>:
{
    8390:	55                   	push   %bp
    8391:	89 e5                	mov    %sp,%bp
    8393:	53                   	push   %bx
    8394:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6, 0xE0);
    8397:	68 e0 00             	push   $0xe0
    839a:	00 00                	add    %al,(%bx,%si)
    839c:	68 f6 01             	push   $0x1f6
    839f:	00 00                	add    %al,(%bx,%si)
    83a1:	e8 cb ff             	call   836f <inw+0x1d>
    83a4:	ff                   	(bad)
    83a5:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F2, (uint8_t)(sector_count >> 8));
    83a9:	8b 45 0c             	mov    0xc(%di),%ax
    83ac:	c1 e8 08             	shr    $0x8,%ax
    83af:	0f b6 c0             	movzbw %al,%ax
    83b2:	50                   	push   %ax
    83b3:	68 f2 01             	push   $0x1f2
    83b6:	00 00                	add    %al,(%bx,%si)
    83b8:	e8 b4 ff             	call   836f <inw+0x1d>
    83bb:	ff                   	(bad)
    83bc:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t)(sector >> 24));
    83c0:	8b 45 08             	mov    0x8(%di),%ax
    83c3:	c1 e8 18             	shr    $0x18,%ax
    83c6:	0f b6 c0             	movzbw %al,%ax
    83c9:	50                   	push   %ax
    83ca:	68 f3 01             	push   $0x1f3
    83cd:	00 00                	add    %al,(%bx,%si)
    83cf:	e8 9d ff             	call   836f <inw+0x1d>
    83d2:	ff                   	(bad)
    83d3:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, 0);
    83d7:	6a 00                	push   $0x0
    83d9:	68 f4 01             	push   $0x1f4
    83dc:	00 00                	add    %al,(%bx,%si)
    83de:	e8 8e ff             	call   836f <inw+0x1d>
    83e1:	ff                   	(bad)
    83e2:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, 0);
    83e6:	6a 00                	push   $0x0
    83e8:	68 f5 01             	push   $0x1f5
    83eb:	00 00                	add    %al,(%bx,%si)
    83ed:	e8 7f ff             	call   836f <inw+0x1d>
    83f0:	ff                   	(bad)
    83f1:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F2, (uint8_t)sector_count);
    83f5:	8b 45 0c             	mov    0xc(%di),%ax
    83f8:	0f b6 c0             	movzbw %al,%ax
    83fb:	50                   	push   %ax
    83fc:	68 f2 01             	push   $0x1f2
    83ff:	00 00                	add    %al,(%bx,%si)
    8401:	e8 6b ff             	call   836f <inw+0x1d>
    8404:	ff                   	(bad)
    8405:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t)sector);
    8409:	8b 45 08             	mov    0x8(%di),%ax
    840c:	0f b6 c0             	movzbw %al,%ax
    840f:	50                   	push   %ax
    8410:	68 f3 01             	push   $0x1f3
    8413:	00 00                	add    %al,(%bx,%si)
    8415:	e8 57 ff             	call   836f <inw+0x1d>
    8418:	ff                   	(bad)
    8419:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t)(sector >> 8));
    841d:	8b 45 08             	mov    0x8(%di),%ax
    8420:	c1 e8 08             	shr    $0x8,%ax
    8423:	0f b6 c0             	movzbw %al,%ax
    8426:	50                   	push   %ax
    8427:	68 f4 01             	push   $0x1f4
    842a:	00 00                	add    %al,(%bx,%si)
    842c:	e8 40 ff             	call   836f <inw+0x1d>
    842f:	ff                   	(bad)
    8430:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t)(sector >> 16));
    8434:	8b 45 08             	mov    0x8(%di),%ax
    8437:	c1 e8 10             	shr    $0x10,%ax
    843a:	0f b6 c0             	movzbw %al,%ax
    843d:	50                   	push   %ax
    843e:	68 f5 01             	push   $0x1f5
    8441:	00 00                	add    %al,(%bx,%si)
    8443:	e8 29 ff             	call   836f <inw+0x1d>
    8446:	ff                   	(bad)
    8447:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F7, 0x24);
    844b:	6a 24                	push   $0x24
    844d:	68 f7 01             	push   $0x1f7
    8450:	00 00                	add    %al,(%bx,%si)
    8452:	e8 1a ff             	call   836f <inw+0x1d>
    8455:	ff                   	(bad)
    8456:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    uint16_t *data_buf = (uint16_t *)buffer;
    845a:	8b 45 10             	mov    0x10(%di),%ax
    845d:	89 45 f8             	mov    %ax,-0x8(%di)
    while (sector_count--)
    8460:	eb 4a                	jmp    84ac <read_disk+0x11c>
        while ((inb(0x1F7) & 0x88) != 0x8)
    8462:	90                   	nop
    8463:	68 f7 01             	push   $0x1f7
    8466:	00 00                	add    %al,(%bx,%si)
    8468:	e8 c8 fe             	call   8333 <loader_entry+0x21>
    846b:	ff                   	(bad)
    846c:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8470:	0f b6 c0             	movzbw %al,%ax
    8473:	25 88 00             	and    $0x88,%ax
    8476:	00 00                	add    %al,(%bx,%si)
    8478:	83 f8 08             	cmp    $0x8,%ax
    847b:	75 e6                	jne    8463 <read_disk+0xd3>
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
    847d:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    8482:	00 00                	add    %al,(%bx,%si)
    8484:	eb 1d                	jmp    84a3 <read_disk+0x113>
            *data_buf++ = inw(0x1F0);
    8486:	8b 5d f8             	mov    -0x8(%di),%bx
    8489:	8d 43 02             	lea    0x2(%bp,%di),%ax
    848c:	89 45 f8             	mov    %ax,-0x8(%di)
    848f:	68 f0 01             	push   $0x1f0
    8492:	00 00                	add    %al,(%bx,%si)
    8494:	e8 b9 fe             	call   8350 <inb+0x1b>
    8497:	ff                   	(bad)
    8498:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    849c:	66 89 03             	mov    %eax,(%bp,%di)
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
    849f:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84a3:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    84a8:	00 00                	add    %al,(%bx,%si)
    84aa:	7e da                	jle    8486 <read_disk+0xf6>
    while (sector_count--)
    84ac:	8b 45 0c             	mov    0xc(%di),%ax
    84af:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84b2:	89 55 0c             	mov    %dx,0xc(%di)
    84b5:	85 c0                	test   %ax,%ax
    84b7:	75 a9                	jne    8462 <read_disk+0xd2>
}
    84b9:	90                   	nop
    84ba:	90                   	nop
    84bb:	8b 5d fc             	mov    -0x4(%di),%bx
    84be:	c9                   	leave
    84bf:	c3                   	ret

000084c0 <reload_elf_file>:
{
    84c0:	55                   	push   %bp
    84c1:	89 e5                	mov    %sp,%bp
    84c3:	83 ec 20             	sub    $0x20,%sp
    // 读取的只是ELF文件，不像BIN那样可直接运行，需要从中加载出有效数据和代码
    // 简单判断是否是合法的ELF文件
    Elf32_Ehdr *elf_hdr = (Elf32_Ehdr *)file_buffer;
    84c6:	8b 45 08             	mov    0x8(%di),%ax
    84c9:	89 45 e8             	mov    %ax,-0x18(%di)
    if ((elf_hdr->e_ident[0] != ELF_MAGIC) || (elf_hdr->e_ident[1] != 'E') || (elf_hdr->e_ident[2] != 'L') || (elf_hdr->e_ident[3] != 'F'))
    84cc:	8b 45 e8             	mov    -0x18(%di),%ax
    84cf:	0f b6 00             	movzbw (%bx,%si),%ax
    84d2:	3c 7f                	cmp    $0x7f,%al
    84d4:	75 21                	jne    84f7 <reload_elf_file+0x37>
    84d6:	8b 45 e8             	mov    -0x18(%di),%ax
    84d9:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    84dd:	3c 45                	cmp    $0x45,%al
    84df:	75 16                	jne    84f7 <reload_elf_file+0x37>
    84e1:	8b 45 e8             	mov    -0x18(%di),%ax
    84e4:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    84e8:	3c 4c                	cmp    $0x4c,%al
    84ea:	75 0b                	jne    84f7 <reload_elf_file+0x37>
    84ec:	8b 45 e8             	mov    -0x18(%di),%ax
    84ef:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    84f3:	3c 46                	cmp    $0x46,%al
    84f5:	74 0a                	je     8501 <reload_elf_file+0x41>
    {
        return 0;
    84f7:	b8 00 00             	mov    $0x0,%ax
    84fa:	00 00                	add    %al,(%bx,%si)
    84fc:	e9 d7 00             	jmp    85d6 <reload_elf_file+0x116>
    84ff:	00 00                	add    %al,(%bx,%si)
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    for (int i = 0; i < elf_hdr->e_phnum; i++)
    8501:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    8506:	00 00                	add    %al,(%bx,%si)
    8508:	e9 b2 00             	jmp    85bd <reload_elf_file+0xfd>
    850b:	00 00                	add    %al,(%bx,%si)
    {
        Elf32_Phdr *phdr = (Elf32_Phdr *)(file_buffer + elf_hdr->e_phoff) + i;
    850d:	8b 45 e8             	mov    -0x18(%di),%ax
    8510:	8b 40 1c             	mov    0x1c(%bx,%si),%ax
    8513:	8b 55 fc             	mov    -0x4(%di),%dx
    8516:	c1 e2 05             	shl    $0x5,%dx
    8519:	01 c2                	add    %ax,%dx
    851b:	8b 45 08             	mov    0x8(%di),%ax
    851e:	01 d0                	add    %dx,%ax
    8520:	89 45 e4             	mov    %ax,-0x1c(%di)
        if (phdr->p_type != PT_LOAD)
    8523:	8b 45 e4             	mov    -0x1c(%di),%ax
    8526:	8b 00                	mov    (%bx,%si),%ax
    8528:	83 f8 01             	cmp    $0x1,%ax
    852b:	0f 85 89 00          	jne    85b8 <reload_elf_file+0xf8>
    852f:	00 00                	add    %al,(%bx,%si)
        {
            continue;
        }

        // 全部使用物理地址，此时分页机制还未打开
        uint8_t *src = file_buffer + phdr->p_offset;
    8531:	8b 45 e4             	mov    -0x1c(%di),%ax
    8534:	8b 50 04             	mov    0x4(%bx,%si),%dx
    8537:	8b 45 08             	mov    0x8(%di),%ax
    853a:	01 d0                	add    %dx,%ax
    853c:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t *dest = (uint8_t *)phdr->p_paddr;
    853f:	8b 45 e4             	mov    -0x1c(%di),%ax
    8542:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8545:	89 45 f4             	mov    %ax,-0xc(%di)
        for (int j = 0; j < phdr->p_filesz; j++)
    8548:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    854d:	00 00                	add    %al,(%bx,%si)
    854f:	eb 1b                	jmp    856c <reload_elf_file+0xac>
        {
            *dest++ = *src++;
    8551:	8b 55 f8             	mov    -0x8(%di),%dx
    8554:	8d 42 01             	lea    0x1(%bp,%si),%ax
    8557:	89 45 f8             	mov    %ax,-0x8(%di)
    855a:	8b 45 f4             	mov    -0xc(%di),%ax
    855d:	8d 48 01             	lea    0x1(%bx,%si),%cx
    8560:	89 4d f4             	mov    %cx,-0xc(%di)
    8563:	0f b6 12             	movzbw (%bp,%si),%dx
    8566:	88 10                	mov    %dl,(%bx,%si)
        for (int j = 0; j < phdr->p_filesz; j++)
    8568:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    856c:	8b 45 e4             	mov    -0x1c(%di),%ax
    856f:	8b 40 10             	mov    0x10(%bx,%si),%ax
    8572:	8b 55 f0             	mov    -0x10(%di),%dx
    8575:	39 c2                	cmp    %ax,%dx
    8577:	72 d8                	jb     8551 <reload_elf_file+0x91>
        }

        // memsz和filesz不同时，后续要填0
        dest = (uint8_t *)phdr->p_paddr + phdr->p_filesz;
    8579:	8b 45 e4             	mov    -0x1c(%di),%ax
    857c:	8b 50 10             	mov    0x10(%bx,%si),%dx
    857f:	8b 45 e4             	mov    -0x1c(%di),%ax
    8582:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8585:	01 d0                	add    %dx,%ax
    8587:	89 45 f4             	mov    %ax,-0xc(%di)
        for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++)
    858a:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    858f:	00 00                	add    %al,(%bx,%si)
    8591:	eb 10                	jmp    85a3 <reload_elf_file+0xe3>
        {
            *dest++ = 0;
    8593:	8b 45 f4             	mov    -0xc(%di),%ax
    8596:	8d 50 01             	lea    0x1(%bx,%si),%dx
    8599:	89 55 f4             	mov    %dx,-0xc(%di)
    859c:	c6 00 00             	movb   $0x0,(%bx,%si)
        for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++)
    859f:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    85a3:	8b 45 e4             	mov    -0x1c(%di),%ax
    85a6:	8b 50 14             	mov    0x14(%bx,%si),%dx
    85a9:	8b 45 e4             	mov    -0x1c(%di),%ax
    85ac:	8b 40 10             	mov    0x10(%bx,%si),%ax
    85af:	29 c2                	sub    %ax,%dx
    85b1:	8b 45 ec             	mov    -0x14(%di),%ax
    85b4:	39 d0                	cmp    %dx,%ax
    85b6:	72 db                	jb     8593 <reload_elf_file+0xd3>
    85b8:	eb 01                	jmp    85bb <reload_elf_file+0xfb>
            continue;
    85ba:	90                   	nop
    for (int i = 0; i < elf_hdr->e_phnum; i++)
    85bb:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    85bf:	8b 45 e8             	mov    -0x18(%di),%ax
    85c2:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    85c6:	0f b7 c0             	movzww %ax,%ax
    85c9:	39 45 fc             	cmp    %ax,-0x4(%di)
    85cc:	0f 8c 3b ff          	jl     850b <reload_elf_file+0x4b>
    85d0:	ff                   	(bad)
    85d1:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
        }
    }

    return elf_hdr->e_entry;
    85d5:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    85d8:	c9                   	leave
    85d9:	c3                   	ret

000085da <die>:

static void die(int error_code)
{
    85da:	55                   	push   %bp
    85db:	89 e5                	mov    %sp,%bp
    for (;;)
    85dd:	eb fe                	jmp    85dd <die+0x3>

000085df <load_kernel>:
    {
    }
}
void load_kernel(void)
{
    85df:	55                   	push   %bp
    85e0:	89 e5                	mov    %sp,%bp
    85e2:	83 ec 18             	sub    $0x18,%sp
    // 将内核放在100个扇区的地方,将内存加载到1m地址处
    read_disk(100, 500, (uint8_t *)SYS_KERNEL_LOAD_ADDR);
    85e5:	68 00 00             	push   $0x0
    85e8:	10 00                	adc    %al,(%bx,%si)
    85ea:	68 f4 01             	push   $0x1f4
    85ed:	00 00                	add    %al,(%bx,%si)
    85ef:	6a 64                	push   $0x64
    85f1:	e8 9a fd             	call   838e <outb+0x1d>
    85f4:	ff                   	(bad)
    85f5:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)

    uint32_t kernel_entry = reload_elf_file((uint8_t *)SYS_KERNEL_LOAD_ADDR); // 解析elf文件进入内核
    85f9:	68 00 00             	push   $0x0
    85fc:	10 00                	adc    %al,(%bx,%si)
    85fe:	e8 bd fe             	call   84be <read_disk+0x12e>
    8601:	ff                   	(bad)
    8602:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8606:	89 45 f4             	mov    %ax,-0xc(%di)
    // 如果内核入口地址是0则让程序死机
    if (kernel_entry == 0)
    8609:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    860d:	75 0a                	jne    8619 <load_kernel+0x3a>
    {
        die(-1);
    860f:	6a ff                	push   $0xffff
    8611:	e8 c4 ff             	call   85d8 <reload_elf_file+0x118>
    8614:	ff                   	(bad)
    8615:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    }
    ((void (*)(boot_info_t *))kernel_entry)(&boot_info); // 跳转到内核中SYS_KERNEL_LOAD_ADDR对应的地址就是init/start.S中的_start
    8619:	8b 45 f4             	mov    -0xc(%di),%ax
    861c:	83 ec 0c             	sub    $0xc,%sp
    861f:	68 a0 96             	push   $0x96a0
    8622:	00 00                	add    %al,(%bx,%si)
    8624:	ff d0                	call   *%ax
    8626:	83 c4 10             	add    $0x10,%sp
    for (;;)
    8629:	eb fe                	jmp    8629 <load_kernel+0x4a>
